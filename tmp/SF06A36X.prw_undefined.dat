#Include 'Protheus.ch'
#Include 'Topconn.ch'
#Include 'Tbiconn.ch'

/*/{Protheus.doc} SF06A36X
Funcao responsavel por realizar manutenção anual de Item Contábil.
@type function
@author 	Walmir Junior
@since 		23/01/2020
/*/
User Function SF06A36X()
	
Local _aArea	:= GetArea()

Private _aEstrut	:= {}
Private _cArqTxt	:= Space(50)

_cArqTxt := U_SFXX01J('Alteracao Financeira - Item Contábil e Centro de Custos','Arquivos csv (*.csv) |*.csv|')

//Abre o Arquivo
nHdl    := fOpen(_cArqTxt,68)

If nHdl == -1
	MsgAlert("O arquivo de nome "+_cArqTxt+" nao pode ser aberto! Verifique os parametros.","Atencao!")
	Return
Endif

Processa({ |lEnd| _aEstrut := SE1CSV(_cArqTxt) },"LENDO ARQUIVO CSV DE ITENS DE CRONOGRAMA")
Processa({ |lEnd| _lRet := IMPSE1() }	,"ATUALIZANDO REGISTROS")

RestArea( _aArea )
	
Return

/** {Protheus.doc} IMPSE1
Funcao que realiza a atualização do Item Contábil
@author	Walmir Junior
@since 19/03/2019
@Uso SFIEMT
*/
Static Function IMPSE1()
	
Local _nContador := 0
local i := 0
Local _cFilSE1	
Local _cPfxSE1		
Local _cNumSE1
Local _cParSE1
Local _cTipSE1	

Local _cQuery

Private _lNFnd	:= .T.
Private _cCcSE1
Private _cItmSE1

For i := 2 To Len(_aEstrut)
	
	//E1_FILIAL
	_cFilSE1 := PADR(AllTrim(_aEstrut[i][1]),TAMSX3("E1_FILIAL")[1])
	
	//E1_PREFIXO
	_cPfxSE1 := PADR(AllTrim(_aEstrut[i][2]),TAMSX3("E1_PREFIXO")[1])
	
	//E1_NUM
	_cNumSE1 := PADR(AllTrim(_aEstrut[i][3]),TAMSX3("E1_NUM")[1])
	
	//E1_PARCEL
	_cParSE1 := PADR(AllTrim(_aEstrut[i][4]),TAMSX3("E1_PARCELA")[1])
	
	//E1_TIPO
	_cTipSE1 := PADR(AllTrim(_aEstrut[i][5]),TAMSX3("E1_TIPO")[1])
	
	//E1_CC
	//_cCcSE1 := PADR(AllTrim(_aEstrut[i][10]),TAMSX3("E1_CCC")[1])
	
	//E1_ITEMCT
	_cItmSE1 := PADR(AllTrim(_aEstrut[i][10]),TAMSX3("E1_ITEMC")[1])
	
	//Msg de Alerta - Teste de Desenvolvimento
	//_cMsg := _cFilSE1 + ' / ' + _cPfxSE1 + ' / ' + _cNumSE1 +  ' / ' + _cParSE1 + ' / ' + _cTipSE1 + ' --->>> ' + _cItmSE1

	//Alert(_cMsg)

	//Monta select de validação.
	
	_cQuery := " SELECT "
	_cQuery += " 	E1_FILIAL FILIAL, E1_PREFIXO PREFIXO, E1_NUM NUMERO, E1_PARCELA PARCELA, E1_TIPO TIPO, E1_VENCORI VENCIMENTO, "
	_cQuery += " 	E1_VALOR VENCIMENTO_REAL, E1_SALDO SALDO, E1_CCC CENTRO_CUSTO, ' ' NOVO_CENTRO_CUSTO,  E1_ITEMC ITEM_CONTABIL, " 
	_cQuery += " 	' ' NOVO_ITEM_CONTABIL "
    _cQuery += " FROM  "
    _cQuery += " " + RetSqlName("SE1") + " "
    _cQuery += " WHERE "
    _cQuery += " 	D_E_L_E_T_ = ' ' AND" 
    _cQuery += " 	E1_PREFIXO IN ('SGE') AND " 
    _cQuery += " 	E1_ITEMC NOT LIKE '22%' AND "
    _cQuery += " 	E1_SALDO > 0 AND "
    _cQuery += " 	E1_VENCORI >= '20210101' AND "
    _cQuery += " 	E1_FILIAL = '"+_cFilSE1+"' AND E1_PREFIXO = '"+_cPfxSE1+"' AND E1_NUM = '"+_cNumSE1+"' AND "
    _cQuery += " 	E1_PARCELA = '"+_cParSE1+"' AND E1_TIPO = '"+_cTipSE1+"' "
    _cQuery += " ORDER BY E1_FILIAL, E1_PREFIXO, E1_NUM, E1_PARCELA, E1_TIPO "
	
	//Executa query
	_cQuery := ChangeQuery(_cQuery)
	MemoWrite("C:\temp\"+FunName()+"_"+ProcName()+".TXT",_cQuery)
	dbUseArea( .T., 'TOPCONN', TcGenQry( ,, _cQuery ), "TRBXE1", .F., .T. )
	
	//Se o registro é válido para alteração.
	If 	TRBXE1->(!Eof()) .And. !Empty(_cFilSE1) /*.And. SubStr(AllTrim(_aEstrut[i][4]),1,1) == 'N'*/
		DbSelectArea("SE1")
		SE1->(DbSetOrder(1))
		SE1->(DbGoTop())
		
		If SE1->( DbSeek( _cFilSE1 + _cPfxSE1 + _cNumSE1 + _cParSE1 + _cTipSE1) )
			
			//Alert(_cCcSE1 + "||" + _cItmSE1)
		
			If RecLock('SE1',.F.)
				//SE1->E1_CCC		:= _cCcSE1
				SE1->E1_ITEMC := _cItmSE1
			EndIf
			SE1->( MsUnLock() )
			_nContador++
						
		ElseIf _lNFnd
			
			If Aviso("ATENÇÃO!", "",{"Ok", "Ignora Não Encontrado"}) == 2
				_lNFnd := .F.
			EndIf
			
		EndIf		
		SE1->( DbCloseArea() )
	EndIf
	 
	If Select("TRBXE1") > 0
		TRBXE1->(dbCloseArea())
	EndIf
Next

If _nContador > 0
	MsgAlert(cValToChar(_nContador) + ' registros foram atualizados.')
Else
	MsgAlert('Nenhum registro foi atualizado.')
EndIf

Return

/** {Protheus.doc} SE1CSV
Funcao que realiza a Leitura do arquivo CSV

@param cArquivo, character,Caminho do arquivo que sera lido
@author	Walmir Junior
@since 19/03/2019
*/
Static Function SE1CSV(cArquivo)
	
	Local cBuffer     := ""
	Local cAux        := ""
	Local cString     := ""
	Local cSeparador  := ""  //Verifica o tipo de separador do arquivo texto
	Local aTmp        := {}
	Local aEstrutura  := {}
	Local nCont       := 0
	Local cEof        := Chr(10)+ Chr(13)
	Local nRec        := 0
	Local lAspa       := .F.

	//Leitura da quantidade de Registros do Arquivo
	FT_FUSE(cArquivo)
	FT_FGOTOP()
	
	While !FT_FEOF()
		nRec++
		FT_FSKIP()
	End

	ProcRegua(nRec)

	//Leitura do arquivo e verificacao do ultimo caracter da linha lida para consistencia da pesquisa
	FT_FGOTOP()

	While !FT_FEOF()
	
		cBuffer:= AllTrim(FT_FREADLN())
	
		If At(";",cBuffer) > 0
			cSeparador:= ";" 
		Else //linha de arquivo incorreta.
			IncProc()
			FT_FSKIP()
			Loop
		Endif
	
		If (SubStr(cBuffer,Len(cBuffer),1)<>cSeparador)
			cBuffer += cSeparador + cEof + cSeparador
		Else
			cBuffer += cEof + cSeparador
		Endif
	
		//Incrementa a regua
		IncProc()
	
		//Carrega o array aEstrutura com o resultado da Importacao
		cLinha:= fTAcento(cBuffer)
		lAspa := .F.

		For nCont := 1 To Len(cBuffer)
		
			cAux   := SubStr(cLinha,1,1)
			cLinha := SubStr(cLinha,2)
			
			If (cAux == cEof)
				Exit
			Endif
		
			//Sao verificadas as marcacoes feitas pelo Excel para concatenacao de strings
			Do Case
			
				Case cAux == '"'
					lAspa := !lAspa
					
				Case cAux == cSeparador .And. !lAspa
					aAdd(aTmp,cString)
					cString := ""
					
				OtherWise
					cString += cAux
					
			EndCase
		
		Next nCont
	
		For nCont := Len(aTmp)+1 To 9
			aAdd(aTmp,"")
		Next nCont
	
		//Validacao para nao salvar registros sem entidades
		If !Empty(aTmp[1]) .OR. !Empty(aTmp[2])
			aAdd(aEstrutura,aTmp)
			aTmp := {}
		Endif
		
		FT_FSKIP()
	End

	FT_FUSE()

Return( aEstrutura )
