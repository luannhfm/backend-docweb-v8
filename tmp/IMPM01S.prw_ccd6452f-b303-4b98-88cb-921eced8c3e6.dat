#include 'protheus.ch'
#Include 'FWMVCDEF.CH'


/*/{Protheus.doc} IMPM01S
	Função para realizar as operações (Inclusão, alteração ou exclusão)
	conforme os parâmetros enviados.

@author Sergio Ricardo Leite Salustiano 
@since 14/09/2016

@param cAlias, characters, Nome da Area que será utilizada
@param aCampos, array, Campos que serão utilizados
@param _cModelo, , Nome do modelo de dados que será utilizado
@param _cOperac, , numero da operação que será executada 3 - Inclusão / 4 - Alteração / 5 - Exclusao 

/*/
User Function IMPM01S(cAlias,aCampos,_cModelo,_cOperac)

	Local oModel, oAux, oStruct
	Local nI    := 0
	Local nPos  := 0
	Local lRet  := .T.
	Local aAux  := {}

	dbSelectArea(cAlias)
	dbSetOrder(1)

	//Aqui ocorre o instanciamento do Modelo de dados (Model)
	
	oModel := FWLoadModel(_cModelo)

	//Temos que definir qual a operação que sera executada: 3 - Inclusão / 4 - Alteração / 5 - Exclusao
	oModel:SetOperation(_cOperac)

	//Antes de Atribuirmos os Valores dos Campos temos que Ativar o Modelo
	oModel:Activate()

	//Instanciamos apenas referentes aos Dados
	oAux :=oModel:GetModel(cAlias + 'MASTER')

	//Obtemos a estrutura de dados
	oStruct := oAux:GetStruct()
	aAux    := oStruct:GetFields()

	For nI := 1 To Len(aCampos)
		//Verificar se os campos passados existem na estrutura do Modelo
		//If (nPos := aScan(aAux,{|x| AllTrim(x[3] ) == Alltrim(aCampos[nI][1])})) > 0
		If ( nPos := aScan(aAux,{|x| AllTrim( x[3] )== AllTrim(aCampos[nI][1]) } ) ) > 0

			// É feita a atribuição do dado ao campo do Model
			If !(lAux := oModel:SetValue(cAlias + 'MASTER', aCampos[nI][1], aCampos[nI][2]))
				//Caso a atribuição não possa ser feita, por algum motivo (Validação, por exemplo)
				//O método SetValue retorna .F.
				lRet := .F.
				Exit
			EndIf
		EndIf
	Next nI
	
	If lRet
		//Faz-se a validação dos dados, note que diferentemente das tradicionais "rotinas automaticas"
		//Nesse momento os dados não são gravados, são somento validados.
		If (lRet := oModel:VldData())
			//Se os dados foram validados faz-se a gravação efetiva dos dados (commit)
			oModel:CommitData()
		EndIf
	EndIf
	
	If !lRet
	
		//Se os dados não foram validados obtemos a descrição do erro para gerar LOG ou mensagem de aviso
		aErro := oModel:GetErrorMessage()
		//A estrutura do vetor com o erro é:
		// [1] Identificador (ID) do formulario de origem
		// [2] Identificador (ID) do campo de origem
		// [3] Identificador (ID) do formulario de erro
		// [4] Identificador (ID) do campo de erro
		// [5] Identificador (ID) do erro
		// [6] Mensagem do erro
		// [7] Mensagem da solução
		// [8] Valor Atribuido
		// [9] Valor Anterior

		AutoGrLog("Id do Formulário de Origem:" + ' [' + AllToChar( aErro[1] ) + ']')
		AutoGrLog("Id do Campo de Origem:     " + ' [' + AllToChar( aErro[2] ) + ']')
		AutoGrLog("Id do Formulário de Erro:  " + ' [' + AllToChar( aErro[3] ) + ']')
		AutoGrLog("Id do Campo de Erro:       " + ' [' + AllToChar( aErro[4] ) + ']')
		AutoGrLog("Id do Erro:                " + ' [' + AllToChar( aErro[5] ) + ']')
		AutoGrLog("Mensagem do Erro:          " + ' [' + AllToChar( aErro[6] ) + ']')
		AutoGrLog("Mensagem da Solução:       " + ' [' + AllToChar( aErro[7] ) + ']')
		AutoGrLog("Valor Atribuido:           " + ' [' + AllToChar( aErro[8] ) + ']')
		AutoGrLog("Valor Anterior:            " + ' [' + AllToChar( aErro[9] ) + ']')

		MostraErro()
	EndIf

	//Desativamos o Model
	oModel:DeActivate()

Return lRet