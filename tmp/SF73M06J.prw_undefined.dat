#Include 'Protheus.ch'

/*/{Protheus.doc} SF73M06J
Função para realizar carga no cadastro de clientes	
			     	
@author 	José Leite de Barros Neto
@since 	23/06/2016
@version 	1.0		

@return Nil, Nulo

/*/
User Function SF73M06J( pPATHIMP03 )

	Local 	_lRet	:= .F.

	Private _aEstrut	:= {}
	Private _cArqTxt	:= Space(50)
	Private _cMemo  	:= ""
	
	Private lMsErroAuto := .F.

	//Verifica chamada se a rotina é automatica
	If !Empty( pPATHIMP03 )
		_cArqTxt := pPATHIMP03
	Else
		_cArqTxt:= U_SFXX01J('Importacao de Clientes','Arquivos csv (*.csv) |*.csv|')
	EndIf
	
	//Abre o Arquivo
	nHdl    := fOpen(_cArqTxt,68)

	If nHdl == -1
		MsgAlert("O arquivo de nome "+_cArqTxt+" nao pode ser aberto! Verifique os parametros.","Atencao!")
		Return
	Endif

	Processa({ |lEnd| _aEstrut := SA1CSV(_cArqTxt) },"LENDO ARQUIVO CSV DE CLIENTE")
	Processa({ |lEnd| _lRet := IMPSA1(_aEstrut) },"GERANDO REGISTROS")

	If Empty( pPATHIMP03 )
		MemoWrite( "C:\plog\csv\clientes_"+cFilAnt+".TXT", _cMemo ) //+CHR(13)+CHR(10)
		MsgAlert("FIM DA IMPORTACAO DO CADASTRO DE CLIENTES")
	EndIf

Return( _lRet )

/** {Protheus.doc} IMPSA1
Funcao que realiza a importacao do cliente

@param: 	_aEstrut, Array com a estrutura dos campos
@author: 	Jose Leite de Barros Neto
@since: 	28/03/2014
@Uso: 		SFIEMT
*/
Static Function IMPSA1(_aEstrut)
	
	Local _lRet := .F.
	Local _nContador := 0
	Local _i := 0
	Local _cMsgAlt	:= "Carga Arrecadacao - por: "+ AllTrim(cUserName) + " - " + DtoC(dDataBase) + " - " + AllTrim(Time())

	For _i := 2 to Len(_aEstrut)
	
		//A1_CGC
		_cCGC	:= StrTran( StrTran( StrTran( _aEstrut[_i][1],".","" ),"/","" ),"-","" )
		
		//A1_XCNAEIN
		_cCnaeInd := AllTrim(_aEstrut[_i][2])
		
		//A1_XTRATIN
		_cTratInd := AllTrim(_aEstrut[_i][3])
		
		//A1_XDTVLAR
		_dDtVldAr := CtoD(_aEstrut[_i][4])
		
		//A1_XATUWS
		_cAtuWs := AllTrim(_aEstrut[_i][5])
		
		//A1_XFPAS
		_cFpas := AllTrim(_aEstrut[_i][6])
		
		//A1_XCNTSIN
		_cCntSin	:= AllTrim(_aEstrut[_i][7])
	
		//A1_XCNTCON
		_cCntCon := AllTrim(_aEstrut[_i][8])
		
		//A1_XVLDARR
		_cVldArr := AllTrim(_aEstrut[_i][9])
		
		//A1_XICDSEN	
		_cIcdSen := AllTrim(_aEstrut[_i][10])
		
		//A1_XICISEN
		_cIciSen := AllTrim(_aEstrut[_i][11])
		
		//A1_XICDSES
		_cIcdSes := AllTrim(_aEstrut[_i][12])
			
		//A1_XICISES
		_cIciSes := AllTrim(_aEstrut[_i][13])
		
		//A1_XQTEMP
		//_nQtdEmp := Val(_aEstrut[_i][14])
			
		//A1_XFAIXFU
		//_cFaixaF := AllTrim(_aEstrut[_i][15])
				
		//A1_XVLCDSN
		//_nVlcdsn := Val(_aEstrut[_i][16])
		
		//A1_XVLCISN
		//_nVlcisn := Val(_aEstrut[_i][17])
		
		//A1_XVLCDSS
		//_nVlcdss := Val(_aEstrut[_i][18])
		
		//A1_XVLCISS
		//_nVlciss := Val(_aEstrut[_i][19])
		
		//A1_XCODSIN
		_cCodSind := AllTrim(_aEstrut[_i][14])
		
		//A1_XDSCSIN
		_cDscSind := AllTrim(Posicione("ZCA",1,xFilial("ZCA") + PadR(_cCodSind,TAMSX3("ZCA_CODIGO")[1]),"ZCA_NOME"))
		
		//A1_XALTARR
		_cAltArr := _cMsgAlt
		
		DbSelectArea("SA1")
		SA1->(DbSetOrder(3))
		SA1->(DbGotop())
		If SA1->(DbSeek( xFilial("SA1") + PADR( AllTrim( _cCGC ),TAMSX3("A1_CGC")[1])))
			_nOpc		:= 4
			_cCliente	:= SA1->A1_COD
			_cLoja		:= SA1->A1_LOJA
			_cMsBlql	:= SA1->A1_MSBLQL
		Else
			loop
		EndIf
		
		//A1_XQTDFNT
		_cFontInf := AllTrim(_aEstrut[_i][15])
		
		//A1_CNAE
		_cCnae	:= AllTrim(_aEstrut[_i][16])
		
		//A1_XDSCNAE
		_cDscCnae := AllTrim(Posicione("CC3",1,xFilial("CC3") + PadR(_cCnae,TAMSX3("CC3_COD")[1]),"CC3_DESC"))
		
		//A1_DTNASC
		_dDtNas	:= CtoD(_aEstrut[_i][17])
		
		//A1_XSITREC
		_cSitRec := AllTrim(_aEstrut[_i][18])
		
		_aCliente := {}
		
		aAdd( _aCliente ,{"A1_COD"		,_cCliente		,Nil}) // Codigo
		aAdd( _aCliente ,{"A1_LOJA"  	,_cLoja  		,Nil}) // Loja
		aAdd( _aCliente ,{"A1_MSBLQL"  	,_cMsBlql		,Nil}) // Bloqueio de Tela
		aAdd( _aCliente ,{"A1_XSITREC"	,_cSitRec		,Nil}) // Situacao na Receita
		aAdd( _aCliente ,{"A1_XCNAEIN" 	,_cCnaeInd		,Nil}) // Cnae de industria?
		aAdd( _aCliente ,{"A1_XTRATIN" 	,_cTratInd		,Nil}) // Tratativa de industria?
		aAdd( _aCliente ,{"A1_XDTVLAR" 	,_dDtVldAr		,Nil}) // Data da Validacao Arrecadacao
		aAdd( _aCliente ,{"A1_XATUWS"  	,_cAtuWs 		,Nil}) // Atualiza Ws?
		aAdd( _aCliente ,{"A1_XFPAS" 	,_cFpas			,Nil}) // Indica FPAS
		aAdd( _aCliente ,{"A1_XCNTSIN" 	,_cCntSin		,Nil}) // Contribuicao sindicato adicional
		aAdd( _aCliente ,{"A1_XCNTCON" 	,_cCntCon		,Nil}) // Contribuicao confederacao adimplente
		aAdd( _aCliente ,{"A1_XVLDARR" 	,_cVldArr		,Nil}) // Validado pela Arrecadacao
		aAdd( _aCliente ,{"A1_XICDSEN" 	,_cIcdSen		,Nil}) // ICD Senai
		aAdd( _aCliente ,{"A1_XICISEN" 	,_cIciSen		,Nil}) // ICI Senai
		aAdd( _aCliente ,{"A1_XICDSES" 	,_cIcdSes		,Nil}) // ICD Sesi
		aAdd( _aCliente ,{"A1_XICISES" 	,_cIciSes		,Nil}) // ICI Sesi
		//aAdd( _aCliente ,{"A1_XQTEMP" 	,_nQtdEmp		,Nil}) // Quantidade de Funcionarios
		//aAdd( _aCliente ,{"A1_XFAIXFU" 	,_cFaixaF		,Nil}) // Faixa de Funcionarios
		//aAdd( _aCliente ,{"A1_XVLCDSN" 	,_nVlcdsn		,Nil}) // Valor de Contribuicao Direta Senai
		//aAdd( _aCliente ,{"A1_XVLCISN" 	,_nVlcisn		,Nil}) // Valor de Contribuicao Indireta Senai
		//aAdd( _aCliente ,{"A1_XVLCDSS" 	,_nVlcdss		,Nil}) // Valor de Contribuicao Direta Sesi
		//aAdd( _aCliente ,{"A1_XVLCISS" 	,_nVlciss		,Nil}) // Valor de Contribuicao Indireta Sesi
		aAdd( _aCliente ,{"A1_XCODSIN" 	,_cCodSind 		,Nil}) // Codigo do Sindicato
		aAdd( _aCliente ,{"A1_XDSCSIN" 	,_cDscSind 		,Nil}) // Codigo do Sindicato
		aAdd( _aCliente ,{"A1_XALTARR" 	,_cAltArr		,Nil}) // Log de Alterado na arrecadacao
		aAdd( _aCliente ,{"A1_XORIGEM"	,_cAltArr		,Nil}) // Log
		aAdd( _aCliente ,{"A1_XQTDFNT"	,_cFontInf		,Nil}) // Fonte da informacao - 1=SIGA;2=GFIP
		aAdd( _aCliente ,{"A1_CNAE"		,_cCnae			,Nil}) // Cnae da Empresa
		aAdd( _aCliente ,{"A1_DTNASC"	,_dDtNas		,Nil}) // Data de Nascimento
		
		lMsErroAuto := .F.
		
		Begin Transaction

			MSExecAuto({|x,y| MATA030(x,y)},_aCliente,_nOpc) //3- Inclusão, 4- Alteração, 5- Exclusão
			
			If lMsErroAuto
				MostraErro("C:\plog\log\", _cCGC+".LOG")
				DisarmTransaction()
			EndIf
		
		End Transaction
		
		_nContador++
		
	Next

	If _nContador > 0
		_lRet := .T.
	EndIf
	
Return( _lRet )

/** {Protheus.doc} SA1CSV
Funcao que realiza a Leitura do arquivo CSV

@param: 	cArquivo, Caminho do arquivo que sera lido
@author: 	Jose Leite de Barros Neto
@since: 	28/03/2014
@Uso: 		SFIEMT
*/
Static Function SA1CSV(cArquivo)
	
	Local cBuffer     := ""
	Local cAux        := ""
	Local cString     := ""
	Local cSeparador  := ""  //Verifica o tipo de separador do arquivo texto
	Local aTmp        := {}
	Local aEstrutura  := {}
	Local nCont       := 0
	Local cEof        := Chr(10)+ Chr(13)
	Local nRec        := 0
	Local lAspa       := .F.

	//Leitura da quantidade de Registros do Arquivo
	FT_FUSE(cArquivo)
	FT_FGOTOP()
	
	While !FT_FEOF()
		nRec++
		FT_FSKIP()
	End

	ProcRegua(nRec)

	//Leitura do arquivo e verificacao do ultimo caracter da linha lida para  consistencia da pesquisa
	FT_FGOTOP()

	While !FT_FEOF()
	
		cBuffer:= AllTrim(FT_FREADLN())
	
		If At(";",cBuffer) > 0
			cSeparador:= ";" 
		Else //linha de arquivo incorreta.
			IncProc()
			FT_FSKIP()
			Loop
		Endif
	
		If (SubStr(cBuffer,Len(cBuffer),1)<>cSeparador)
			cBuffer += cSeparador + cEof + cSeparador
		Else
			cBuffer += cEof + cSeparador
		Endif
	
		//Incrementa a regua
		IncProc()
	
		//Carrega o array aEstrutura com o resultado da Importacao
		cLinha:= fTAcento(cBuffer)
		lAspa := .F.

		For nCont := 1 To Len(cBuffer)
		
			cAux   := SubStr(cLinha,1,1)
			cLinha := SubStr(cLinha,2)
			
			If (cAux == cEof)
				Exit
			Endif
		
			//Sao verificadas as marcacoes feitas pelo Excel para concatenacao de strings
			Do Case
			
				Case cAux == '"'
					lAspa := !lAspa
					
				Case cAux == cSeparador .And. !lAspa
					aAdd(aTmp,cString)
					cString := ""
					
				OtherWise
					cString += cAux
					
			EndCase
		
		Next nCont
	
		For nCont := Len(aTmp)+1 To 11
			aAdd(aTmp,"")
		Next nCont
	
		//Validacao para nao salvar registros sem entidades
		If !Empty(aTmp[1]) .OR. !Empty(aTmp[2])
			aAdd(aEstrutura,aTmp)
			aTmp := {}
		Endif
		
		FT_FSKIP()
	End

	FT_FUSE()

Return( aEstrutura )