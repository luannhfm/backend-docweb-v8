#Include 'Protheus.ch'
#Include 'fwmvcdef.ch'

/*/{Protheus.doc} SF57C02
Cadastro de Amarração - Filial X Usuario X UO 

@author 	Jose Leite de Barros Neto
@version 	1.0
@since 		04/09/2014

@return Nil
/*/
User Function SF57C02()
	
	Local oBrowse
	
	Private aRotina := MenuDef()
	
	//Instancio a classe FWMBrowse
	oBrowse := FWMBrowse():New()
	
	//Setando o Alias a ser utilizado
	oBrowse:SetAlias( 'ZZY' )
	
	//Descrição do Cabeçalho
	oBrowse:SetDescription('Cadastro de Amarração - Filial X UO X CR')
	
	//Ativando
	oBrowse:Activate()
	
Return( Nil )

/** {Protheus.doc} MenuDef
Funcao para Montar o Menu

@author: 	Jose Leite de Barros Neto
@since: 	04/09/2014
@Uso: 		SFIEMT
*/
Static Function MenuDef()
	
	Local aRotina := {}

	aAdd( aRotina, { 'Pesquisar' , 'PesqBrw'        , 0, 1, 0, .T. } )
	aAdd( aRotina, { 'Visualizar', 'ViewDef.SF57C02', 0, 2, 0, Nil } )
	aAdd( aRotina, { 'Incluir'   , 'ViewDef.SF57C02', 0, 3, 0, Nil } )
	aAdd( aRotina, { 'Alterar'   , 'ViewDef.SF57C02', 0, 4, 0, Nil } )
	aAdd( aRotina, { 'Excluir'   , 'ViewDef.SF57C02', 0, 5, 0, Nil } )
	aAdd( aRotina, { 'Imprimir'  , 'ViewDef.SF57C02', 0, 8, 0, Nil } )
	aAdd( aRotina, { 'Copiar'    , 'ViewDef.SF57C02', 0, 9, 0, Nil } )
	
Return( aRotina )

/** {Protheus.doc} ModelDef
Funcao para Montar o Modelo de Dados

@author: 	Jose Leite de Barros Neto
@since: 	04/09/2014
@Uso: 		SFIEMT
*/
Static Function ModelDef()
	
	Local oModel
	Local oStruZZYMASTER := FWFormStruct( 1, 'ZZY', { |X|  AllTrim(X) $ 'ZZY_FILAUX, ZZY_CUSTO, ZZY_DCUSTO' } )
	Local oStruZZYDETAIL := FWFormStruct( 1, 'ZZY', { |X| .Not. (AllTrim(X) $ 'ZZY_FILAUX, ZZY_CUSTO, ZZY_DCUSTO') } )
	
	oModel := MPFormModel():New( 'SF57C02M' )
	
	oStruZZYDETAIL:AddTrigger( "ZZY_CODUSR", "ZZY_NOMUSR", { || .t. }, { | x | RetUsuario( x ) } )
	
	oModel:AddFields( 'ZZYMASTER'	,				, oStruZZYMASTER )
	oModel:AddGrid('ZZYDETAIL'		, 'ZZYMASTER'	, oStruZZYDETAIL )
	
	oModel:SetRelation( 'ZZYDETAIL', { { 'ZZY_FILIAL', 'xFilial( "ZZY" )' }, {'ZZY_FILAUX', 'ZZY_FILAUX' }, {'ZZY_CUSTO', 'ZZY_CUSTO'}}, ZZY->( IndexKey( 1 ) ) )
	
	oModel:GetModel( 'ZZYDETAIL' ):SetUniqueLine( { 'ZZY_CODUSR' } )
	
	oModel:GetModel( 'ZZYDETAIL' ):SetLPost( {|| ValLinGrid()} )
	
	oModel:GetModel( 'ZZYDETAIL' ):SetOptional( .T. )
	
	oModel:SetDescription( 'Amarração - Filial X Usuarios X UO' )
	
	oModel:GetModel( 'ZZYMASTER' ):SetDescription( 'Cabeçalho do Cadastro' )
	oModel:GetModel( 'ZZYDETAIL' ):SetDescription( 'Itens do Cadastro' )
	
	oModel:SetPrimaryKey( { "ZZY_FILIAL", "ZZY_FILAUX", "ZZY_CUSTO", "ZZY_CODUSR" } )
	
Return( oModel )

/** {Protheus.doc} ViewDef
Funcao para Montar a Interface

@author: 	Jose Leite de Barros Neto
@since: 	04/09/2014
@Uso: 		SFIEMT
*/
Static Function ViewDef()
	
	Local oView
	Local oModel  := FWLoadModel( 'SF57C02' )
	
	Local oStruZZYMASTER := FWFormStruct( 2, 'ZZY', { |X|  AllTrim(X)  $ 'ZZY_FILAUX, ZZY_CUSTO, ZZY_DCUSTO' } )
	Local oStruZZYDETAIL := FWFormStruct( 2, 'ZZY', { |X| .Not. (AllTrim(X) $ 'ZZY_FILAUX, ZZY_CUSTO, ZZY_DCUSTO') } )
	
	oView := FWFormView():New()
	
	oView:SetModel( oModel )
	
	oView:AddField( 'VZZYMASTER', oStruZZYMASTER, 'ZZYMASTER' )
	oView:AddGrid( 'VZZYDETAIL', oStruZZYDETAIL, 'ZZYDETAIL' )
	
	oView:CreateHorizontalBox( 'CABECALHO', 15 )
	oView:CreateHorizontalBox( 'DETALHE', 85 )
	
	oView:SetOwnerView( 'VZZYMASTER', 'CABECALHO' )
	oView:SetOwnerView( 'VZZYDETAIL', 'DETALHE' )
	
	oView:EnableTitleView( 'VZZYMASTER' )
	oView:EnableTitleView( 'VZZYDETAIL' )
	
	oView:SetCloseOnOk( {|| .t.} )
	
Return( oView )

/** {Protheus.doc} ValLinGrid
Funcao para validar linha da Grid

@author: 	Jose Leite de Barros Neto
@since: 	04/09/2014
@Uso: 		SFIEMT
*/
Static Function ValLinGrid()
	
	Local lRet		:= .T.
	Local oModel  := FwModelActive()
	Local nOperac	:= oModel:GetOperation()
	Local oMdlCab	:= oModel:GetModel( "ZZYMASTER" )
	Local oMdlGrd	:= oModel:GetModel( "ZZYDETAIL" )
	Local cCusto	:= oMdlCab:GetValue( "ZZY_CUSTO" )
	Local cFilAux := oMdlCab:GetValue( "ZZY_FILAUX" )
	Local cUsrUo	:= oMdlGrd:GetValue( "ZZY_CODUSR" )
	
	lRet := IIf( .Not. Empty(cCusto), .T., .F. )
	
	If .Not. lRet
		ShowHelpDlg( "AJUDA", { "UO não informada" , "Verifique!"  }, 5, { "Insira uma UO válida!" } , 5 )
	ElseIf .Not. Empty(cUsrUo) .And. .Not. oMdlGrd:IsDeleted()
		
		DbSelectArea('ZZY')
		DbSetOrder(1)
		DbGoTop()
		ZZY->(DbSeek(xFilial('ZZY') + cFilAux + Padr(cCusto, TamSx3('ZZY_CUSTO')[1]) + Padr(cUsrUo, TamSx3('ZZY_CODUSR')[1])))
		While .Not. ZZY->( Eof() )
		
			If ZZY->ZZY_CODUSR = cUsrUo
				lRet := IIf( nOperac = 3, .F., .T.)
				Exit
			EndIf
			
			ZZY->(DbSkip())
		End
		
		ZZY->(dbCloseArea())
		
	EndIf
	
	If .Not. lRet
		ShowHelpDlg( "AJUDA", { "Usuário já cadastrado para essa UO" , "INCLUSÃO NÃO PERMITIDA"  }, 5, { "Informe um usuário que ainda não esteja cadastrada para essa UO" } , 5 )
	EndIf
	
Return( lRet )

/** {Protheus.doc} RetUsuario
Gatilho para informar o nome do usuario

@author: 	Jose Leite de Barros Neto
@since: 	08/09/2014
@Uso: 		SFIEMT
*/
Static Function RetUsuario( oGrid )

	Local aAreaAtu	:= GetArea()
	Local cRetorno 	:= PadR("", TamSx3( "ZZY_NOMUSR" )[1])
	Local cCdUser		:= oGrid:GetValue( "ZZY_CODUSR" )
	
	cRetorno := UsrRetName(cCdUser)
	
	RestArea(aAreaAtu)
Return( cRetorno )