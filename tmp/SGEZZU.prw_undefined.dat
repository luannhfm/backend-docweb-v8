#include 'protheus.ch'
#include 'parmtype.ch'
#Include 'Topconn.ch'

user function SGEZZU()
	Local _cQuery    := " "
	Local _cQrySE1  := " "
	Local Qtd           := 0
	Local Chave       := " "
	Local _cPrefix    := " "
	Local _cFilial      := " "
	Local _cPrefE1   := " "
	Local _cNum      := " "
	Local _cTipo      := " "
	Local Teste        := 0
	Local _dDtBaixa := GETMV("MV_XDTSGE")
	
	Local HoraIni    := Time()
	Local HoraFim

	//-------------------------------||
	//Query para Selecionar as Baixas      ||
	//-------------------------------||
	_cQuery := " "
	_cQuery += " SELECT DISTINCT E5_FILIAL, E5_PREFIXO, E5_NUMERO, E5_PARCELA, E5_TIPO, E5_SEQ, E5_MOTBX, "
	_cQuery += " CASE WHEN E5_MOTBX = 'REN' THEN E1_XCHVREN ELSE ' ' END E1_XCHVREN "
	_cQuery += " FROM "      + RETSQLNAME("SE5") + " SE5 "
	_cQuery += " INNER JOIN " + RETSQLNAME("SE1") +  " SE1 ON SE1.E1_FILIAL = SE5.E5_FILIAL AND SE1.E1_PREFIXO = SE5.E5_PREFIXO AND SE1.E1_NUM = SE5.E5_NUMERO AND SE1.E1_PARCELA = SE5.E5_PARCELA AND SE1.E1_TIPO = SE5.E5_TIPO "
	_cQuery += " WHERE SE5.D_E_L_E_T_ <> '*' "
	_cQuery += " AND   SE1.D_E_L_E_T_ <> '*' "
	_cQuery += " AND   E5_PREFIXO IN ('RMC','SGE','RMX') "
	_cQuery += " AND   E5_TIPODOC IN( 'VL', 'BA','CP') "
	_cQuery += " AND   E5_SITUACA  <> 'C' "
	_cQuery += " AND   E5_DTCANBX = ' ' "
	_cQuery += " AND   E5_DATA >= '"+_dDtBaixa+"'"

	TCQUERY _cQuery NEW ALIAS "TRA"

	DbSelectArea("TRA")
	DbGoTop()
	While .Not. TRA->( EOF() )
		Chave := " "
		_cPrefix := " "
		DbSelectArea("ZZU")
		DBSetOrder(1)

		If (MSSeek(TRA->E5_FILIAL + TRA->E5_PREFIXO + TRA->E5_NUMERO + TRA->E5_PARCELA + TRA->E5_TIPO + TRA->E5_SEQ  + TRA->E1_XCHVREN))

			//-------------------------------
			//Baixa Normal
			//-------------------------------
		else
			Qtd++
			If(TRA->E5_PREFIXO $('RMC/RMX/SGE') .AND. TRA->E5_MOTBX <> 'REN')

				ZZU->( DbGoTop() )
				If RecLock('ZZU',.T.)
					ZZU->ZZU_FILIAL		:= TRA->E5_FILIAL
					ZZU->ZZU_PREFIX		:= TRA->E5_PREFIXO
					ZZU->ZZU_NUMERO		:= TRA->E5_NUMERO
					ZZU->ZZU_PARCEL	    := TRA->E5_PARCELA
					ZZU->ZZU_TIPO	    := TRA->E5_TIPO
					ZZU->ZZU_SEQBX		:= TRA->E5_SEQ
					ZZU->ZZU_MOTBX	    := TRA->E5_MOTBX
					//ZZU->ZZU_CHVREN	    := Chave
					ZZU->ZZU_PROBX 	    := '1'

					ZZU->( MsUnlock() )
				EndIf
				ConOut(STR(Teste) + " >> " + TRA->E5_FILIAL + " >> " + TRA->E5_PREFIXO + " >> " + TRA->E5_NUMERO + " >> " + TRA->E5_PARCELA + " >> " + TRA->E5_SEQ + " >> " + Chave + " >> Baixa Normal ")
			EndIf

			//------------------------------
			//Baixa de Titulos Renegociado
			//------------------------------
			If(TRA->E5_PREFIXO $('RMC/RMX/SGE') .AND. TRA->E5_MOTBX == 'REN')
				DbSelectArea("SE1")
				DBSetOrder(1)
				If  (MSSeek(TRA->E5_FILIAL + TRA->E5_PREFIXO + TRA->E5_NUMERO + TRA->E5_PARCELA + TRA->E5_TIPO)) //wjr + TRA->E5_SEQ
					Chave := SE1->E1_XCHVREN
				EndIf

				if(Chave <> ' ')
					ZZU->( DbGoTop() )
					If RecLock('ZZU',.T.)
						ZZU->ZZU_FILIAL		:= TRA->E5_FILIAL
						ZZU->ZZU_PREFIX		:= TRA->E5_PREFIXO
						ZZU->ZZU_NUMERO		:= TRA->E5_NUMERO
						ZZU->ZZU_PARCEL	    := TRA->E5_PARCELA
						ZZU->ZZU_TIPO	    := TRA->E5_TIPO
						ZZU->ZZU_SEQBX		:= TRA->E5_SEQ
						ZZU->ZZU_MOTBX	    := TRA->E5_MOTBX
						ZZU->ZZU_CHVREN	    := Chave
						ZZU->ZZU_PROBX 	    := '1'

						ZZU->( MsUnlock() )

					EndIf
					Teste++
					ConOut(STR(Teste) + " >> " + TRA->E5_FILIAL + " >> " + TRA->E5_PREFIXO + " >> " + TRA->E5_NUMERO + " >> " + TRA->E5_PARCELA + " >> "  + TRA->E5_SEQ + " >> "  + Chave + " >> Baixa Titulo Renegociado ")
				Endif
				SE1->(DBCloseArea())
			EndIf

		EndIf

		TRA->(DBSKIP())
	EndDo
	SE1->(DBCloseArea())
	ZZU->(DBCloseArea())
	TRA->(DBCloseArea())

	//--------------------------------
	//Baixa de Titulos com Prefixo REN
	//--------------------------------

	_cQuery := " "
	_cQuery += " SELECT DISTINCT E5_FILIAL, E5_PREFIXO, E5_NUMERO, E5_PARCELA, E5_TIPO, E5_SEQ, E5_MOTBX, E1_XCHVREN "
	_cQuery += " FROM "      + RETSQLNAME("SE5") + " SE5 "
	_cQuery += " INNER JOIN " + RETSQLNAME("SE1") +  " SE1 ON SE1.E1_FILIAL = SE5.E5_FILIAL AND SE1.E1_PREFIXO = SE5.E5_PREFIXO AND SE1.E1_NUM = SE5.E5_NUMERO AND SE1.E1_PARCELA = SE5.E5_PARCELA AND SE1.E1_TIPO = SE5.E5_TIPO "
	_cQuery += " WHERE SE5.D_E_L_E_T_ <> '*' "
	_cQuery += " AND   SE1.D_E_L_E_T_ <> '*' "
	_cQuery += " AND   E5_PREFIXO IN ('REN') "
	_cQuery += "  AND E5_TIPODOC IN( 'VL', 'BA','CP') "
	_cQuery += " AND E5_SITUACA  <> 'C' "
	_cQuery += " AND E5_DTCANBX = ' ' "
	_cQuery += " AND SUBSTR(SE5.E5_FILIAL,1,4) IN ('02MT','03MT') "
	_cQuery += " AND E5_DATA >= '"+_dDtBaixa+"'"
	
	TCQUERY _cQuery NEW ALIAS "TRC"

	While .Not. TRC->( EOF() )

		DbSelectArea("ZZU")
		DBSetOrder(1)
		If (MSSeek(TRC->E5_FILIAL + TRC->E5_PREFIXO + TRC->E5_NUMERO + TRC->E5_PARCELA + TRC->E5_TIPO  + TRC->E5_SEQ + TRC->E1_XCHVREN))

		else

			_cQrySE1 := " "
			_cQrySE1 += "  SELECT E1_FILIAL, E1_PREFIXO, E1_NUM, E1_PARCELA, E1_TIPO, E1_NOMCLI, E1_XCHVREN "
			_cQrySE1 += "  FROM "      + RETSQLNAME("SE1") + " SE1 "
			_cQrySE1 += "  WHERE D_E_L_E_T_ <> '*' "
			_cQrySe1 += "  AND E1_FILIAL = '" + TRC->E5_FILIAL+ "' "
			_cQrySe1 += "  AND E1_XCHVREN = '" + TRC->E5_FILIAL + TRC->E5_PREFIXO + TRC->E5_NUMERO +TRC->E5_TIPO  + "' "

			TCQUERY _cQrySe1 NEW ALIAS "TRD"

			DbSelectArea("TRD")
			DbGoTop()
			_cPrefix := "  "

			If  TRD->( Eof() )
				TRD->( dbCloseArea() )
			else
				_cPrefix := TRD->E1_PREFIXO

				If .NOT. (_cPrefix $  ('RMC/RMX/SGE'))
					While .Not. TRD->( EOF() )
						_cPrefix := TRD->E1_PREFIXO

						if(_cPrefix $  ('RMC/RMX/SGE'))
							TRD->(DBSKIP())
							EXIT
						EndIf

						_cFilial      := TRD->E1_FILIAL
						_cPrefE1   :=  TRD->E1_PREFIXO
						_cNum      :=  TRD->E1_NUM
						_cTipo      :=  TRD->E1_TIPO
						TRD->(DBSKIP())
					EndDo

				EndIf
				TRD->(DBCloseArea())
			EndIf

			While(_cPrefix = 'REN')
				_cQrySE1 := " "
				_cQrySE1 += " SELECT E1_FILIAL, E1_PREFIXO, E1_NUM, E1_PARCELA, E1_TIPO, E1_NOMCLI, E1_XCHVREN "
				_cQrySE1 += " FROM "      + RETSQLNAME("SE1") + " SE1 "
				_cQrySE1 += " WHERE D_E_L_E_T_ <> '*' "
				_cQrySe1 += " AND E1_FILIAL = '" + _cFilial+ "' "
				_cQrySE1 += " AND E1_XCHVREN = '" + _cFilial + _cPrefE1 + _cNum + _cTipo + "' "

				TCQUERY _cQrySE1 NEW ALIAS "TRF"

				If  TRF->( Eof() )
					TRF->( dbCloseArea() )
					_cPrefix := 'NAO'
				else
					_cPrefix := TRF->E1_PREFIXO

					If .NOT. (_cPrefix $  ('RMC/RMX/SGE'))
						While .Not. TRF->( EOF() )
							_cPrefix := TRF->E1_PREFIXO

							if(_cPrefix $  ('RMC/RMX/SGE'))
								TRF->(DBSKIP())
								EXIT
							EndIf

							_cFilial      := TRF->E1_FILIAL
							_cPrefE1   :=  TRF->E1_PREFIXO
							_cNum      :=  TRF->E1_NUM
							_cTipo      :=  TRF->E1_TIPO
							TRF->(DBSKIP())

						EndDo

					EndIf
					TRF->(DBCloseArea())
				EndIf

			EndDo
		EndIf

		if(_cPrefix $('RMC/RMX/SGE') )
			Teste++
			
			if ((TRC->E5_MOTBX = 'REN' .AND. TRC->E1_XCHVREN <> ' ') .OR. (TRC->E5_MOTBX <> 'REN'))
				DbSelectArea("ZZU")
				DBSetOrder(1)
				ZZU->( DbGoTop() )
				if .NOT.MSSeek (TRC->E5_FILIAL + TRC->E5_PREFIXO + TRC->E5_NUMERO + TRC->E5_PARCELA + TRC->E5_TIPO  + TRC->E5_SEQ + TRC->E1_XCHVREN)
					ConOut(STR(Teste) + " >> " + TRC->E5_FILIAL + " >> " + TRC->E5_PREFIXO + " >> " + TRC->E5_NUMERO + " >> " + TRC->E5_PARCELA + " >> " + TRC->E5_TIPO  + " >> " + TRC->E5_SEQ +" >> " + TRC->E1_XCHVREN  )
					If RecLock('ZZU',.T.)
						ZZU->ZZU_FILIAL		:= TRC->E5_FILIAL
						ZZU->ZZU_PREFIX		:= TRC->E5_PREFIXO
						ZZU->ZZU_NUMERO	:= TRC->E5_NUMERO
						ZZU->ZZU_PARCEL	    := TRC->E5_PARCELA
						ZZU->ZZU_TIPO	        := TRC->E5_TIPO
						ZZU->ZZU_SEQBX		:= TRC->E5_SEQ
						ZZU->ZZU_MOTBX	    := TRC->E5_MOTBX
						ZZU->ZZU_CHVREN	    := TRC->E1_XCHVREN
						ZZU->ZZU_PROBX 	    := '1'

						ZZU->( MsUnlock() )
					EndIf
				EndIf
			EndIf

		EndIf

		TRC->(DBSKIP())
	EndDo
	ZZU->(DBCloseArea())
	TRC->(DBCloseArea())

	HoraFim := Time()
	ConOut("Hora Inicial >> " + HoraIni + " HoraFim >> " + HoraFim + " Tempo >> " + ELAPTIME(HoraIni, HoraFim))

return

/*/{Protheus.doc} SchedDef
Static function para o novo Schedule
@author Franklin de Brito de Oliveira
@since 22/07/2020
@return aParam[1],	 - Tipo: "P" - para Processo, "R" - para Relatórios
@return aParam[2] - Nome do Pergunte
@return aParam[3] - Alias (para Relatório)
@return aParam[4] - Array de ordem (para Relatório)
@return aParam[5] - Título (para Relatório)
@type static function
/*/
Static Function SchedDef()
	Local aParam	:= {}
	Local aOrd		:= {}

	aParam := {"P", ;
	"ParamDef", ;
	""        , ;
	aOrd      , ;
	}

Return aParam