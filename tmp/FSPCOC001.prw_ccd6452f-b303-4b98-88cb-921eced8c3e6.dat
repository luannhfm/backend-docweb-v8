#INCLUDE "protheus.ch"
#INCLUDE "TOPCONN.CH"
#INCLUDE "COLORS.CH"
#INCLUDE "RWMAKE.CH"
#INCLUDE "TBICONN.CH"
#INCLUDE "COMMON.CH"
#INCLUDE "XMLXFUN.CH"
#INCLUDE 'DBTREE.CH'

#DEFINE  CLRF  CHR ( 13 ) + CHR ( 10 )

#define DS_MODALFRAME   128
 
/*/f/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
<Descricao> :  Programa para manutenção de Planejamento e Controle Orçamentario
<Autor> : Fábrica DOIT MG
<Data> : 21/07/2014
<Parametros> : Nil
<Retorno> : Nil
<Processo> : FIEMT – PCO
<Tipo> C (Cadastro)
<Obs> : 
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
*/

User Function FSPCOC001()
***************************************************************************************
*
*
*****

Private bRest      := { || ZD8->(DbSetOrder(1)) }

Private aReto :=  UsrRetGRP(__cUserID) 

Private oFtTitulo := TFont():New("Arial",,018,,.T.,,,,,.F.,.F.)
Private oFont1    := TFont():New("Arial Black",,024,,.T.,,,,,.F.,.F.)
Private oFont2 	  := TFont():New("Calibri",,016,,.T.,,,,,.F.,.F.)   

Private cFiltro:= " ( ZD8->ZD8_BROWSE == ('*') ) "

Private cKey:=IndexKey ( )
Private cIndex:=CriaTrab ( Nil,.F. )

Private aCampos := {"ZD8_CODIGO",;
					"ZD8_VERSAO",;
					"ZD8_REVISA",;
					"ZD8_DESCRI",;
					"ZD8_PERIOD",;
					"ZD8_DTINIC",;
					"ZD8_DTFINA",;
					"ZD8_CRTREV",;
					"ZD8_MEMO",;
					"ZD8_CTRLUS",;
					"ZD8_MESDIS",;
					"ZD8_DISSID",;						
					"ZD8_FASE"	}
					
Private aInclui:=  {	"ZD8_DESCRI",;
					"ZD8_PERIOD",;
					"ZD8_DTINIC",;
					"ZD8_DTFINA",;
					"ZD8_CRTREV",;
					"ZD8_MEMO",;
					"ZD8_CTRLUS",;
					"ZD8_MESDIS",;
					"ZD8_DISSID",;					
					"ZD8_FASE"	}

Private aAltera:=  {	"ZD8_DESCRI",;
							"ZD8_CRTREV",;
							"ZD8_MEMO",;
							"ZD8_CTRLUS",;
							"ZD8_FASE"	}

Private aRevisa:= {	"ZD8_REVISA",;
					"ZD8_DESCRI",;
					"ZD8_CRTREV",;
					"ZD8_MEMO",;
					"ZD8_CTRLUS",;
					"ZD8_FASE"	}


Private cCadastro := OemToAnsi ( "Cadastro de Planejamento Orçamentario" )

Private aRotina   := {	{ "Pes&quisar"		,'AxPesqui',0,1},;
								{ "&Visualizar"	,'U_FSPC01( "ZD8" , RECNO(), 2, cCadastro ) ',0,2},;	 
								{ "&Incluir"		,'U_FSPC01( "ZD8" , RECNO(), 3, cCadastro ) ',0,3},; 		
								{ "&Alterar"		,'U_FSPC01( "ZD8" , RECNO(), 4, cCadastro ) ',0,4},; 					
								{ "&Excluir"		,'U_FSPC01( "ZD8" , RECNO(), 5, cCadastro ) ',0,5},; 					
								{ "&Planejar"		,'U_FSPC01( "ZD8" , RECNO(), 6, cCadastro ) ',0,2},;
								{ "&Revisar"		,'U_FSPC01( "ZD8" , RECNO(), 7, cCadastro ) ',0,7},;
								{ "&Carga Estr."	,'U_FSPC01( "ZD8" , RECNO(), 8, cCadastro ) ',0,8},;								
								{ "&Gerar PCO"		,'U_FSPC01( "ZD8" , RECNO(), 9, cCadastro ) ',0,9}}

Private nOpcA := 0

Private cQry := " "  

Private aCols1    :={}
Private aHeader1  :={}

Private aCols2    :={}
Private aHeader2  :={}

Private aCols3    :={}
Private aHeader3  :={}

Private aHeaderF  :={}
Private aColsF := {}

Private cCtCtb			:= ""
Private dDtDemiss

Private cFiliAtu		:= ""
Private cCentro		:= ""
Private cItem 			:= ""
Private cFunAtu		:= ""
Private cIndAtu		:= ""

Private cFiliLast		:= ""
Private cCtResLast  	:= ""
Private cUndOrLast	:= ""
Private cTpLast		:= ""
Private cFunLast		:= ""
Private cIndLast		:= ""

Private cCtCust		:= ""
Private cItCont		:= ""
Private cNomeFun		:= ""
Private aSizeAut  :=  MsAdvSize(  )

Private nXi, nXj, nCont := 1

Private nAnoAnterior := 1

IF aSizeAut[5] > 800
     Private nRes := 1 //Resolucao 1024 1
Else
     Private nRes := 1.29 //Resolucao 800 1.29
EndIf

DBSelectArea ( "ZDA" )

DBSetOrder ( 1 )

DBSelectArea ( "ZD9" )

DBSetOrder ( 1 )

DBSelectArea ( "ZD8" )

DBSetOrder ( 1 )

cKey:=IndexKey ( )

IndRegua ( "ZD8",cIndex,cKey,,cFiltro,OemToAnsi ( "Aguarde, Aplicando Filtros..." ) )

mBrowse (06,08,22,75,"ZD8",,,,,, )

dbSelectArea ( "ZD8" )

**
Return (.T.)
**
			 
User Function FSPC01 ( cAlias,nRecNo,nOpc ) 
***************************************************************************************
*
*
*****
Local cBkpFil := cFilAnt
Local cUsrCrg	:= SuperGetMv("FS_USRCARG",.T.,"000001,000701")
Local nOrder	:= RetOrder("ZZY","ZZY_FILIAL+ZZY_CODUSR")
Private aMatrix := {}
Private nOpcVer := nOpc
Private cLastNood := ""
Private oDlgProp 

Private lPrim := .T.

Private cTitulo := "Cadastro de Planejamento e Controle Orçamentario"

Private nRegZD8 := 1

DO CASE
	CASE nOpcVer == 2 
		FSVER(cAlias,nRecNo,nOpc)
	CASE nOpcVer == 3 
		FSINC(cAlias,nRecNo,nOpc)
	CASE nOpcVer == 4 
		FSALT(cAlias,nRecNo,nOpc)
	CASE nOpcVer == 5 
		FSEXC(cAlias,nRecNo,nOpc)
	CASE nOpcVer == 6 
		dbSelectArea("ZZY")
		ZZY->(dbGoTop())
		If Empty(Posicione("ZZY",nOrder,xFilial("ZZY")+__CUSERID,"ZZY_CODUSR"))//Validar se usuário tem vinculos cadastrados na tabela ZZY
			MsgBox(OemToAnsi("Usuário sem amarração de filial para acesso a rotina de Planejamento!!!"),OemtoAnsi("Atenção!!!"),"ALERT")	
		Else
			Processa( {|| FSPLA(cAlias,nRecNo,nOpc)}, "Carregando Estrutura" , "", .T.)		
		EndIf
		cFilAnt := cBkpFil
	CASE nOpcVer == 7 
		FSREV(cAlias,nRecNo,nOpc)     
	CASE nOpcVer == 8
		If !(__CUSERID $ cUsrCrg) //Buscar parametro com o ID do usuário que poderá acessar a rotina
			ApMsgStop("Usuário sem acesso para realizar carga do planejamento !!","ATENÇÃO")
		Else
		   U_AtuZD9()
		EndIf
	CASE nOpcVer == 9
		FSPCO(cAlias,nRecNo,nOpc)     
ENDCASE

**
Return (.T.)
**        

Static Function FSVER(cAlias,nRecNo,nOpc)
***************************************************************************************
*
*
*****

RegToMemory ( "ZD8",.F.,.F. )

bOk       := .F.

DEFINE MSDIALOG oDlgProp Title cTitulo FROM aSizeAut[7],0 TO aSizeAut[6], aSizeAut[5] PIXEL

oDlgProp:lMaximized := .T.

EnChoice ( "ZD8",nRegZD8,2,,,,aCampos, { 015,005,aSizeAut[6]/2.2, aSizeAut[5]/2.04 } ,aInclui,3 )  

Activate MSDialog oDlgProp Center On Init ( EnchoiceBar(oDlgProp, {|| IIf( IncDados() ,oDlgProp:End(),)}, {||oDlgProp:End()}))

IndRegua ( "ZD8",cIndex,cKey,,cFiltro,OemToAnsi ( "Aguarde, Aplicando Filtros..." ) )

**
Return (.T.)
**        

Static Function FSINC( ) 
***************************************************************************************
*
*
*****

RegToMemory ( "ZD8",.T.,.F. )

bOk       := .F.

DEFINE MSDIALOG oDlgProp Title cTitulo FROM aSizeAut[7],0 TO aSizeAut[6], aSizeAut[5] PIXEL

oDlgProp:lMaximized := .T.

EnChoice ( "ZD8",nRegZD8,3,,,,aCampos, { 015,005,aSizeAut[6]/2.2, aSizeAut[5]/2.04 } ,aInclui,3 )  

Activate MSDialog oDlgProp Center On Init ( EnchoiceBar(oDlgProp, {|| IIf( IncDados() ,oDlgProp:End(),)}, {||oDlgProp:End()}))

IndRegua ( "ZD8",cIndex,cKey,,cFiltro,OemToAnsi ( "Aguarde, Aplicando Filtros..." ) )

**
Return ( .T. )
**

Static Function fGetNum()
***************************************************************************************
*
*
*****     

Local cNumero := SubStr(dtos(dDataBase),1,4)

Local cNum := StrZero(Val( GETMV("FS_PCONPLA")),8)

Local cProx := Soma1(cNum,,.F., .F.)
	     
PutMV("FS_PCONPLA", cProx)

**
Return ( cNumero + cNum )
**


Static Function IncDados()
***************************************************************************************
*
*
*****     

Local bCmpGrv 	:= {|xAux| Field ( xAux ) }

If FValInc()
	
	M->ZD8_CODIGO := fGetNum()
	
	DBSelectArea("ZD8")
	DbSetOrder(1)

	If RecLock("ZD8",.T.)           
		
		For nXj := 1 To FCount (  ) 

			If "FILIAL" $ FieldName ( nXj ) 
				
				FieldPut ( nXj,xFilial ( "ZD8" )  ) 

			Else

				FieldPut ( nXj,M->& ( Eval ( bCmpGrv,nXj )  )  ) 

			EndIf
			
		Next nXj
		
		ZD8->ZD8_BROWSER = '*'
		
	EndIf	
	
	MsgInfo ( OemToAnsi ( "O Planejamento Orçamentário nº "+ ZD8->ZD8_CODIGO + " foi criado com sucesso!!!" )  ) 
	
	**
	Return ( .T. )
	**

Else

	**
	Return ( .F. )
	**

EndIf    

Static Function FValInc()
***************************************************************************************
*
*
*****     


If Alltrim ( M->ZD8_CODIGO ) == ""

	MsgBox(OemToAnsi("Este código de planejamento orçamentário é inválido!!!"),OemtoAnsi("Erro!!!"),"STOP")				
	
	**
	Return ( .F. )
	**

EndIf

If M->ZD8_DTINIC >= M->ZD8_DTFINA

	MsgBox(OemToAnsi("O Periodo Inicial é igual ou superior ao Periodo Final!!!"),OemtoAnsi("Erro!!!"),"STOP")				
	
	**
	Return ( .F. )
	**

EndIf

If Alltrim ( dtos ( M->ZD8_DTINIC ) ) == ""

	MsgBox(OemToAnsi("O Periodo Inicial é inválido!!!"),OemtoAnsi("Erro!!!"),"STOP")				
	
	**
	Return ( .F. )
	**

EndIf

If Alltrim ( dtos ( M->ZD8_DTFINA ) ) == ""

	MsgBox(OemToAnsi("O Periodo Final é inválido!!!"),OemtoAnsi("Erro!!!"),"STOP")				
	
	**
	Return ( .F. )
	**

EndIf

DBSelectArea("ZD8")
DBSetOrder(1) 

DBGoTop()

While !EOF()

	If Alltrim ( ZD8->ZD8_CODIGO ) == Alltrim ( M->ZD8_CODIGO )
	
		MsgBox(OemToAnsi("Este código de planejamento orçamentário já foi utilizado!!!"),OemtoAnsi("Erro!!!"),"STOP")
		
		**
		Return ( .F. )
		**
		
	EndIf
    DBSkip()
    
EndDo

**
Return ( .T. )
**

Static Function FSALT( ) 
***************************************************************************************
*
*
*****

RegToMemory ( "ZD8",.F.,.T. )

bOk       := .F.

DEFINE MSDIALOG oDlgProp Title cTitulo FROM aSizeAut[7],0 TO aSizeAut[6], aSizeAut[5] PIXEL

oDlgProp:lMaximized := .T.

EnChoice ( "ZD8",nRegZD8,4,,,,aCampos, { 015,005,aSizeAut[6]/2.2, aSizeAut[5]/2.04 } ,aAltera,3 )  

Activate MSDialog oDlgProp Center On Init ( EnchoiceBar(oDlgProp, {|| IIf( AltDados() ,oDlgProp:End(),)}, {||oDlgProp:End()}))

IndRegua ( "ZD8",cIndex,cKey,,cFiltro,OemToAnsi ( "Aguarde, Aplicando Filtros..." ) )

**
Return ( .T. )
**

Static Function AltDados()
***************************************************************************************
*
*
*****     

Local bCmpGrv 	:= {|xAux| Field ( xAux ) }

If FValAlt()
	
	DBSelectArea("ZD8")
	DbSetOrder(1)
	If RecLock("ZD8",.F.)           
		
		For nXj := 1 To FCount (  ) 

			If "FILIAL" $ FieldName ( nXj ) 
				
				FieldPut ( nXj,xFilial ( "ZD8" )  ) 

			Else

				FieldPut ( nXj,M->& ( Eval ( bCmpGrv,nXj )  )  ) 

			EndIf
			
		Next nXj
		
	EndIf	
	
	MsgInfo ( OemToAnsi ( "O Planejamento Orçamentário nº "+ ZD8->ZD8_CODIGO + " foi alterado com sucesso!!!" )  ) 
	
	**
	Return ( .T. )
	**

Else

	**
	Return ( .F. )
	**

EndIf    


Static Function FValRev()
***************************************************************************************
*
*
*****     

Local cVersao := ""

Local cQuery := " SELECT MAX ( ZD8_VERSAO) AS VERSAO "
		cQuery += " FROM "+RetSqlName("ZD8")+" ZD8 "
		cQuery += " WHERE ZD8.D_E_L_E_T_ <> '*' "
		cQuery += " AND ZD8_FILIAL = '"+xFilial("ZD8")+"' "
		cQuery += " AND ZD8_CODIGO = '"+M->ZD8_CODIGO+"' "		
		cQuery += " AND ZD8_VERSAO = '"+M->ZD8_REVISA+"' "		
		
If ( Select ( "TZD8" ) != 0 )
	dbSelectArea ( "TZD8" )
	dbCloseArea ( )
	If File ( "TZD8"+GetDBExtension ( ) )
		FErase ( "TZD8"+GetDBExtension ( ) )
	EndIf
EndIf

dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQuery),"TZD8",.F.,.T.)
                                                
DbSelectArea("TZD8")
TZD8->(DbGotop())
	
cVersao := TZD8->VERSAO

If ( Select ( "TZD8" ) != 0 )
	dbSelectArea ( "TZD8" )
	dbCloseArea ( )
	If File ( "TZD8"+GetDBExtension ( ) )
		FErase ( "TZD8"+GetDBExtension ( ) )
	EndIf
EndIf

If Alltrim(cVersao) == ""

	**
	Return ( .F. )
	**

EndIf

**
Return ( .T. )
**

Static Function FValAlt()
***************************************************************************************
*
*
*****     


If M->ZD8_DTINIC >= M->ZD8_DTFINA

	MsgBox(OemToAnsi("O Periodo Inicial é igual ou superior ao Periodo Final!!!"),OemtoAnsi("Erro!!!"),"STOP")				
	
	**
	Return ( .F. )
	**

EndIf

If Alltrim ( dtos ( M->ZD8_DTINIC ) ) == ""

	MsgBox(OemToAnsi("O Periodo Inicial é inválido!!!"),OemtoAnsi("Erro!!!"),"STOP")				
	
	**
	Return ( .F. )
	**

EndIf

If Alltrim ( dtos ( M->ZD8_DTFINA ) ) == ""

	MsgBox(OemToAnsi("O Periodo Final é inválido!!!"),OemtoAnsi("Erro!!!"),"STOP")				
	
	**
	Return ( .F. )
	**

EndIf

**
Return ( .T. )
**

Static Function FSEXC(cAlias,nRecNo,nOpc)
***************************************************************************************
*
*
*****

RegToMemory ( "ZD8",.F.,.T. )

bOk       := .F.

DEFINE MSDIALOG oDlgProp Title cTitulo FROM aSizeAut[7],0 TO aSizeAut[6], aSizeAut[5] PIXEL

oDlgProp:lMaximized := .T.

EnChoice ( "ZD8",nRegZD8,5,,,,aCampos, { 015,005,aSizeAut[6]/2.2, aSizeAut[5]/2.04 } ,aInclui,3 )  

Activate MSDialog oDlgProp Center On Init ( EnchoiceBar(oDlgProp, {|| IIf( ExcDados() ,oDlgProp:End(),)}, {||oDlgProp:End()}))

IndRegua ( "ZD8",cIndex,cKey,,cFiltro,OemToAnsi ( "Aguarde, Aplicando Filtros..." ) )

**
Return (.T.)
**        

Static Function ExcDados()
***************************************************************************************
*
*
*****     

Local cQuery := ""

Local cNumero := ZD8->ZD8_CODIGO

Local cVersao := ZD8->ZD8_VERSAO

Local cNewVer := ZD8->ZD8_VERSAO

If ! MsgYesNo(OemToAnsi("Deseja realmente excluir este planejamento orçamentário?"))

	**
	Return ( .F.)
	**
			
EndIf

//Begin Transaction

	cQuery := " DELETE FROM "+RetSqlName("ZD9")
	cQuery += " WHERE ZD9_CODIGO='"+ZD8->ZD8_CODIGO+"' AND ZD9_VERSAO ='"+ZD8->ZD8_VERSAO+"'" 

	TCSQLExec(cQuery)
	
	cQuery := " DELETE FROM "+RetSqlName("ZDA")
	cQuery += " WHERE ZDA_CODIGO='"+ZD8->ZD8_CODIGO+"' AND ZDA_VERSAO ='"+ZD8->ZD8_VERSAO+"'" 
 
	TCSQLExec(cQuery)

	DBSelectArea("ZD8")
	DBSetOrder(1)
	If DBSeek(xFilial("ZD8") + cNumero + cVersao ) 
		If RecLock("ZD8",.F.)           
			dbDelete()
			MsUnlock()
			dbSkip()
		EndIf
	EndIf
	
//End Transaction

cQuery := " SELECT MAX ( ZD8_VERSAO) AS VERSAO "
cQuery += " FROM "+RetSqlName("ZD8")+" ZD8 "
cQuery += " WHERE ZD8.D_E_L_E_T_ <> '*' "
cQuery += " AND ZD8_FILIAL = '"+xFilial("ZD8")+"' "
cQuery += " AND ZD8_CODIGO = '"+cNumero+"' "		

If ( Select ( "TZD8" ) != 0 )
	dbSelectArea ( "TZD8" )
	dbCloseArea ( )
	If File ( "TZD8"+GetDBExtension ( ) )
		FErase ( "TZD8"+GetDBExtension ( ) )
	EndIf
EndIf

dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQuery),"TZD8",.F.,.T.)
                                                
DbSelectArea("TZD8")
TZD8->(DbGotop())
	
cNewVer := TZD8->VERSAO

cNewVer := StrZero ( ( Val ( cNewVer ) ) , 4 ) 

If ( Select ( "TZD8" ) != 0 )
	dbSelectArea ( "TZD8" )
	dbCloseArea ( )
	If File ( "TZD8"+GetDBExtension ( ) )
		FErase ( "TZD8"+GetDBExtension ( ) )
	EndIf
EndIf

DBSelectArea("ZD8")
DBSetOrder(1)
If DBSeek(xFilial("ZD8")+cNumero + cNewVer ) 
	If RecLock("ZD8",.F.)           
		Replace ZD8_BROWSE With '*'
			MsUnlock()
	EndIf
EndIf	

MsgInfo ( OemToAnsi ( "O Planejamento Orçamentário nº " + cNumero + " - " + cVersao + " foi excluido com sucesso!!!" )  )		
	
**
Return ( .T. )
**                   

Static Function FSREV(cAlias,nRecNo,nOpc)
***************************************************************************************
*
*
*****

Local cVersao := ""

Local cQuery := " SELECT MAX ( ZD8_VERSAO) AS VERSAO "
		cQuery += " FROM "+RetSqlName("ZD8")+" ZD8 "
		cQuery += " WHERE ZD8.D_E_L_E_T_ <> '*' "
		cQuery += " AND ZD8_FILIAL = '"+xFilial("ZD8")+"' "
		cQuery += " AND ZD8_CODIGO = '"+ZD8->ZD8_CODIGO+"' "		
		
If ( Select ( "TZD8" ) != 0 )
	dbSelectArea ( "TZD8" )
	dbCloseArea ( )
	If File ( "TZD8"+GetDBExtension ( ) )
		FErase ( "TZD8"+GetDBExtension ( ) )
	EndIf
EndIf

dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQuery),"TZD8",.F.,.T.)
                                                
DbSelectArea("TZD8")
TZD8->(DbGotop())
	
cVersao := TZD8->VERSAO

cVersao := StrZero ( ( Val ( cVersao ) + 1) , 4 ) 

If ( Select ( "TZD8" ) != 0 )
	dbSelectArea ( "TZD8" )
	dbCloseArea ( )
	If File ( "TZD8"+GetDBExtension ( ) )
		FErase ( "TZD8"+GetDBExtension ( ) )
	EndIf
EndIf

RegToMemory ( "ZD8",.F.,.T. )

bOk       := .F.

M->ZD8_REVISA := Space(4)

DEFINE MSDIALOG oDlgProp Title cTitulo FROM aSizeAut[7],0 TO aSizeAut[6], aSizeAut[5] PIXEL

oDlgProp:lMaximized := .T.

M->ZD8_VERSAO := cVersao

EnChoice ( "ZD8",nRegZD8,4,,,,aCampos, { 015,005,aSizeAut[6]/2.2, aSizeAut[5]/2.04 } ,aRevisa,3 )  

oDlgProp:Refresh()   

Activate MSDialog oDlgProp Center On Init ( EnchoiceBar(oDlgProp, {|| IIf( RevDados() ,oDlgProp:End(),)}, {||oDlgProp:End()}))

IndRegua ( "ZD8",cIndex,cKey,,cFiltro,OemToAnsi ( "Aguarde, Aplicando Filtros..." ) )

**
Return ( .T. )
**                   

Static Function RevDados()
***************************************************************************************
*
*
*****     

Local bCmpGrv 	:= {|xAux| Field ( xAux ) }

Local cQuery := ""

Local cOldCod := M->ZD8_CODIGO
Local cOldVer := M->ZD8_REVISA

If FValRev()
	
	
	If ! MsgYesNo(OemToAnsi("Deseja realmente revisar este planejamento orçamentário?"))
	
		**
		Return ( .T. )
		**
	
	EndIf	
	
	cQuery := " SELECT * "
	cQuery += " FROM "+RetSqlName("ZD8")+" ZD8 "
	cQuery += " WHERE ZD8.D_E_L_E_T_ <> '*' "
	cQuery += " AND ZD8_CODIGO = '"+cOldCod+"' "		
	cQuery += " AND ZD8_VERSAO = '"+cOldVer+"' "		
		
	If ( Select ( "TZD8" ) != 0 )
		dbSelectArea ( "TZD8" )
		dbCloseArea ( )
		If File ( "TZD8"+GetDBExtension ( ) )
			FErase ( "TZD8"+GetDBExtension ( ) )
		EndIf
	EndIf

	dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQuery),"TZD8",.F.,.T.)
                                                
	DbSelectArea("TZD8")
	TZD8->(DbGotop())
	
	cQuery := " SELECT * "
	cQuery += " FROM "+RetSqlName("ZD9")+" ZD9 "
	cQuery += " WHERE ZD9.D_E_L_E_T_ <> '*' "
	cQuery += " AND ZD9_CODIGO = '"+cOldCod+"' "		
	cQuery += " AND ZD9_VERSAO = '"+cOldVer+"' "		
		
	If ( Select ( "TZD9" ) != 0 )
		dbSelectArea ( "TZD9" )
		dbCloseArea ( )
		If File ( "TZD9"+GetDBExtension ( ) )
			FErase ( "TZD9"+GetDBExtension ( ) )
		EndIf
	EndIf

	dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQuery),"TZD9",.F.,.T.)
                                                
	DbSelectArea("TZD9")
	TZD9->(DbGotop())

	cQuery := " SELECT * "
	cQuery += " FROM "+RetSqlName("ZDA")+" ZDA "
	cQuery += " WHERE ZDA.D_E_L_E_T_ <> '*' "
	cQuery += " AND ZDA_CODIGO = '"+cOldCod+"' "		
	cQuery += " AND ZDA_VERSAO = '"+cOldVer+"' "		
	
	If ( Select ( "TZDA" ) != 0 )
		dbSelectArea ( "TZDA" )
		dbCloseArea ( )
		If File ( "TZDA"+GetDBExtension ( ) )
			FErase ( "TZDA"+GetDBExtension ( ) )
		EndIf
	EndIf
		
	dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQuery),"TZDA",.F.,.T.)
                                                
	DbSelectArea("TZDA")
	TZDA->(DbGotop())

	cQuery := " UPDATE "+RetSqlName("ZD8")
	cQuery += " SET ZD8_BROWSE = ' ' WHERE ZD8_FILIAL ='"+xFilial("ZD8")+"' AND ZD8_CODIGO='"+cOldCod+"'" 

	TCSQLExec(cQuery)

	//GRAVA ZD8
	DBSelectArea("TZD8")
	DBSelectArea("ZD8")
	RecLock("ZD8",.T.)           
	Replace 	ZD8_FILIAL With TZD8->ZD8_FILIAL	,;
				ZD8_CODIGO With TZD8->ZD8_CODIGO	,; 
				ZD8_VERSAO With M->ZD8_VERSAO 	,;	
				ZD8_REVISA With M->ZD8_REVISA 	,;
				ZD8_DESCRI With M->ZD8_DESCRI		,;
				ZD8_PERIOD With TZD8->ZD8_PERIOD ,;
				ZD8_DTINIC With StoD ( TZD8->ZD8_DTINIC )	,;
				ZD8_DTFINA With StoD ( TZD8->ZD8_DTFINA ) ,;					
				ZD8_CRTREV With M->ZD8_CRTREV		,;
				ZD8_MEMO   With M->ZD8_MEMO   	,;
				ZD8_CTRLUS With M->ZD8_CTRLUS		,;
				ZD8_FASE   With M->ZD8_FASE   	,;
				ZD8_BROWSE With '*'
							
		MsUnLock()  	
	
	//GRAVA ZD9	
	DBSelectArea("TZD9")
	While !EOF() 
		
		DBSelectArea("ZD9")
		RecLock("ZD9",.T.)           
		Replace 	ZD9_FILIAL With TZD9->ZD9_FILIAL	,;
					ZD9_CODIGO With ZD8->ZD8_CODIGO	,; 
					ZD9_VERSAO With ZD8->ZD8_VERSAO	,;	
					ZD9_TIPO   With TZD9->ZD9_TIPO	,;
					ZD9_CUSTO  With TZD9->ZD9_CUSTO 	,;
					ZD9_DCUSTO With TZD9->ZD9_DCUSTO ,;
					ZD9_ITCTB  With TZD9->ZD9_ITCTB 	,;
					ZD9_DITCTB With TZD9->ZD9_DITCTB ,;					
					ZD9_CONTA  With TZD9->ZD9_CONTA 	,;
					ZD9_DCONTA With TZD9->ZD9_DCONTA ,;
					ZD9_FUNCIO With TZD9->ZD9_FUNCIO ,;
					ZD9_DFUNCI With TZD9->ZD9_DFUNCI ,;
					ZD9_KEYFUN With TZD9->ZD9_KEYFUN
							
				MsUnLock()  
		DBSelectArea("TZD9")
		DBSkip()
	
	EndDo

	//GRAVA ZDA
	DBSelectArea("TZDA")
	While !EOF() 
		DBSelectArea("ZDA")
		RecLock("ZDA",.T.)           
			Replace 	ZDA_FILIAL With TZDA->ZDA_FILIAL		,;
						ZDA_CODIGO With ZD8->ZD8_CODIGO		,; 
						ZDA_VERSAO With ZD8->ZD8_VERSAO		,;
						ZDA_TIPO   With TZDA->ZDA_TIPO 		,;						
						ZDA_CTCUST With TZDA->ZDA_CTCUST		,;
						ZDA_ITCONT With TZDA->ZDA_ITCONT		,;
						ZDA_CONTA  With TZDA->ZDA_CONTA 		,;
                  ZDA_FUNCIO With TZDA->ZDA_FUNCIO		,;
                  ZDA_CVERBA With TZDA->ZDA_CVERBA 	,;
                  ZDA_DVERBA With TZDA->ZDA_DVERBA	 	,;
   					ZDA_DFUNCI With TZDA->ZDA_DFUNCI		,;
						ZDA_PERIOD With TZDA->ZDA_PERIOD		,;
						ZDA_DATA   With Stod(TZDA->ZDA_DATA),;
						ZDA_VALOR  With TZDA->ZDA_VALOR 		,;
						ZDA_KEYFUN With TZDA->ZDA_KEYFUN		,;
						ZDA_PRVDEM With Stod(TZDA->ZDA_PRVDEM),;
						ZDA_RATEIO With TZDA->ZDA_RATEIO		,;
						ZDA_PRCRAT With TZDA->ZDA_PRCRAT
								
				MsUnLock()  

		DBSelectArea("TZDA")
		DBSkip()
	
	EndDo	
	
	If ( Select ( "TZD8" ) != 0 )
		dbSelectArea ( "TZD8" )
		dbCloseArea ( )
		If File ( "TZD8"+GetDBExtension ( ) )
			FErase ( "TZD8"+GetDBExtension ( ) )
		EndIf
	EndIf
	
	If ( Select ( "TZD9" ) != 0 )
		dbSelectArea ( "TZD9" )
		dbCloseArea ( )
		If File ( "TZD9"+GetDBExtension ( ) )
			FErase ( "TZD9"+GetDBExtension ( ) )
		EndIf
	EndIf
	
	If ( Select ( "TZDA" ) != 0 )
		dbSelectArea ( "TZDA" )
		dbCloseArea ( )
		If File ( "TZDA"+GetDBExtension ( ) )
			FErase ( "TZDA"+GetDBExtension ( ) )
		EndIf
	EndIf
	
	MsgInfo ( OemToAnsi ( "O Planejamento Orçamentário nº "+ ZD8->ZD8_CODIGO + " foi revisado com sucesso!!!" )  ) 
	
	**
	Return ( .T. )
	**

Else

	MsgBox(OemToAnsi("Este código de revisão é inválido!!!"),OemtoAnsi("Erro!!!"),"STOP")				
	
	**
	Return ( .F. )
	**

EndIf

    
Static Function FSPCO(cAlias,nRecNo,nOpc)
***************************************************************************************
*
*
*****

MsgInfo ( OemToAnsi ( "Em desenvolvimento...." )  )

**
Return ( .T. )
**

          
Static Function FSPLA(cAlias,nRecNo,nOpc)
***************************************************************************************
*
*
*****              
             
Local nReg := 1

Local olBtn := FWButtonBar():New()

Local cVersao := ""

Local cQuery := " SELECT MAX ( ZD8_VERSAO) AS VERSAO "
		cQuery += " FROM "+RetSqlName("ZD8")+" ZD8 "
		cQuery += " WHERE ZD8.D_E_L_E_T_ <> '*' "
		cQuery += " AND ZD8_FILIAL = '"+xFilial("ZD8")+"' "
		cQuery += " AND ZD8_CODIGO = '"+ZD8->ZD8_CODIGO+"' "		
		
If ( Select ( "TZD8" ) != 0 )
		dbSelectArea ( "TZD8" )
		dbCloseArea ( )
		If File ( "TZD8"+GetDBExtension ( ) )
			FErase ( "TZD8"+GetDBExtension ( ) )
		EndIf
EndIf

		
dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQuery),"TZD8",.F.,.T.)
                                                
DbSelectArea("TZD8")
TZD8->(DbGotop())
	
cVersao := TZD8->VERSAO

If ( Select ( "TZD8" ) != 0 )

	dbSelectArea ( "TZD8" )
	dbCloseArea ( )

	If File ( "TZD8"+GetDBExtension ( ) )

		FErase ( "TZD8"+GetDBExtension ( ) )

	EndIf

EndIf

If cVersao <> ZD8->ZD8_VERSAO

	MsgBox(OemToAnsi("Utilize a ultima versao deste planejamento ou revise!!!"),OemtoAnsi("Erro!!!"),"STOP")					
	
	**
	Return (.T.)
	**
		
EndIf

Private oLayer := FWLayer():new()	//ppl mudança da variavel para private
Private oGetDad1
Private oLabel 
Private oCabec	
Private oItens	
Private oMovim
Private oRodap
Private oInfor
//Private oInfor1	
//Private oInfor2
Private oInfor3
Private oIEnc
Private oMEnc
Private oFEnc
Private oCEnc
Private oDEnc
Private oDlg    

Private aEdit := {"ZDA_VALOR"}

Private cInfor1 := " "
Private cInfor2 := " "
Private cInfor3 := " "

Private lSaveSP := .F.

Private oBEnc
Private otree 
Private oMenu
Private cTipo := "0"
Private cTpReceita	:= "1"
Private cTpDespesa	:= "2"
Private cTpFolha		:= "3"
Private cTpFiltro		:= ""
Private nAA 
Private aRegAA			:= {}
Private nDifMes
Private aFilUser		:= {}
Private aFunc		:= {}
Private aRateio	:= {}
dbSelectArea ( "ZD8" ) 
dbSelectArea ( "ZD9" )
dbSelectArea ( "ZDA" )

BuscaFil()

DEFINE MSDIALOG oDlg FROM aSizeAut[7],0 TO aSizeAut[6], aSizeAut[5] PIXEL TITLE "Planejar - Controle Orçamentário"//Inicializa o FWLayer com a janela que ele pertencera e se sera exibido o botão de fechar

oLayer:init(oDlg,.T.)//Cria as colunas do Layer
oLayer:addCollumn('Col01',35,.F.)
oLayer:addCollumn('Col02',65,.F.)//Adiciona Janelas as colunas
//oLayer:addWindow('Col01','Lin01','Planilha Orçamentária',55,.T.,.F.,{funcao do split da janela },,{ }) 
oLayer:addWindow('Col01','Lin01','Planilha Orçamentária',85,.T.,.F.,,,)
oLayer:addWindow('Col01','Lin02','Informação'           ,15,.T.,.F.,,,)
//oLayer:addWindow('Col01','Lin03','Resumo da Planilha'   ,25,.T.,.F.,,,)
oLayer:addWindow('Col02','Lin01','Itens da Planilha'    ,50,.T.,.T.,,,)
oLayer:addWindow('Col02','Lin02','Movimentos'           ,50,.T.,.F.,,,)
oLayer:getWinPanel('Col02','Lin01')//Coloca o botão de split na coluna
oLayer:setColSplit('Col01',CONTROL_ALIGN_RIGHT,,)  

oCabec	:= oLayer:getWinPanel('Col01','Lin01')
oCabec:FreeChildren()
oInfor  := oLayer:getWinPanel('Col01','Lin02')
oInfor:FreeChildren()
//oRodap	:= oLayer:getWinPanel('Col01','Lin03')
//oRodap:FreeChildren()
oItens	:= oLayer:getWinPanel('Col02','Lin01')
oItens:FreeChildren()
oMovim	:= oLayer:getWinPanel('Col02','Lin02')
oMovim:FreeChildren()  

/*
oButton := TButton():New(05,020,"Incluir Funcionario",oRodap,{|| IncFunci() },50,10,,,,.T.,,"",,,,)

oButton := TButton():New(05,090,"Calculo Funcionario",oRodap,{|| CALCCUSF()},50,10,,,,.T.,,"",,,,)

oButton := TButton():New(05,160,"Excluir Funcionario",oRodap,{|| ExcFunci()},50,10,,,,.T.,,"",,,,)                   

oButton := TButton():New(25,020,"Reservado"           ,oRodap,,50,10,,,,.T.,,"",,,,)			

oButton := TButton():New(25,090,"Ratear Movimentos"    ,oRodap,{|| Ratear()},50,10,,,,.T.,,"",,,,)			

oButton := TButton():New(25,160,"Gravar Alterações"   ,oRodap,{|| GrvDados()},50,10,,,,.T.,,"",,,,)			
*/

//oInfor1 := TSay():Create(oInfor,{||cInfor1 },01,01,,oFont2,,,,.T.,CLR_BLUE,CLR_WHITE,200,20)
//oInfor2 := TSay():Create(oInfor,{||cInfor2 },16,01,,oFont2,,,,.T.,CLR_BLUE,CLR_WHITE,200,20)
//oInfor3 := TSay():Create(oInfor,{||cInfor3 },31,01,,oFont2,,,,.T.,CLR_BLUE,CLR_WHITE,200,20)

oInfor3 := TSay():Create(oInfor,{||cInfor3 },01,01,,oFont2,,,,.T.,CLR_BLUE,CLR_WHITE,200,20)

aHeader1 := {}
aCols1 := {}

aHeader2 := {}
aCols2 := {}

aHeader3 := {}
aCols3 := {}

//PPL	-	inicio
aHeaderF := {}
aColsF := {}
//PPL	-	final

RegToMemory("ZD9",.T.,.T.)   
MontDados(@aHeader1,@aCols1,"ZD9",ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO,'1')
oIEnc := MsNewGetDados():New(0,0,150,200, GD_INSERT + GD_UPDATE + GD_DELETE,"U_FSPC03()","U_FSPC03()",,,,,,"",,oItens,aHeader1,aCols1)
oIEnc:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT

oIEnc:BCHANGE 	   := {|| U_FSPC05() }//alterações
//oIEnc:OWND:BCHANGE := {|| U_FSPC05() }
oIEnc:oBrowse:OMOTHER:OBROWSE:BLOSTFOCUS := {|| U_FSPC05() }//saída do obj

oIEnc:OBROWSE:BEDITCOL := {|| U_FSPC07() }
oIEnc:OBROWSE:BDRAWSELECT := {|| U_FSPC07() }

oIEnc:BDELOK := {|| U_FSPC07() }
oIEnc:BSUPERDEL := {|| U_FSPC07() }

RegToMemory("ZD8",.F.,.F.)
oCEnc := MsMGet():New("ZD8",ZD8->(RecNo()),2,,,,,{0,0,80,80},,2,,,,oItens,,.T.)
oCEnc:oBox:Align := CONTROL_ALIGN_ALLCLIENT

RegToMemory("ZDA",.T.,.T.)   
MontDados(@aHeader2,@aCols2,"ZDA",ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO,'2')
oMEnc := MsNewGetDados():New(0,0,150,200,GD_INSERT + GD_UPDATE,"U_FSPC04()","U_FSPC04()","",aEdit,,2,,"",,oMovim,aHeader2,aCols2)
oMEnc:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT

oMEnc:oBrowse:lUseDefaultColors := .F.
oMEnc:oBrowse:SetBlkBackColor({|| buscacor(oMEnc:nAt)})

oMEnc:oBrowse:OMOTHER:OBROWSE:BLOSTFOCUS := {|| U_FSPC04() }

oMEnc:OBROWSE:BEDITCOL := {|| U_FSPC07() }
oMEnc:OBROWSE:BDRAWSELECT := {|| U_FSPC07() }

oMEnc:BCHANGE 	   := {|| U_FSPC08() }
oMEnc:OWND:BCHANGE := {|| U_FSPC08() }

RegToMemory("ZDA",.T.,.T.)   
MontDados(@aHeader3,@aCols3,"ZDA",ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO,'4')
oDEnc := MsNewGetDados():New(0,0,150,200,2,,,"",,,3,,"",,oMovim,aHeader3,aCols3)
oDEnc:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT

RegToMemory("ZDA",.T.,.T.)   
MontDados(@aHeaderF,@aColsF,"ZDA",ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO,'3')
oFEnc := MsNewGetDados():New(0,0,150,200, GD_INSERT + GD_UPDATE + GD_DELETE,"U_FSPC09('2')","AllwaysTrue",,,,,,"",,oMovim,aHeaderF,aColsF)
oFEnc:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
olBtn:Init(oMovim,015,015,CONTROL_ALIGN_BOTTOM,.T.) 

oFEnc:OBROWSE:BEDITCOL := {|| U_FSPC07() }
oFEnc:OBROWSE:BDRAWSELECT := {|| U_FSPC07() }
oFEnc:BDELOK 		:= {|| U_FSPC07() }
oFEnc:BSUPERDEL := {|| U_FSPC07() }

//Cria Menu Popup (botao direito do mouse)
MENU oMenu POPUP
	MENUITEM "Incluir U.O e C.R" Action fIncCRUO()
	MENUITEM "Excluir U.O e C.R" Action fExcCRUO()
	MENUITEM "Incluir Funcionario" Action IncFunci()
	MENUITEM "Calculo Funcionario" Action CALCCUSF()
	MENUITEM "Excluir Funcionario" Action ExcFunci()
	MENUITEM "Alterar Rateio"  		Action AltRat()
	MENUITEM "Ratear Movimentos"  Action Ratear()
	MENUITEM "Gravar Alterações"  Action GrvDados()	
ENDMENU
//Processa( {|| u_fCriaTree()}, "Tela de Processamento" , "Montando Estrutura...", .T.)
U_fCriaTree()

    /*
    // Cria botões com métodos básicos
    TButton():New( 160, 002, "Seek Item 4", oDlg,{|| oTree:TreeSeek("004")};
       ,40,010,,,.F.,.T.,.F.,,.F.,,,.F. )
    TButton():New( 160, 052, "Enable"	, oDlg,{|| oTree:SetEnable() };
       ,40,010,,,.F.,.T.,.F.,,.F.,,,.F. )
    TButton():New( 160, 102, "Disable"	, oDlg,{|| oTree:SetDisable() };
       ,40,010,,,.F.,.T.,.F.,,.F.,,,.F. )
    TButton():New( 160, 152, "Novo Item", oDlg,{|| TreeNewIt() };
       ,40,010,,,.F.,.T.,.F.,,.F.,,,.F. )
 	TButton():New( 172,02,"Dados do item", oDlg,{|| ;
         Alert("Cargo: "+oTree:GetCargo()+chr(13)+"Texto: "+oTree:GetPrompt(.T.)) },;
		 40,10,,,.F.,.T.,.F.,,.F.,,,.F. )
    TButton():New( 172, 052, "Muda Texto", oDlg,{|| ;
         oTree:ChangePrompt("Novo Texto Item 001","001") },;
         40,010,,,.F.,.T.,.F.,,.F.,,,.F. )
    TButton():New( 172, 102, "Muda Imagem", oDlg,{||;
         oTree:ChangeBmp("LBNO","LBTIK",,,"001") },;
         40,010,,,.F.,.T.,.F.,,.F.,,,.F. )
    TButton():New( 172, 152, "Apaga Item", oDlg,{|| ;
         If(oTree:TreeSeek("006"),oTree:DelItem(),) },;
         40,010,,,.F.,.T.,.F.,,.F.,,,.F. )
    */

    // Indica o término da contrução da Tree
    
//    oTree:EndTree()

//oTree:Align := CONTROL_ALIGN_ALLCLIENT

ACTIVATE DIALOG oDlg CENTERED ON INIT (	oMEnc:Hide(),;
												    	oIEnc:Hide(),;
												    	oFEnc:Hide(),;
												    	oCEnc:Show(),;
												    	oDEnc:Show()) 

**
Return (.T.)                 
**


Static Function Ratear() 
***************************************************************************************
*
*
*****   

Local cPerg := "RatePCO001"

Local nQtde := 0

Local cMes := "" 

Local dMes := ctod("") 

Local nValor := 0
	
If ! cTipo $ ("12")  

	MsgBox(OemToAnsi("Selecione uma Conta Orçamentária de Receita ou Despesa!!!"),OemtoAnsi("Erro!!!"),"STOP")				

	**
	Return (.F.)                 
	**

EndIf 

If Alltrim ( cInfor1 )  == "" .OR. Alltrim ( cInfor2 )  == "" .OR. Alltrim ( cInfor3 )  == ""

	MsgBox(OemToAnsi("Selecione uma Conta Orçamentária de Receita ou Despesa!!!"),OemtoAnsi("Erro!!!"),"STOP")				

	**
	Return (.F.)                 
	**

EndIf 

u_SFPUTSX1( cPerg, '01','Valor a ser rateado?	','Valor a ser rateado? ','Valor a ser rateado? '	,'mv_ch1','N',14 ,3,0,'G','Positivo() '  ,''		,'','','mv_par01','','','','','','','','','','','','','','','','', '', '', '')
u_SFPUTSX1( cPerg, '02','Data de ?'				 ,'Data de ?'				 ,'Data de  ? ' 			   ,'mv_ch2','D',08 ,0,0,'G','NaoVazio() .AND. U_FSPC06(1,mv_par02,mv_par03)',''		,'','','mv_par02','','','','','','','','','','','','','','','','', '', '', '')
u_SFPUTSX1( cPerg, '03','Data ate?'				 ,'Data ate?'				 ,'Data ate ? ' 			   ,'mv_ch3','D',08 ,0,0,'G','NaoVazio() .AND. U_FSPC06(2,mv_par02,mv_par03)',''		,'','','mv_par03','','','','','','','','','','','','','','','','', '', '', '')

dbSelectArea("SX1")

If SX1->(dbSeek(cPerg+'01'))

	RecLock("SX1",.F.)
		SX1->X1_PICTURE := "@E 999,999,999.999"
	MsUnlock()
	
EndIf

If !(Pergunte(cPerg,.T.))

	**
	Return (.F.)
	**

EndIf

If ! ( ((MV_PAR02 >= ZD8->ZD8_DTINIC) .And. (MV_PAR02 <= ZD8->ZD8_DTFINA))) .OR. ! ( ((MV_PAR03 >= MV_PAR02) .And. (MV_PAR03 >= ZD8->ZD8_DTINIC) .And. (MV_PAR03 <=ZD8->ZD8_DTFINA)))

	MsgBox(OemToAnsi("O Periodo informado é invalido!!!"),OemtoAnsi("Erro!!!"),"STOP")				
	
	**
	Return (.F.)
	**

EndIf


If MV_PAR02 < MV_PAR03

	nqtde := DateDIffMount(MV_PAR02, MV_PAR03 )
	
	nQtde := nQtde + 1
	
EndIf

dMes := MV_PAR02

If nQtde > 0

	nValor := Round ( ( MV_PAR01 / nQtde), 3)
	
EndIf

For nXi := 1 To Len (oMEnc:aHeader)

	oMEnc:aCols[Len(oMEnc:Acols)][nXi] := 0
	
Next nXi

lSaveSP := .T.

For nXi := 1 To nQtde

	cMes := Mesextenso(Val(SubStr(DtoC(dMes),4,2))) + " / " + SubStr(DtoC(dMes),7,4)
	
	If aScan(oMEnc:aHeader,{|x| AllTrim(x[1]) == cMes }) > 0
	
	     oMEnc:aCols[Len(oMEnc:Acols)][aScan(oMEnc:aHeader,{|x| AllTrim(x[1]) == cMes })] := nValor
	     
	EndIf
	
	dMes := MonthSum( dMes ,1)

Next nXi

	aMatrix[oIEnc:NAT][4] := aClone(oMEnc:aCols[Len(oMEnc:Acols)])
	     
oMEnc:Refresh()       

**
Return (.T.)                 
**

Static Function GrvDados() 
***************************************************************************************
*
*
*****   
Local cRateio		:= Posicione("ZDA",2,cFiliAtu+ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cTipo+cCentro+cItem+cFunAtu+cIndAtu,"ZDA_RATEIO")
Local nPrcRat		:= Posicione("ZDA",2,cFiliAtu+ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cTipo+cCentro+cItem+cFunAtu+cIndAtu,"ZDA_PRCRAT")
Local lRateio		:= !Empty(cRateio)
Local cQuery := ""

If cTipo == '3'
	if lRateio
		 oTree:ChangeBmp ( "POSCLI","POSCLI",,, ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cFiliAtu+cCentro+cItem+cTipo+cFunAtu+cIndAtu)
	Else
		 oTree:ChangeBmp ( "VENDEDOR","VENDEDOR",,, ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cFiliAtu+cCentro+cItem+cTipo+cFunAtu+cIndAtu)
	EndIf 	
	oTree:Refresh()	
EndIf

lSaveSp := .F.

//Begin Transaction

	If cTipo <> '3'

		cQuery := " DELETE FROM "+RetSqlName("ZD9")
		cQuery += " WHERE ZD9_FILIAL ='"+cFiliAtu+"' AND ZD9_CODIGO='"+ZD8->ZD8_CODIGO+"' AND ZD9_VERSAO ='"+ZD8->ZD8_VERSAO+"' AND ZD9_TIPO ='"+cTipo+"' AND ZD9_CUSTO = '"+cCentro+"' AND ZD9_ITCTB = '"+cItem+"' AND ZD9_CONTA <> '*' " 

		TCSQLExec(cQuery)
	
	EndIf

	cQuery := " DELETE FROM "+RetSqlName("ZDA")
	cQuery += " WHERE ZDA_FILIAL ='"+cFiliAtu+"' AND ZDA_CODIGO='"+ZD8->ZD8_CODIGO+"' AND ZDA_VERSAO ='"+ZD8->ZD8_VERSAO+"' AND ZDA_TIPO ='"+cTipo+"' AND ZDA_CTCUST = '"+cCentro+"' AND ZDA_ITCONT = '"+cItem+"'" 
 
   If cTipo == '3'
	
		cQuery += " AND ZDA_CTCUST||ZDA_ITCONT||ZDA_TIPO||ZDA_FUNCIO||ZDA_KEYFUN LIKE '"+AllTrim(cCentro+cItem+cTipo+cFunAtu+cIndAtu)+"%' "
	
	EndIf

	TCSQLExec(cQuery)
	
	
If cTipo == '1' .OR. cTipo == '2'

	For nXi := 1 to Len(oIEnc:aCols)

		If ( oIEnc:aCols[nXi][Len (oIEnc:aHeader) + 1] <> .T.) .AND. Alltrim ( oIEnc:aCols[nXi][GDFieldPos("ZD9_CONTA" ,oIEnc:aHeader)] )  <> ""
			DBSelectArea("ZD9")
			RecLock("ZD9",.T.)           
				Replace ZD9_FILIAL With cFiliAtu,;
						ZD9_CODIGO With ZD8->ZD8_CODIGO,; 
						ZD9_VERSAO With ZD8->ZD8_VERSAO,;	
						ZD9_CONTA  With oIEnc:aCols[nXi][GDFieldPos("ZD9_CONTA" ,oIEnc:aHeader)] ,;
						ZD9_DCONTA With oIEnc:aCols[nXi][GDFieldPos("ZD9_DCONTA",oIEnc:aHeader)] ,;
						ZD9_CUSTO  With cCentro ,;
						ZD9_DCUSTO With AllTrim(Posicione("CTT",1,xFilial("CTT")+cCentro,"CTT_DESC01")) ,;
						ZD9_ITCTB  With cItem ,;
						ZD9_DITCTB With AllTrim(Posicione("ZZX",1,xFilial("ZZX")+cCentro+cItem,"ZZX_DITEM")) ,;				
						ZD9_TIPO   With cTipo
							
				MsUnLock()  
		EndIf				

	Next nXi

	For nXj := 1 To Len (aMatrix)
		If !Empty(aMatrix[nXj][3])
			If ( oIEnc:aCols[nXj][Len (oIEnc:aHeader) + 1] <> .T.) .AND. Alltrim ( oIEnc:aCols[nXj][GDFieldPos("ZD9_CONTA" ,oIEnc:aHeader)] )  <> ""
			
				For nXi := 1 to Len(oMEnc:aHeader)
				
					DBSelectArea("ZDA")
					RecLock("ZDA",.T.)           
					Replace 	ZDA_FILIAL With cFiliAtu,;
								ZDA_CODIGO With ZD8->ZD8_CODIGO,; 
								ZDA_VERSAO With ZD8->ZD8_VERSAO,;
								ZDA_TIPO   With cTipo,;						
								ZDA_CTCUST With aMatrix[nXj][1] ,;
								ZDA_ITCONT With aMatrix[nXj][2] ,;
								ZDA_CONTA  With aMatrix[nXj][3] ,;
								ZDA_PERIOD With oMEnc:aHeader[nXi] [1] ,;
								ZDA_DATA   With MonthSum( ZD8->ZD8_DTINIC,nXi - 1) ,;
								ZDA_VALOR  With aMatrix[nXj][4][nXi]
									
					MsUnLock()  
			   
				Next nXi
				
			EndIf
		EndIf		
	Next nXj
	
//	MsgInfo ( OemToAnsi ( "O Planejamento Orçamentário nº "+ ZD8->ZD8_CODIGO + " foi gravado com sucesso!!!" )  ) 

Else

	nCont := 0

	For nXv := 1 To Len(oFEnc:aCols)

		If  !(oFEnc:aCols[nXv][Len (oFEnc:aHeader)+1]) .And. Alltrim (oFEnc:aCols[nXv][GDFieldPos("ZDA_CVERBA" ,oFEnc:aHeader)])  <> ""

			nCont := 0

			For nXm := 3 to Len(oFEnc:aHeader)
				
				DBSelectArea("ZDA")
				RecLock("ZDA",.T.)           
					ZDA->ZDA_FILIAL := cFiliAtu
					ZDA->ZDA_CODIGO := ZD8->ZD8_CODIGO
					ZDA->ZDA_VERSAO := ZD8->ZD8_VERSAO
					ZDA->ZDA_TIPO   := cTipo
					ZDA->ZDA_CVERBA := oFEnc:aCols[nXv][GDFieldPos("ZDA_CVERBA" ,oFEnc:aHeader)]
					ZDA->ZDA_DVERBA := oFEnc:aCols[nXv][GDFieldPos("ZDA_DVERBA",oFEnc:aHeader)]
					ZDA->ZDA_PERIOD := oFEnc:aHeader[nXm][1]
					ZDA->ZDA_DATA   := LASTDATE(MonthSum( ZD8->ZD8_DTINIC,nCont))
					ZDA->ZDA_VALOR  := oFEnc:aCols[nXv][nXm]								
					ZDA->ZDA_FUNCIO := cFunAtu
					ZDA->ZDA_DFUNCI := cNomeFun
					ZDA->ZDA_CONTA  := Posicione("SRV",1,oFEnc:aCols[nXv][GDFieldPos("ZDA_CVERBA" ,oFEnc:aHeader)],"RV_XCTADEB")
					ZDA->ZDA_CTCUST := cCentro
					ZDA->ZDA_ITCONT := cItem
					ZDA->ZDA_KEYFUN := cIndAtu
					ZDA->ZDA_PRVDEM := dDtDemiss
					ZDA->ZDA_RATEIO := cRateio
					ZDA->ZDA_PRCRAT := nPrcRat					
				MsUnLock()  
			
				nCont ++
			
			Next nXi
		
		EndIf			
	Next nXv

EndIf
	
//End Transaction
		
**
Return (.T.)                 
**
                                                                      
Static Function CALCCUSF()                                            
***************************************************************************************
*
*
*****

/***************************************************************************************
*	Função para calcular os valores da folha para os funcionários
*
*****/

	Local cMatricula	:= cFunAtu
	Local aVlrFunc 	:= {}
	Local nColAtu
	Local cRateio		:= Posicione("ZDA",2,cFiliAtu+ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cTipo+cCentro+cItem+cFunAtu+cIndAtu,"ZDA_RATEIO")
	Local nPrcRat		:= Posicione("ZDA",2,cFiliAtu+ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cTipo+cCentro+cItem+cFunAtu+cIndAtu,"ZDA_PRCRAT")
	Local lRateio		:= (!Empty(cRateio) .And. (nPrcRat <> 100))

	(oTree:cArqTree)->(dbSetOrder(4))
	(oTree:cArqTree)->(dbSeek(ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cFiliAtu+cCentro+cItem+cTipo+cFunAtu+cIndAtu,.F.))
//	oTree:TreeSeek(ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cFiliAtu+cUnOr+cCtRes+cTipo+cMatFun+cIndMat)	
	
	If ( cMatricula <> StrZero(3,50) .AND. cMatricula <> StrZero(4,50) .AND. cMatricula <> StrZero(5,50) .AND. EMPTY((oTree:cArqTree)->T_ISTREE) )//arrumar
		If LEN(oFEnc:aCols) > 0
			If !Empty(oFEnc:aCols[LEN(oFEnc:aCols)][GDFieldPos("ZDA_CVERBA",oFEnc:aHeader)])
				MsgBox(OemToAnsi("Existem dados para este funcionário, após o cálculo os dados serão apagados!!!"),OemtoAnsi("Atenção!!!"),"ALERT")
			EndIf
		EndIf
		aVlrFunc := U_CALCFOL( cMatricula, ZD8->ZD8_DTINIC, ZD8->ZD8_DTFINA,@dDtDemiss,cNomeFun,cFiliAtu,'1')
	Else	
		MsgBox(OemToAnsi("Selecione um funcionário na árvore para executar o cálculo de custos da folha!!!"),OemtoAnsi("Erro!!!"),"STOP")
	EndIf
	If lEN(aVlrFunc) > 0
		If lRateio //Existe Rateio
		// buscar registros do rateio em questão exclui-los e inclui-los novamente na tabela ZDA	
			fGrvRat(aVlrFunc,cRateio,nPrcRat)			
	   EndIf
	ENDIF
	//limpa aCols corrente
	If Len(aVlrFunc) > 0
		oFEnc:aCols := {}
	EndIf
// preencher aCols da tela com os dados do retorno	
	For nC := 1 To Len(aVlrFunc)
		lSaveSP := .T. // alterar variavel para msg de salvamento ao fazer calculo
		nPos := 3 + (MONTH(aVlrFunc[nC][3]) - MONTH(ZD8->ZD8_DTINIC)) // a partir de qual coluna irá preencher 3 é pq aHeader tem cverba e dverba antes das datas
      For nV := 1 To Len(aVlrFunc[nC][4])
			nColAtu := Ascan(oFEnc:aCols,{|x| x[1] == aVlrFunc[nC][4][nV][1]})
			If nColAtu > 0
				oFEnc:aCols[nColAtu][nPos] := IIF(lRateio,aVlrFunc[nC][4][nV][3]*(nPrcRat/100),aVlrFunc[nC][4][nV][3])
			Else
			//inclui linha em branco					
				Aadd(oFEnc:aCols,Array(Len(oFEnc:aHeader)+1))				
				For nXi := 1 to Len(oFEnc:aHeader)					
					oFEnc:aCols[Len(oFEnc:aCols),nXi]:=CRIAVAR(oFEnc:aHeader[nXi,2])				
				Next nXi				
				oFEnc:aCols[Len(oFEnc:aCols),Len(oFEnc:aHeader)+1]:=.F.

				oFEnc:aCols[Len(oFEnc:aCols)][GDFieldPos("ZDA_CVERBA",oFEnc:aHeader )] := aVlrFunc[nC][4][nV][1]
				oFEnc:aCols[Len(oFEnc:aCols)][GDFieldPos("ZDA_DVERBA",oFEnc:aHeader )] := Posicione("SRV",1,xFilial("SRV")+aVlrFunc[nC][4][nV][1],"RV_DESC")
				oFEnc:aCols[Len(oFEnc:aCols)][nPos] := IIF(lRateio, aVlrFunc[nC][4][nV][3]*(nPrcRat/100), aVlrFunc[nC][4][nV][3])
												
			EndIf
		Next nV
	Next nC

oFEnc:Refresh()

**
Return (.T.)                 
**
                                  
Static Function ExcFunci() 
***************************************************************************************
*
*
*****

/***************************************************************************************
*	Função para Exclusão do funcionário na arvore
*	PPL - 20140801
*****/
   Local cQryExcZDA
	Local cRateio		:= Posicione("ZDA",2,cFiliAtu+ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cTipo+cCentro+cItem+cFunAtu+cIndAtu,"ZDA_RATEIO")
	Local nPrcRat		:= Posicione("ZDA",2,cFiliAtu+ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cTipo+cCentro+cItem+cFunAtu+cIndAtu,"ZDA_PRCRAT")
	Local lRateio		:= (!Empty(cRateio) .And. (nPrcRat <> 100))
	lSaveSP := .F.
	cQryExc := " DELETE FROM "+RetSqlName("ZDA")
	cQryExc += " WHERE "//ZDA_FILIAL ='"+xFilial("ZDA")+"' "
	If lRateio
 		cQryExc += " ZDA_RATEIO = '"+cRateio+"' "
	Else
 		cQryExc += " ZDA_CODIGO||ZDA_VERSAO||ZDA_FILIAL||ZDA_CTCUST||ZDA_ITCONT||ZDA_TIPO||ZDA_FUNCIO||ZDA_KEYFUN LIKE '"+AllTrim(oTree:GetCargo())+"%'" 		
	EndIf

	TCSQLExec(cQryExc)

	u_fCriaTree()

	(oTree:cArqTree)->(dbSetOrder(4))
	(oTree:cArqTree)->(dbSeek(ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cFiliAtu+cCentro+cItem+cTipo,.F.))
	oTree:TreeSeek(ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cFiliAtu+cCentro+cItem+cTipo)	
	oTree:Refresh()

	ValTree()

**
Return (.T.)                 
**

Static Function IncFunci() 
***************************************************************************************
*
*
*****

/***************************************************************************************
*	Função para inclusão do funcionário na arvore
*	PPL - 20140801
*****/

   Local cMatFun
   Local cUnOr
   Local cCtRes
   Local cChaveFun
	Local cAliasTree 	:= oTree:cArqTree
	Local cIndMat		:= ""
	Local aDadosZD9	:= {}
	Local nR 
	Local cCodRat
	Local nPrcRat
   Local cDescFun
	aRateio := {}
//	aFunc 	:= U_FINCFUNC(cCentro,cItem) //função com a tela para informar o fúncionario a ser incluido
	aFunc		:=	U_FSPCORAT(cCentro,cItem,@aRateio)
	
	If Len(aFunc)>0
		cMatFun 	:= AllTrim(aFunc[1][1])
		cNomeFun := AllTrim(aFunc[1][2])
	   cUnOr		:= aFunc[1][3]
		If Len(aRateio)>0
			cCodRat := StrZero(fMaxRat(),6)
			For nR := 1 To Len(aRateio)
				aDadosZD9 := {}
				If !aRateio[nR][4] .AND. !Empty(aRateio[nR][1])
					cCtRes	:= aRateio[nR][1]
					nPrcRat	:= aRateio[nR][3]
					cIndMat	:= StrZero(fMaxInd(),4)
					cDescFun := cMatFun+" - "+cNomeFun
				   If !Empty(cMatFun)
			         aADD(aDadosZD9,{cUnOr,cCtRes})
						fIncZD9(aDadosZD9)
						fIncZDA(aFunc,cCtRes,cIndMat,cCodRat,nPrcRat,cFiliAtu)
					EndIf	
				EndIf
			Next nR
		Else
		   cCtRes	:= aFunc[1][4]
//		   cChave	:= cUnOr+cCtRes //chave nova PPL
			cIndMat	:= StrZero(fMaxInd(),4)
			cDescFun := cMatFun+" - "+cNomeFun
		   If !Empty(cMatFun)
	         aADD(aDadosZD9,{cUnOr,cCtRes})
				fIncZD9(aDadosZD9)
				fIncZDA(aFunc,cCtRes,cIndMat,"",0,cFiliAtu)
			EndIf	
		EndIf	
		u_fCriaTree()
		(oTree:cArqTree)->(dbSetOrder(4))
		(oTree:cArqTree)->(dbSeek(ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cFiliAtu+cUnOr+cCtRes+cTipo+cMatFun+cIndMat,.F.))
		oTree:TreeSeek(ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cFiliAtu+cUnOr+cCtRes+cTipo+cMatFun+cIndMat)	
      oTree:Refresh()
      
		ValTree()	      
		
	EndIf
**
Return (.T.)                 
**

Static Function ValTree () //MONTA OS DADOS PARA EXIBICAO DA LINHA DE DETALHES
***************************************************************************************
*
*
*****

If ( lSaveSP ) .AND.  ( (cTipo $ "1|2") .Or. ((cTipo $ "3") .And. !Empty(AllTrim(cFunAtu+cIndAtu)) ) )

	If MsgYesNo(OemToAnsi("Deseja salvar os dados antes de sair?"))
	
		GrvDados()
		
		dDtDemiss := ctod('01/01/2000')
	EndIf
	
EndIf

cFiliAtu		:= SubStr(oTree:GetCargo(),17,8)	// FILIAL
cCentro 		:= SubStr(oTree:GetCargo(),25,20)// C.R
cItem			:= SubStr(oTree:GetCargo(),45,20)// U.O
cTipo	  		:= SubStr(oTree:GetCargo(),65,1)	// TIPO
cFunAtu		:= SubStr(oTree:GetCargo(),66,6)	// FUNCIONARIO
cIndAtu		:= SubStr(oTree:GetCargo(),72,4)	//IND FUNCIONARIO
cTpFiltro 	:= Iif(cTipo == '1','4','3') //Variavel para filtrar consulta padrão AK5ANA para trazer registros inicados em 3 ou 4 despesa ou receita
cFilAnt 		:= cFiliAtu
lSaveSP := .F. // Não perguntar sobre Gravar

If otree:CURRENTNODEID == "0000001"
	
	CabResumo()

ElseIf !Empty(cFiliAtu) .And. Empty(cTipo)

	FilResumo()
	
ElseIf cTipo == cTpReceita .OR. cTipo == cTpDespesa

	ReDResumo()

//	U_AtuZDA('02MT0011', '1301090107', '1530401100101')
	
ElseIf cTipo == cTpFolha  

	FolResumo()	

EndIf

cInfor1:= " "
cInfor2:= " "
cInfor3:= " "
                  
If !Empty(Alltrim(cCentro))
	cInfor1 := "U.O. : "+cCentro + " - " + Posicione("CTT",1,xFilial("CTT")+cCentro,"CTT_DESC01")
EndIf

If !Empty(Alltrim(cItem))
	cInfor2 := "C.R. : "+cItem + " - " + Posicione("ZZX",1,xFilial("ZZX")+cCentro+cItem,"ZZX_DITEM")
EndIf

If !Empty (cTipo) .AND. cTipo <> '3'                      
	
	If !Empty(AllTrim(oIEnc:aCols[1][1]))
		cInfor3 := "C.O. : " +oIEnc:aCols[1][1] + " - " + oIEnc:aCols[1][2]
	EndIf   

Else
	If !Empty(AllTrim(cFunAtu))
		cInfor3 := "Func. : " +AllTrim(cFunAtu)+" - "+ Posicione("ZDA",2,cFiliAtu+ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cTipo+cCentro+cItem+cFunAtu+cIndAtu,"ZDA_DFUNCI")
	EndIf   
EndIf  

cLastNood := otree:GetCargo()

oInfor:Refresh()
//oInfor1:Refresh()
//oInfor2:Refresh()
oInfor3:Refresh()

oIEnc:Refresh() 
oMEnc:Refresh()       
oFEnc:Refresh()
oCEnc:Refresh()
oDEnc:Refresh()
 
**
Return (.T.)
**

Static Function CabResumo()
***************************************************************************************
*
*
*****      

oDEnc:aCols := {}	
	
For nXj := 1 To 3
		
	Aadd(oDEnc:aCols,Array(Len(oDEnc:aHeader)+1))
		
	For nXi := 1 to Len(oDEnc:aHeader)
		
		oDEnc:aCols[nXj,nXi]:=CRIAVAR(oDEnc:aHeader[nXi,2])
	
	Next nXi
	
	oDEnc:aCols[nXj,Len(oDEnc:aHeader)+1]:=.F.
			
Next nXj
	
oDEnc:aCols[1][1] := "Receitas"
oDEnc:aCols[2][1] := "Despesas"
oDEnc:aCols[3][1] := "Folha de Pagamento"
	
cQuery := " SELECT * "
cQuery += " FROM "+RetSqlName("ZDA")+" ZDA "
cQuery += " WHERE ZDA.D_E_L_E_T_ <> '*' "
cQuery += " AND ZDA_CODIGO = '"+ZD8->ZD8_CODIGO+"' "		
cQuery += " AND ZDA_VERSAO = '"+ZD8->ZD8_VERSAO+"' "		
		
If ( Select ( "TZDA" ) != 0 )
	dbSelectArea ( "TZDA" )
	dbCloseArea ( )

	If File ( "TZDA"+GetDBExtension ( ) )

		FErase ( "TZDA"+GetDBExtension ( ) )

	EndIf

EndIf

dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQuery),"TZDA",.F.,.T.)
                                                
DbSelectArea("TZDA")
TZDA->(DbGotop())

nCont := 1
			
While ! Eof ( ) 
		
	If TZDA->ZDA_TIPO == '1' //Receita 

		If aScan(oDEnc:aHeader,{|x| AllTrim(x[1]) == Alltrim ( TZDA->ZDA_PERIOD) }) > 0

			oDEnc:aCols[1][aScan(oDEnc:aHeader,{|x| AllTrim(x[1]) == Alltrim ( TZDA->ZDA_PERIOD) })] += TZDA->ZDA_VALOR
				
		EndIf
				
			
	ElseIf TZDA->ZDA_TIPO == '2' //Despesa 

		If aScan(oDEnc:aHeader,{|x| AllTrim(x[1]) == Alltrim ( TZDA->ZDA_PERIOD) }) > 0

			oDEnc:aCols[2][aScan(oDEnc:aHeader,{|x| AllTrim(x[1]) == Alltrim ( TZDA->ZDA_PERIOD) })] += TZDA->ZDA_VALOR
				
		EndIf
	
	ElseIf TZDA->ZDA_TIPO == '3' //Funcionarios

		If aScan(oDEnc:aHeader,{|x| AllTrim(x[1]) == Alltrim ( TZDA->ZDA_PERIOD) }) > 0

			oDEnc:aCols[3][aScan(oDEnc:aHeader,{|x| AllTrim(x[1]) == Alltrim ( TZDA->ZDA_PERIOD) })] += TZDA->ZDA_VALOR
				
		EndIf
	
	EndIf		
				
	nCont++
		
	DBSelectArea ( "TZDA" )
			
	DBSkip ( )

EndDo
	
If ( Select ( "TZDA" ) != 0 )

	dbSelectArea ( "TZDA" )
	dbCloseArea ( )

	If File ( "TZDA"+GetDBExtension ( ) )

		FErase ( "TZDA"+GetDBExtension ( ) )

	EndIf

EndIf

oIEnc:Hide()
oItens:Show()
oMEnc:Hide()
oFEnc:Hide()
oDEnc:Show()
oCEnc:Show()	
	
**
Return (.T.)
**

Static Function FilResumo()
***************************************************************************************
*
*
*****      

Local cAliasN 		:= GetNextAliass()

Local cQryN

oDEnc:aCols := {}
	
For nXj := 1 To 3
		
	Aadd(oDEnc:aCols,Array(Len(oDEnc:aHeader)+1))
		
	For nXi := 1 to Len(oDEnc:aHeader)
			
		oDEnc:aCols[nXj,nXi]:=CRIAVAR(oDEnc:aHeader[nXi,2])

	Next nXi
	
	oDEnc:aCols[nXj,Len(oDEnc:aHeader)+1]:=.F.
			
Next nXj
	
oDEnc:aCols[1][1] := "Receitas"
oDEnc:aCols[2][1] := "Despesas"
oDEnc:aCols[3][1] := "Folha de Pagamento"			

cQryN := " SELECT SUM(ZDA_VALOR) AS ZDA_VALOR,ZDA_DATA, ZDA_TIPO, ZDA_PERIOD "
cQryN += " FROM ZDA010 ZDA "
cQryN += " WHERE  ZDA.D_E_L_E_T_ <> '*' "
cQryN += " AND ZDA_CODIGO = '"+ZD8->ZD8_CODIGO+"' "
cQryN += " AND ZDA_VERSAO = '"+ZD8->ZD8_VERSAO+"' "
cQryN += " AND ZDA_DATA BETWEEN  '"+dtos(ZD8->ZD8_DTINIC)+"' AND '"+dtos(ZD8->ZD8_DTFINA)+"' "
cQryN += " AND ZDA_FILIAL||ZDA_CTCUST||ZDA_ITCONT LIKE '"+AllTrim(cFiliAtu+cCentro+cItem)+"%' "
cQryN += " GROUP BY ZDA_TIPO,ZDA_DATA,ZDA_PERIOD "
cQryN += " ORDER BY  ZDA_TIPO, ZDA_DATA 	"

dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQryN),cAliasN,.F.,.T.)

DbSelectArea(cAliasN)
(cAliasN)->(DbGotop())

While !(cAliasN)->(EoF())
	
	If  (cAliasN)->ZDA_TIPO == '1' //Receita 
	
		If aScan(oDEnc:aHeader,{|x| AllTrim(x[1]) == Alltrim ( (cAliasN)->ZDA_PERIOD) }) > 0
	
			oDEnc:aCols[1][aScan(oDEnc:aHeader,{|x| AllTrim(x[1]) == Alltrim ( (cAliasN)->ZDA_PERIOD) })] += (cAliasN)->ZDA_VALOR
				
		EndIf
				
			
	ElseIf (cAliasN)->ZDA_TIPO == '2' //Despesa 
	
		If aScan(oDEnc:aHeader,{|x| AllTrim(x[1]) == Alltrim ( (cAliasN)->ZDA_PERIOD) }) > 0
	
			oDEnc:aCols[2][aScan(oDEnc:aHeader,{|x| AllTrim(x[1]) == Alltrim ( (cAliasN)->ZDA_PERIOD) })] += (cAliasN)->ZDA_VALOR
				
		EndIf
	
	ElseIf (cAliasN)->ZDA_TIPO == '3' //Funcionarios
	
		If aScan(oDEnc:aHeader,{|x| AllTrim(x[1]) == Alltrim ( (cAliasN)->ZDA_PERIOD) }) > 0
	
			oDEnc:aCols[3][aScan(oDEnc:aHeader,{|x| AllTrim(x[1]) == Alltrim ( (cAliasN)->ZDA_PERIOD) })] += (cAliasN)->ZDA_VALOR
				
		EndIf
	
	EndIf		
	
	(cAliasN)->(dbSkip())

EndDo

oItens:Show()
oDEnc:Show()
oCEnc:Show()
oIEnc:Hide()
oMEnc:Hide()
oFEnc:Hide()    	

**
Return (.T.)
**          

Static Function ReDResumo()
***************************************************************************************
*
*
*****      

FreeObj(oIEnc)
                         
oIEnc := MsNewGetDados():New(0,0,150,200, GD_INSERT + GD_UPDATE + GD_DELETE,"U_FSPC03()","U_FSPC03()",,,,,,"",,oItens,aHeader1,aCols1)
oIEnc:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
oIEnc:BCHANGE 	   := {|| U_FSPC05() }//alterações
oIEnc:oBrowse:OMOTHER:OBROWSE:BLOSTFOCUS := {|| U_FSPC05() }//saída do obj
oIEnc:OBROWSE:BEDITCOL := {|| U_FSPC07() }
oIEnc:OBROWSE:BDRAWSELECT := {|| U_FSPC07() }
oIEnc:BDELOK := {|| U_FSPC07() }
oIEnc:BSUPERDEL := {|| U_FSPC07() }

oIEnc:aCols := {}

oIEnc:aCols := {Array(Len(oIEnc:aHeader) + 1)}
		
For nxI := 1 to Len(oIEnc:aHeader)

	oIEnc:aCols[1,nxI] := CRIAVAR(oIEnc:aHeader[nxI,2])

Next
		
oIEnc:aCols[1,Len(oIEnc:aHeader)+1] := .F.

oMEnc:aCols := {}

oMEnc:aCols := {Array(Len(oMEnc:aHeader) + 1)}
		
For nxI := 1 to Len(oMEnc:aHeader)

	oMEnc:aCols[Len(oMEnc:aCols),nxI] := CRIAVAR(oMEnc:aHeader[nxI,2])

Next
		
oMEnc:aCols[1,Len(oMEnc:aHeader)+1] := .F.

Aadd(oMEnc:aCols,Array(Len(oMEnc:aHeader)+1))
	
For nXi := 1 to Len(oMEnc:aHeader)
	
	oMEnc:aCols[Len(oMEnc:aCols),nXi]:=CRIAVAR(oMEnc:aHeader[nXi,2])

Next nXi

oMEnc:aCols[Len(oMEnc:aCols),Len(oMEnc:aHeader)+1]:=.F.

DBSelectArea ( "ZD9" )
DBSetOrder(2)
DBSeek(cFiliAtu+ZD8->ZD8_CODIGO + ZD8->ZD8_VERSAO + cTipo + cCentro + cItem)
		
While ! Eof ( ) .AND. ZD9->ZD9_FILIAL + ZD9->ZD9_CODIGO+ZD9->ZD9_VERSAO + ZD9->ZD9_TIPO + ZD9->ZD9_CUSTO + ZD9->ZD9_ITCTB == cFiliAtu + ZD8->ZD8_CODIGO + ZD8->ZD8_VERSAO + cTipo + cCentro + cItem
			
	If Alltrim ( ZD9->ZD9_CONTA)  == '*'
			
		DBSkip()
			
		Loop
			
	EndIf
			
	If Alltrim ( oIEnc:aCols[Len(oIEnc:aCols)][1]) <> ""
				
		Aadd(oIEnc:aCols, Array(Len(oIEnc:aHeader) + 1))
		
	EndIf
			
	For nXi	:= 1 To Len ( oIEnc:aHeader )
		
		If ( oIEnc:aHeader[nXi][10] != "V" )
					
			oIEnc:aCols[Len(oIEnc:aCols)][nXi] := FieldGet(FieldPos(oIEnc:aHeader[nXi][2]))
					
		Else
						
			oIEnc:aCols[Len ( oIEnc:aCols ) ][nXi] := CriaVar ( oIEnc:aHeader[nXi][2] )
						
		EndIf
		      
	Next nXi

	oIEnc:aCols[Len ( oIEnc:aCols ) ][Len ( oIEnc:aHeader ) +1 ] := .F.

	DBSelectArea ( "ZD9" )
	DBSkip ( ) 
		
EndDo
		
aMatrix := {}
		               	
For nXi := 1 To Len (oIEnc:aCols)

	aAdd ( aMatrix, { cCentro, cItem, oIEnc:aCols[nXi][1],aClone(oMEnc:aCols[Len(oMEnc:Acols)])}) 

	DBSelectArea ( "ZDA" )
	DBSetOrder(1)
	DBSeek(cFiliAtu+ZD8->ZD8_CODIGO + ZD8->ZD8_VERSAO + cTipo + cCentro + cItem + oIEnc:aCols[nXi][1])  

	nCont := 1 
			
	While ! Eof ( ) .AND. ZDA->ZDA_FILIAL +ZDA->ZDA_CODIGO+ZDA->ZDA_VERSAO+ZDA->ZDA_TIPO+ZDA->ZDA_CTCUST+ZDA->ZDA_ITCONT + ZDA->ZDA_CONTA == cFiliAtu + ZD8->ZD8_CODIGO + ZD8->ZD8_VERSAO + cTipo + cCentro + cItem + oIEnc:aCols[nXi][1]
				
		aMatrix[nXi][4][nCont]	:= ZDA->ZDA_VALOR 
			
		nCont++				
				
		DBSkip()
			
	EndDo
			
Next nXi		

//PREENCHIMENTO DO ANO ANTERIOR. FAZER INCLUSAO DA AK3 AQUI PIERRE 
aRegAA := {}
If !(oIenc:nAt > Len(oIenc:aCols))
	If !Empty(oIenc:aCols[oIenc:nAt][GDFieldPos("ZD9_CONTA" ,oIEnc:aHeader)])
		aRegAA := fAnoAnt()//Busca Resumo do ano anterior
	EndIf
EndIf
if Len(aRegAA) > 0
	For nAA := 1 To Len(aRegAA)
		nDifMes := DateDiffMonth(aRegAA[nAA][5] , YEARSUB(ZD8->ZD8_DTINIC,1)) +1
		oMEnc:aCols[nAnoAnterior][nDifMes] := aRegAA[nAA][6]
	Next nAA
Else
	For nXi :=1 To Len ( oMEnc:aHeader)
		oMEnc:aCols[nAnoAnterior][nXi] := 0
	Next nXi
EndIf

//PREENCHIMENTO DO ANO ANTERIOR. FAZER INCLUSAO DA AK3 AQUI PIERRE 
		
For nXi :=1 To Len ( oMEnc:aHeader)
		
	oMEnc:aCols[Len(oMEnc:aCols)][nXi] := aMatrix[1][4][nXi]
					
Next nXi
				
oMEnc:aCols[Len ( oMEnc:aCols ) ][Len ( oMEnc:aHeader ) +1 ] := .F.

oIEnc:Show()
oItens:Show()	
oMEnc:Show()         
oFEnc:Hide()
oDEnc:Hide()
oCEnc:Hide()

**
Return (.T.)
**


Static Function FolResumo()
***************************************************************************************
*
*
*****      

Local cAliasSum 	:= GetNextAlias()
Local cQrySum

cNomeFun := SubStr((oTree:cArqTree)->T_PROMPT,10,30)
oFEnc:aCols := {}
oFEnc:aCols := {Array(Len(oFEnc:aHeader) + 1)}

For nxI := 1 to Len(oFEnc:aHeader)

	oFEnc:aCols[1,nxI] := CRIAVAR(oFEnc:aHeader[nxI,2])

Next

oFEnc:aCols[1,Len(oFEnc:aHeader)+1] := .F.

If !Empty((oTree:cArqTree)->T_ISTREE)// não é nó de funcionario deve agrupar pelos dados do nó especIfico
	
		cQrySum := " SELECT SUM(ZDA_VALOR) AS ZDA_VALOR ,ZDA_DATA	,ZDA_CVERBA	,ZDA_DVERBA "
		cQrySum += " FROM "+RetSqlName("ZDA")+" ZDA "
		cQrySum += " WHERE ZDA.D_E_L_E_T_ <> '*' "
		cQrySum += " 	AND ZDA_FILIAL = '"+cFiliAtu+"' "
		cQrySum += " 	AND ZDA_CODIGO = '"+ZD8->ZD8_CODIGO+"' "		
		cQrySum += " 	AND ZDA_VERSAO = '"+ZD8->ZD8_VERSAO+"' "		
		cQrySum += " 	AND ZDA_DATA BETWEEN '"+dtos(ZD8->ZD8_DTINIC)+"' AND '"+dtos(ZD8->ZD8_DTFINA)+"' "
		cQrySum += " 	AND ZDA_CVERBA <> '' "

		If !Empty(AllTrim(cCentro+cItem+cFunAtu+cIndAtu))

			cQrySum += "	AND ZDA_CTCUST||ZDA_ITCONT||ZDA_TIPO||ZDA_FUNCIO||ZDA_KEYFUN LIKE '"+AllTrim(SubStr(oTree:GetCargo(),25,Len(oTree:GetCargo())))+"%'

		EndIf

		cQrySum += " GROUP BY ZDA_DATA, ZDA_CVERBA,ZDA_DVERBA "
		cQrySum += " ORDER BY ZDA_CVERBA,ZDA_DATA	"

		cQrySum := ChangeQuery(cQrySum)		
		dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQrySum),cAliasSum,.F.,.T.)

		DbSelectArea(cAliasSum)
		(cAliasSum)->(DbGotop())
		nCont := 3			

		While !(cAliasSum)->(EoF())
		
			If !empty(oFEnc:aCols[Len(oFEnc:aCols)][GDFieldPos("ZDA_CVERBA",oFEnc:aHeader )]) .And. (oFEnc:aCols[Len(oFEnc:aCols)][GDFieldPos("ZDA_CVERBA",oFEnc:aHeader )] <> (cAliasSum)->ZDA_CVERBA)
				
				nCont := 3				
					
				Aadd(oFEnc:aCols,Array(Len(oFEnc:aHeader)+1))				
				
				For nXi := 1 to Len(oFEnc:aHeader)					
				
					oFEnc:aCols[Len(oFEnc:aCols),nXi]:=CRIAVAR(oFEnc:aHeader[nXi,2])				
					
				Next nXi				
				
				oFEnc:aCols[Len(oFEnc:aCols),Len(oFEnc:aHeader)+1]:=.F.
	
				oFEnc:aCols[Len(oFEnc:aCols)][GDFieldPos("ZDA_CVERBA",oFEnc:aHeader )]	:= (cAliasSum)->ZDA_CVERBA
				oFEnc:aCols[Len(oFEnc:aCols)][GDFieldPos("ZDA_DVERBA",oFEnc:aHeader )]	:= (cAliasSum)->ZDA_DVERBA	
					
				If ( oFEnc:aHeader[nCont][10] != "V" )						
				
					oFEnc:aCols[Len(oFEnc:aCols)][nCont]	:= (cAliasSum)->ZDA_VALOR							
				
				Else				
				
					oFEnc:aCols[Len(oFEnc:aCols)][nCont] := CriaVar ( oFEnc:aHeader[nCont][2] )
				
				EndIf			
				
				oFEnc:aCols[Len ( oFEnc:aCols ) ][Len ( oFEnc:aHeader ) +1 ] := .F.		
				nCont++	
											
			ElseIf empty(oFEnc:aCols[Len(oFEnc:aCols)][GDFieldPos("ZDA_CVERBA",oFEnc:aHeader )]) 
			
				oFEnc:aCols[Len(oFEnc:aCols)][GDFieldPos("ZDA_CVERBA",oFEnc:aHeader )]	:= (cAliasSum)->ZDA_CVERBA
				oFEnc:aCols[Len(oFEnc:aCols)][GDFieldPos("ZDA_DVERBA",oFEnc:aHeader )]	:= (cAliasSum)->ZDA_DVERBA	
					
				If ( oFEnc:aHeader[nCont][10] != "V" )	
				
					oFEnc:aCols[Len(oFEnc:aCols)][nCont]	:= (cAliasSum)->ZDA_VALOR							
				
				Else				
					oFEnc:aCols[Len(oFEnc:aCols)][nCont] := CriaVar ( oFEnc:aHeader[nCont][2] )
				
				EndIf			
				
				oFEnc:aCols[Len ( oFEnc:aCols ) ][Len ( oFEnc:aHeader ) +1 ] := .F.		
				nCont++							
				
			Else					
				
				If ( oFEnc:aHeader[nCont][10] != "V" )						
				
					oFEnc:aCols[Len(oFEnc:aCols)][nCont]	:= (cAliasSum)->ZDA_VALOR							
				
				Else				
				
					oFEnc:aCols[Len(oFEnc:aCols)][nCont] := CriaVar ( oFEnc:aHeader[nCont][2] )
				
				EndIf			
				
				oFEnc:aCols[Len ( oFEnc:aCols ) ][Len ( oFEnc:aHeader ) +1 ] := .F.		
				nCont++					
			
			EndIf		
		
			(cAliasSum)->(dbSkip())
		
		EndDo
	
		dbCloseArea(cAliasSum)
	
	Else //se for nó de funcionário busca direto do banco
	
		DBSelectArea ( "ZDA" )
	
		ZDA->(DBGOTOP())		
		ZDA->(DBSetOrder(RetOrder("ZDA","ZDA_FILIAL+ZDA_CODIGO+ZDA_VERSAO+ZDA_TIPO+ZDA_CTCUST+ZDA_ITCONT+ZDA_FUNCIO+ZDA_KEYFUN+ZDA_CVERBA")))
	
		If ZDA->(DBSeek(cFiliAtu+ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cTipo+cCentro+cItem+cFunAtu+cIndAtu)	)
	
			nCont := 3				
	
			While ! Eof ( ) .AND. (ZDA->ZDA_CODIGO+ZDA->ZDA_VERSAO+Alltrim (ZDA->ZDA_FILIAL)+ZDA->ZDA_CTCUST+ZDA->ZDA_ITCONT+ZDA->ZDA_TIPO+ZDA->ZDA_FUNCIO+ZDA->ZDA_KEYFUN) == AllTrim(otree:GetCargo())
	
				If !empty(oFEnc:aCols[Len(oFEnc:aCols)][GDFieldPos("ZDA_CVERBA",oFEnc:aHeader )]) .And. (oFEnc:aCols[Len(oFEnc:aCols)][GDFieldPos("ZDA_CVERBA",oFEnc:aHeader )] <> ZDA->ZDA_CVERBA)
	
					nCont := 3
	
					If ZDA->ZDA_TIPO == cTipo					
						
						Aadd(oFEnc:aCols,Array(Len(oFEnc:aHeader)+1))				
	
						For nXi := 1 to Len(oFEnc:aHeader)					
	
							oFEnc:aCols[Len(oFEnc:aCols),nXi]:=CRIAVAR(oFEnc:aHeader[nXi,2])				
	
						Next nXi				
	
						oFEnc:aCols[Len(oFEnc:aCols),Len(oFEnc:aHeader)+1]:=.F.
		
						oFEnc:aCols[Len(oFEnc:aCols)][GDFieldPos("ZDA_CVERBA",oFEnc:aHeader )]	:= ZDA->ZDA_CVERBA
						oFEnc:aCols[Len(oFEnc:aCols)][GDFieldPos("ZDA_DVERBA",oFEnc:aHeader )]	:= ZDA->ZDA_DVERBA	
						
						If ( oFEnc:aHeader[nCont][10] != "V" )						
	
							oFEnc:aCols[Len(oFEnc:aCols)][nCont]	:= ZDA->ZDA_VALOR							
	
						Else				
	
							oFEnc:aCols[Len(oFEnc:aCols)][nCont] := CriaVar ( oFEnc:aHeader[nCont][2] )
	
						EndIf			
	
						oFEnc:aCols[Len ( oFEnc:aCols ) ][Len ( oFEnc:aHeader ) +1 ] := .F.		
						nCont++	
	
					EndIf
											
				ElseIf empty(oFEnc:aCols[Len(oFEnc:aCols)][GDFieldPos("ZDA_CVERBA",oFEnc:aHeader )]) 
	
					If ZDA->ZDA_TIPO == cTipo					
	
						oFEnc:aCols[Len(oFEnc:aCols)][GDFieldPos("ZDA_CVERBA",oFEnc:aHeader )]	:= ZDA->ZDA_CVERBA
						oFEnc:aCols[Len(oFEnc:aCols)][GDFieldPos("ZDA_DVERBA",oFEnc:aHeader )]	:= ZDA->ZDA_DVERBA	
						
						If ( oFEnc:aHeader[nCont][10] != "V" )						
	
							oFEnc:aCols[Len(oFEnc:aCols)][nCont]	:= ZDA->ZDA_VALOR							
	
						Else				
	
							oFEnc:aCols[Len(oFEnc:aCols)][nCont] := CriaVar ( oFEnc:aHeader[nCont][2] )
	
						EndIf			
	
						oFEnc:aCols[Len ( oFEnc:aCols ) ][Len ( oFEnc:aHeader ) +1 ] := .F.		
						nCont++							
	
					EndIf
	
				Else
	
					If ZDA->ZDA_TIPO == cTipo					
	
						If ( oFEnc:aHeader[nCont][10] != "V" )						
	
							oFEnc:aCols[Len(oFEnc:aCols)][nCont]	:= ZDA->ZDA_VALOR							
	
						Else				
	
							oFEnc:aCols[Len(oFEnc:aCols)][nCont] := CriaVar ( oFEnc:aHeader[nCont][2] )
	
						EndIf			
	
						oFEnc:aCols[Len ( oFEnc:aCols ) ][Len ( oFEnc:aHeader ) +1 ] := .F.		
						nCont++					
	
					EndIf
	
				EndIf			
	
				DBSelectArea("ZDA")
		
				ZDA->(DBSkip())				
	
			EndDo             
	
		EndIf
	
EndIf   

oIEnc:Hide()
oItens:Show ()	
oMEnc:Hide()
oFEnc:Show() 
oDEnc:Hide()
oCEnc:Show()

**
Return (.T.)
**


Static Function MontDados (aHeader,aCols,cAlias,cchave,cTpMont) //MONTA OS DADOS PARA EXIBICAO DA LINHA DE DETALHES    //ppl inclusão parametro cTpMont
***************************************************************************************
*
*
*****      

Local nQtde := 0

Local dDataTx 

dbSelectArea ( "SX3" )
dbGoTop ( )
dbSelectArea ( "SX3" )
dbSetOrder ( 1 )

If ZD8->ZD8_DTINIC < ZD8->ZD8_DTFINA 

	nqtde := DateDiffMount(ZD8->ZD8_DTINIC, ZD8->ZD8_DTFINA )
	
	nQtde := nQtde + 1
	
	dDataTx := ZD8->ZD8_DTINIC
	
EndIf

MsSeek ( cAlias )

nUsado:= 0
	
Do While ( !SX3-> ( Eof ( ) ) .And. ( SX3->X3_Arquivo == cAlias ) )

	If (cTpMont == '1')	.OR. (cTpMont == '2')	
		If ALLTRIM ( SX3->X3_CAMPO) $ ("ZD9_FILIAL/ZD9_CODIGO/ZD9_VERSAO/ZD9_TIPO/ZD9_CUSTO/ZD9_DCUSTO/ZD9_ITCTB/ZD9_DITCTB/ZD9_FUNCIO/ZD9_DFUNCI/ZD9_KEYFUN/ZDA_FILIAL/ZDA_CODIGO/ZDA_VERSAO/ZDA_TIPO/ZDA_CTCUST/ZDA_ITCONT/ZDA_CONTA/ZDA_FUNCIO/ZDA_CVERBA/ZDA_DVERBA/ZDA_DFUNCI/ZDA_PERIOD/ZDA_DATA/ZDA_KEYFUN/ZDA_PRVDEM/ZDA_RATEIO/ZDA_PRCRAT")
			SX3-> ( dbSkip ( ) )
			loop
		EndIf
	ElseIf (cTpMont == '3')
		If ALLTRIM ( SX3->X3_CAMPO) $ ("ZD9_FILIAL/ZD9_CODIGO/ZD9_TIPO/ZD9_VERSAO/ZDA_FILIAL/ZDA_CODIGO/ZDA_VERSAO/ZDA_TIPO/ZDA_PERIOD/ZDA_DATA/ZDA_CONTA/ZDA_DCONTA/ZDA_FUNCIOZDA->ZDA_CONTA/ZDA_CTCUST/ZDA_ITCONT/ZDA_DFUNCI/ZDA_KEYFUN/ZDA_PRVDEM/ZDA_RATEIO/ZDA_PRCRAT")
			SX3-> ( dbSkip ( ) )
			loop		
		EndIf
	ElseIf (cTpMont == '4')
		If ALLTRIM ( SX3->X3_CAMPO) $ ("ZD9_FILIAL/ZD9_CODIGO/ZD9_TIPO/ZD9_VERSAO/ZDA_FILIAL/ZDA_CODIGO/ZDA_VERSAO/ZDA_TIPO/ZDA_PERIOD/ZDA_DATA/ZDA_CONTA/ZDA_FUCIOZDA->ZDA_CONTA/ZDA_CTCUST/ZDA_ITCONT/ZDA_DFUNCI/ZDA_KEYFUN/ZDA_CVERBA/ZDA_FUNCIO/ZDA_PRVDEM/ZDA_RATEIO/ZDA_PRCRAT")
			SX3-> ( dbSkip ( ) )
			loop		
		EndIf
	EndIf	
    
    If cAlias == "ZDA" .AND. Alltrim ( SX3->X3_CAMPO ) == "ZDA_VALOR"
    
    	FOR nXi := 1 to nQtde
        
    		If ( X3Uso ( SX3->X3_Usado ) ) .And. ( SX3->X3_Nivel <= cNivel )
			 	Aadd ( aHeader,{AllTrim ( Mesextenso(Val(SubStr(DtoC(dDataTX),4,2))) + " / " + SubStr(DtoC(dDataTX),7,4)),;
								AllTrim (SX3->X3_CAMPO ),;
								SX3->X3_PICTURE,;
								SX3->X3_TAMANHO,;
								SX3->X3_DECIMAL,;
								SX3->X3_VALID,;
								SX3->X3_USADO,;
								SX3->X3_TIPO,;
								SX3->X3_F3,;
								SX3->X3_ARQUIVO,;
								SX3->X3_CONTEXT } )
			EndIf
			
        dDataTx := MonthSum( dDataTx,1)        
        
        Next nXi
        
   	ElseIf (cTpMont == '4') .AND. Alltrim ( SX3->X3_CAMPO ) == "ZDA_DVERBA"

	    		If ( X3Uso ( SX3->X3_Usado ) ) .And. ( SX3->X3_Nivel <= cNivel )
				 	Aadd ( aHeader,{AllTrim ( "Tipo de Ocorrencia"),;
										AllTrim (SX3->X3_CAMPO ),;
										SX3->X3_PICTURE,;
										SX3->X3_TAMANHO,;
					 					SX3->X3_DECIMAL,;
										SX3->X3_VALID,;
										SX3->X3_USADO,;
										SX3->X3_TIPO,; 
										SX3->X3_ARQUIVO,;
										SX3->X3_CONTEXT } )
				EndIf
   	
   	
	
		Else
		
			If ( X3Uso ( SX3->X3_Usado ) ) .And. ( SX3->X3_Nivel <= cNivel )
				Aadd ( aHeader,{SX3->X3_TITULO,;
								SX3->X3_CAMPO ,;
								SX3->X3_PICTURE,;
								SX3->X3_TAMANHO,;
								SX3->X3_DECIMAL,;	
								Iif(cTpMont=='3'.And. AllTrim(SX3->X3_CAMPO) =='ZDA_CVERBA',"U_FSPC09('1')",IIF(cTpMont $ ("1|2").And. AllTrim(SX3->X3_CAMPO) =='ZD9_CONTA',"U_FSPC10()",SX3->X3_VALID)),;
								SX3->X3_USADO,;
								SX3->X3_TIPO,;
								Iif(AllTrim(SX3->X3_CAMPO) =='ZD9_CONTA' .And. cTpMont $ ("1|2"),'AK5ANA',SX3->X3_F3),;
								SX3->X3_CONTEXT,;
								SX3->X3_CBOX,;
								SX3->X3_RELACAO,;
								SX3->X3_WHEN,;
								SX3->X3_VISUAL,;
								SX3->X3_VLDUSER,;
								SX3->X3_PICTVAR})
//								SX3->X3_F3 } )
			EndIf
	EndIf

	SX3-> ( dbSkip ( ) )
		
EndDo

If cTpMont <> '4' 

	Aadd(aCols,Array(Len(aHeader)+1))
	
	For nXi := 1 to Len(aHeader)
	
		aCols[1,nXi]:=CRIAVAR(aHeader[nXi,2])

	Next nXi

	aCols[Len(aCols),Len(aHeader)+1]:=.F.
	
Else

	For nXj := 1 To 3
	
		Aadd(aCols,Array(Len(aHeader)+1))

		For nXi := 1 to Len(aHeader)
	
			aCols[nXj,nXi]:=CRIAVAR(aHeader[nXi,2])

		Next nXi

		aCols[nXj,Len(aHeader)+1]:=.F.
		
	Next nXj
	
//MONTAGEM aCols DE DETALHES - ESTATICO 

	aCols[1][1] := "Receitas"
	aCols[2][1] := "Despesas"
	aCols[3][1] := "Folha de Pagamento"

	cQuery := " SELECT * "
	cQuery += " FROM "+RetSqlName("ZDA")+" ZDA "
	cQuery += " WHERE ZDA.D_E_L_E_T_ <> '*' "
	cQuery += " AND ZDA_CODIGO = '"+ZD8->ZD8_CODIGO+"' "		
	cQuery += " AND ZDA_VERSAO = '"+ZD8->ZD8_VERSAO+"' "		
		
	If ( Select ( "TZDA" ) != 0 )
		dbSelectArea ( "TZDA" )
		dbCloseArea ( )
		If File ( "TZDA"+GetDBExtension ( ) )
			FErase ( "TZDA"+GetDBExtension ( ) )
		EndIf
	EndIf

	dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQuery),"TZDA",.F.,.T.)
                                                
	DbSelectArea("TZDA")
	TZDA->(DbGotop())

	nCont := 1
			
	While ! Eof ( ) 
		
		If TZDA->ZDA_TIPO == '1' //Receita 

			If aScan(aHeader,{|x| AllTrim(x[1]) == Alltrim ( TZDA->ZDA_PERIOD) }) > 0

				aCols[1][aScan(aHeader,{|x| AllTrim(x[1]) == Alltrim ( TZDA->ZDA_PERIOD) })] += TZDA->ZDA_VALOR
				
			EndIf
				
			
		ElseIf TZDA->ZDA_TIPO == '2' //Despesa 

			If aScan(aHeader,{|x| AllTrim(x[1]) == Alltrim ( TZDA->ZDA_PERIOD) }) > 0

				aCols[2][aScan(aHeader,{|x| AllTrim(x[1]) == Alltrim ( TZDA->ZDA_PERIOD) })] += TZDA->ZDA_VALOR
				
			EndIf
	
		ElseIf TZDA->ZDA_TIPO == '3' //Funcionarios

			If aScan(aHeader,{|x| AllTrim(x[1]) == Alltrim ( TZDA->ZDA_PERIOD) }) > 0

				aCols[3][aScan(aHeader,{|x| AllTrim(x[1]) == Alltrim ( TZDA->ZDA_PERIOD) })] += TZDA->ZDA_VALOR
				
			EndIf
	
		EndIf		
				
		nCont++
		
		DBSelectArea ( "TZDA" )
			
		DBSkip ( )

	EndDo
	
	If ( Select ( "TZDA" ) != 0 )
		dbSelectArea ( "TZDA" )
		dbCloseArea ( )
		If File ( "TZDA"+GetDBExtension ( ) )
			FErase ( "TZDA"+GetDBExtension ( ) )
		EndIf
	EndIf

//MONTAGEM aCols DE DETALHES - ESTATICO 

EndIf

//MONTAGEM aCols DE DETALHE - LINHA ESTATICA 

If cTpMont == '2' 

	Aadd(aCols,Array(Len(aHeader)+1))
	
	For nXi := 1 to Len(aHeader)
	
		aCols[1,nXi]:=CRIAVAR(aHeader[nXi,2])

	Next nXi

	aCols[Len(aCols),Len(aHeader)+1]:=.F.
	
EndIf

//MONTAGEM aCols DE DETALHE - LINHA ESTATICA 



**
Return ( .T. )
**                                             
 
//----------------------------------------
// Função auxiliar para inserção de item
//----------------------------------------
Static Function TreeNewIt()
***************************************************************************************
*
*
*****

  // Cria novo item na Tree
  oTree:AddTreeItem("Novo Item","FOLDER7",,"000006")
  If oTree:TreeSeek("000006") 
  
    oTree:AddItem("Sub-nivel 01","000007", "FOLDER6",,,,2)	
    oTree:AddItem("Sub-nivel 02","000008", "FOLDER6",,,,2)	
  
  endIf
  
**
Return ( .T. )
**

User Function FSPC02 ( cCodigo)
***************************************************************************************
*
*
*****     

If ! INCLUI 
	
	**
	Return ( .T. )
	**
	
EndIf

DBSelectArea("ZD8")
DBSetOrder(1) 
DBGoTop() 

While !EOF()

	If Alltrim ( ZD8->ZD8_CODIGO ) == Alltrim ( cCodigo )
	
		MsgBox(OemToAnsi("Este código de planejamento orçamentário já foi utilizado!!!"),OemtoAnsi("Erro!!!"),"STOP")
		
		**
		Return ( .F. )
		**
		
	EndIf
    DBSkip()
    
EndDo

**
Return ( .T. )
**

User Function FSPC03 ( )
***************************************************************************************
*
*
*****  

For nXi := 1 to Len (oIEnc:aCols)
	
	For nXj := 1 to Len (oIEnc:aCols)
	
		If oIEnc:aCols[nXi][1] == oIEnc:aCols[nXj][1] .AND. nXi <> nXj .AND. oIEnc:aCols[nXi,Len(oIEnc:aHeader)+1] == .F. .AND. oIEnc:aCols[nXj,Len(oIEnc:aHeader)+1] == .F.

			MsgBox ( OemToAnsi ( "Conta Orçamentária / Centro de Custo / Item Contabil já associado!") ,OemtoAnsi ( "Aviso!!!" ) ,"STOP" )		    
	
			**
			Return ( .F. )
			**
		
		EndIf
	
	Next nXj
	
Next nXi
			
DBSelectArea ( "AK5" ) 
DBSetOrder ( 1 )
If ! DBSeek ( xFilial ( "AK5" ) + oIEnc:aCols[n][GDFieldPos("ZD9_CONTA",oIEnc:aHeader ) ])

		MsgBox ( OemToAnsi ( "Conta Orçamentária Inválida!") ,OemtoAnsi ( "Aviso!!!" ) ,"STOP" )		    
		
		**
		Return ( .F. )
		**

Else
	
	If AK5->AK5_TIPO == '1'
		
			MsgBox ( OemToAnsi ( "Tipo da Conta Orçamentária Inválido") ,OemtoAnsi ( "Aviso!!!" ) ,"STOP" )		    
			
			**
			Return ( .F. )
			**

	EndIf
	
EndIf	
			
If Alltrim ( oIEnc:aCols[n][GDFieldPos("ZD9_CONTA",oIEnc:aHeader ) ] ) == ""
	
		MsgBox ( OemToAnsi ( "Preencher a Conta Orçamentária!") ,OemtoAnsi ( "Aviso!!!" ) ,"STOP" )		    
	
		**
		Return ( .F. )
		**

EndIf 
    
**
Return ( .T. )
**

User Function FSPC04 ( )
***************************************************************************************
*
*
***** 

Local	lIgual := .T.

/* TESTES 
aEdit := {" "}
oMEnc:LCANEDITLINE := .F.	
oMEnc:LEDITLINE := .F.  	
oMEnc:LMODIFIED := .F.  	
oMEnc:AALTER := aClone (aBranco)
oMEnc:AEDIT := aClone (aBranco)	
oMEnc:SetEditLine ( [ .F.] )
oMEnc:SetEditLine ( .F. )	
oMEnc:lCanEditLine := .F.
oMEnc:LMODIFIED := .F.
oMEnc:LUPDATE  := .F.
*/

For nXi := 1 To Len ( oMEnc:aHeader )

	If aMatrix[oIEnc:NAT][4][nXi] <>  oMEnc:aCols[ Len ( oMEnc:aCols) ] [nXI]
		
		nXi := Len ( oMEnc:aHeader )
		
		lIgual := .F.
	
	EndIf
	
Next nXi
	
If ! lIgual
		
	lSaveSp := .T.

	aMatrix[oIEnc:NAT][4] := aClone(oMEnc:aCols[ Len ( oMEnc:aCols) ])
	
EndIf
	
**
Return ( .T. )
**

User Function FSPC05 ( )
***************************************************************************************
*
*
*****
Local lRet := .F.
oMEnc:aCols := {}

oMEnc:aCols := {Array(Len(oMEnc:aHeader) + 1)}
	
For nxI := 1 to Len(oMEnc:aHeader)

	oMEnc:aCols[1,nxI] := CRIAVAR(oMEnc:aHeader[nxI,2])

Next
	
oMEnc:aCols[1,Len(oMEnc:aHeader)+1] := .F.

Aadd(oMEnc:aCols,Array(Len(oMEnc:aHeader)+1))
	
For nXi := 1 to Len(oMEnc:aHeader)
	
	oMEnc:aCols[Len(oMEnc:aCols),nXi]:=CRIAVAR(oMEnc:aHeader[nXi,2])

Next nXi

oMEnc:aCols[Len(oMEnc:aCols),Len(oMEnc:aHeader)+1]:=.F.

nCont := 0

While ( Len ( aMatrix) < Len ( oIEnc:aCols ) )

	aAdd ( aMatrix, { cCentro, cItem, oIEnc:aCols[1][1],aClone(oMEnc:aCols[ Len (oMEnc:aCols ) ])}) 
	
	nCont++
  
EndDo 

For nXi := 1 To Len ( oIEnc:aCols )

	aMatrix[nXi][3] := oIEnc:aCols[nXi][1]
	
Next 

If Len(aMatrix) > 0

	For nXi := 1 To Len (aMatrix[oIEnc:NAT][4])
		
		oMEnc:aCols[ Len ( oMEnc:aCols ) ,nXi] := aMatrix[oIEnc:NAT][4] [nXi]
		
	Next nXi

EndIf               

//PREENCHIMENTO DO ANO ANTERIOR. FAZER INCLUSAO DA AK3 AQUI PIERRE 
aRegAA := {}
If !Empty(oIenc:aCols[oIenc:nAt][GDFieldPos("ZD9_CONTA" ,oIEnc:aHeader)])
	aRegAA := fAnoAnt()//Busca Resumo do ano anterior
EndIf
if Len(aRegAA) > 0
	For nAA := 1 To Len(aRegAA)		
		nDifMes := DateDiffMonth(aRegAA[nAA][5] , YEARSUB(ZD8->ZD8_DTINIC,1)) +1
		oMEnc:aCols[nAnoAnterior][nDifMes] := aRegAA[nAA][6]
	Next nAA				
Else
	For nXi :=1 To Len ( oMEnc:aHeader)
		oMEnc:aCols[nAnoAnterior][nXi] := 0
	Next nXi 
EndIf
//PREENCHIMENTO DO ANO ANTERIOR. FAZER INCLUSAO DA AK3 AQUI PIERRE 

cInfor1 := " "
cInfor2 := " "
cInfor3 := " "
          
If !Empty(Alltrim(cCentro))
	cInfor1 := "U.O. : "+cCentro + " - " + Posicione("CTT",1,xFilial("CTT")+cCentro,"CTT_DESC01")
EndIf

If !Empty(Alltrim(cItem))
		cInfor2 := "C.R. : "+cItem + " - " + Posicione("ZZX",1,xFilial("ZZX")+cCentro+cItem,"ZZX_DITEM")
EndIf

If !Empty (cTipo) .AND. Len (oIEnc:aCols) > 0 .AND. AllTrim(oIEnc:aCols[1][1]) <> ''

	If  !Empty(AllTrim(oIEnc:aCols[ oIEnc:NAT ][1]))
		cInfor3 := "C.O. : " + oIEnc:aCols[ oIEnc:NAT ][1] + " - " + oIEnc:aCols[ oIEnc:NAT ][2]
	EndIf

EndIf

oInfor:Refresh()

//oInfor1:Refresh()
//oInfor2:Refresh()
oInfor3:Refresh()

oIEnc:Refresh() 
oMEnc:Refresh()       

**
Return ( lRet )
**

Static Function fIncZDA(aFunc,cCtRes,cIndMat,cCodRat,nPrcRat,cFilPar)
***************************************************************************************
*
*
*****


	Local aAreaInc	:= GetArea()

	dbSelectArea("ZDA")
	ZDA->(Reclock("ZDA",.T.))
		ZDA->ZDA_FILIAL 	:= cFilPar
		ZDA->ZDA_FUNCIO 	:= AllTrim(aFunc[1][1])
		ZDA->ZDA_CODIGO 	:= ZD8->ZD8_CODIGO
		ZDA->ZDA_VERSAO	:= ZD8->ZD8_VERSAO
		ZDA->ZDA_TIPO		:= '3' 
		ZDA->ZDA_VALOR		:= 0
		ZDA->ZDA_DATA		:=	LastDate(ZD8->ZD8_DTINIC)
   	ZDA->ZDA_CTCUST	:= AllTrim(aFunc[1][3])
   	ZDA->ZDA_ITCONT	:= AllTrim(cCtRes)
   	ZDA->ZDA_DFUNCI	:= AllTrim(aFunc[1][2])
   	ZDA->ZDA_KEYFUN	:= cIndMat
   	ZDA->ZDA_RATEIO	:= cCodRat
   	ZDA->ZDA_PRCRAT	:= nPrcRat
	MsUnlock()
	
	RestArea(aAreaInc)
	
**
Return( .T. )
**

Static Function fIncZD9(aDados)
***************************************************************************************
*
*
*****
 
	Local aAreaInc	:= GetArea()

	dbSelectArea("ZD9")
	ZD9->(dbSetOrder(RetOrder("ZD9","ZD9_CODIGO+ZD9_VERSAO+ZD9_TIPO+ZD9_CUSTO+ZD9_ITCTB")))
	If !ZD9->(dbSeek(cFiliAtu+ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cTpReceita+aDados[1][1]+aDados[1][2]))
		ZD9->(Reclock("ZD9",.T.))
			ZD9->ZD9_FILIAL 	:= cFiliAtu
			ZD9->ZD9_CODIGO 	:= ZD8->ZD8_CODIGO
			ZD9->ZD9_VERSAO	:= ZD8->ZD8_VERSAO
			ZD9->ZD9_TIPO		:= cTpReceita
	   	ZD9->ZD9_CONTA		:= '*'
	   	ZD9->ZD9_CUSTO		:= AllTrim(aDados[1][1])
	   	ZD9->ZD9_ITCTB		:= AllTrim(aDados[1][2])
			ZD9->ZD9_DCUSTO 	:= AllTrim(Posicione("CTT",1,xFilial("CTT")+aDados[1][1],"CTT_DESC01"))
			ZD9->ZD9_DITCTB 	:= AllTrim( Posicione("ZZX",1,xFilial("ZZX")+aDados[1][1]+aDados[1][2],"ZZX_DITEM"))
	   	
		MsUnlock()
	EndIf
	dbSelectArea("ZD9")
	ZD9->(dbSetOrder(RetOrder("ZD9","ZD9_CODIGO+ZD9_VERSAO+ZD9_TIPO+ZD9_CUSTO+ZD9_ITCTB")))
	If !ZD9->(dbSeek(cFiliAtu+ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cTpDespesa+aDados[1][1]+aDados[1][2]))
		ZD9->(Reclock("ZD9",.T.))
			ZD9->ZD9_FILIAL 	:= cFiliAtu
			ZD9->ZD9_CODIGO 	:= ZD8->ZD8_CODIGO
			ZD9->ZD9_VERSAO	:= ZD8->ZD8_VERSAO
			ZD9->ZD9_TIPO		:= cTpDespesa
	   	ZD9->ZD9_CONTA		:= '*'
	   	ZD9->ZD9_CUSTO		:= AllTrim(aDados[1][1])
	   	ZD9->ZD9_ITCTB		:= AllTrim(aDados[1][2])
			ZD9->ZD9_DCUSTO 	:= AllTrim(Posicione("CTT",1,xFilial("CTT")+aDados[1][1],"CTT_DESC01"))
			ZD9->ZD9_DITCTB 	:= AllTrim(Posicione("ZZX",1,xFilial("ZZX")+aDados[1][1]+aDados[1][2],"ZZX_DITEM"))	   	
		MsUnlock()
	ENDIF

	dbSelectArea("ZD9")
	ZD9->(dbSetOrder(RetOrder("ZD9","ZD9_CODIGO+ZD9_VERSAO+ZD9_TIPO+ZD9_CUSTO+ZD9_ITCTB")))
	If !ZD9->(dbSeek(cFiliAtu+ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cTpFolha+aDados[1][1]+aDados[1][2]))
		ZD9->(Reclock("ZD9",.T.))
			ZD9->ZD9_FILIAL 	:= cFiliAtu
			ZD9->ZD9_CODIGO 	:= ZD8->ZD8_CODIGO
			ZD9->ZD9_VERSAO	:= ZD8->ZD8_VERSAO
			ZD9->ZD9_TIPO		:= cTpFolha
	   	ZD9->ZD9_CONTA		:= ""
	   	ZD9->ZD9_CUSTO		:= AllTrim(aDados[1][1])
	   	ZD9->ZD9_ITCTB		:= AllTrim(aDados[1][2])
			ZD9->ZD9_DCUSTO 	:= AllTrim(Posicione("CTT",1,xFilial("CTT")+aDados[1][1],"CTT_DESC01"))
			ZD9->ZD9_DITCTB 	:= AllTrim(Posicione("ZZX",1,xFilial("ZZX")+aDados[1][1]+aDados[1][2],"ZZX_DITEM"))	   	
		MsUnlock()	
	ENDIF		
	RestArea(aAreaInc)
	
**
Return(.T.)
**

Static Function fIncFtree(cCodVerFil,cFilAdd)
***************************************************************************************
*
*
*****

	Local cAliasTree 	:= oTree:cArqTree
	Local cDescCC 		:=	""
	Local cDescIC		:=	""
	Local cMatNome		:= ""
	Local cAliasCT		:= GetNextAlias()
	Local cAliasIT		
	Local cAliasTP
	Local cAliasFunc	
	Local cQry			:= ""
	Local cQry2			:= ""
	Local cQry3			:= ""
	Local cQry4			:= ""	
	Local cChaveTree	:= ""
		
	cQry := "SELECT DISTINCT(ZD9_CUSTO) AS ZD9_CUSTO, ZD9_DCUSTO" //, ZD9_TIPO "
	cQry += " FROM "+RetSqlName("ZD9")+" ZD9  "
	cQry += " INNER JOIN "+RetSqlName("ZZY")+" ZZY "
	cQry += " 	ON ZZY.D_E_L_E_T_ <> '*' "
	cQry += " 	AND ZD9_CUSTO = ZZY_CUSTO "
	cQry += " 	AND ZD9_FILIAL = ZZY_FILAUX "
	cQry += " 	AND ZZY_CODUSR = '"+__CUSERID+"' "
	cQry += " WHERE ZD9.D_E_L_E_T_ <> '*' "
	cQry += "	AND ZD9_FILIAL = '"+cFilAdd+"' "
	cQry += "	AND ZD9_CODIGO = "+ZD8->ZD8_CODIGO+" "
	cQry += "	AND ZD9_VERSAO = "+ZD8->ZD8_VERSAO+" "
//	cQry += "	AND ZD9_TIPO = '3' "
	cQry += "	GROUP BY ZD9_CUSTO, ZD9_DCUSTO "
	cQry += "	ORDER BY ZD9_CUSTO "


	dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQry),cAliasCT,.F.,.T.)

	While !(cAliasCT)->(EoF())//percorrer todo o centro de custo 

		cChaveTree := cCodVerFil + (cAliasCT)->ZD9_CUSTO

		cAliasIT := GetNextAlias()
		cDescCC	:=	"U.O - "+AllTrim((cAliasCT)->ZD9_CUSTO)+" - "+AllTrim((cAliasCT)->ZD9_DCUSTO)	


		// INCLUI ARVORE DE CENTRO DE CUSTO + ITEM CONTABIL			

		(cAliasTree)->(dbSetOrder(4))
		(cAliasTree)->(dbSeek(cCodVerFil,.F.))
		oTree:TreeSeek(cCodVerFil)

		oTree:AddTree( cDescCC, .F., "bmpcpo", , , , cChaveTree )//arvore centro de custo

		(cAliasTree)->(dbSetOrder(4))
		(cAliasTree)->(dbSeek(cChaveTree,.F.))

        //Selecionar todos os Itens contabeis dentro do centro de custo e percorre-lo
		cQry2 := "SELECT DISTINCT(ZD9_ITCTB)  AS ZD9_ITCTB, ZD9_DITCTB "
		cQry2 += " FROM "+RetSqlName("ZD9")+" ZD9 "
		cQry2 += " WHERE ZD9.D_E_L_E_T_ <> '*' "
		cQry2 += "	AND ZD9_FILIAL = '"+cFilAdd+"' "			
		cQry2 += "	AND ZD9_CUSTO = '"+(cAliasCT)->ZD9_CUSTO+"' "			
		cQry2 += "	AND ZD9_CODIGO = "+ZD8->ZD8_CODIGO+" "
		cQry2 += "	AND ZD9_VERSAO = "+ZD8->ZD8_VERSAO+" "
//		cQry2 += "	AND ZD9_TIPO = '"+(cAliasCT)->ZD9_TIPO+"' "
		cQry2 += "	GROUP BY ZD9_ITCTB, ZD9_DITCTB "
		cQry2 += "	ORDER BY ZD9_ITCTB "

		dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQry2),cAliasIT,.F.,.T.)
		
		While !(cAliasIT)->(EoF())//percorrer todo o centro de custo 
			cChaveTree := cCodVerFil + (cAliasCT)->ZD9_CUSTO + (cAliasIT)->ZD9_ITCTB
	
			cAliasTP		:= GetNextAlias()	

			(cAliasTree)->(dbSetOrder(4))
			(cAliasTree)->(dbSeek(cChaveTree,.F.))
			
			cDescIC	:=	"C.R - "+AllTrim((cAliasIT)->ZD9_ITCTB)+" - "+AllTrim((cAliasIT)->ZD9_DITCTB)
			oTree:AddTree( cDescIC, .F., "bmpcpo", , , , cChaveTree )// arvore item contabil			
			
				(cAliasTree)->(dbSetOrder(4))
				(cAliasTree)->(dbSeek(cChaveTree,.F.))			
			
				cQry3 := " SELECT DISTINCT(ZD9_TIPO)  AS ZD9_TIPO  "
				cQry3 += " FROM ZD9010 ZD9  WHERE ZD9.D_E_L_E_T_ <> '*' 	
				cQry3 += " AND ZD9_FILIAL = '"+cFilAdd+"' 	
				cQry3 += " AND ZD9_CODIGO = '"+ZD8->ZD8_CODIGO+"' 	   
				cQry3 += " AND ZD9_CUSTO = '"+(cAliasCT)->ZD9_CUSTO+"'				
				cQry3 += " AND ZD9_ITCTB = '"+(cAliasIT)->ZD9_ITCTB+"'				
				cQry3 += " AND ZD9_VERSAO = '"+ZD8->ZD8_VERSAO+"' "
				cQry3 += " ORDER BY ZD9_TIPO "				

				dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQry3),cAliasTP,.F.,.T.)
				
				While !(cAliasTP)->(EoF())//percorrer todo o centro de custo 

					(cAliasTree)->(dbSetOrder(4))
					(cAliasTree)->(dbSeek(cChaveTree,.F.))						

					If (cAliasTP)->ZD9_TIPO == '1'					
						oTree:AddTreeItem("Receitas          ","SIMULACAO",,cChaveTree+cTpReceita)			
					ELSEIF (cAliasTP)->ZD9_TIPO == '2'
						oTree:AddTreeItem("Despesas          ","SIMULACAO",,cChaveTree+cTpDespesa)				
					ELSEIF (cAliasTP)->ZD9_TIPO == '3'
						cAliasFunc	:= GetNextAlias()
						oTree:AddTree( "Folha de Pagamento", .F., "SIMULACAO", , , , cChaveTree+cTpFolha )//arvore Conta orçamentaria
	
			//				Selecionar todos os funcionarios dentro daquela determinada chave e incluir na arvore
						cQry4 := "SELECT DISTINCT(ZDA_FUNCIO)  AS ZDA_FUNCIO, ZDA_KEYFUN, ZDA_DFUNCI, ZDA_RATEIO "
						cQry4 += " FROM "+RetSqlName("ZDA")+" ZDA  "
						cQry4 += " WHERE ZDA.D_E_L_E_T_ <> '*' "
						cQry4 += "	AND ZDA_FILIAL = '"+cFilAdd+"' "			
						cQry4 += "	AND ZDA_CODIGO = "+ZD8->ZD8_CODIGO+" "
						cQry4 += "	AND ZDA_VERSAO = "+ZD8->ZD8_VERSAO+" "
						cQry4 += "	AND ZDA_TIPO = '"+(cAliasTP)->ZD9_TIPO+"' "
						cQry4 += "	AND ZDA_CTCUST = '"+(cAliasCT)->ZD9_CUSTO+"' "						
						cQry4 += "	AND ZDA_ITCONT = '"+(cAliasIT)->ZD9_ITCTB+"' "									
						cQry4 += " GROUP BY ZDA_FUNCIO, ZDA_DFUNCI, ZDA_KEYFUN, ZDA_RATEIO "
						cQry4 += " ORDER BY ZDA_FUNCIO, ZDA_KEYFUN "
									
						dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQry4),cAliasFunc,.F.,.T.)
						
						While !(cAliasFunc)->(EoF())//percorrer todo o centro de custo 					
		  					
		  					cChaveTree := ( cCodVerFil + (cAliasCT)->ZD9_CUSTO + (cAliasIT)->ZD9_ITCTB + cTpFolha )
		  					
							cMatNome	:= Alltrim((cAliasFunc)->ZDA_FUNCIO+" - "+(cAliasFunc)->ZDA_DFUNCI)
			
							(cAliasTree)->(dbSetOrder(4))
							(cAliasTree)->(dbSeek(cChaveTree ,.F.))
			
							oTree:TreeSeek(cChaveTree)
							
							cChaveTree := ( cCodVerFil + ((cAliasCT)->ZD9_CUSTO + (cAliasIT)->ZD9_ITCTB + cTpFolha + (cAliasFunc)->ZDA_FUNCIO + (cAliasFunc)->ZDA_KEYFUN ))
							
							IF EMPTY(Posicione("ZDA",2,cFilAdd+ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cTpFolha+(cAliasCT)->ZD9_CUSTO +(cAliasIT)->ZD9_ITCTB+(cAliasFunc)->ZDA_FUNCIO+(cAliasFunc)->ZDA_KEYFUN,"ZDA_CVERBA"))
								oTree:AddTreeItem(cMatNome,"pin",,cChaveTree)							
							ELSE
								IF EMPTY(AllTrim((cAliasFunc)->ZDA_RATEIO))
									oTree:AddTreeItem(cMatNome,"VENDEDOR",,cChaveTree)
								ELSE
									oTree:AddTreeItem(cMatNome,"POSCLI",,cChaveTree)
								ENDIF
							ENDIF
							(cAliasFunc)->(dbSkip())
						EndDo
				  		oTree:EndTree() //Fecha arvore Folha
				  		oTree:TreeSeek(SubStr(cChaveTree,1,Len(cChaveTree)-10))
	  					oTree:PTCollapse()
						(cAliasFunc)->(dbCloseArea())			  		
					ENDIF
					(cAliasTP)->(dbSkip())
				EndDo
			(cAliasTP)->(dbCloseArea())			  		
	  		oTree:TreeSeek(SubStr(cChaveTree,1,Len(cChaveTree)-11))
			oTree:PTCollapse()			
			oTree:EndTree()
			(cAliasIT)->(dbSkip())
		EndDo
		
		(cAliasIT)->(dbCloseArea())		
		oTree:EndTree() // Fecha Arvore C.R	
  		oTree:TreeSeek(SubStr(cChaveTree,1,Len(cChaveTree)-31))		
		oTree:PTCollapse()		
		(cAliasCT)->(dbSkip())
	EndDo

(cAliasCT)->(dbCloseArea())
	
**
Return(.T.)
**


User Function fCriaTree()
***************************************************************************************
*
*
*****


	Local nU
	Local cFilAdd 		:= ""
	Local cCodVerFil := ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+Space(59)
	ProcRegua(Len(aFilUser))
	If ValType(oTree) <> "U"
		FreeObj(oTree)
	EndIf
	oTree:= DbTree():New(0,0,200,300, oCabec, { || ValTree() },,.T.)	

	oTree:Hide()  
	oTree:Refresh()
	
	oTree:BrClicked	:= { |o,x,y| PopMenu(x,y) }
	
	// Insere itens
	oTree:AddTree( "Planejamento Nº " + ZD8->ZD8_CODIGO+SPACE(50), .T., "FOLDER5", , , , cCodVerFil )//arvore Conta orçamentaria

	(oTree:cArqTree)->(dbSetOrder(4))
	(oTree:cArqTree)->(dbSeek(cCodVerFil,.F.))
	
	If oTree:TreeSeek(cCodVerFil)
		
		For nU := 1 To Len(aFilUser)	//Loop em todas as filiais que o usuário logado tiver acesso obs: trocar depois pelo array com as filiais
			cFilAdd := AllTrim(aFilUser[nU])+" - "+FWFilName( SM0->M0_CODIGO, aFilUser[nU] )
			IncProc(cCodVerFil)
			cCodVerFil := ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+AllTrim(aFilUser[nU]) //trocar cFilAnt por posição no array
			oTree:AddTree( cFilAdd, .T., "FW_HOME", , , , cCodVerFil )//arvore Filial
				(oTree:cArqTree)->(dbSetOrder(4))
				(oTree:cArqTree)->(dbSeek(cCodVerFil,.F.))			
				fIncFtree(cCodVerFil,SubStr(cFilAdd,1,8)) 
			
			oTree:EndTree()
			(oTree:cArqTree)->(dbSetOrder(4))
			(oTree:cArqTree)->(dbSeek(cCodVerFil,.F.))
			oTree:TreeSeek(cCodVerFil)			
			oTree:PTCollapse()					
//			oTree:Refresh()
		Next nU
	EndIf                     
	oTree:EndTree() 
	(oTree:cArqTree)->(dbSetOrder(4))
	(oTree:cArqTree)->(dbSeek(ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO,.F.))
	oTree:TreeSeek(ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO)

	oTree:Show()  
	oTree:Refresh()	
	oTree:Align := CONTROL_ALIGN_ALLCLIENT
**
Return(.T.)
**

User Function FSPC06(nTipo)
***************************************************************************************
*
*
*****
  
Local lRet := .F.
	
If nTipo == 1
	lRet := ((MV_PAR02 >= ZD8->ZD8_DTINIC) .And. (MV_PAR02 <= ZD8->ZD8_DTFINA))
ElseIf nTipo == 2
	lRet := ((MV_PAR03 >= MV_PAR02) .And. (MV_PAR03 >= ZD8->ZD8_DTINIC) .And. (MV_PAR03 <=ZD8->ZD8_DTFINA))
EndIf
   
**
Return(lRet)
**

Static Function fMaxInd()
***************************************************************************************
*
*
*****

/***********************************
*	Funçao para buscar o max do campo chave do funcionario
*                                                        
*	PPL - 18082014
******/
	Local cQryMax := ""
	Local nMax
	Local aAreaMax	:= GetArea()

	cQryMax := "SELECT MAX(ZDA_KEYFUN)AS MAXKEY FROM "+RetSqlName("ZDA")+" ZDA WHERE ZDA.D_E_L_E_T_ <>'*' AND ZDA_CODIGO = '"+ZD8->ZD8_CODIGO+"' AND ZDA_VERSAO = '"+ZD8->ZD8_VERSAO+"' "

	dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQryMax),"MAXZDA",.F.,.T.)
	                                                
	DbSelectArea("MAXZDA")
	MAXZDA->(DbGotop())
		
	nMax := VAL(MAXZDA->MAXKEY)+1
	
	dbCloseArea("MAXZDA")

	RestArea(aAreaMax)
	
**
Return(nMax)
**

Static Function PopMenu(x,y)
***************************************************************************************
*
*
*****

Local oTMenuItem1

Local oTMenuItem2

Local oTMenuItem3

Local oTMenuItem4

Local oTMenuItem5

Local oTMenuItem6

Local cRateio		:= Posicione("ZDA",2,cFiliAtu+ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cTipo+cCentro+cItem+cFunAtu+cIndAtu,"ZDA_RATEIO")
Local nPrcRat		:= Posicione("ZDA",2,cFiliAtu+ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cTipo+cCentro+cItem+cFunAtu+cIndAtu,"ZDA_PRCRAT")
Local lRateio		:= (!Empty(cRateio) .And. (nPrcRat <> 100))

If ValType(oMenu) <> "U"

	FreeObj(oMenu)

EndIf

MENU oMenu POPUP

ENDMENU

oMenu:Reset()

y := 250

If cTipo == '1' .OR. cTipo == '2'

	oTMenuItem1	:= TMenuItem():New(oDlg,'Incluir U.O e C.R',,,,                     {|| fIncCRUO(.T.)},,'fatimg32',,,,,,,.T.) 
	oMenu:Add(oTMenuItem1)	
	
	oTMenuItem1	:= TMenuItem():New(oDlg,'"Ratear Movimentos',,,,                     {|| Ratear(.T.)},,'fatimg32',,,,,,,.T.) 
	oMenu:Add(oTMenuItem1)

	oTMenuItem2	:= TMenuItem():New(oDlg,'"Gravar Alterações',,,,                     {|| GrvDados()},,'rpmsave',,,,,,,.T.) 
	oMenu:Add(oTMenuItem2)

ElseIf 	cTipo == '3' 

	oTMenuItem1	:= TMenuItem():New(oDlg,'Incluir U.O e C.R',,,,                     {|| fIncCRUO(.T.)},,'fatimg32',,,,,,,.T.) 
	oMenu:Add(oTMenuItem1)	
	
	oTMenuItem2	:= TMenuItem():New(oDlg,'Incluir Funcionário',,,,                     {|| IncFunci(.T.)},,'cliente',,,,,,,.T.) 
	oMenu:Add(oTMenuItem2)

	oTMenuItem3	:= TMenuItem():New(oDlg,'Calculo Funcionário',,,,                     {|| CalcCusf(.T.)},,'vendedor',,,,,,,.T.) 
	oMenu:Add(oTMenuItem3)

	oTMenuItem4	:= TMenuItem():New(oDlg,'Excluir Funcionário',,,,                     {|| ExcFunci(.T.)},,'xclose',,,,,,,.T.) 
	oMenu:Add(oTMenuItem4)

	oTMenuItem5	:= TMenuItem():New(oDlg,'Gravar Alterações ',,,,                     {|| GrvDados()},,'rpmsave',,,,,,,.T.) 
	oMenu:Add(oTMenuItem5)

	If lRateio

		oTMenuItem6	:= TMenuItem():New(oDlg,' Alterar Rateio ',,,,                     {|| AltRat(cRateio,)},,'vendedor',,,,,,,.T.) 
		oMenu:Add(oTMenuItem6)
	
	EndIf


Else

	oTMenuItem1	:= TMenuItem():New(oDlg,'Incluir U.O e C.R',,,,                     {|| fIncCRUO(.T.)},,'fatimg32',,,,,,,.T.) 
	oMenu:Add(oTMenuItem1)	
	
	oTMenuItem2	:= TMenuItem():New(oDlg,'Calcular Todos ',,,,                     {|| CALCALL()},,'rpmsave',,,,,,,.T.) 
	oMenu:Add(oTMenuItem2)	

EndIf

If ( Empty (cTipo) ) .AND. ( ! Empty ( cCentro ) ) .AND. ( Empty ( cItem ) )

	oTMenuItem1	:= TMenuItem():New(oDlg,'Excluir U.O',,,,                     {|| fExcAll(.T.)},,'fatimg32',,,,,,,.T.) 
	oMenu:Add(oTMenuItem1)	
	
EndIf

If ( Empty (cTipo) ) .AND. ( !Empty ( cCentro ) ) .AND. ( !Empty ( cItem ) )

	oTMenuItem1	:= TMenuItem():New(oDlg,'Excluir U.O e C.R',,,,                 {|| fExcCRUO(.T.)},,'fatimg32',,,,,,,.T.) 
	oMenu:Add(oTMenuItem1)	
	
EndIf


oMenu:Activate(x,y-100,oDlg)

**
Return ( oMenu )
**        



Static Function fExcAll ()
***************************************************************************************
*
*
*****

If ! MsgYesNo(OemToAnsi("Deseja realmente excluir todos os Centros de Resposabilidades desta Unidade Organizacional?"))

	**
	Return ( .F.)
	**
			
EndIf

fElapse()

U_fCriaTree()

**
Return ( .T. )
**        

Static Function fExcCRUO ()
***************************************************************************************
*
*
*****

If ! MsgYesNo(OemToAnsi("Deseja realmente excluir esta Unidade Organizacional?"))

	**
	Return ( .F.)
	**
			
EndIf

fElapse( )

U_fCriaTree()

**
Return ( .T. )
**        

Static Function fElapse( )
***************************************************************************************
*
*
*****

Local cQuery := ""

//Begin Transaction

	cQuery := " DELETE FROM "+RetSqlName("ZD9")
	
	If !Empty ( cItem ) 
	
		cQuery += " WHERE ZD9_FILIAL ='"+cFiliAtu+"' AND ZD9_CODIGO='"+ZD8->ZD8_CODIGO+"' AND ZD9_VERSAO ='"+ZD8->ZD8_VERSAO+"' AND ZD9_CUSTO = '"+cCentro+"' AND ZD9_ITCTB = '"+cItem+"'" 
	
	Else	

		cQuery += " WHERE ZD9_FILIAL ='"+cFiliAtu+"' AND ZD9_CODIGO='"+ZD8->ZD8_CODIGO+"' AND ZD9_VERSAO ='"+ZD8->ZD8_VERSAO+"' AND ZD9_CUSTO = '"+cCentro+"'" 
	
	EndIf

	TCSQLExec(cQuery)

	cQuery := " DELETE FROM "+RetSqlName("ZDA")
	
	If !Empty ( cItem ) 
	
		cQuery += " WHERE ZDA_FILIAL ='"+cFiliAtu+"' AND ZDA_CODIGO='"+ZD8->ZD8_CODIGO+"' AND ZDA_VERSAO ='"+ZD8->ZD8_VERSAO+"' AND ZDA_CTCUST = '"+cCentro+"' AND ZDA_ITCONT = '"+cItem+"'" 
	
	Else	
	
		cQuery += " WHERE ZDA_FILIAL ='"+cFiliAtu+"' AND ZDA_CODIGO='"+ZD8->ZD8_CODIGO+"' AND ZDA_VERSAO ='"+ZD8->ZD8_VERSAO+"' AND ZDA_CTCUST = '"+cCentro+"'" 
	
	EndIf
 
	TCSQLExec(cQuery)
	
//End Transaction

**
Return ( .T. )
**        

Static Function fIncCRUO ()
***************************************************************************************
*
*
*****

	Local aCRUO := {}
	Local cPergCRUO := "PCOCRUO008"

	u_SFPUTSX1( cPergCRUO, '01','Un. Organizacional'		,'Un. Organizacional'	,'Un. Organizacional'	,'mv_ch1','C',20,0,0,'G','NaoVazio() .and. U_fValCRUO(1)','ZZYUSR'	,'','','mv_par01','','','','','','','','','','','','','','','','', '', '', '')
	u_SFPUTSX1( cPergCRUO, '02','Ct. Responsabilidade'	,'Ct. Responsabilidade'	,'Ct. Responsabilidade'	,'mv_ch2','C',20,0,0,'G','NaoVazio() .and. U_fValCRUO(2)','ZZXCUS'	,'','','mv_par02','','','','','','','','','','','','','','','','', '', '', '')
 
	// Forca o usuario a preencher as perguntas.
	If !(Pergunte(cPergCRUO,.T.))
	
		**
		Return()
		**
			
	EndIf

	//					 [1]U.O	[2]C.R
	Aadd(aCRUO,{MV_PAR01,MV_PAR02})
	
	If Len(aCRUO) > 0

		fIncZD9(aCRUO)

		u_fCriaTree()
//		oTree:Refresh()		
		
	EndIf
	 
**
Return (.T.)
**

User Function fValCRUO(nTipo)

	Local lRet := .T.
	Local nOrder

	If nTipo == 1
		nOrder := RetOrder("ZZY","ZZY_FILIAL+ZZY_FILAUX+ZZY_CUSTO+ZZY_CODSUR")
		lRet := !Empty(Posicione("ZZY",nOrder,xFilial("ZZY")+cFiliAtu+MV_PAR01+__CUSERID,"ZZY_CUSTO"))
		
		iF !lRet
			MsgBox(OemToAnsi("Usuário sem permissão para adicionar a U.O informada!!!"),OemtoAnsi("Atenção!!!"),"ALERT")				
		EndIf
	Else
		nOrder := RetOrder("ZZX","ZZX_FILIAL+ZZX_FILAUX+ZZX_CUSTO+ZZX_ITEM")
		lRet := !Empty(Posicione("ZZX",nOrder,xFilial("ZZX")+cFiliAtu+MV_PAR01+MV_PAR02,"ZZX_ITEM"))
		iF !lRet
			MsgBox(OemToAnsi("Usuário sem permissão para adicionar o C.R informada!!!"),OemtoAnsi("Atenção!!!"),"ALERT")				
		EndIf
		
	EndIf
	
Return(lRet)


USER FUNCTION FSPC07()
***************************************************************************************
*
*
*****

IF cTipo == '1' .OR. cTipo == '2'

	If Len (oIEnc:aCols) > 0 .AND. AllTrim(oIEnc:aCols[1][1]) <> ''

		If  !Empty(AllTrim(oIEnc:aCols[ oIEnc:NAT ][1]))
			cInfor3 := "C.O. : " + oIEnc:aCols[ oIEnc:NAT ][1] + " - " + oIEnc:aCols[ oIEnc:NAT ][2]
		EndIf
	
	EndIf

EndIf

lSaveSp := .T.

oInfor:Refresh()
//oInfor1:Refresh()	
//oInfor2:Refresh()
oInfor3:Refresh()
oIEnc:Refresh()
oMEnc:Refresh()
oFEnc:Refresh()

**
Return (.T.)
**          

USER FUNCTION FSPC08()
***************************************************************************************
*
*
*****

If oMEnc:NAT == 1
	
	oMEnc:AALTER[1] := (" ")
	
Else

	oMEnc:AALTER[1] := ("ZDA_VALOR")
	
EndIf

**
Return (.T.)
**          


//-------------------------------------------------------------------
/*/{Protheus.doc} BuscaFil
Busca Filiais do usuário logado
@author Doit MG
@since		24.08.2014
@version	P11
@param
@return   aFilUser
@Obs:
---------------------------------------------------------------------
Programador		Data		Motivo
---------------------------------------------------------------------
/*/
Static Function BuscaFil()

	Local aAux		:= {}
	Local nF
	Local cQryUsr	:= ""
	Local cAliasUsr:= GetNextAlias()
	Local nTotReg
	
/*	aAux := FWEmpLoad(.F.)//FALSO RETORNA SOMENTE FILIAIS QUE O USUÁRIO TEM ACESSO, .T. RETORNA TODAS AS FILIAIS DO SISTEMA
	ProcRegua(Len(aAux))
	For nF := 1 To Len(aAux)
//		IncProc()
		Aadd(aFilUser,aAux[nF][3])
	
	Next nF
*/

	cQryUsr	:= " SELECT DISTINCT(ZZY_FILAUX) "
	cQryUsr	+= " 	FROM "+RetSqlName("ZZY")+" ZZY "
	cQryUsr	+= " 	WHERE ZZY.D_E_L_E_T_ <> '*' "
	cQryUsr	+= " 		AND ZZY_CODUSR = '"+__CUSERID+"' "
	cQryUsr	+= " 	ORDER BY ZZY_FILAUX "	

	dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQryUsr),cAliasUsr,.F.,.T.)
                                                
	DbSelectArea(cAliasUsr)
	nTotReg := Contar(cAliasUsr,"!Eof()")
	ProcRegua(nTotReg)
		
	(cAliasUsr)->(DbGotop())
	While !(cAliasUsr)->(eof())

		Aadd(aFilUser,(cAliasUsr)->ZZY_FILAUX)

		(cAliasUsr)->(dbSkip())
	EndDo
	
**
Return(.T.)
**

Static Function fGrvRat(aVlrFunc,cRateio)

	Local aFuncRat 	:= {}
	Local cQrySel		:= ""
	Local cRatAlias	:= GetNextAlias()
	Local nR	
	Local cQuery 
	Local nPrcRat		:= 0
	Local cMaxInd
	Local nCont2 		:= 0
	Local nIndZDA		:= RetOrder("ZDA","ZDA_FILIAL+ZDA_CODIGO+ZDA_VERSAO+ZDA_TIPO+ZDA_CTCUST+ZDA_ITCONT+ZDA_FUNCIO+ZDA_KEYFUN+ZDA_CVERBA+ZDA_DATA")
/*
[01]ZDA_ITCONT
[02]ZDA_RATEIO
[03]ZDA_PRCRAT
[04]ZDA_DFUNCI
*/	

//	Begin Transaction
	
		cQrySel	:= " SELECT ZDA_ITCONT,ZDA_RATEIO,ZDA_PRCRAT, ZDA_DFUNCI, ZDA_KEYFUN "
		cQrySel	+= " FROM "+RetSqlName("ZDA")+" ZDA "
		cQrySel	+= " WHERE ZDA.D_E_L_E_T_ <> '*' "
		cQrySel	+= " 	AND ZDA_RATEIO = '"+cRateio+"' "
		cQrySel	+= " 	AND ZDA_CODIGO = '"+ZD8->ZD8_CODIGO+"' "
		cQrySel	+= " 	AND ZDA_VERSAO = '"+ZD8->ZD8_VERSAO+"' "
		cQrySel	+= " 	AND ZDA_TIPO = '3' "
		cQrySel	+= " GROUP BY ZDA_ITCONT,ZDA_RATEIO,ZDA_PRCRAT, ZDA_DFUNCI, ZDA_KEYFUN "
		cQrySel	+= " ORDER BY ZDA_ITCONT "
		
		dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQrySel),cRatAlias,.F.,.T.)
	                                                
		DbSelectArea(cRatAlias)
		(cRatAlias)->(DbGotop())
		While !(cRatAlias)->(eof())
			
			Aadd(aFuncRat,{(cRatAlias)->ZDA_ITCONT,(cRatAlias)->ZDA_RATEIO,(cRatAlias)->ZDA_PRCRAT,(cRatAlias)->ZDA_DFUNCI, (cRatAlias)->ZDA_KEYFUN})
	
			(cRatAlias)->(dbSkip())
		EndDo
		
		dbCloseArea(cRatAlias)	
		
		cQuery := " DELETE FROM "+RetSqlName("ZDA")
		cQuery += " WHERE ZDA_FILIAL ='"+cFiliAtu+"' AND ZDA_CODIGO='"+ZD8->ZD8_CODIGO+"' AND ZDA_VERSAO ='"+ZD8->ZD8_VERSAO+"' "	
		cQuery += " 	AND ZDA_CTCUST = '"+AllTrim(cCentro)+"' "
		cQuery += " 	AND ZDA_RATEIO = '"+cRateio+"' "

	
		TCSQLExec(cQuery)

	
		For nR := 1 To Len(aFuncRat)
// PARA CADA C.R INCLUIR AS VERBAS POR FUNCIONARIO COM O VALOR REFERENTE A SEU PERCENTUAL DO RATEIO
			nPrcRat := aFuncRat[nR][3]
			For nC := 1 To Len(aVlrFunc)

		      For nV := 1 To Len(aVlrFunc[nC][4])

					DBSelectArea("ZDA")
					nCont2 := 0
					While aVlrFunc[nC][3] > LASTDATE(MonthSum(ZD8->ZD8_DTINIC,nCont2))
					// Inclui registros caso periodo informado tenha inicio maior que periodo do planejamento
					// Se periodo de calculo for igual periodo do Planejamento não vai passar por aqui
						ZDA->(dbSetOrder(nIndZDA))
						If !ZDA->(dbSeek(cFiliAtu+ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cTipo+cCentro+aFuncRat[nR][1]+cFunAtu+aFuncRat[nR][5]+aVlrFunc[nC][4][nV][1]+dtos(LASTDATE(MonthSum(ZD8->ZD8_DTINIC,nCont2)))))
							RecLock("ZDA",.T.)           
								ZDA->ZDA_FILIAL := cFiliAtu
								ZDA->ZDA_CODIGO := ZD8->ZD8_CODIGO
								ZDA->ZDA_VERSAO := ZD8->ZD8_VERSAO
								ZDA->ZDA_TIPO   := cTipo
								ZDA->ZDA_CVERBA := aVlrFunc[nC][4][nV][1]
								ZDA->ZDA_DVERBA := Posicione("SRV",1,xFilial("SRV")+aVlrFunc[nC][4][nV][1],"RV_DESC")
								ZDA->ZDA_PERIOD := AllTrim ( Mesextenso(Val(SubStr(DtoC(aVlrFunc[nC][3]),4,2))) + " / " + SubStr(DtoC(aVlrFunc[nC][3]),7,4))
								ZDA->ZDA_DATA   := LASTDATE(MonthSum(ZD8->ZD8_DTINIC,nCont2))
								ZDA->ZDA_VALOR  := 0
								ZDA->ZDA_FUNCIO := cFunAtu
								ZDA->ZDA_DFUNCI := aFuncRat[nR][4]
								ZDA->ZDA_CONTA  := Posicione("SRV",1,xFilial("SRV")+aVlrFunc[nC][4][nV][1],"RV_XCTADEB")
								ZDA->ZDA_CTCUST := cCentro
								ZDA->ZDA_ITCONT := aFuncRat[nR][1]
								ZDA->ZDA_KEYFUN := aFuncRat[nR][5]
								ZDA->ZDA_PRVDEM := dDtDemiss
								ZDA->ZDA_RATEIO := cRateio
								ZDA->ZDA_PRCRAT := nPrcRat
							MsUnLock() 							
						EndIf
						nCont2++
					EndDo
						// Inclui registros com data 	do periodo informado					
						RecLock("ZDA",.T.)           
							ZDA->ZDA_FILIAL := cFiliAtu
							ZDA->ZDA_CODIGO := ZD8->ZD8_CODIGO
							ZDA->ZDA_VERSAO := ZD8->ZD8_VERSAO
							ZDA->ZDA_TIPO   := cTipo
							ZDA->ZDA_CVERBA := aVlrFunc[nC][4][nV][1]
							ZDA->ZDA_DVERBA := Posicione("SRV",1,xFilial("SRV")+aVlrFunc[nC][4][nV][1],"RV_DESC")
							ZDA->ZDA_PERIOD := AllTrim ( Mesextenso(Val(SubStr(DtoC(aVlrFunc[nC][3]),4,2))) + " / " + SubStr(DtoC(aVlrFunc[nC][3]),7,4))
							ZDA->ZDA_DATA   := aVlrFunc[nC][3]
							ZDA->ZDA_VALOR  := aVlrFunc[nC][4][nV][3]*(aFuncRat[nR][3]/100)
							ZDA->ZDA_FUNCIO := cFunAtu
							ZDA->ZDA_DFUNCI := aFuncRat[nR][4]
							ZDA->ZDA_CONTA  := Posicione("SRV",1,xFilial("SRV")+aVlrFunc[nC][4][nV][1],"RV_XCTADEB")
							ZDA->ZDA_CTCUST := cCentro
							ZDA->ZDA_ITCONT := aFuncRat[nR][1]
							ZDA->ZDA_KEYFUN := aFuncRat[nR][5]
							ZDA->ZDA_PRVDEM := dDtDemiss
							ZDA->ZDA_RATEIO := cRateio
							ZDA->ZDA_PRCRAT := nPrcRat
						MsUnLock()  											

				Next nV
			Next nC
		
		Next nR
	
//	End Transaction
	u_fCriaTree()

	
	(oTree:cArqTree)->(dbSetOrder(4))
	(oTree:cArqTree)->(dbSeek(ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cFiliAtu+cCentro+cItem+cTipo+cFunAtu+cIndAtu,.F.))
	oTree:TreeSeek(ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cFiliAtu+cCentro+cItem+cTipo+cFunAtu+cIndAtu)

	oTree:Refresh()

	ValTree()

**
Return( .T. )
**

Static Function fMaxRat()
***************************************************************************************
*
*
*****

/***********************************
*	Funçao para buscar o max do campo chave do funcionario
*                                                        
*	PPL - 18082014
******/
	Local cQryMax 	:= ""
	Local nMax
	Local aAreaMax	:= GetArea()
	
	cQryMax := "SELECT MAX(ZDA_RATEIO)AS MAXRAT FROM "+RetSqlName("ZDA")+" ZDA WHERE ZDA.D_E_L_E_T_ <>'*' AND ZDA_CODIGO = '"+ZD8->ZD8_CODIGO+"' AND ZDA_VERSAO = '"+ZD8->ZD8_VERSAO+"' "

	dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQryMax),"MAXRAT",.F.,.T.)
	                                                
	DbSelectArea("MAXRAT")
	MAXRAT->(DbGotop())
		
	nMax := VAL(MAXRAT->MAXRAT)+1
	
	dbCloseArea("MAXRAT")

	RestArea(aAreaMax)
	
**
Return(nMax)
Static Function AltRat(cRateio)

	Local cQrySel	:= ""
	Local cQuery		:= ""
	Local cAlias1	:= GetNextAlias()
	Local aRat1		:= {}
	Local aRatNew		:= {}
	Local nA
	Local aDadosZD9	:= {}
	Local lOk			:= .F.
	aFunc := {}
	cNomeFun := SubStr((oTree:cArqTree)->T_PROMPT,10,30)
	Aadd(aFunc,{cFunAtu,cNomeFun,cCentro})

	
		cQrySel	:= " SELECT ZDA_ITCONT, ZDA_PRCRAT "
		cQrySel	+= " FROM "+RetSqlName("ZDA")+" ZDA "
		cQrySel	+= " WHERE ZDA.D_E_L_E_T_ <> '*' "
		cQrySel	+= " 	AND ZDA_RATEIO = '"+cRateio+"' "
		cQrySel	+= " 	AND ZDA_CODIGO = '"+ZD8->ZD8_CODIGO+"' "
		cQrySel	+= " 	AND ZDA_VERSAO = '"+ZD8->ZD8_VERSAO+"' "
		cQrySel	+= " 	AND ZDA_TIPO = '3' "
		cQrySel	+= " GROUP BY ZDA_ITCONT, ZDA_PRCRAT "
		cQrySel	+= " ORDER BY ZDA_ITCONT "
		
		dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQrySel),cAlias1,.F.,.T.)
	                                                
		DbSelectArea(cAlias1)
		(cAlias1)->(DbGotop())
		While !(cAlias1)->(eof())
//			Posicione("ZZX",1,xFilial("ZZX")+cCentro+(cAlias1)->ZDA_ITCONT,"ZZX_DITEM")
	  		Aadd(aRat1,{(cAlias1)->ZDA_ITCONT,Posicione("ZZX",1,xFilial("ZZX")+cCentro+(cAlias1)->ZDA_ITCONT,"ZZX_DITEM"),(cAlias1)->ZDA_PRCRAT,.F.})
	
			(cAlias1)->(dbSkip())
		EndDo
		
		dbCloseArea(cAlias1)

	aRatNew	:=	U_FSPCODLG(aRat1,@lOk)
	iF lOk
		cQuery := " DELETE FROM "+RetSqlName("ZDA")
		cQuery += " WHERE ZDA_FILIAL ='"+cFiliAtu+"' AND ZDA_CODIGO='"+ZD8->ZD8_CODIGO+"' AND ZDA_VERSAO ='"+ZD8->ZD8_VERSAO+"' "	
		cQuery += " 	AND ZDA_CTCUST = '"+AllTrim(cCentro)+"' "
		cQuery += " 	AND ZDA_RATEIO = '"+cRateio+"' "
	
	
		TCSQLExec(cQuery)		
		
		For nA := 1 To Len(aRatNew)  
			aDadosZD9 := {}
			If !aRatNew[nA][4] .AND. !Empty(aRatNew[nA][1])
				cCtRes	:= aRatNew[nA][1]
				nPrcRat	:= aRatNew[nA][3]
				cIndMat	:= StrZero(fMaxInd(),4)
				cDescFun := cFunAtu+" - "+cNomeFun
	         aADD(aDadosZD9,{cCentro,cCtRes})
				fIncZD9(aDadosZD9)
				fIncZDA(aFunc,cCtRes,cIndMat,cRateio,nPrcRat,cFiliAtu)
			EndIf
			If nA == Len(aRatNew)
	
				u_fCriaTree()
				
				
				(oTree:cArqTree)->(dbSetOrder(4))
				(oTree:cArqTree)->(dbSeek(ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cFiliAtu+cCentro+cCtRes+cTipo+aFunc[1][1]+cIndMat,.F.))
				oTree:TreeSeek(ZD8->ZD8_CODIGO+ZD8->ZD8_VERSAO+cFiliAtu+cCentro+cCtRes+cTipo+aFunc[1][1]+cIndMat)
				
				oTree:Refresh()
				
				ValTree()
			
			EndIf
		Next nA 
	EndIf
Return()

User Function FSPC09(cCall)
***************************************************************************************
*
*
*****
	Local lRet 			:= .T.
	Local cCodVerba	:=	Iif(cCall == "1",M->ZDA_CVERBA,oFenc:aCols[oFenc:nAt][GDFieldPos("ZDA_CVERBA" ,oFEnc:aHeader)])
	Local nPosVerba	:= aScan(oFEnc:aCols,{|x| AllTrim(x[1]) == cCodVerba })
	If ((nPosVerba > 0) .AND. (nPosVerba <> oFenc:nAt))
		lRet := .F.
		MsgBox(OemToAnsi("Já existe registro para a verba "+cCodVerba+" !!!"),OemtoAnsi("Erro!!!"),"STOP")				
	EndIf

Return(lRet)

User Function FSPC10()
***************************************************************************************
*
*
*****
	Local lRet 			:= .T.
	Local cCodCont		:=	AllTrim(M->ZD9_CONTA)
	Local nPosConta	:= aScan(oIEnc:aCols,{|x| AllTrim(x[1]) == cCodCont })
	If ((nPosConta > 0) .AND. (nPosConta <> oIenc:nAt))
		lRet := .F.
		MsgBox(OemToAnsi("Já existe registro para a conta "+cCodCont+" !!!"),OemtoAnsi("Erro!!!"),"STOP")				
	EndIf

Return(lRet)

Static Function buscacor ( nLinha)

	Local nRet
   If nLinha == 1
		nRet := 797951//16776960
	Else
		nRet := 16777215
	EndIf

Return(nRet)

Static Function fAnoAnt(lResumo)

	Local cQuery 	:= " "
	Local aRet 		:= {}
	Local cAliasAA := GetNextAlias()
	Local cNewItem	:= ""
	Local cNewItem2:= ""	
	
	Local lLastYear := GetNewPar("FS_LYEARS", .T.)
	
//	SuperGetMv("FS_LYEARS",.T.,.F.)
	
	If SUBSTR(cItem,1,2) == '15'
		cNewItem := '14' + SUBSTR(cItem,3,18)
		cNewItem2:=	'13' + SUBSTR(cItem,3,18)
	EndIf	
	
	If ! ( lLastYear )
		
		**
		Return ( aRet )
		**
		
	EndIf
	
	//cQuery := " SELECT AKD_OPER, AKD_CC, AKD_ITCTB, SUBSTR(AKD_DATA,1,6) AS AKD_DATA, SUM(AKD_VALOR1) AS VALOR  " //wap.o - Retirar Filial 
	cQuery := " SELECT AKD_CC, AKD_ITCTB, SUBSTR(AKD_DATA,1,6) AS AKD_DATA, SUM(AKD_VALOR1) AS VALOR  "
	cQuery += ", AKD_CO "
	cQuery += " FROM "+RetSqlName("AKD")+" AKD "
	cQuery += " WHERE AKD.D_E_L_E_T_ <> '*' "
	//cQuery += " AND AKD_OPER = '"+cFiliAtu+"' "  //wap.o - Retirar a validacao da filial.
	cQuery += " AND AKD_CC = '"+cCentro+"' "
	cQuery += " AND (AKD_ITCTB = '"+cNewItem+"' OR AKD_ITCTB = '"+cNewItem2+"') "
	cQuery += " AND AKD_DATA BETWEEN '"+dtos(YearSub(ZD8->ZD8_DTINIC,1))+"' AND '"+dtos(YearSub(ZD8->ZD8_DTFINA,1))+"' "
	cQuery += " AND AKD_CO = '"+oIenc:aCols[oIenc:nAt][GDFieldPos("ZD9_CONTA" ,oIEnc:aHeader)]+"' "
	cQuery += " AND AKD_TPSALD = 'RC' "
	//cQuery += " GROUP BY AKD_OPER, AKD_CC, AKD_ITCTB, AKD_CO, SUBSTR(AKD_DATA,1,6) "		//wap.o - Retirar Filial 
	//cQuery += " ORDER BY AKD_OPER, AKD_CC, AKD_ITCTB, AKD_CO, SUBSTR(AKD_DATA,1,6) "		//wap.o - Retirar Filial 
	cQuery += " GROUP BY AKD_CC, AKD_ITCTB, AKD_CO, SUBSTR(AKD_DATA,1,6) "
	cQuery += " ORDER BY AKD_CC, AKD_ITCTB, AKD_CO, SUBSTR(AKD_DATA,1,6) "

	ChangeQuery(cQuery)		
	
	dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQuery),cAliasAA,.F.,.T.)
	
	DbSelectArea(cAliasAA)
	(cAliasAA)->(DbGotop())
	
	While !(cAliasAA)->(EoF())
		//Aadd(aRet,{(cAliasAA)->AKD_OPER, (cAliasAA)->AKD_CC, (cAliasAA)->AKD_ITCTB, (cAliasAA)->AKD_CO, STOD((cAliasAA)->AKD_DATA+"01"), (cAliasAA)->VALOR})	//wap.o - Retirar Filial
		Aadd(aRet,{" ",(cAliasAA)->AKD_CC, (cAliasAA)->AKD_ITCTB, (cAliasAA)->AKD_CO, STOD((cAliasAA)->AKD_DATA+"01"), (cAliasAA)->VALOR})
		(cAliasAA)->(dbSkip())
	EndDo
	

Return(aRet)

/*/{Protheus.doc} SF57A01J
Funcao responsavel por ler funcionarios da SRA e gravar na tabela ZDA do PCO

@author 	Jose Leite de Barros Neto
@since 		03/09/2014
@version 	1.0

@return Nil, Nulo
/*/
User Function AtuZDA(_cFilial, _cUO, _cCR)

	Local _aArea	:= GetArea()
	Local _cAlias	:= ""
	Local _aFunc	:= {}
	Local _cItemC 	:= ""
	Local	_cCodigo := ZD8->ZD8_CODIGO
	Local _cVersao := ZD8->ZD8_VERSAO
	Local _cTipo	:= '3'
	Local cIndMat	:= ""
	Local cCodRat	:= ""
	Local nPrcRat	:= 0
	//no futuro trocar _cItemC por (_cAlias)->(RA_XCRFUT)
	If SUBSTR(_cCR,1,2) == '15'
		_cItemC := '14' + SUBSTR(_cCR,3,18)
	EndIf
	
	//Busca dados da SRA - Cadastro de Funcionarios
	GetSRA(@_cAlias, _cUO, _cItemC, _cFilial)
	
	DbSelectArea(_cAlias)
	DbGoTop()
	While .Not. (_cAlias)->( EOF() )
		_aFunc := {}
		cIndMat	:= StrZero(fMaxInd(),4)
		AADD(_aFunc,{	(_cAlias)->(RA_MAT)		,;
							(_cAlias)->(RA_NOME)		,; 
							(_cAlias)->(RA_CC)		,; 
							_cItemC						,;
							(_cAlias)->(RA_FILIAL)	})
				
		fIncZDA(_aFunc,_cCR,cIndMat,cCodRat,nPrcRat,_cFilial)	

		(_cAlias)->( DbSkip() )
	End
	
	(_cAlias)->( DbCloseArea() )
	RestArea(_aArea)

	
Return( _aFunc )

/** {Protheus.doc} GetSRA
Funcao para buscar dados da SRA - Cadastro de Funcionarios

@param: 	<Nil>
@author: 	Jose Leite de Barros Neto
@since: 	03/09/2014
@Uso: 		SFIEMT
*/
Static Function GetSRA(_cAlias, _cUO, _cItemC, _cFilial)

	_cAlias := GetNextAlias()

	BeginSql Alias _cAlias

		SELECT *
	
		FROM %Table:SRA% SRA
		
		WHERE RA_CC = %EXP:_cUO%
			AND RA_FILIAL = %EXP:_cFilial%
			AND RA_ITEM = %EXP:_cItemC%
			AND RA_SITFOLH <> 'D'
			AND SRA.%NotDel%
				
		ORDER BY RA_FILIAL, RA_MAT
		
	EndSql
		
	MemoWrite("c:/pLog/query_SF57A01J_sra.sql",  GetLastQuery()[2])
	
Return( _cAlias )

Static Function CALCALL()
	Local aTemp := {}
	
	aTemp := U_CALCFOL( cFunAtu, ZD8->ZD8_DTINIC, ZD8->ZD8_DTFINA,@dDtDemiss,"Todos os Funcionários",cFiliAtu,'2')
   If Len(aTemp) > 0
		u_fCriaTree()
	EndIf
Return()

Static Function LOADZDA()

	Local cQuery := " "

	cQuery += " SELECT ZDA_FILIAL, ZDA_FUNCIO, ZDA_KEYFUN, ZDA_CTCUST, ZDA_ITCONT, ZDA_DFUNCI, ZDA_RATEIO, ZDA_PRCRAT "
	cQuery += " FROM ZDA010 ZDA "
	cQuery += " WHERE ZDA.D_E_L_E_T_ <> '*' "
	cQuery += " 	AND ZDA_CODIGO ='"+ZD8->ZD8_CODIGO+"' "
	cQuery += " 	AND ZDA_VERSAO ='"+ZD8->ZD8_VERSAO+"' "
	cQuery += " 	AND ZDA_TIPO = '3' "
	cQuery += " 	AND ZDA_FILIAL||ZDA_CTCUST||ZDA_ITCONT LIKE '"+AllTrim(cFiliAtu+cCentro+cItem)+"%' "
	cQuery += " GROUP BY ZDA_FUNCIO , ZDA_KEYFUN, ZDA_CTCUST, ZDA_ITCONT, ZDA_FILIAL, ZDA_DFUNCI, ZDA_RATEIO, ZDA_PRCRAT "
	cQuery += " ORDER BY  ZDA_FILIAL,ZDA_FUNCIO , ZDA_KEYFUN, ZDA_CTCUST, ZDA_ITCONT, ZDA_DFUNCI"

	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias3,.T.,.F.)
	
	DBSelectArea(cAlias3)
	
Return()

Static Function MaxSRT(cMatricula)

	Local cQrySRD
	Local cAliasRD	:= GetNextAlias()
	
	cQrySRD := " SELECT MAX(RD_DATARQ) AS RD_DATARQ"
	cQrySRD += " FROM "+RetSqlName("SRD")+" SRD "
	cQrySRD += " WHERE SRD.D_E_L_E_T_ <> '*' "
	cQrySRD += " 	AND RD_MAT = '"+cMatricula+"' "

	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQrySRD),cAliasRD,.T.,.F.)
	
	DBSelectArea(cAliasRD)
	(cAliasRD)->(DbGoTop())

	If (cAliasRD)->(!EOF()) 
		cDtSRD := (cAliasRD)->RD_DATARQ
	EndIf
	
	(cAliasRD)->(dbCloseArea())

Return()