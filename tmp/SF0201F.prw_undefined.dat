#Include 'Protheus.ch'
#Include 'TopConn.ch'
#Include 'FWPrintSetup.ch'
#Include 'RptDef.CH'

#define STATUS_AGUARDANDO_OUTROS_NIVEIS "01"	// 01 - Bloqueado p/ sistema (aguardando outros niveis)
#define STATUS_AGUARDANDO_LIBERACAO_USUARIO "02"	// 02 - Aguardando Liberacao do usuario
#define STATUS_LIBERADO "03"	// 03 - Pedido Liberado pelo usuario
#define STATUS_BLOQUEADO "04"	// 04 - Pedido Bloqueado pelo usuario
#define STATUS_LIBERADO_POR_OUTRO "05"	// 05 - Pedido Liberado por outro usuario
#define STATUS_DOCUMENTO_REJEITADO "06"	// 06 - Documento Rejeitado
#define ALIGN_HORZ_LEFT 0
#define ALIGN_HORZ_RIGTH 1
#define ALIGN_HORZ_CENTER 2
#define ALIGN_HORZ_JUST 3
#define ALIGN_VERT_CENTER 0
#define ALIGN_VERT_TOP 1
#define ALIGN_VERT_BOTTOM 2


/*/{Protheus.doc} SF0201F
Impressão da autorização de Prestador Pessoa Física.
Nesta função, são declarados os objetos de impressão e de setup;
também ocorrerão validações necessárias para a impressão do mesmo.
A função será chamada no P.E. MT120BRW
@author Franklin B. Oliveira
@since 02/02/2016
@version 1.00
@type function
/*/
User Function SF0201F()

Local aOrdem		:= {"Padrão"}
Local aArea			:= GetArea()
Local cDevice		:= ""
Local cReport 		:= "SF0201F"
Local cSession		:= GetPrinterSession()
Local lAdjust		:= .F.
Local nFlags		:= PD_ISTOTVSPRINTER+PD_DISABLEORIENTATION+PD_DISABLEPAPERSIZE
Local nLocal		:= 1
Local nOrdem		:= 1
Local nOrient		:= 1 //retrato
Local nPrintType	:= 6
Local oSetup		:= Nil

Private cTitulo		:= "Autorização de contratação de pessoa física"
Private cNumPed		:= SC7->C7_NUM
Private cCodUsr		:= SC7->C7_USER
Private nMaxLin		:= 860
Private nMaxCol		:= 600
Private nMargDir	:= 20
Private nMargEsq	:= 20
Private oPrinter	:= Nil

	DbSelectArea("SA2")
	DbSeek(xFilial("SA2")+SC7->C7_FORNECE+SC7->C7_LOJA)

	//Para impressão o pedido de compras precis estar liberado,ser de pessoa física, não ter cotação e não ter solicitação
	If Empty(SC7->C7_RESIDUO) .And. Empty(SC7->C7_NUMSC) .And. Empty( SC7->C7_XCONTRA ) .And. Empty(SC7->C7_NUMCOT) .And. SC7->C7_CONAPRO == "L";
		.And. SA2->A2_TIPO == "F"
		
		cSession	:= GetPrinterSession()
		cDevice		:= If(Empty(fwGetProfString(cSession, "PRINTTYPE","SPOOL", .T.)), "PDF", fwGetProfString(cSession, "PRINTTYPE", "SPOOL", .T.))
		nLocal		:= 2 //local
		nPrintType	:= 6 //pdf
		
		oPrinter	:= FWMSPrinter():New(cReport, nPrintType, lAdjust, /*cPathDest*/, .T.)
		oSetup		:= FWPrintSetup():New (nFlags,cTitulo)
		
		oSetup:SetPropert(PD_PRINTTYPE   	, nPrintType)	//TIPO DA IMPRESSÃO
		oSetup:SetPropert(PD_ORIENTATION 	, nOrient)	//ORIENTAÇÃO DA PÁGINA DURANTE A IMPRESSÃO
		oSetup:SetPropert(PD_DESTINATION 	, nLocal)	//DESTINO DA IMPRESSÃO
		oSetup:SetPropert(PD_MARGIN			, {0,0,0,0})	//MARGEM
		oSetup:SetPropert(PD_PAPERSIZE		, 2) //"A4 210 x 297 mm"
		oSetup:SetPropert(PD_PREVIEW 		, .T.)
		oSetup:SetOrderParms(aOrdem,@nOrdem)
		
		If oSetup:Activate() == PD_OK 
		
			oPrinter:lServer := oSetup:GetProperty(PD_DESTINATION) == AMB_SERVER	
			oPrinter:SetDevice(oSetup:GetProperty(PD_PRINTTYPE))
			oPrinter:SetPortrait()
			oPrinter:SetPaperSize(oSetup:GetProperty(PD_PAPERSIZE))
			oPrinter:setCopies(Val(oSetup:cQtdCopia))
			
			If oSetup:GetProperty(PD_PRINTTYPE) == IMP_SPOOL
			
				oPrinter:nDevice		:= IMP_SPOOL
				oPrinter:cPrinter		:= oSetup:aOptions[PD_VALUETYPE]
			
			Else 
			
				oPrinter:nDevice		:= IMP_PDF
				oPrinter:cPathPDF		:= oSetup:aOptions[PD_VALUETYPE]
				oPrinter:SetViewPDF(oSetup:aOptions[PD_PREVIEW])
			
			Endif
			
			RptStatus({|lEnd| SF0201FImp()}, "Imprimindo Relatorio...")
		
		Else 
		
			MsgInfo("Relatório cancelado pelo usuário.")
			oPrinter:Cancel()
		
		EndIf
	
	Else
		
		MsgInfo("Não é possível imprimir a autorização para este PC/AE, verifique!")
	
	EndIf
	
	oSetup		:= Nil
	oPrinter	:= Nil
	
	RestArea(aArea)
				
Return (Nil)

/*/{Protheus.doc} SF0201FImp
Função principal para executar a impressão da autorização de Prestador Pessoa Física.
@author Franklin B. Oliveira
@since 03/02/2016
@version 1.00
@type function
/*/
Static Function SF0201FImp()

Local cQuery 		:= ""
Local cObser 		:= ""
Local nColDesc		:= nMargEsq
Local nColUnMe		:= nColDesc + 170
Local nColQtde		:= nColUnMe + 30
Local nColVrUn		:= nColQtde + 50
Local nColVrTo		:= nColVrUn + 70
Local nColCCus		:= nColVrTo + 75
Local nColItCt		:= nColCCus + 90
Local nTotProd		:= 0
Local nTamJust		:= 0

Private cAliasSC7	:= GetNextAlias()
Private nPage		:= 1
Private nLinItm		:= 0050
Private oBrush		:= TBrush():New("",CLR_LIGHTGRAY)
Private oFont3, oFont3N, oFont4, oFont7, oFont10N

	oPrinter:SetPaperSize(DMPAPER_A4)

	oFont3  := TFont():New( 'Arial', 09, 09, .T., .F., 5, .T., 5, .F., .F. )
	oFont3N := TFont():New( 'Arial', 09, 09, .T., .T., 5, .T., 5, .F., .F. )
	oFont4  := TFont():New( 'Arial', 10, 09, .T., .F., 5, .T., 5, .F., .F. )
	oFont7  := TFont():New( 'Arial', 12, 12, .T., .F., 5, .T., 5, .F., .F. )
	oFont10N := TFont():New( 'Arial', 10, 10, .T., .T., 5, .T., 5, .F., .F. )

	cQuery := "SELECT SC7.C7_FORNECE,							" + CRLF
	cQuery += "	SC7.C7_LOJA,									" + CRLF
	cQuery += "	SC7.C7_DESCRI,									" + CRLF
	cQuery += "	SC7.C7_UM,										" + CRLF
	cQuery += "	SC7.C7_QUANT,									" + CRLF
	cQuery += "	SC7.C7_PRECO,									" + CRLF
	cQuery += "	SC7.C7_TOTAL,									" + CRLF
	cQuery += "	SC7.C7_CC,										" + CRLF
	cQuery += "	SC7.C7_ITEMCTA,									" + CRLF
	cQuery += "	SC7.C7_OBS,										" + CRLF
	cQuery += "	SC7.C7_USER										" + CRLF
	cQuery += "FROM " + RetSqlName("SC7") + " SC7				" + CRLF
	cQuery += "INNER JOIN " + RetSqlName("SA2") + " SA2			" + CRLF
	cQuery += "ON SA2.D_E_L_E_T_   = ' '						" + CRLF
	cQuery += "AND SA2.A2_FILIAL   = '" + xFilial("SA2") + "'	" + CRLF
	cQuery += "AND SA2.A2_COD      = SC7.C7_FORNECE 			" + CRLF 
	cQuery += "AND SA2.A2_LOJA     = SC7.C7_LOJA 				" + CRLF
	cQuery += "WHERE SC7.D_E_L_E_T_  = ' ' 						" + CRLF
	cQuery += "AND SC7.C7_FILIAL = '" + xFilial("SC7") + "'		" + CRLF
	cQuery += "AND SC7.C7_NUM      = '" + cNumPed + "'			" + CRLF

	MemoWrite("C:\temp\SF0201F_SC7.txt", cQuery)
	DbUseArea(.T., "TOPCONN", TcGenQry(, , cQuery), cAliasSC7, .T., .T.)
	
	If !(cAliasSC7)->( EoF() )
	
		While !(cAliasSC7)->( EoF() )
			
			oPrinter:StartPage()
			
			Cab01() // Imprime primeiro cabecalho.
			Cab02() // Imprime Segundo Cabecalho.
			
			//Imprime Cabeçalho Itens
			oPrinter:Box(  nLinItm, nMargEsq, (nLinItm + 20), (nMaxCol-nMargDir) )
			oPrinter:FillRect({(nLinItm + 1), (nMargEsq + 1), (nLinItm + 019), (nMaxCol - nMargDir - 1)}, oBrush)
			
			oPrinter:SayAlign((nLinItm + 10), (nColDesc + 5), "Descrição"			, oFont3N, 175/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
			oPrinter:Line( nLinItm, nColUnMe, (nLinItm + 20), nColUnMe )
			
			oPrinter:SayAlign((nLinItm + 10), (nColUnMe + 5), 'UM.'					, oFont3N, 50/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
			oPrinter:Line( nLinItm, nColQtde, (nLinItm + 20), nColQtde )
			
			oPrinter:SayAlign((nLinItm + 10), (nColQtde + 5), 'Qtde.'				, oFont3N, 50/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
			oPrinter:Line( nLinItm, nColVrUn, (nLinItm + 20), nColVrUn )
			
			oPrinter:SayAlign((nLinItm + 10), (nColVrUn + 5), 'Vlr. Unitário'		, oFont3N, 75/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
			oPrinter:Line( nLinItm, nColVrTo, (nLinItm + 20), nColVrTo )
			
			oPrinter:SayAlign((nLinItm + 10), (nColVrTo + 5), 'V l r.  T o t a l'	, oFont3N, 75/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
			oPrinter:Line( nLinItm, nColCCus, (nLinItm + 20), nColCCus )
			
			oPrinter:SayAlign((nLinItm + 10), (nColCCus + 5), 'Centro de  Custo'	, oFont3N, 100/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
			oPrinter:Line( nLinItm, nColItCt, (nLinItm + 20), nColItCt )
			
			oPrinter:SayAlign((nLinItm + 10), (nColItCt + 5), 'Item Contábil'		, oFont3N, 100/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
			
			nLinItm += 20
			
			While !(cAliasSC7)->( Eof() )
				
				nWidtLin = 20
				
				If Len(Alltrim((cAliasSC7)->C7_DESCRI)) > 35
					nWidtLin += 10 * ( Int(Len(Alltrim((cAliasSC7)->C7_DESCRI)) / 35))
				EndIf

				//Inicio uma nova página se não couber na atual
				If (nLinItm + nWidtLin) > nMaxLin
					
					oPrinter:StartPage()
					nPage++		
					
					nLinItm		:= 0050
					
					Cab01() // Imprime primeiro cabecalho.
					//Cab02() // Imprime Segundo Cabecalho.
					
					//Imprime Cabeçalho Itens
					oPrinter:Box(  nLinItm, nMargEsq, (nLinItm + 20), (nMaxCol-nMargDir) )
					oPrinter:FillRect({(nLinItm + 1), (nMargEsq + 1), (nLinItm + 019), (nMaxCol - nMargDir - 1)}, oBrush)
					
					oPrinter:SayAlign((nLinItm + 10), (nColDesc + 5), "Descrição"			, oFont3N, 175/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
					oPrinter:Line( nLinItm, nColUnMe, (nLinItm + 20), nColUnMe )
					
					oPrinter:SayAlign((nLinItm + 10), (nColUnMe + 5), 'UM.'					, oFont3N, 50/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
					oPrinter:Line( nLinItm, nColQtde, (nLinItm + 20), nColQtde )
					
					oPrinter:SayAlign((nLinItm + 10), (nColQtde + 5), 'Qtde.'				, oFont3N, 50/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
					oPrinter:Line( nLinItm, nColVrUn, (nLinItm + 20), nColVrUn )
					
					oPrinter:SayAlign((nLinItm + 10), (nColVrUn + 5), 'Vlr. Unitário'		, oFont3N, 75/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
					oPrinter:Line( nLinItm, nColVrTo, (nLinItm + 20), nColVrTo )
					
					oPrinter:SayAlign((nLinItm + 10), (nColVrTo + 5), 'V l r.  T o t a l'	, oFont3N, 75/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
					oPrinter:Line( nLinItm, nColCCus, (nLinItm + 20), nColCCus )
					
					oPrinter:SayAlign((nLinItm + 10), (nColCCus + 5), 'Centro de  Custo'	, oFont3N, 100/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
					oPrinter:Line( nLinItm, nColItCt, (nLinItm + 20), nColItCt )
					
					oPrinter:SayAlign((nLinItm + 10), (nColItCt + 5), 'Item Contábil'		, oFont3N, 100/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
					
					nLinItm += 20
			
				EndIf
		
				//Imprime os Itens
				oPrinter:Box(  nLinItm, nMargEsq, (nLinItm + nWidtLin), (nMaxCol-nMargDir) )
			
				oPrinter:SayAlign((nLinItm + 5), (nColDesc + 5), (cAliasSC7)->C7_DESCRI, oFont3, 160/*[ nWidth]*/, nWidtLin/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
				oPrinter:Line( nLinItm, nColUnMe, (nLinItm + nWidtLin), nColUnMe )
				
				oPrinter:SayAlign((nLinItm + 5), (nColUnMe + 5), (cAliasSC7)->C7_UM, oFont3, 30/*[ nWidth]*/, nWidtLin/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
				oPrinter:Line( nLinItm, nColQtde, (nLinItm + nWidtLin), nColQtde )
				
				oPrinter:SayAlign((nLinItm + 5), (nColQtde + 5), Transform((cAliasSC7)->C7_QUANT, "@E 999,999,999.99"), oFont3, 50/*[ nWidth]*/, nWidtLin/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
				oPrinter:Line( nLinItm, nColVrUn, (nLinItm + nWidtLin), nColVrUn )
				
				oPrinter:SayAlign((nLinItm + 5), (nColVrUn + 5), Transform((cAliasSC7)->C7_PRECO, "@E 999,999,999.99"), oFont3, 70/*[ nWidth]*/, nWidtLin/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
				oPrinter:Line( nLinItm, nColVrTo, (nLinItm + nWidtLin), nColVrTo )
				
				oPrinter:SayAlign((nLinItm + 5), (nColVrTo + 5), Transform((cAliasSC7)->C7_TOTAL, "@E 999,999,999.99"), oFont3, 70/*[ nWidth]*/, nWidtLin/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
				oPrinter:Line( nLinItm, nColCCus, (nLinItm + nWidtLin), nColCCus )
				
				oPrinter:SayAlign((nLinItm + 5), (nColCCus + 5), (cAliasSC7)->C7_CC, oFont3, 100/*[ nWidth]*/, nWidtLin/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
				oPrinter:Line( nLinItm, nColItCt, (nLinItm + nWidtLin), nColItCt )
				
				oPrinter:SayAlign((nLinItm + 5), (nColItCt + 5), (cAliasSC7)->C7_ITEMCTA, oFont3, 100/*[ nWidth]*/, nWidtLin/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
				
				nLinItm += nWidtLin
				
				cObser += AllTrim((cAliasSC7)->C7_OBS) + CRLF
				
				nTamJust := IIf(Len(AllTrim((cAliasSC7)->C7_OBS)) > 130, nTamJust + 2, nTamJust + 1)
				
				If nLinItm  > nMaxLin
					
					oPrinter:EndPage()
				
				EndIf 
				
				nTotProd += (cAliasSC7)->C7_TOTAL
				
				(cAliasSC7)->( dbSkip() )
				
			EndDo 		
						
			If nLinItm  > nMaxLin
				
				oPrinter:EndPage()
				
				oPrinter:StartPage()
				nPage++		
					
				nLinItm		:= 0050
					
				Cab01() // Imprime primeiro cabecalho.
				
			EndIf 
			
			//Total Geral
			oPrinter:Box(  nLinItm, nMargEsq, (nLinItm + 20), (nMaxCol-nMargDir) )
			oPrinter:FillRect({(nLinItm + 1), (nMargEsq + 1), (nLinItm + 019), (nMaxCol - nMargDir - 1)}, oBrush)
			
			oPrinter:SayAlign((nLinItm + 5), (nColDesc + 5), "V L R. T O T A L", oFont3N, 175/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
			oPrinter:Line( nLinItm, nColVrTo, (nLinItm + 20), nColVrTo )
			
			oPrinter:SayAlign((nLinItm + 5), (nColVrTo + 5), Transform(nTotProd, "@E 999,999,999.99"), oFont3, 70/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
			oPrinter:Line( nLinItm, nColCCus, (nLinItm + 20), nColCCus )
			
			oPrinter:SayAlign((nLinItm + 5), (nColCCus + 5), "Data de Aprovação", oFont3N, 70/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
			oPrinter:Line( nLinItm, nColItCt, (nLinItm + 20), nColItCt )
			
			oPrinter:SayAlign((nLinItm + 5), (nColItCt + 5), fDataAprovacao(), oFont3, 70/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
			
			nLinItm += 25
			
			//Justificativa			
			nWidtLin := nTamJust * 10
			
			If (nLinItm + nWidtLin) > nMaxLin
				
				oPrinter:EndPage()
				
				oPrinter:StartPage()
				nPage++		
					
				nLinItm		:= 0050
					
				Cab01() // Imprime primeiro cabecalho.
				
			EndIf 
			
			oPrinter:Box(  nLinItm, nMargEsq, (nLinItm + 20), (nMaxCol-nMargDir) )
			oPrinter:Box(  nLinItm, nMargEsq, (nLinItm + 30 + nWidtLin), (nMaxCol-nMargDir) )
			oPrinter:FillRect({(nLinItm + 1), (nMargEsq + 1), (nLinItm + 019), (nMaxCol - nMargDir - 1)}, oBrush)
			oPrinter:SayAlign((nLinItm + 10), 250, "J U S T I F I C A T I V A"		, oFont3N, 175/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
			oPrinter:SayAlign((nLinItm + 20), (nMargEsq + 5), cObser		, oFont4, (nMaxCol-nMargDir) - 20/*[ nWidth]*/, nWidtLin/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 1/*[ nAlignVert]*/)
			
			nLinItm += 40 + nWidtLin
			
			If (nLinItm + 120) > nMaxLin
				
				oPrinter:EndPage()
				
				oPrinter:StartPage()
				nPage++		
					
				nLinItm		:= 0050
					
				Cab01() // Imprime primeiro cabecalho.
				
			EndIf 
			
			//Assinatura
			fImpAssi()
						
			nPage++
			
			oPrinter:Print()
			
		EndDo
	
	Else
		Aviso(FunName()+"/"+ProcName(), "Não foram encontrados registros para impressão", {"OK"})
	EndIf
	
	(cAliasSC7)->( dbCloseArea() )
	
Return Nil

/*/{Protheus.doc} Cab01
Função auxiliar para impressão do cabeçalho do relatório.
@type function
@author Franklin B. Oliveira
@since 03/02/2016
/*/
Static Function Cab01()

Local nLinPed   := nLinItm + 60
Local nColTit	:= 160
Local nCol1		:= 470
Local nCol2		:= 510

	oPrinter:Box(  nLinItm, nMargEsq, (nLinPed-10), nMaxCol-nMargDir )
	
	oPrinter:Line( nLinItm, 130, (nLinPed-10), 130 )
	
	oPrinter:SayBitmap((nLinItm+5), nMargEsq+5, "lgrl01.bmp", 100, (nLinPed-20)-(nLinItm+5))
	
	oPrinter:Say((nLinItm+025), nColTit, "A U T O R I Z A Ç Ã O  D E  C O N T R A T A Ç Ã O  D E  P E S S O A  F Í S I C A"	, oFont10N	,,,, 0)
	
	oPrinter:Say((nLinItm+010), nCol1, 'Pagina  ...: ' 								, oFont4	,,,, 0)
	oPrinter:Say((nLinItm+010), nCol2, Strzero(nPage, 2) 							, oFont4	,,,, 0)
	
	oPrinter:Say((nLinItm+020), nCol1, 'Pedido  ...: '								, oFont4	,,,, 0)
	oPrinter:Say((nLinItm+020), nCol2, cNumPed										, oFont4	,,,, 0)
	
	oPrinter:Say((nLinItm+030), nCol1, 'Comprador: '								, oFont4	,,,, 0)
	oPrinter:Say((nLinItm+030), nCol2, UsrRetName(cCodUsr)							, oFont4	,,,, 0)
	
	oPrinter:Say((nLinItm+040), nCol1, "Impressão: "		                   		, oFont4	,,,, 0)
	oPrinter:Say((nLinItm+040), nCol2, DToC(DDATABASE)                     			, oFont4	,,,, 0)
	
	nLinItm := nLinPed

Return Nil

/*/{Protheus.doc} Cab02
Função auxiliar para impressão dos dados do Prestador Pessoa Física.
@type function
@author Franklin B. Oliveira
@since 03/02/2016
/*/
Static Function Cab02()

Local cCol1Box1	:= nMargEsq + 10
Local cCol2Box1	:= cCol1Box1 + 40  
Local cCol1Box2	:= nMargEsq + 10
Local cColTel		:= cCol1Box2 + 250
//Local cColCid	:= cCol1Box1 + 200
Local cColUF		:= cColTel + 190
Local cColAge		:= cCol1Box1 + 250
//criado por marcel
Local cColDva		:= cColAge + 70
Local cColCont	:= cColDva + 60
//criado por marcel
Local cColDvc		:= cColCont + 60
Local cColOper	:= cColDvc + 50

	//-- Entidade / Unidade
	oPrinter:Box( nLinItm, nMargEsq, (nLinItm + 020), (nMaxCol-nMargDir) )
	oPrinter:Box( nLinItm, nMargEsq, (nLinItm + 050), (nMaxCol-nMargDir) )
	oPrinter:FillRect({(nLinItm + 1), (nMargEsq + 1), (nLinItm + 019), (nMaxCol - nMargDir - 1)}, oBrush)
	oPrinter:Say((nLinItm + 10), 0250, "ENTIDADE / UNIDADE", oFont3N,,,, 0 )
	
	oPrinter:Say((nLinItm+30), cCol1Box1, ( "Entidade:" 								), oFont3,,,, 0 )
	oPrinter:Say((nLinItm+30), cCol2Box1, ( FDescEmp()    								), oFont3,,,, 0 )
	oPrinter:Say((nLinItm+40), cCol1Box1, ( "Unidade.: "                              	), oFont3,,,, 0 )
	oPrinter:Say((nLinItm+40), cCol2Box1, ( FWFilialName(cEmpAnt, xFilial("SC7"), 1)	), oFont3,,,, 0 )	
		
	//-- Prestador
	oPrinter:Box(  nLinItm + 60, nMargEsq, (nLinItm + 80), (nMaxCol-nMargDir) )
	oPrinter:Box(  nLinItm + 60, nMargEsq, (nLinItm + 170), (nMaxCol-nMargDir) )
	oPrinter:FillRect({(nLinItm + 61), nMargEsq + 1, (nLinItm + 78), (nMaxCol-nMargDir - 1)}, oBrush)
	oPrinter:Say((nLinItm + 70), 0250, "P R E S T A D O R", oFont3N,,,, 0 )

	oPrinter:Say((nLinItm+090), cCol1Box1, ( "Nome do Prestador:"	), oFont3,,,, 0 )
	oPrinter:Say((nLinItm+100), cCol1Box1, ( SubStr( SA2->A2_NOME, 1, 90) 			), oFont3,,,, 0 )
	
	oPrinter:Say((nLinItm+090), cColTel, ( "Telefone:" + "(" + Substr( SA2->A2_DDD, 1, 3 ) + ") " + SubStr( SA2->A2_TEL, 1, 15 )  	), oFont3,,,, 0 )
	
	oPrinter:Say((nLinItm+100), cColTel, ( "Celular:" + "(" + Substr( SA2->A2_DDD, 1, 3 ) + ") " + SubStr( SA2->A2_TEL, 1, 15 )	), oFont3,,,, 0 )
	
	oPrinter:Say((nLinItm+110), cCol1Box1, ( "Endereço:"	), oFont3,,,, 0 )
	oPrinter:Say((nLinItm+120), cCol1Box1, ( SA2->A2_END	), oFont3,,,, 0 )
	
	oPrinter:Say((nLinItm+110), cColTel, ( "CEP: " + Transform(SA2->A2_CEP, '@R 99999-999') ), oFont3,,,, 0 )
	//oPrinter:Say((nLinItm+140), cColTel, (""), oFont3,,,, 0 )
	
	oPrinter:Say((nLinItm+130), cCol1Box1, ( "Bairro: " + SA2->A2_BAIRRO ), oFont3,,,, 0 )
	//oPrinter:Say((nLinItm+160), cCol1Box1, (""), oFont3,,,, 0 )
	
	oPrinter:Say((nLinItm+130), cColTel, ( "Cidade: " + SA2->A2_MUN ), oFont3,,,, 0 )
	//oPrinter:Say((nLinItm+160), cColTel, (""), oFont3,,,, 0 )
	
	oPrinter:Say((nLinItm+130), cColUF, ( "UF: " + SA2->A2_EST ), oFont3,,,, 0 )
	//oPrinter:Say((nLinItm+160), cColUF, (""), oFont3,,,, 0 )
			
	oPrinter:Say((nLinItm+140), cCol1Box1, ( "Email: " + SA2->A2_EMAIL ), oFont3,,,, 0 )
	//oPrinter:Say((nLinItm+180), cCol1Box1, (""), oFont3,,,, 0 )
	
	oPrinter:Say((nLinItm+150), cCol1Box1, ( "CPF: " + Transform( SA2->A2_CGC, "@R 999.999.999-99") ), oFont3,,,, 0 )
	//oPrinter:Say((nLinItm+200), cCol1Box1, (""), oFont3,,,, 0 )
	
	oPrinter:Say((nLinItm+150), cColTel, ( "Inscrição INSS/PIS: " + SA2->A2_NIT ), oFont3,,,, 0 )
	//oPrinter:Say((nLinItm+200), cColTel, (""), oFont3,,,, 0 )
	
	oPrinter:Say((nLinItm+150), cColUF, ( "Nº de Dependentes: " + Str(SA2->A2_NUMDEP) ), oFont3,,,, 0 )
	//oPrinter:Say((nLinItm+220), cColUF, (""), oFont3,,,, 0 )
	
	oPrinter:Say((nLinItm+160), cCol1Box1, ( "Banco: " + SA2->A2_BANCO + " - " + POSICIONE("ZZK",1,xFilial("ZZK")+SA2->A2_BANCO,"ZZK_DESCRI")), oFont3,,,, 0 )
	//oPrinter:Say((nLinItm+250), cCol1Box1, (""), oFont3,,,, 0 )
	
	oPrinter:Say((nLinItm+160), cColAge, ( "Agencia: " + SA2->A2_AGENCIA ), oFont3,,,, 0 )
	//oPrinter:Say((nLinItm+250), cColAge, (""), oFont3,,,, 0 )
	
	oPrinter:Say((nLinItm+160), cColDva, ( "DV Agencia: " + SA2->A2_XDVAGE ), oFont3,,,, 0 )
	
	oPrinter:Say((nLinItm+160), cColCont, ( "Conta: " + SA2->A2_NUMCON ), oFont3,,,, 0 )
	//oPrinter:Say((nLinItm+250), cColCont, (""), oFont3,,,, 0 )
	
	oPrinter:Say((nLinItm+160), cColDvc, ( "DV Conta: " + SA2->A2_XDVCTA ), oFont3,,,, 0 )
	
	oPrinter:Say((nLinItm+160), cColOper, ( "Operação: " + Transform( SA2->A2_XOPERAC, PesqPict( "SA2", "A2_XOPERAC" )) ), oFont3,,,, 0 )
	//oPrinter:Say((nLinItm+250), cColOper, (""), oFont3,,,, 0 )
	
	nLinItm += 180
	
Return Nil

/*/{Protheus.doc} FDescEmp
Função auxiliar que retorna a descrição da empresa, conforme posicionamento na tabela SC7.
@type function
@author Franklin B. Oliveira
@since 03/02/2016
/*/
Static Function FDescEmp()

Local cDescEmp 	:= ""
Local cCodEmp	:= FWCodEmp("SC7")
	
	Do Case
		Case cCodEmp == '01'
			cDescEmp := "FIEMT"
		Case cCodEmp == '02'
			cDescEmp := "SESI"
		Case cCodEmp == '03'
			cDescEmp := "SENAI"
		Case cCodEmp == '04'
			cDescEmp := "IEL"
		Case cCodEmp == '05'
			cDescEmp := "CONDOMÍNIO"
	EndCase

Return cDescEmp

/*/{Protheus.doc} fImpAssi
Função auxiliar para impressão da assinatura eletrônica, do aprovador.
A assinatura só será impressa, caso o pedido tenha sido liberado.
@type function
@author Franklin B. Oliveira
@since 03/02/2016
/*/
Static Function fImpAssi()

local cAliasSAK := GetNextAlias()
local cLocAss := SuperGetMv("MV_LOCASS",.T.,"\ASSINATURAS\")
local cCargoAprovador := ""
local nColAssi := nMargEsq + 5
local nX := 1

	BeginSql Alias cAliasSAK
		SELECT 
			DISTINCT SCR.CR_USER
			, AK_XCARGO
		FROM 
			%table:SC7% SC7
		INNER JOIN 
			%table:SCR% SCR
		ON 
			SCR.%notdel%
			AND SCR.CR_FILIAL = SC7.C7_FILIAL
			AND SCR.CR_TIPO   = 'PC'
			AND SCR.CR_STATUS = '03'
			AND SCR.CR_NUM    = SC7.C7_NUM
		INNER JOIN 
			%table:SAK% SAK
		ON 
			SAK.%notdel%
			AND SAK.AK_FILIAL    = %exp:xFilial("SAK")%
			AND SAK.AK_COD      = SCR.CR_APROV
		WHERE 
			SC7.%notdel%
			AND SC7.C7_FILIAL    = %exp:xFilial("SC7")%
			AND SC7.C7_NUM       = %exp:cNumPed%
	endsql
	
	MemoWrite("C:\temp\SF0201F_SAK.txt", GetLastQuery()[2])
	
	oPrinter:Box(  nLinItm, nMargEsq, (nLinItm + 020), (nMaxCol-nMargDir) )
	oPrinter:Box(  nLinItm, nMargEsq, (nLinItm + 125), (nMaxCol-nMargDir) )
	oPrinter:FillRect({(nLinItm + 1), (nMargEsq + 1), (nLinItm + 019), (nMaxCol - nMargDir - 1)}, oBrush)
	oPrinter:SayAlign((nLinItm + 10), 250, "ASSINATURA ELETRÔNICA"		, oFont3N, 175/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, 0/*[ nAlignVert]*/)
	
	While .Not. (cAliasSAK)->( EoF() ) .And. nX <= 3
		cCargoAprovador := fGetDescCargoAprovador(AllTrim((cAliasSAK)->AK_XCARGO))
		oPrinter:SayBitmap( (nLinItm + 20), nColAssi, cLocAss + AllTrim(xFilial("SAK")) + (cAliasSAK)->CR_USER + ".jpg", 75, 75 )
		oPrinter:SayAlign((nLinItm + 095), nColAssi, AllTrim(UsrFullName((cAliasSAK)->CR_USER)), oFont4, 175/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, 0/*[ nAlignHorz]*/, ALIGN_VERT_CENTER)
		oPrinter:SayAlign((nLinItm + 105), nColAssi, cCargoAprovador, oFont4, 175/*[ nWidth]*/, 10/*[ nHeigth]*/, /*[ nClrText]*/, ALIGN_HORZ_JUST, ALIGN_VERT_CENTER)
		nColAssi += (Len( AllTrim(UsrFullName((cAliasSAK)->CR_USER)) )) * 05
		nX++
		(cAliasSAK)->( dbSkip() )
	EndDo

	(cAliasSAK)->( dbCloseArea() )

Return Nil

/*/{Protheus.doc} fGetDescCargoAprovador
Busca a  do cargo do aprovador
@type  Function
@author Franklin de Brito de Oliveira
@since 26/05/2021
@param cSiglaCargo, character, sigla do cardo de aprovador
@return character, cargo do aprovador
	/*/
Static Function fGetDescCargoAprovador(cSiglaCargo)
	local cCargoAprovador := ""
	Do Case
	Case cSiglaCargo == "D"
		cCargoAprovador := "Diretor(a)"
	Case cSiglaCargo == "S"
		cCargoAprovador := "Superintendente"
	Case cSiglaCargo == "G"
		cCargoAprovador := "Gerente"
	Otherwise
		cCargoAprovador := "Coordenador"
	EndCase
Return cCargoAprovador

/*/{Protheus.doc} fDataAprovacao
Recupera a data de aprovação do pedido de compra
@type  Function
@author Franklin de Brito de Oliveira
@since 25/05/2021
@return character, Data de aprovação do pedido
/*/
Static Function fDataAprovacao()
	local cDataAprovacao := ""
	dbSelectArea("SRC")
	dbSetOrder(1)	//1=CR_FILIAL+CR_TIPO+CR_NUM+CR_NIVEL	
	if SCR->(dbSeek(xFilial("SCR")+"PC"+PadR(cNumPed,TamSX3("CR_NUM")[1])))
		while SCR->CR_FILIAL==xFilial("SCR") .And. SCR->CR_TIPO=="PC" .And. SCR->CR_NUM==PadR(cNumPed,TamSX3("CR_NUM")[1])
			if SCR->CR_STATUS==STATUS_LIBERADO .And. DToC(SCR->CR_DATALIB) + " " + SCR->CR_XHRALIB>cDataAprovacao
				cDataAprovacao := DToC(SCR->CR_DATALIB) + " " + SCR->CR_XHRALIB
			endif
			SCR->(dbSkip())
		end
	endif
	SCR->(dbCloseArea())
Return cDataAprovacao
