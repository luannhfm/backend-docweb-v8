#Include "TOTVS.ch"
#Include "FWMVCDef.ch"
#INCLUDE "TOPCONN.CH"

User Function CNTA121()
	Local aParam     := PARAMIXB
	Local xRet       := .T.
	Local oObj       := ''
	Local cIdPonto   := ''
	Local cIdModel   := ''
	Local lIsGrid    := .F.

	If aParam <> NIL

		oObj       := aParam[1]
		cIdPonto   := aParam[2]
		cIdModel   := aParam[3]
		lIsGrid    := ( Len( aParam ) > 3 )

		If cIdPonto == "MODELVLDACTIVE"

		ElseIf cIdPonto == 'MODELPRE'
			// Alert("OK")
		ElseIf cIdPonto == 'MODELPOS'

		ElseIf cIdPonto == 'FORMPRE'

		ElseIf cIdPonto == 'FORMPOS'

			If cIdModel == "CNDMASTER"
				xRet := vlTimeDoc(oObj) // Valida limite máximo para medição de docente
			EndIf

		ElseIf cIdPonto == 'FORMLINEPRE'

		ElseIf cIdPonto == 'FORMLINEPOS'

		ElseIf cIdPonto == 'MODELCOMMITTTS'
			//ApMsgInfo('Chamada apos a gravaï¿½ï¿½o total do modelo e dentro da transaï¿½ï¿½o (MODELCOMMITTTS).' + CRLF + 'ID ' + cIdModel )
		ElseIf cIdPonto == 'MODELCOMMITNTTS'
			// ApMsgInfo ('Chamada apos a gravaï¿½ï¿½o total do modelo e fora da transaï¿½ï¿½o (MODELCOMMITNTTS).' + CRLF + 'ID ' + cIdModel)
		ElseIf cIdPonto == 'FORMCOMMITTTSPRE'

		ElseIf cIdPonto == 'FORMCOMMITTTSPOS'
			//ApMsgInfo('Chamada apos a gravaï¿½ï¿½o da tabela do formulï¿½rio (FORMCOMMITTTSPOS).' + CRLF + 'ID ' + cIdModel)
		ElseIf cIdPonto == 'MODELCANCEL'
			//cMsg := 'Chamada no Botï¿½o Cancelar (MODELCANCEL).' + CRLF + 'Deseja Realmente Sair ?'
		ElseIf cIdPonto == 'BUTTONBAR'
			xRet := {}
			aAdd(xRet , {'Medição Docente', 'DOCENTES', { || F3DocMed(oObj)  }} )
			aAdd(xRet , {'Aferição Horas Docente', 'DOCENTES', { || RHDocMed(oObj)  }} )
		EndIf

	EndIf

Return(xRet)

//================================================================================
Static Function F3DocMed(oModel)

	Local lRet      := .T.
	Local aPergs    := {}
	Local aRet      := {}
	Local oMdlCND := oModel:GetModel( "CNDMASTER" )

	aAdd( aPergs ,{1,"Número da Necessidade" , Space(15) ,"@E",'.T.',"ZBBMED" ,'.T.', 90, .T.})

	If ParamBox(aPergs ,"Parametros ",aRet)

		dbSelectArea("CN9")
		CN9->(dbSetOrder(1))
		CN9->(dbSeek(xFilial("CN9") + Alltrim(aRet[1])))
		If CN9->CN9_DTINIC <= dDataBase
			oMdlCND:SetValue("CND_CONTRA", Alltrim(aRet[1]))
			If CN9->CN9_DTFIM < dDataBase
				Aviso("Atenção","Data atual maior que data final do contrato.")
			EndIf
		Else
			Aviso("Atenção","Data de Vigencia menor que data atual")
		EndIf
	Else
		lRet := .F.
	EndIf

Return(lRet)

//=============================================================================================

Static Function RHDocMed(oModel)

	Local x
	Local oMdlCNE := oModel:GetModel( "CNEDETAIL" )
	Local oMdlCND := oModel:GetModel( "CNDMASTER" )
	Local nAula     := 0
	Local cTitulo  := ""
	Local oOk      := LoadBitmap( GetResources(), "CHECKED" )   //CHECKED    //LBOK  //LBTIK
	Local oNo      := LoadBitmap( GetResources(), "UNCHECKED" ) //UNCHECKED  //LBNO
	Local oChk     := Nil
	Local lRet     := .T.
	Local oFont := TFont():New('Courier new',,20,.T.)
	Local cPic := "@E 9,999.99"

	Private lChk     := .F.
	Private oLbx := Nil
	Private aVetor := {}
	Private oDlg     := Nil
	Private oGet 
	Private _nVar := 0

	//==================
	Processa( {|| lRet := fCarAcols(oMdlCND) }, "Aguarde...", "Carregando Informações...",.F.) //Carrega dados para trazer na grade
	//==================
	If lRet
		For x := 1 To oMdlCNE:Length()
			oMdlCNE:GoLine( x )

			cTitulo:= "Produto " + Alltrim(Posicione("SB1",1,xFilial("SB1") + oMdlCNE:GetValue("CNE_PRODUT"),"B1_DESC")   )


			DEFINE MSDIALOG oDlg TITLE cTitulo FROM 0,0 TO 500,800 PIXEL

			@ 10,10 LISTBOX oLbx VAR cVar FIELDS HEADER " ", "Data", "Periodo Letivo", "Modalidade", "Turma","Hora" ;
				SIZE 380,200 OF oDlg PIXEL ON dblClick( u_click() , oLbx:Refresh() , oGet:Refresh() , oDlg:Refresh()   )// duplo click

			oLbx:SetArray( aVetor )
			oLbx:bLine := {|| {Iif(aVetor[oLbx:nAt,1],oOk,oNo),;
				aVetor[oLbx:nAt,2],;
				aVetor[oLbx:nAt,3],;
				aVetor[oLbx:nAt,4],;
				aVetor[oLbx:nAt,5],;
				aVetor[oLbx:nAt,6]}}

			@ 235,10 CHECKBOX oChk VAR lChk PROMPT "Marca/Desmarca" SIZE 80,007 FONT oFont  PIXEL OF oDlg ;
				ON CLICK( u_marca() ,oLbx:Refresh() , oGet:Refresh() , oDlg:Refresh()  ) // Marca Desmarca tudo 

			@ 235,100+40 SAY oSay PROMPT "Total horas:"  SIZE 200,20 FONT oFont  PIXEL OF oDlg

			@ 235,170+40 GET oGet VAR _nVar  of oDlg PICTURE cPic  SIZE 5,5; //Valor da Horas
			FONT oFont  PIXEL WHEN .F. READONLY

			DEFINE SBUTTON FROM 235,300+10 TYPE 1 ACTION {|| nAula:=AtuHR(oMdlCND),oDlg:End()} ENABLE OF oDlg
			ACTIVATE MSDIALOG oDlg CENTER

			// Atualiza quantidade a ser medida conforme escolha do usuï¿½rio
			If nAula > oMdlCNE:GetValue("CNE_QTAMED")
				Help(NIL, NIL, "Operação Invalida", NIL, "Quantidade selecionada maior que Quantidade a ser medida", ;
					1, 0, NIL, NIL, NIL, NIL, NIL, {"Selecione a quantidade de horas novamente."})

				oMdlCNE:SetValue("CNE_QUANT", 0)
			Else
				oMdlCNE:SetValue("CNE_QUANT", nAula)
			EndIf

		Next x
	EndIf

Return(.T.)


/*------------------------------------------------*
 | Func.: fCarAcols                               |
 | Desc.: Funï¿½ï¿½o que carrega o aCols              |
 *------------------------------------------------*/
 
Static Function fCarAcols(oMdlCND)
   
    Local cQry   := ""
    Local nAtual := 0
    Local nTotal := 0
    Local lRet  := .F.
    Local _lRet := .T.
    Local cCodTur := "'"

    Private aRet    := {}

    lRet := Pergunta()

	If lRet .And. !Empty(oMdlCND:GetValue("CND_CONTRA"))

        //Acha cï¿½digo do professor na tabela de fornecedores SA2
        cQuery := " SELECT * FROM " + RetSqlTab("ZBF") + CRLF
        cQUery += " INNER JOIN " + RetSqlTab("CNA") + " ON CNA.D_E_L_E_T_ = ' ' " + CRLF
        cQUery += " AND CNA_FORNEC = ZBF_FORNEC " + CRLF
        cQuery += " AND CNA_CONTRA = '" + oMdlCND:GetValue("CND_CONTRA") + "' " + CRLF
        cQuery += " AND CNA_REVISA = '"+ oMdlCND:GetValue("CND_REVISA") + "' " + CRLF
        cQUery += " WHERE ZBF.D_E_L_E_T_ = ' ' " + CRLF
        cQuery += " AND ZBF_FILIAL = '"+ xFilial("CND") + "' " + CRLF
        
		IF Select("CODPRO") <> 0
            CODPRO->(dbCloseArea())
		EndIf
        
        MPSysOpenQuery( cQuery, 'CODPRO' )


        //Acha Turmas cadastradas na necessidade
        cQryZBH := " SELECT * FROM " + RetSqlTab("ZBH") + CRLF
        cQryZBH += " INNER JOIN " + RetSqlTab("ZBB") + " ON ZBB.D_E_L_E_T_ = ' ' " + CRLF
        cQryZBH += " AND ZBB_CODIGO = ZBH_CODNEC " + CRLF
        cQryZBH += " AND ZBB_CONTRA = '" + oMdlCND:GetValue("CND_CONTRA") + "' " + CRLF
        cQryZBH += " WHERE ZBH_FILIAL = '" + xFilial("ZBH") + "' " + CRLF
        cQryZBH += " AND ZBH.D_E_L_E_T_ = ' ' " + CRLF
        
		IF Select("CDTUR") <> 0
             CDTUR->(dbCloseArea())
		EndIf
        
        MPSysOpenQuery( cQryZBH, 'CDTUR' )

		While CDTUR->(!EOF())
                  cCodTur += CDTUR->ZBH_TURMA
            CDTUR->(dbSkip())

			If CDTUR->(!EOF())
                        cCodTur += "','"
			Else
                        cCodTur += "' "
			EndIf
		EndDo
     
        //Seleciona dados do SGE da tabela de professores
         cQry := "    SELECT DATA, PERIODO_LETIVO, MODALIDADECURSO, TURMA_NOME_ITEMCONTABIL, SUM(QTD_HORAS_NUM) as HORAS, PROF_NOME " + CRLF
         cQry += "    FROM rm.ZGTI_VIS_AULA_DOCENTE_PRT@RMSGE " + CRLF
         cQry += "    WHERE CODPROF = '" + Alltrim(CODPRO->ZBF_CODPRO) + "' " + CRLF
         cQry += "    AND DATA BETWEEN TO_DATE('" +DtoS(aRet[1])+ "', 'YYYYMMDD')  AND TO_DATE('" +DtoS(aRet[2])+ "', 'YYYYMMDD') " + CRLF
         cQry += "    AND CODTURMA IN (" + cCodTur +")"
         cQry += "    GROUP BY PERIODO_LETIVO, MODALIDADECURSO, TURMA_NOME_ITEMCONTABIL, PROF_NOME, DATA " + CRLF
         cQry += "    ORDER By DATA, PERIODO_LETIVO, MODALIDADECURSO, TURMA_NOME_ITEMCONTABIL " + CRLF

        TCQuery cQry New Alias "QRY"
        
        //Setando o tamanho da rï¿½gua
        Count To nTotal
        ProcRegua(nTotal)
        
        //Enquanto houver dados
		If nTotal <> 0
                  QRY->(DbGoTop())
			While !QRY->(EoF())
                //Atualizar rï¿½gua de processamento
                nAtual++
                IncProc("Adicionando informações das Aulas (" + cValToChar(nAtual) + " de " + cValToChar(nTotal) + ")...")
                
                //Adiciona o item no aCols
                aAdd(aVetor, {.F., ;
                    DtoC(QRY->DATA),;
                    ALLTRIM(QRY->PERIODO_LETIVO),;
                    ALLTRIM(QRY->MODALIDADECURSO),;
                    ALLTRIM(QRY->TURMA_NOME_ITEMCONTABIL),;
                    cValtoChar(QRY->HORAS),; // 6
                    Alltrim(CODPRO->ZBF_CODPRO) })
                
                QRY->(DbSkip())
			EndDo
		Else
                  Aviso( "Atenção","Não existe turma para essa Periodo/Docente.")
                  aAdd(aVetor,{.F.,,,,,})
                  _lRet := .F.
		EndIf

        QRY->(DbCloseArea())
        CODPRO->(DbCloseArea())
        CDTUR->(DbCloseArea())

	Else
        Aviso("Atenção","Operação não concluida.")     
	EndIf

Return(_lRet)



///////////////////////////////////////////////////////////////////////////////////
//+-----------------------------------------------------------------------------+//
//| PROGRAMA  | ListBoxMark.prw      | AUTOR | Robson Luiz  | DATA | 18/01/2004 |//
//+-----------------------------------------------------------------------------+//
//| DESCRICAO | Funcao - u_ListBoxMar()                                         |//
//|           | Fonte utilizado no curso oficina de programacao.                |//
//|           | Funcao que marca ou desmarca todos os objetos                   |//
//+-----------------------------------------------------------------------------+//
///////////////////////////////////////////////////////////////////////////////////
Static Function Marca(lMarca)
Local i := 0
	For i := 1 To Len(aVetor)
   aVetor[i][1] := lMarca
	Next i
oLbx:Refresh()
Return

//=====================================================================================

Static Function AtuHR(oMdlCND)

Local nTotAula := 0
Local x
Local aVetNew   := {}
Local aZBG        := {}

	For x := 1 to Len(aVetor)

		If aVetor[x,1]
                  nTotAula += Val(aVetor[x,6])
                  aAdd(aZBG,{aVetor[x,7],aVetor[x,1],aVetor[x,2],aVetor[x,3],aVetor[x,4],aVetor[x,5],aVetor[x,6]})
		Else
                  aAdd(aVetNew,{aVetor[x,1],aVetor[x,2],aVetor[x,3],aVetor[x,4],aVetor[x,5],aVetor[x,6],aVetor[x,7]})
		EndIf

	Next x

aVetor := {}
aVetor := aClone(aVetNew)

// grava informaï¿½ï¿½es conforme marcaï¿½ï¿½o das horas medidas na tabela ZBG
	Begin Transaction
		For x := 1 to Len(aZBG)
            RecLock("ZBG", .T.)

            ZBG->ZBG_FILIAL := xFilial("ZBG")
            ZBG->ZBG_DOCENT   := aZBG[x,1]
            ZBG->ZBG_PERLET   := aZBG[x,4]
            ZBG->ZBG_MODAL    := aZBG[x,5]
            ZBG->ZBG_TURMA    := aZBG[x,6]
            ZBG->ZBG_HORAS    := Val(aZBG[x,7])
            ZBG->ZBG_CONTRA   := oMdlCND:GetValue("CND_CONTRA") + "/" + oMdlCND:GetValue("CND_REVISA")
            ZBG->ZBG_MEDICA   := oMdlCND:GetValue("CND_NUMMED")
            ZBG->ZBG_DATA   := CtoD(aZBG[x,3])

            ZBG->(MsUnLock())
		Next X
	End Transaction

Return(nTotAula)

//=============================================================================

Static Function Pergunta()

   Local aPergs := {}
   Local lRet := .F.

    aAdd( aPergs ,{1,"Data de : "  ,dDataBase , "",'.T.',"" ,'.T.', 70, .T.})
    aAdd( aPergs ,{1,"Data até : "  ,dDataBase , "",'.T.',"" ,'.T.', 70, .T.})

    lRet := ParamBox(aPergs ,"Período de Aula... ",aRet)


Return(lRet)

//==============================================================================
//Validaçao da Medição com contrato expirado para contrato de docente
Static Function vlTimeDoc(oMdl)
Local aArea := GetArea()
Local cFilCtr := FWFldGet('CND_FILCTR')
Local cNumCtr := FWFldGet('CND_CONTRA')
local cRevCtr := FWFldGet('CND_REVISA')
Local cMed 		:= SuperGetMv("MV_CNFVIGE",,"N")
Local cCtrDoc	:= SuperGetMv("MV_XTPCTDC",,"")	// Contrato de Docente
Local nMedDt	:= SuperGetMv("MV_XMEDDT",,5)	// Máximo Limite para medição depois do fim do contrato
Local lRet 		:= .T.

If cMed == "S"
	DbSelectArea('CN9')
	DbSetOrder(1)	//CN9_FILIAL+CN9_NUMERO+CN9_REVISA
	CN9->(DbSeek(cFilCtr+cNumCtr+cRevCtr))
	If CN9->CN9_TPCTO == Alltrim(cCtrDoc)
		If dDatabase > CN9->CN9_DTFIM + nMedDt //Correcao da data maxima limite para medicao do contrato-11/07/2022(validado com Bianca)   
			lRet := .F.
			Help(Nil,Nil,"Operação não concluida",Nil, "Data de Validade Maior que permitido para contrato de Docente" ;
					,1,0,Nil,Nil,Nil,Nil,Nil,{"Operação não foi gravada."})
		EndIf
	Else
		// ALTERADO POR BRENO NOGUEIRA(J2A) EM 19/08/2022
		// CASO O TIPO DE CONTRATO NÃO FOR DOCENTE VOU VALIDAR A DATA DE VENCIMENTO DO CONTRATO
		If dDatabase > CN9->CN9_DTFIM
			lRet := .F.
			Help(Nil,Nil,"Operação não concluida",Nil, "Data de Validade Maior que permitido" ,1,0,Nil,Nil,Nil,Nil,Nil,{"Operação não foi gravada."})
		ENDIF			
	ENDIF
else
	lRet := .F.
	Help(Nil,Nil,"Operação não concluida",Nil, "Verifique o parametro MV_CNFVIGE pois esta com N ou nao existe" ;
	,1,0,Nil,Nil,Nil,Nil,Nil,{"Operação não foi gravada."})
EndIf

restArea(aArea)

Return(lRet)

/*/{Protheus.doc} u_click
	(Funcao executado ao dar duplo click)
	@type  Function
	@author user
	@since 23/08/2022
	@version version
	@param param_name, param_type, param_descr
	@return return_var, return_type, return_description
	@example
	(examples)
	@see (links_or_references)
	/*/
Function u_click // duplo click

    aVetor[oLbx:nAt,1] := !aVetor[oLbx:nAt,1]
    If aVetor[oLbx:nAt,1] // marca .T.
		_nVar += Val(aVetor[oLbx:nAt,6]) // Quantidade de hora
	Else 
		_nVar -= Val(aVetor[oLbx:nAt,6])
    EndIf
Return 

/*/{Protheus.doc} u_Marca
	(Faz o marca e desmarca na rotina)
	@type  Function
	@author user
	@since 23/08/2022
	@version version
	@param param_name, param_type, param_descr
	@return return_var, return_type, return_description
	@example
	(examples)
	@see (links_or_references)
	/*/
Function u_Marca  // Marca Desmarca tudo 
	Local nx 
    aEval(aVetor,{|x| x[1]:=lChk })
	
	_nVar := 0
	 
	For nx := 1 to Len(aVetor)
		If aVetor[nx ,1] // marca .T.
			_nVar += Val(aVetor[nx ,6]) // Quantidade de hora
		EndIf
	Next nx 	
Return 
