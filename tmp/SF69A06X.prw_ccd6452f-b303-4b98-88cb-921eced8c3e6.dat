#INCLUDE "PROTHEUS.CH"
#INCLUDE "TOTVS.CH"
#INCLUDE "FWMVCDEF.CH"
#INCLUDE "PARMTYPE.CH"

//PARA BUTTON - SAVE
#DEFINE STYBTN0003 "QPushButton {background-image: url(rpo:RPMSAVE.PNG);background-repeat: none; margin: 2px; " +;
	" border-style: outset;" +;
	" border-width: 2px;" +;
	" border: 1px solid #C0C0C0;" +;
	" border-radius: 0px;" +;
	" border-color: #C0C0C0;" +;
	" font: bold 13px Arial;" +;
	" padding: 6px;" +;
	"}" +;
	"QPushButton:pressed {background-color: #e6e6f9;border-style: inset;}"

//PARA BUTTON - ERROR
#DEFINE STYBTN004 "QPushButton {background-image: url(rpo:UPDERROR.PNG);background-repeat: none; margin: 2px; " +;
	" border-style: outset;" +;
	" border-width: 2px;" +;
	" border: 1px solid #C0C0C0;" +;
	" border-radius: 0px;" +;
	" border-color: #C0C0C0;" +;
	" font: bold 13px Arial;" +;
	" padding: 6px;" +;
	"}" +;
	"QPushButton:pressed {background-color: #e6e6f9;border-style: inset;}"

//PARA BUTTON - FILTRO
#DEFINE STYBTN005 "QPushButton {background-image: url(rpo:BRW_FILTRO.PNG);background-repeat: none; margin: 2px; " +;
	" border-style: outset;" +;
	" border-width: 2px;" +;
	" border: 1px solid #C0C0C0;" +;
	" border-radius: 0px;" +;
	" border-color: #C0C0C0;" +;
	" font: bold 13px Arial;" +;
	" padding: 6px;" +;
	"}" +;
	"QPushButton:pressed {background-color: #e6e6f9;border-style: inset;}"

#xtranslate bSetGet(<uVar>) => {|u| If(PCount() == 0,<uVar>,<uVar> := u)}

Static bSx3Spc   := {|cCpo| Space(GetSx3Cache(cCpo,"X3_TAMANHO")) }                        
Static bSx3Tam   := {|cCpo| GetSx3Cache(cCpo,"X3_TAMANHO") }                               
Static bSx3Rel   := {|cCpo| GetSx3Cache(cCpo,"X3_RELACAO" ) }                               
Static bSx3Desc  := {|cCpo| GetSx3Cache(cCpo,"X3_TITULO" ) }                               
Static bSx3Tipo  := {|cCpo| GetSx3Cache(cCpo,"X3_TIPO"   ) }                               
Static bSx3Dec   := {|cCpo| GetSx3Cache(cCpo,"X3_DECIMAL") }                               
Static bSx3Pic   := {|cCpo| GetSx3Cache(cCpo,"X3_PICTURE") }                               
Static bSx3Box   := {|cCpo| GetSx3Cache(cCpo,"X3_CBOX"   ) }

User Function SF69A06X()

	Local oSMAIS := Nil
	Local oSMCON := Nil
	
	Local cCert := GetMv("MV_XSMAISC",.F.,"")
	Local cKey := GetMv("MV_XSMAISK",.F.,"")
	Local cPsw := GetMv("MV_XSMAISP",.F.,"")
	Local cSocEmpr := GetMv("MV_XSMEMPR",.F.,"")
	Local cSocCodi := GetMv("MV_XSMCODI",.F.,"")
	Local cSocChv  := GetMv("MV_XSMCHV",.F.,"")
	Local cSocTpRet := GetMv("MV_XSMTRET",.F.,"json")
	
	Local lRet := .T.
	
	Private oCNB := Nil
	Private cAliasCNB := GetNextAlias()
	Private oSM := Nil
	Private cAliasSM := GetNextAlias()
	
	_SetOwnerPrvt( "aParam" , {} )	
	_SetOwnerPrvt( "cMesPar", "" )
	_SetOwnerPrvt( "lBaseEsta", .F.)
	
	/*
		Autor       : Carlos Ryve Gandini
		Data/Time   : 15/04/20 às 12:31:56
		Detalhe     : Instancia a Classe do SMAIS e Faz a carga dos dados
	*/
		oSMAIS := FIEM_SMAIS():New(cCert,cKey,cPsw,/*cUrl*/,/*cGetPar*/)         
		aParam := oSMAIS:SM_Param()
		
		If Empty(aParam)
			Return
		EndIF
			    
		cParSMAIS := '{"empresa":"'+cSocEmpr+'","codigo":"'+cSocCodi+'","chave":"'+cSocChv+'","tipoSaida":"'+cSocTpRet+'","datainicio":"XDATAINI","datafim":"XDATAFIM"}'

		aParam[2][2] := CTOD(StrTran( cValToChar(aParam[2][2]), cValToChar(Year(aParam[2][2])) , cValToChar(aParam[1]) ))
		aParam[2][3] := CTOD(StrTran( cValToChar(aParam[2][3]), cValToChar(Year(aParam[2][3])) , cValToChar(aParam[1]) ))

		cParSMAIS := StrTran( cParSMAIS, "XDATAINI", cValToChar(aParam[2][2]) )
		cParSMAIS := StrTran( cParSMAIS, "XDATAFIM", cValToChar(aParam[2][3]) )

		oSMAIS:cGetPar := cParSMAIS
		oSMAIS:Init()
		
		FWMsgRun( , {|oSay| oSMAIS:SM_ExportaDados()  },"Comunicação WS", "Aguarde...Integrando com WebService do SMAIS!" )

		cMesPar := cValToChar(Month(aParam[2][2]))
		cMesPar := Iif( Len(cMesPar) = 1, PadL(cMesPar,2,"0"), cMesPar )
		
		lBaseEsta := aParam[3]==2
		
		oSMCON := FIEMT_INI_SMAIS():New(cMesPar)
		lRet := oSMCON:Create()
		If lRet
			oSMCON:Init()
		EndIF
		oSMCON:Destroy(!lRet)
	
Return NIL

/*
	Method   : FIEMT_INI_SMAIS
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 02:01:59
	Descricao: Classe responsavel pela inicializacao do SMAIS
	Sintaxe  : <Vide Parametros Formais>
*/
CLASS FIEMT_INI_SMAIS From LongClassName
  
  DATA IsLoadingRel

  DATA IsLoadingSA1
  DATA IsLoadingCNA      
  DATA IsLoadingCNB      
  DATA IsLoadingSM
  
  DATA lSucess     
  DATA cErro        

  DATA nTipoMedicao
  
  DATA cTitulo      
  DATA cURL_ExDados 
  DATA cMesPar      
  DATA cMarca       
  
  DATA oSA1         AS OBJECT
  DATA oCNA         AS OBJECT
  //DATA oCNB         AS OBJECT
  //DATA oSM          AS OBJECT

  DATA oBrwSA1      AS OBJECT
  DATA oBrwCNA      AS OBJECT
  DATA oBrwCNB      AS OBJECT
  DATA oBrwSMAIS    AS OBJECT
  
  DATA oRelCNA      AS OBJECT
  DATA oRelCNB      AS OBJECT
  DATA oRelSMAIS    AS OBJECT
  
  DATA oDlg           AS OBJECT
  DATA oOwner         AS OBJECT
  DATA oOwnerPAR      AS OBJECT
  DATA oOwnerSA1      AS OBJECT
  DATA oOwnerCNA      AS OBJECT
  DATA oOwnerCNB      AS OBJECT
  DATA oOwnerSMAIS    AS OBJECT

	DATA cAliasSA1 
	//DATA cAliasSB1 
	DATA cAliasCNA 
	//DATA cAliasCNB 
	//DATA cAliasSM 
  
  Method New() CONSTRUCTOR
  Method Create()
  Method Init()
  Method Destroy()
  Method LoadSX3()

  
  Method LoadDialog()
  Method LoadOwners()
  Method LoadParam()
  
  Method LoadBrwSA1()
  Method LoadBrwCNA()

  Method LoadBrwCNB()
	Method ChangeCNB()
	Method ValidBrwCNB()

  Method LoadBrwSMAIS()
	Method MarkSMAIS()
	Method SalvarAmarracao()
  
  Method LoadRelations()
	Method LoadFilters()
		
	Method UpdateVinculos()
	Method Totalizadores()
	Method FiltersParam()
	Method GetMedicao()	
	
ENDCLASS

/*
	Method   : New
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 02:07:47
	Descricao: Method Constructor
	Sintaxe  : <Vide Parametros Formais>
*/
Method New(cMesPar) Class FIEMT_INI_SMAIS
	
	PARAMTYPE 0 VAR cMesPar AS CHARACTER
	
	::IsLoadingRel := .F.
  ::IsLoadingSA1 := .F.
  ::IsLoadingCNA := .F.
  ::IsLoadingCNB := .F.
  ::IsLoadingSM  := .F.

  ::nTipoMedicao := 1

	::lSucess   := .F.  
	::cErro     := ""
	
	::cMesPar   := cMesPar
	::cMarca    := GetMark ( ,"CNB", "CNB_XOK" ) 
	::cTitulo   := "Integração Protheus x SMAIS - Exporta Dados"

Return self

/*
	Method   : Create
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 02:14:53
	Descricao: Method Create
	Sintaxe  : <Vide Parametros Formais>
*/
Method Create() Class FIEMT_INI_SMAIS
	Local lReturn := .T.
	
	::oOwner      := Nil
	::oOwnerPAR   := Nil
  ::oOwnerSA1   := Nil
  ::oOwnerCNA   := Nil
  ::oOwnerCNB   := Nil
  ::oOwnerSMAIS := Nil

	::oSA1      := Nil
  ::oCNA      := Nil
  //::oCNB      := Nil
  //::oSM       := Nil

	::cAliasSA1 := GetNextAlias()
	::cAliasCNA := GetNextAlias()
	//::cAliasCNB := GetNextAlias()
	//::cAliasSM := GetNextAlias()

  ::oBrwSA1   := FWMBrowse():New()
  ::oBrwCNA   := FWMBrowse():New()
  ::oBrwCNB   := FWMarkBrowse():New()
  ::oBrwSMAIS := FWMarkBrowse():New() 
	
 	//Corrige marcacao no carregamento do Browse
 	FWMsgRun( , {|oSay| lReturn := ::UpdateVinculos(oSay) },"Initializing", "Wait...Correcting Important Links...Conciliação S+" )
 	
	
	If lReturn
		//Load Dialog
		::LoadDialog()
		
		//Load dos Owners
		::LoadOwners()

		//Load dos Parametros
		::LoadParam()

		//Browse de Clientes
		FWMsgRun( , {|oSay| lReturn := ::LoadBrwSA1()  },"Initializing", "Wait...Loading SA1...Conciliação S+" )
	EndIf 	
	
	If lReturn
		//Browse de Contratos
		FWMsgRun( , {|oSay| lReturn := ::LoadBrwCNA()  },"Initializing", "Wait...Loading CNA...Conciliação S+" )
	EndIf
	
	If lReturn
		//Browse dos Produtos SMAIS
		FWMsgRun( , {|oSay| ::LoadBrwSMAIS()  },"Initializing", "Wait...Loading S+...Conciliação S+" )
		
		//Browse do Itens do Contratos
		FWMsgRun( , {|oSay| ::LoadBrwCNB()  },"Initializing", "Wait...Loading CNB...Conciliação S+" )

		//Loading os Relation
		FWMsgRun( , {|oSay| ::LoadRelations()  },"Initializing", "Wait...Loading Relationation...Conciliação S+" )

		//Loading os Filters
		FWMsgRun( , {|oSay| ::LoadFilters()  },"Initializing", "Wait...Loading Filters...Conciliação S+" )
	EndIf 	

Return lReturn

/*
	Method   : Init
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 02:15:31
	Descricao: Method Init
	Sintaxe  : <Vide Parametros Formais>
*/
Method Init() Class FIEMT_INI_SMAIS

		FWMsgRun( , {|oSay| ::oBrwSA1:Activate()   },"Attention", "Wait...Activating SA1" )
		FWMsgRun( , {|oSay| ::oBrwCNA:Activate()   },"Attention", "Wait...Activating CNA" )
		FWMsgRun( , {|oSay| ::oBrwSMAIS:Activate() },"Attention", "Wait...Activating S+"  )
		FWMsgRun( , {|oSay| ::oBrwCNB:Activate()   },"Attention", "Wait...Activating CNB" )
		
		::oRelCNA:Activate()
		::oRelCNB:Activate()
		::oRelSMAIS:Activate()


	Activate MsDialog ::oDlg Center

Return

/*
	Method   : Destroy
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 20:27:43
	Descricao: Responsael pela destruica dos objects
	Sintaxe  : <Vide Parametros Formais>
*/
Method Destroy(lErro) Class FIEMT_INI_SMAIS

	PARAMTYPE 0 VAR lErro AS LOGICAL OPTIONAL DEFAULT .F.
	
  ::cTitulo      := Nil
  ::cURL_ExDados := Nil
  ::cMesPar      := Nil
  ::cMarca       := Nil
  
	If ::IsLoadingSA1
	  ::oSA1:Delete()
	  FreeObj( ::oSA1 )
	EndIf
		
	If ::IsLoadingCNA
	  ::oCNA:Delete()
	  FreeObj( ::oCNA )         
	EndIf
	
  If ::IsLoadingCNB
	  //::oCNB:Delete()
	  //FreeObj( ::oCNB )         
	  oCNB:Delete()
	  FreeObj( oCNB )         
	EndIf
	  
	If ::IsLoadingSM
	  oSM:Delete()
	  FreeObj( oSM )         
	EndIf

	If ::IsLoadingRel
	
	  FreeObj( ::oRelCNA   )
	  FreeObj( ::oRelCNB   )
	  FreeObj( ::oRelSMAIS )
	
	EndIf  

  FreeObj( ::oDlg        )
  FreeObj( ::oOwner      )
  FreeObj( ::oOwnerPAR   )
  FreeObj( ::oOwnerSA1   )
  FreeObj( ::oOwnerCNA   )
  FreeObj( ::oOwnerCNB   )
  FreeObj( ::oOwnerSMAIS )

  FreeObj( ::oBrwSA1   )
  FreeObj( ::oBrwCNA   )
  FreeObj( ::oBrwCNB   )
  FreeObj( ::oBrwSMAIS )

	If Select(::cAliasSA1) > 0
		(::cAliasSA1)->( dbCloseArea() )
	EndIf	
	If Select(::cAliasCNA) > 0
		(::cAliasCNA)->( dbCloseArea() )
	EndIf	

	If Select(cAliasCNB) > 0
		(cAliasCNB)->( dbCloseArea() )
	EndIf	
	If Select(cAliasSM) > 0
		(cAliasSM)->( dbCloseArea() )
	EndIf	

	::cAliasSA1 := Nil
	::cAliasCNA := Nil
	cAliasCNB := Nil
	cAliasSM := Nil

Return

/*
	Method   : LoadDialog
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 12:11:18
	Descricao: Responsavel pela criacao da Dialog
	Sintaxe  : <Vide Parametros Formais>
*/
Method LoadDialog() Class FIEMT_INI_SMAIS
	Local aCoors := FWGetDialogSize( oMainWnd )
	Local bClose		:=	{ || ::oDlg:End() }
	
	Define MsDialog ::oDlg Title ::cTitulo From aCoors[1], aCoors[2]	To aCoors[3], aCoors[4] Pixel

Return

/*
	Method   : LoadOwners
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 02:57:52
	Descricao: Method responsavel pelos Owners 
	Sintaxe  : <Vide Parametros Formais>
*/
Method LoadOwners() Class FIEMT_INI_SMAIS

	::oOwner := FWLayer():New()
	::oOwner:Init( ::oDlg, .F., .T. )
	
	::oOwner:AddLine( 'PARAMETROS', 15, .F. )
	::oOwner:AddLine( 'TOP'       , 40, .F. )
	::oOwner:AddLine( 'BOT'       , 45, .F. )	

	::oOwner:AddCollumn( 'PAR1' , 100, .T., 'PARAMETROS' )
	::oOwner:AddCollumn( 'TOP1' , 040, .T., 'TOP' )
	::oOwner:AddCollumn( 'TOP2' , 060, .T., 'TOP' )
	::oOwner:AddCollumn( 'BOT1' , 050, .T., 'BOT' )	
	::oOwner:AddCollumn( 'BOT2' , 050, .T., 'BOT' )	

	::oOwnerPAR := ::oOwner:GetColPanel( 'PAR1', 'PARAMETROS' )
	::oOwnerSA1 := ::oOwner:GetColPanel( 'TOP1', 'TOP' )
	::oOwnerCNA := ::oOwner:GetColPanel( 'TOP2', 'TOP' )
	::oOwnerCNB := ::oOwner:GetColPanel( 'BOT1', 'BOT' ) 
	::oOwnerSMAIS := ::oOwner:GetColPanel( 'BOT2', 'BOT' ) 

Return

/*
	Method   : LoadBrwSA1
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 02:15:58
	Descricao: Method responsavel montagem do browse SA1
	Sintaxe  : <Vide Parametros Formais>
*/
Method LoadBrwSA1( ) Class FIEMT_INI_SMAIS
	
	Local lRet := .T.
	
  Local	aStru	:= ::LoadSX3("SA1")
  Local aColumns	:= {}
	
	Local cQuery := ""
	Local cChave := ""     
	Local cFieldsF := "A1_COD|A1_LOJA|A1_NOME|A1_CGC|A1_XSMAIS" 

	Local nX			  := 0

  ::IsLoadingSA1 := .T.

	::oSA1 := FwTemporaryTable():New(::cAliasSA1)
	::oSA1:SetFields(aStru)
	::oSA1:AddIndex("1",{"A1_COD" ,"A1_LOJA","A1_NOME"})
	::oSA1:AddIndex("2",{"A1_NOME","A1_COD" ,"A1_LOJA"})
	::oSA1:AddIndex("3",{"A1_CGC" ,"A1_COD" ,"A1_LOJA"})
	::oSA1:AddIndex("4",{"A1_XSMAIS"                  })
	::oSA1:Create()

	cQuery += "SELECT DISTINCT * FROM (SELECT SA1.A1_COD, SA1.A1_LOJA, SA1.A1_NOME, SA1.A1_CGC, SA1.A1_XSMAIS  FROM "
	cQuery += RetSqlName("SA1") + " SA1 "
	cQuery += "WHERE SA1.A1_FILIAL = '" + FWxFilial("SA1") + "' "
	cQuery += " AND EXISTS(SELECT ZG7.ZG7_CODEMP FROM "+ RetSqlName("ZG7") + " ZG7"
	cQuery += "      WHERE ZG7.ZG7_FILIAL = '" + FWxFilial("ZG7") + "' AND ZG7.ZG7_CODEMP = SA1.A1_XSMAIS AND ZG7.D_E_L_E_T_ = ' ')"
	cQuery += " AND SA1.D_E_L_E_T_ = ' ' "
	cQuery += "ORDER BY "+ SqlOrder(SA1->(IndexKey()))
	cQuery += ")"
	
	MemoWrite( "C:\tmp\_SA1.SQL", cQuery )

	cChave := SA1->(IndexKey())
	Processa({||SqlToTrb(cQuery, aStru, ::cAliasSA1)})
	DbSetOrder(0)
	
	For nX := 1 To Len(aStru)
		If	rTrim(aStru[nX][1]) $ cFieldsF
			AAdd(aColumns,FWBrwColumn():New())
			aColumns[Len(aColumns)]:SetData( &("{||"+aStru[nX][1]+"}") )
			aColumns[Len(aColumns)]:SetTitle(RetTitle(aStru[nX][1]))
			aColumns[Len(aColumns)]:SetSize(aStru[nX][3])
			aColumns[Len(aColumns)]:SetDecimal(aStru[nX][4])
			aColumns[Len(aColumns)]:SetPicture(PesqPict("SA1",aStru[nX][1]) )  
		EndIf
	Next nX

	nCntSA1 := (::cAliasSA1)->( RecCount() )

	If nCntSA1 == 0
			cMsgHelp := 'Não foi encotrado cliente no cadastro.'
			aMsgHelp := {"Verifique se o código SMAIS está preenchido corretamente no cadastro do cliente."}
	    Help(NIL, NIL, "Error Cliente", NIL, cMsgHelp, 1, 0, NIL, NIL, NIL, NIL, NIL, aMsgHelp )
			lRet := .F.
	EndIf
	
	::oBrwSA1:SetOwner( ::oOwnerSA1 )
	::oBrwSA1:SetAlias(::cAliasSA1)
	::oBrwSA1:SetDescription("Clientes")
	::oBrwSA1:SetMenuDef("")
	::oBrwSA1:SetProfileID( 'ID_SA1' )
	::oBrwSA1:DisableDetails()
	::oBrwSA1:DisableConfig()
	::oBrwSA1:DisableLocate()
	::oBrwSA1:DisableReport()
	::oBrwSA1:DisableSaveConfig() 
	::oBrwSA1:DisableSeek() 
	::oBrwSA1:SetColumns(aColumns)
	::oBrwSA1:ForceQuitButton()
	
Return lRet


/*
	Method   : LoadBrwCNA
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 02:15:58
	Descricao: Method responsavel montagem do browse CNA
	Sintaxe  : <Vide Parametros Formais>
*/
Method LoadBrwCNA( oWner ) Class FIEMT_INI_SMAIS
	
	Local lRet := .T.
	Local cCposOnw := "CNA_FILIAL"
	Local cCposFlt := "CNA_CONTRA,CNA_NUMERO,CNA_XDESC,CNA_REVISA,CNA_FORNEC,CNA_LJFORN,CNA_CLIENT,CNA_LOJACL,CNA_DTINI,CNA_VLTOT,CNA_SALDO,CNA_TIPPLA,CNA_DTFIM,CNA_CRONOG,CNA_XOPORT,CNA_XREVOP,CNA_XPROPO,CNA_XPREVI,CNA_XCODTB,CNA_PERIOD"
  Local	aStru	:= ::LoadSX3("CNA",cCposFlt,cCposOnw) //CNA->(DBSTRUCT())
	Local aColumns	:= {}
	
	Local cQuery := ""
	Local cChave := ""     
	Local cInto := ""    
	Local cFields := ""
	Local cFieldsF := "CNA_IDDOC|CNA_STATUS|RECCNA" 

	Local nX			  := 0
	
	::IsLoadingCNA := .T.
	
	aEval( aStru, { |f| cFields += f[1] + "," } )
	cFields := Subs( cFields, 1, Len(cFields)-1 ) 
	cInto := "(" + cFields + ", RECCNA)"

	Aadd( aStru, {"CNA_STATUS","C",1,0} )
	Aadd( aStru, {"RECCNA","N",14,0})
	
	::oCNA := FwTemporaryTable():New(::cAliasCNA)
	::oCNA:SetFields(aStru)
	::oCNA:AddIndex("1",{"CNA_CONTRA","CNA_REVISA"})
	::oCNA:AddIndex("2",{"CNA_STATUS"                          })
	::oCNA:Create()

  cQuery += " INSERT INTO " + ::oCNA:GetRealName() + cInto + CRLF
	cQuery += "SELECT DISTINCT * FROM (" + CRLF
	cQuery += "SELECT " + cFields + " ,CNA.R_E_C_N_O_ RECCNA FROM "+ CRLF
	cQuery += RetSqlName("CNA") + " CNA, "+ CRLF
	cQuery += RetSqlName("CN9") + " CN9, "+ CRLF
	cQuery += RetSqlName("CNB") + " CNB, "+ CRLF
	cQuery += RetSqlName("SA1") + " SA1 "+ CRLF
	cQuery += "WHERE CNA.CNA_FILIAL = '" + Iif(lBaseEsta,GetMv("MV_XSMFIBS",.F.,"02MT0001"),FWxFilial("CNA"))+ "' "+ CRLF
	cQuery += " AND CN9.CN9_FILIAL = CNA.CNA_FILIAL "+ CRLF
	cQuery += " AND CNA.CNA_CONTRA = CN9.CN9_NUMERO "+ CRLF
	cQuery += " AND CNA.CNA_REVISA = CN9.CN9_REVISA "+ CRLF
	cQuery += " AND CNA.CNA_CLIENT = SA1.A1_COD "+ CRLF
	cQuery += " AND CNA.CNA_LOJACL = SA1.A1_LOJA "+ CRLF
	cQuery += " AND CNB.CNB_FILIAL  = CNA.CNA_FILIAL" + CRLF
	cQuery += " AND CNB.CNB_CONTRA  = CNA.CNA_CONTRA"+ CRLF
	cQuery += " AND CNB.CNB_REVISA  = CNA.CNA_REVISA"+ CRLF
	cQuery += " AND CN9.CN9_SITUAC =  '05' "+ CRLF
	cQuery += " AND (CN9.CN9_DTFIM = ' ' OR  CN9_DTFIM >= '" + DToS(dDataBase) + "')"+ CRLF
	cQuery += " AND CNB.CNB_SLDMED  > 0"+ CRLF
	cQuery += " AND EXISTS( SELECT 1 FROM "+ CRLF
	cQuery += RetSqlName("ZG7") + " ZG7, "+ CRLF
	cQuery += RetSqlName("ZB0") + " ZB0  "+ CRLF
	If lBaseEsta
		cQuery += " WHERE ZG7.ZG7_FILIAL = '" + FWxFilial("ZG7") + "'"
	Else	
		cQuery += " WHERE ZG7.ZG7_FILIAL = CNB.CNB_FILIAL"
	EndIf
	cQuery += " AND ZG7.ZG7_CODEXA = ZB0.ZB0_CODEXA" 
	cQuery += " AND CNB.CNB_PRODUT = ZB0.ZB0_COD"
	cQuery += " AND ZG7.ZG7_CODEMP = SA1.A1_XSMAIS"
	cQuery += " AND SUBSTR(ZG7.ZG7_DTRESU,5,2) = '" + Self:cMesPar + "'" + CRLF
	cQuery += " AND ZG7.D_E_L_E_T_ = ' '" 
	cQuery += " AND ZB0.D_E_L_E_T_ = ' '" 
	cQuery += " )"							  
	cQuery += " AND CNA.D_E_L_E_T_ = ' ' "+ CRLF
	cQuery += " AND CN9.D_E_L_E_T_ = ' ' "+ CRLF
	cQuery += " AND CNB.D_E_L_E_T_ = ' ' "+ CRLF
	cQuery += " AND SA1.D_E_L_E_T_ = ' ' "+ CRLF
	cQuery += "ORDER BY "+ SqlOrder(CNA->(IndexKey())) + CRLF
	cQuery += ")" 

	if TCSqlExec(cQuery) < 0 
		MemoWrite("C:\tmp\OpsCNA.tx", TCSqlError()) 
		lRet := .F.
	endif
	
	MemoWrite( "C:\tmp\_CNA.SQL", cQuery )

		For nX := 1 To Len(aStru)
			If	!rTrim(aStru[nX][1]) $ cFieldsF
				AAdd(aColumns,FWBrwColumn():New())
				aColumns[Len(aColumns)]:SetData( &("{||"+aStru[nX][1]+"}") )
				aColumns[Len(aColumns)]:SetTitle(RetTitle(aStru[nX][1]))
				aColumns[Len(aColumns)]:SetSize(aStru[nX][3])
				aColumns[Len(aColumns)]:SetDecimal(aStru[nX][4])
				aColumns[Len(aColumns)]:SetPicture(PesqPict("CNA",aStru[nX][1]) )  
			EndIf
		Next nX
		
		nCntCNA := (::cAliasCNA)->( RecCount() )

		If nCntCNA == 0
				cMsgHelp := "Não há dados a processar no mês de ["+Upper(aParam[2][1])+"]"
				aMsgHelp := {"Verifique se existe dados no SMAIS no mês selecionado, ou escolha outro mês."}
		    Help(NIL, NIL, "Error Exporta Dados", NIL, cMsgHelp, 1, 0, NIL, NIL, NIL, NIL, NIL, aMsgHelp )
				lRet := .F.
		EndIf

		::oBrwCNA:SetOwner( ::oOwnerCNA )
		::oBrwCNA:SetAlias(::cAliasCNA)
		::oBrwCNA:SetDescription("Contrato")
		::oBrwCNA:AddLegend("CNA_STATUS $ '3|7|8'" , "RED", "" )
		::oBrwCNA:AddLegend("!CNA_STATUS $ '3|7|8'", "GREEN"  , "" )
		::oBrwCNA:SetMenuDef("")
		::oBrwCNA:SetProfileID( 'ID_CNA' )
		::oBrwCNA:DisableDetails()
		::oBrwCNA:DisableConfig()
		::oBrwCNA:DisableLocate()
		::oBrwCNA:DisableReport()
		::oBrwCNA:DisableSaveConfig() 
		::oBrwCNA:DisableSeek() 
		::oBrwCNA:SetColumns(aColumns)
		::oBrwCNA:ForceQuitButton()
		
Return lRet

/*
	Method   : LoadBrwCNB
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 02:38:12
	Descricao: Method responsavel pela carga do items do contrato
	Sintaxe  : <Vide Parametros Formais>
*/
Method LoadBrwCNB() Class FIEMT_INI_SMAIS
	Local lRet := .T.
	Local aStru	:= CNB->(DBSTRUCT())
	Local aColumns	:= {}

	Local cQuery := ""
	Local cChave := ""
	Local cFieldsF := "CNB_IDDOC|RECCNB"

	Local cInto := ""    
	Local cFields := ""

	Local nX			  := 0
	
	::IsLoadingCNB := .T.

	aEval( aStru, { |f| cFields += f[1] + "," } )
	cFields := Subs( cFields, 1, Len(cFields)-1 ) 
	cInto := "(" + cFields + ", RECCNB)"

	Aadd(aStru, {"RECCNB","N",14,0})

	oCNB := FwTemporaryTable():New(cAliasCNB)
	oCNB:SetFields(aStru)
	oCNB:AddIndex("1",{"CNB_FILIAL","CNB_CONTRA","CNB_REVISA","CNB_PRODUT"})
	oCNB:Create()

		cQuery += "SELECT " + cFields + " ,CNB.R_E_C_N_O_ RECCNB FROM "+ CRLF
		cQuery += RetSqlName("CNA") + " CNA, "
		cQuery += RetSqlName("CN9") + " CN9, "
		cQuery += RetSqlName("CNB") + " CNB, "
		cQuery += RetSqlName("SA1") + " SA1 "
		cQuery += "WHERE CNA.CNA_FILIAL = '" + Iif(lBaseEsta,GetMv("MV_XSMFIBS",.F.,"02MT0001"),FWxFilial("CNA"))+ "' "+ CRLF
		cQuery += " AND CN9.CN9_FILIAL = CNA.CNA_FILIAL "
		cQuery += " AND CNA.CNA_CONTRA = CN9.CN9_NUMERO "
		cQuery += " AND CNA.CNA_REVISA = CN9.CN9_REVISA "
		cQuery += " AND CNA.CNA_CLIENT = SA1.A1_COD "
		cQuery += " AND CNA.CNA_LOJACL = SA1.A1_LOJA "
		cQuery += " AND CNB.CNB_FILIAL  = CNA.CNA_FILIAL" 
		cQuery += " AND CNB.CNB_CONTRA  = CNA.CNA_CONTRA"
		cQuery += " AND CNB.CNB_REVISA  = CNA.CNA_REVISA"
		cQuery += " AND CNB.CNB_SLDMED  > 0"
		cQuery += " AND CN9.CN9_SITUAC =  '05' "
		cQuery += " AND (CN9.CN9_DTFIM = ' ' OR  CN9_DTFIM >= '" + DToS(dDataBase) + "')"
		cQuery += " AND EXISTS( SELECT 1 FROM "+ CRLF
		cQuery += RetSqlName("ZG7") + " ZG7, "+ CRLF
		cQuery += RetSqlName("ZB0") + " ZB0  "+ CRLF

		If lBaseEsta
			cQuery += " WHERE ZG7.ZG7_FILIAL = '" + FWxFilial("ZG7") + "'"
		Else	
			cQuery += " WHERE ZG7.ZG7_FILIAL = CNB.CNB_FILIAL"
		EndIf

		cQuery += " AND ZG7.ZG7_CODEXA = ZB0.ZB0_CODEXA" 
		cQuery += " AND CNB.CNB_PRODUT = ZB0.ZB0_COD"
		cQuery += " AND ZG7.ZG7_CODEMP = SA1.A1_XSMAIS"
		cQuery += " AND SUBSTR(ZG7.ZG7_DTRESU,5,2) = '" + Self:cMesPar + "'" + CRLF
		cQuery += " AND ZG7.D_E_L_E_T_ = ' '" 
		cQuery += " AND ZB0.D_E_L_E_T_ = ' '" 
		cQuery += " )"							  
		cQuery += " AND CNA.D_E_L_E_T_ = ' ' "
		cQuery += " AND CN9.D_E_L_E_T_ = ' ' "
		cQuery += " AND CNB.D_E_L_E_T_ = ' ' "
		cQuery += " AND SA1.D_E_L_E_T_ = ' ' "
		cQuery += " ORDER BY "+ SqlOrder(CNB->(IndexKey()))
  	
		//MPSysOpenQuery( cQuery, cAliasCNB )
		//(cAliasCNB)->(DbGoTop())

		cChave := CNB->(IndexKey())
		Processa({|| SqlToTrb(cQuery, aStru, cAliasCNB) })
		DbSetOrder(0)
		DbSelectArea(cAliasCNB)

	  MemoWrite( "C:\tmp\_CNB.SQL", cQuery , aStru)
		
		For nX := 1 To Len(aStru)
			If	!rTrim(aStru[nX][1]) $ cFieldsF
				AAdd(aColumns,FWBrwColumn():New())
				aColumns[Len(aColumns)]:SetData( &("{||"+aStru[nX][1]+"}") )
				aColumns[Len(aColumns)]:SetTitle(RetTitle(aStru[nX][1]))
				aColumns[Len(aColumns)]:SetSize(aStru[nX][3])
				aColumns[Len(aColumns)]:SetDecimal(aStru[nX][4])
				aColumns[Len(aColumns)]:SetPicture(PesqPict("CNB",aStru[nX][1]) )  
			EndIf
		Next nX
		
		::oBrwCNB:SetOwner( ::oOwnerCNB )
		::oBrwCNB:SetDescription( 'Itens do Contrato' )
		::oBrwCNB:SetMenuDef( '' )	
		::oBrwCNB:DisableDetails()
		::oBrwCNB:DisableConfig()
		::oBrwCNB:DisableLocate()
		::oBrwCNB:DisableReport()
		::oBrwCNB:DisableSaveConfig() 
		::oBrwCNB:DisableSeek() 
		::oBrwCNB:SetAlias( cAliasCNB )
		::oBrwCNB:SetColumns(aColumns)
		::oBrwCNB:SetSemaphore(.T.)
		::oBrwCNB:SetProfileID( 'ID_CNB' )    
		::oBrwCNB:SetFieldMark( "CNB_XOK" )
		::oBrwCNB:SetCustomMarkRec( { || ::MarkSMAIS() } )
		::oBrwCNB:SetAfterMark( { |o| ::ValidBrwCNB( .T. ) })
		::oBrwCNB:SetChange( { |o| ::ChangeCNB() })
		::oBrwCNB:SetMark( ::cMarca  )
		
Return


/*
	Method   : LoadBrwSMAIS
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 02:39:37
	Descricao: Method responsavel pela carga dos produtos SMAIS
	Sintaxe  : <Vide Parametros Formais>
*/
Method LoadBrwSMAIS() Class FIEMT_INI_SMAIS

	Local aStru	:= ZG7->(DBSTRUCT())
	Local aColumns := {}
	Local cFieldsF := "ZG7_FILIAL|ZG7_CODEMP|ZG7_CODEXA|ZG7_DESCEX|ZG7_VLCOBR|ZG7_PRDTOT|ZG7_RECCNB|ZG7_OK"
	Local cFieldsN := "ZG7_FILIAL|RECZG7|ZG7_RECCNB"
	Local cFields := ""
	Local cQuery := ""
	Local nX := 0

	Local aFieldsB := { 'ZG7_CODEMP', 'ZG7_CODEXA', 'ZG7_DESCEX', 'ZG7_PRDTOT', 'ZG7_VLCOBR' }
	Local bConfirm	:=	{ || ::SalvarAmarracao( ::oBrwCNB, ::oBrwSMAIS ) }

	aEval( aStru, { |f| Iif(rTrim(f[1])$cFieldsF, cFields += f[1] + ",","") } )
	cFields := Subs( cFields, 1, Len(cFields)-1 ) 

	Aadd(aStru, {"RECZG7","N",14,0})

	oSM := FwTemporaryTable():New(cAliasSM)
	oSM:SetFields(aStru)
	oSM:AddIndex("1",{"ZG7_FILIAL","ZG7_CODEXA"})
	oSM:Create()

	::IsLoadingSM := .T.

		cQuery += "SELECT " + cFields + " ,ZG7.R_E_C_N_O_ RECZG7 FROM "+ CRLF
		cQuery += RetSqlName("ZG7") + " ZG7"+ CRLF
		cQuery += "WHERE ZG7.ZG7_FILIAL = '" + FWxFilial("ZG7") + "' "+ CRLF
		cQuery += " AND ZG7.ZG7_INTEGR = ' '"+ CRLF
		cQuery += " AND ZG7.ZG7_PRDTOT <> ' '"+ CRLF
		cQuery += " AND EXISTS( SELECT 1 FROM " + RetSqlName("SA1") + CRLF
		cQuery += " SA1 WHERE SA1.A1_FILIAL ='" + FWxFilial("SA1") + "' " + CRLF
		cQuery += " AND ZG7.ZG7_CODEMP = SA1.A1_XSMAIS AND SA1.D_E_L_E_T_ = ' ') "+ CRLF
		cQuery += " AND SUBSTR(ZG7.ZG7_DTRESU,5,2) = '" + Self:cMesPar + "'" + CRLF
		cQuery += " AND ZG7.D_E_L_E_T_ = ' '" + CRLF
		cQuery += " ORDER BY "+ SqlOrder(ZG7->(IndexKey()))
  	
		//MPSysOpenQuery( cQuery, ::cAliasSM )
		//(cAliasCNB)->(DbGoTop())
		cChave := ZG7->(IndexKey())
		Processa({|| SqlToTrb(cQuery, aStru, cAliasSM) })
		DbSetOrder(0)

		For nX := 1 To Len(aStru)
			If rTrim(aStru[nX][1]) $ cFieldsF .And. !rTrim(aStru[nX][1]) $ cFieldsN
				AAdd(aColumns,FWBrwColumn():New())
				aColumns[Len(aColumns)]:SetData( &("{||"+aStru[nX][1]+"}") )
				aColumns[Len(aColumns)]:SetTitle(RetTitle(aStru[nX][1]))
				aColumns[Len(aColumns)]:SetSize(aStru[nX][3])
				aColumns[Len(aColumns)]:SetDecimal(aStru[nX][4])
				aColumns[Len(aColumns)]:SetPicture(PesqPict("ZG7",aStru[nX][1]) )  
			EndIf
		Next nX

	::oBrwSMAIS:SetOwner( ::oOwnerSMAIS )
	::oBrwSMAIS:SetDescription( 'Produtos SMAIS' )
	::oBrwSMAIS:SetMenuDef( '' )
	//::oBrwSMAIS:DisableDetails()
	//::oBrwSMAIS:DisableConfig()
	//::oBrwSMAIS:DisableLocate()
	//::oBrwSMAIS:DisableReport()
	//::oBrwSMAIS:DisableSaveConfig() 
	//::oBrwSMAIS:DisableSeek() 
	::oBrwSMAIS:SetAlias( oSM:GetAlias() )
	::oBrwSMAIS:SetColumns(aColumns)
	::oBrwSMAIS:SetSemaphore(.T.)
	::oBrwSMAIS:SetProfileID( 'ID_SMAIS' )
	::oBrwSMAIS:SetFieldMark( "ZG7_OK" )
	::oBrwSMAIS:SetOnlyFields( aFieldsB )
	::oBrwSMAIS:AddButton('Confirmar',  bConfirm , , , )
	::oBrwSMAIS:SetMark( ::cMarca  )

		//::oBrwCNB:SetCustomMarkRec( { || ::MarkSMAIS() } )
		//::oBrwCNB:SetAfterMark( { |o| ::ValidBrwCNB( .T. ) })
		//::oBrwCNB:SetChange( { |o| ::ChangeCNB() })
		//::oBrwCNB:SetMark( ::cMarca  )
	
Return


/*
	Method   : LoadRelations
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 04:02:38
	Descricao: Method responsavel por montar os relacionamento dos browses
	Sintaxe  : <Vide Parametros Formais>
*/
Method LoadRelations() Class FIEMT_INI_SMAIS
  Local _cFilial := "'"+Iif( lBaseEsta, rTrim(GetMv("MV_XSMFIBS",.F.,"02MT0001")), FWxFilial("CNA"))+"'"
  ::IsLoadingRel := .T.
  
	::oRelCNA:= FWBrwRelation():New()
	::oRelCNA:AddRelation( ::oBrwSA1 , ::oBrwCNA , { { 'CNA_FILIAL', _cFilial }, { 'CNA_CLIENT' , 'A1_COD' }, {'CNA_LOJACL', 'A1_LOJA'} } )

	::oRelCNB:= FWBrwRelation():New()
	::oRelCNB:AddRelation( ::oBrwCNA , ::oBrwCNB , { { 'CNB_FILIAL', _cFilial }, { 'CNB_CONTRA' , 'CNA_CONTRA' }, {'CNB_REVISA', 'CNA_REVISA'}, {'CNB_SLDMED', '0', '>'} } )
	
	::oRelSMAIS:= FWBrwRelation():New()
	::oRelSMAIS:AddRelation( ::oBrwCNB, ::oBrwSMAIS, { { "ZG7_FILIAL", Iif(lBaseEsta,'FWxFilial("ZG7")',"CNB_FILIAL") }, { 'ZG7_PRDTOT' , 'CNB_PRODUT' },{ 'ZG7_CODEMP' , 'Posicione("SA1",1,FWxFilial("SA1")+Posicione("CNA", 1,'+_cFilial+'+CNB_CONTRA,"CNA_CLIENT+CNA_LOJACL"),"A1_XSMAIS")' } } )

Return

/*
	Method   : LoadFilters
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 04:02:38
	Descricao: Method responsavel por montar os filtros dos browses
	Sintaxe  : <Vide Parametros Formais>
*/
Method LoadFilters() Class FIEMT_INI_SMAIS
  
  ::oBrwSMAIS:DeleteFilter ( "SMF1" ) 
  //FWBrowse():AddFilter ( < cFilter>, < cExpAdvPL>, [ lNoCheck], [ lSelected], [ cAlias], [ lFilterAsk], [ aFilParser], [ cID] ) 
	::oBrwSMAIS:AddFilter( "Conciliado", u_RetFilter(), .f. , .t.,,,,"SMF1" )  
	::oBrwSMAIS:oBrowse:SetUseFilter(.T.)

Return


/*
	Method   : UpdateVinculos
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 11:57:49
	Descricao: Responsavel por atualizar os vinculos dos browses com a marcacao
	Sintaxe  : <Vide Parametros Formais>
*/
Method UpdateVinculos(oSay) Class FIEMT_INI_SMAIS
	
	Local aAreaCNA := CNA->( GetArea() )
	Local aAreaCNB := CNB->( GetArea() )
	Local aAreaZG7 := ZG7->( GetArea() )
	
	Local lRet := .t.
	
	Local cUpdZG7 := ""
	Local cUpdCNB := ""
	Local cT := GetNextAlias()
	
	//Atualiza Vinculos Dinamico
	BeginSql Alias cT
	
	 SELECT DISTINCT
	     ZB0.ZB0_CODEXA PROD_A,
	     ZB0.ZB0_COD    PROD_B
	 FROM 
		%TABLE:ZG7% ZG7, 
		%TABLE:ZB0% ZB0, 
		%TABLE:CNA% CNA,
		%TABLE:CN9% CN9,
		%TABLE:CNB% CNB,
		%TABLE:SA1% SA1 
		WHERE CNA.CNA_FILIAL = %Exp:Iif(lBaseEsta,GetMv("MV_XSMFIBS",.F.,"02MT0001"),FWxFilial("CNA"))%   
		 AND CN9.CN9_FILIAL = CNA.CNA_FILIAL
		 AND CNA.CNA_CONTRA = CN9.CN9_NUMERO
		 AND CNA.CNA_REVISA = CN9.CN9_REVISA
		 AND CNA.CNA_CLIENT = SA1.A1_COD 
		 AND CNA.CNA_LOJACL = SA1.A1_LOJA 
		 AND CNB.CNB_FILIAL = CNA.CNA_FILIAL 
		 AND CNB.CNB_CONTRA = CNA.CNA_CONTRA
		 AND CNB.CNB_REVISA = CNA.CNA_REVISA
		 AND CNB.CNB_SLDMED > 0
		 AND CN9.CN9_SITUAC =  '05' 
		 AND (CN9.CN9_DTFIM = ' ' OR  CN9_DTFIM >= %Exp:DToS(dDataBase)%)
		 and ZG7.ZG7_FILIAL = %Exp:FWxFilial("ZG7")%
		 AND ZG7.ZG7_CODEXA = ZB0.ZB0_CODEXA 
		 AND CNB.CNB_PRODUT = ZB0.ZB0_COD
		 AND ZG7.ZG7_CODEMP = SA1.A1_XSMAIS
		 AND SUBSTR(ZG7.ZG7_DTRESU,5,2) = %Exp:Self:cMesPar%
		 AND ZG7_INTEGR = ' '
		 AND ZG7.D_E_L_E_T_ = ' ' 
		 AND ZB0.D_E_L_E_T_ = ' ' 
		 AND CNA.D_E_L_E_T_ = ' ' 
		 AND CN9.D_E_L_E_T_ = ' ' 
		 AND CNB.D_E_L_E_T_ = ' ' 
		 AND SA1.D_E_L_E_T_ = ' ' 
		 
	 EndSql
	 	
	 dbSelectArea("ZG7")
	 dbSetOrder(3)
	 
	 If (cT)->(!Eof())
	 While (cT)->(!Eof())
	   If ZG7->( MsSeek(FWxFilial("ZG7")+(cT)->PROD_A) )
	   		While ZG7->(!Eof() .And. ZG7_CODEXA == (cT)->PROD_A)
		   		RecLock("ZG7",.F.)
		   			ZG7_PRDTOT := (cT)->PROD_B
		   		MsUnlock()
		   		ZG7->(dbSkip())
		   	EndDo	
		 EndIf
		 (cT)->(dbSkip())
	 EndDo	 		 
	 EndIf	
		
	MemoWrite("C:\tmp\UpVincDina.txt", GetLastQuery()[2])
	
	If lRet                                             
		//Atualiza Vinculos SMAIS
		cUpdZG7 := "	MERGE INTO  " + RetSqlName("ZG7") + " A"
		cUpdZG7 += "	USING  "
		cUpdZG7 += "	  (  SELECT '" + ::cMarca + "' MARK, ZG7.R_E_C_N_O_ RECZG7"
		cUpdZG7 += "	  FROM "
		cUpdZG7 +=  	    RetSqlName("ZG7") +" ZG7,"
		cUpdZG7 +=  	    RetSqlName("CNB") +" CNB "
		cUpdZG7 += "	  WHERE"
		cUpdZG7 += "	        ZG7.ZG7_RECCNB = CNB.R_E_C_N_O_ "
		cUpdZG7 += "      AND ZG7.ZG7_INTEGR =  ' '"
		cUpdZG7 += "	    AND ZG7.D_E_L_E_T_ != '*'"
		cUpdZG7 += "	    AND CNB.D_E_L_E_T_ != '*'"
		cUpdZG7 += "	  ) TMP"
		cUpdZG7 += "	ON  (A.R_E_C_N_O_ = TMP.RECZG7)"
		cUpdZG7 += "	WHEN MATCHED THEN UPDATE"
		cUpdZG7 += "	SET  A.ZG7_OK = TMP.MARK"
		
		If (TcSqlExec(cUpdZG7) < 0)
		    UserException( TCSQLError() )
		    lRet := .F.
		Else
			MemoWrite("C:\tmp\UPDZG72.txt", cUpdZG7)
		EndIf
	Endif
	
	If lRet
		//Atualiza Vinculos CNB
		cCNBUpd := "	MERGE INTO  " + RetSqlName("CNB") + " A"
		cCNBUpd += "	USING  "
		cCNBUpd += "	  (  SELECT DISTINCT '" + ::cMarca + "' MARK, CNB.R_E_C_N_O_ RECCNB"
		cCNBUpd += "	  FROM "
		cCNBUpd +=  	    RetSqlName("CNB") +" CNB,"
		cCNBUpd +=  	    RetSqlName("ZG7") +" ZG7"
		cCNBUpd += "	  WHERE"
		cCNBUpd += "	        ZG7.ZG7_RECCNB = CNB.R_E_C_N_O_ "
		cCNBUpd += "      AND ZG7.ZG7_INTEGR =  ' '"
		cCNBUpd += "	    AND ZG7.D_E_L_E_T_ != '*'"
		cCNBUpd += "	    AND CNB.D_E_L_E_T_ != '*'"
		cCNBUpd += "	  ) TMP"
		cCNBUpd += "	ON  (A.R_E_C_N_O_ = TMP.RECCNB)"
		cCNBUpd += "	WHEN MATCHED THEN UPDATE"
		cCNBUpd += "	SET  A.CNB_XOK = TMP.MARK"
		
		MemoWrite("C:\tmp\UPDCNB2.txt", cCNBUpd)
		
		If (TcSqlExec(cCNBUpd) < 0)
		    UserException( TCSQLError() )
		    lRet := .F.
		Else
			//MemoWrite("C:\tmp\UPDCNB2.txt", cCNBUpd)
		EndIf
	EndIf
	                                             
	RestArea( aAreaZG7 )	  
	RestArea( aAreaCNB )	  
	RestArea( aAreaCNA )	  
		
		lRet := .T.
Return lRet

/*
	Method   : MarkSMAIS
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 12:57:09
	Descricao: Marcacao do Browse produtos SMAIS
	Sintaxe  : <Vide Parametros Formais>
*/
Method MarkSMAIS(lInit) Class FIEMT_INI_SMAIS
	Local nRecno	as numeric

	Local lRet := .T.
	Local lReturn := .T.
	
	Local cAlias := ""
	Local cAliaTMP := "TMP"
	Local cAlia2 := GetNextAlias()
	Local cTab := oCNB:GetRealName()
	
	Local cRecCNB := '%' + cValToChar( (cAliasCNB)->( RECCNB ) ) + '%' 

	PARAMTYPE 0 VAR lInit AS LOGICAL OPTIONAL DEFAULT .F.
	
	cAlias	:=	::oBrwCNB:Alias()
	nRecno	:=	( cAlias )->( Recno() )

		BeginSql Alias cAlia2
		
			SELECT * FROM %Table:cTab% T
			WHERE 1=1
			AND T.%NotDel%
			
		EndSql	

		BeginSql Alias cAliaTMP
		
			SELECT * FROM %TABLE:ZG7% ZA
			WHERE 1=1
			AND ZG7_OK = %Exp:Self:cMarca%
			AND ZG7_RECCNB = %Exp:cRecCNB%
			AND ZA.%NotDel%
			
		EndSql	
		
		lRet := (cAliaTMP)->( !Eof() )
  	
		If lRet .And. ::oBrwCNB:IsMark( ::cMarca )  
			
			Help( ,, 'Help',, 'Existe relacionamento com produtos SMAIS. Registro nao pode ser desmarcado', 1, 0 )
			lReturn := .F.
			
		Else
  	
			If RecLock( cAlias, .F. )
				( cAlias )->CNB_XOK := Iif( ( cAlias )->CNB_XOK == ::cMarca, "  ", ::cMarca )
				( cAlias )->( MsUnlock() )
			EndIf
		
		EndIf
  	
  	(cAliaTMP)->( dbCloseArea() )
  	
	::oBrwCNB:Refresh()
	
	If lReturn
		If ::oBrwCNB:IsMark( ::cMarca )
	  
			::oBrwSMAIS:Enable()
	  
		Else
	  
			::oBrwSMAIS:Disable()
	  
		EndIf
	EndIf
	
	::oBrwCNB:Refresh()

Return

/*
	Method   : ChangeCNB
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 13:10:39
	Descricao: Change do Browse CNB
	Sintaxe  : <Vide Parametros Formais>
*/
Method ChangeCNB() Class FIEMT_INI_SMAIS
  
		If ::oBrwCNB:IsMark( ::cMarca )
  	
			::oBrwSMAIS:Enable()
  	
		Else
  	
			::oBrwSMAIS:Disable()
  	
		EndIf

  	::LoadFilters()
  	::oBrwSMAIS:ExecuteFilter(.t.) 
		
Return .T.

/*
	Method   : ValidBrwCNB
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 13:16:29
	Descricao: Validacoes do browse CNB
	Sintaxe  : <Vide Parametros Formais>
*/
Method ValidBrwCNB(lVldCNB,lVldSMAIS) Class FIEMT_INI_SMAIS

	Local lRet := .T.
	
	Local nATLeft  := ::oBrwCNB:oBrowse:nAt
	
	Local cAliaZG7 := "TMP"
	Local cRecCNB := '%' + cValToChar( (cAliasCNB)->( RECCNB ) ) + '%' 

	PARAMTYPE 0 VAR lVldCNB AS LOGICAL OPTIONAL DEFAULT .F.
	PARAMTYPE 1 VAR lVldSMAIS AS LOGICAL OPTIONAL DEFAULT .F.
	
	BeginSql Alias cAliaZG7
	
		SELECT * FROM %TABLE:ZG7% ZA
		WHERE 1=1
		AND ZG7_OK = %Exp:self:cMarca%
		AND ZG7_RECCNB = %Exp:cRecCNB%
		AND ZA.%NotDel%
		
	EndSql	
	
	lRet := (cAliaZG7)->( !Eof() )

	If !lRet .And. lVldSMAIS    
	
		::oBrwSMAIS:Disable()
		::oBrwCNB:oBrowse:Refresh()
		::oBrwCNB:oBrowse:Setfocus()
		
	ElseIf lVldSMAIS
		
		Return lRet
		
	EndIf

	If lRet .And. lVldCNB .And. !oBrwLeft:IsMark( ::cMarca )  
		
		Help( ,, 'Help',, 'Existe relacionamento com produtos SMAIS. Registro nao pode ser desmarcado', 1, 0 )
		return .F.
		
	EndIf


	//If !lRet //oBrwLeft:IsMark( ::cMarca)
  //
	//	oBrwRight:Enable()
  //
	//	nTotItens++
	//	oTotItens:Refresh()
  //
	//Else
  //
	//	If nTotItens > 0
	//		nTotItens--
	//		oTotItens:Refresh()
	//	Else
	//		oBrwRight:Disable()
	//	EndIf	
  //
	//EndIf
	
	 (cAliaZG7)->( dbCloseArea() )
	
	::oBrwCNB:oBrowse:GoTo( nATLeft )
	
Return .T.

/*
	Method   : LoadParam
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 14:45:48
	Descricao: Carga dos filtros, parametros e buttoms
	Sintaxe  : <Vide Parametros Formais>
*/
Method LoadParam() Class FIEMT_INI_SMAIS
	
	Local bValid  := { || .T. }
	Local bWhen   := { || .T. }       
	Local bChange := { || .T. }
	Local bFiltro := { || ::oBrwCNA:SetFilterDefault( ::FiltersParam() ) , Eval(::oBrwCNA:bChange) }
	Local bSalvar := { |o| o:Disable(),;
	                      FWMsgRun(,{ |oSay| ::GetMedicao(oSay), "Integrando Contratos", "Processando Dados...Aguarde!" }),;
	                      Iif( ::lSucess, o:Disable() , o:Enable() ) }

	Local nRow := 01
	Local nCol := 01
	Local nGetTam := 50
	Local nGetAlt := 15

	_SetNamedPrvt( "lMark", Nil ,"U_SF69A06X" )
		
	_SetNamedPrvt( "oContrIni"   , Nil ,"U_SF69A06X" )
	_SetNamedPrvt( "cContrIni"   , Eval( bSx3Spc, "CNA_CONTRA") ,"U_SF69A06X" )

	_SetNamedPrvt( "oContrFim"   , Nil ,"U_SF69A06X" )
	_SetNamedPrvt( "cContrFim"   , Eval( bSx3Spc, "CNA_CONTRA") ,"U_SF69A06X" )

	_SetNamedPrvt( "oDataIni"   , Nil ,"U_SF69A06X" )
	_SetNamedPrvt( "dDataIni"   , CTOD("") ,"U_SF69A06X" )

	_SetNamedPrvt( "oDataFim"   , Nil ,"U_SF69A06X" )
	_SetNamedPrvt( "dDataFim"   , CTOD("") ,"U_SF69A06X" )

	_SetNamedPrvt( "oBtnFiltro" , Nil ,"U_SF69A06X" )
	_SetNamedPrvt( "oBtnSair"   , Nil ,"U_SF69A06X" )


   oGrupo  := TGroup():New(1.5,2,55,320,'Filtro',::oDlg,,,.T.)
	 
	/*
	TGet():New( [ nRow       ], [ nCol      ], [ bSetGet    ], [ oWnd        ], [ nWidth     ], [ nHeight  ],;
	            [ cPict      ], [ bValid    ], [ nClrFore   ], [ nClrBack    ], [ oFont      ], [ uParam12 ],;
	            [ uParam13   ], [ lPixel    ], [ uParam15   ], [ uParam16    ], [ bWhen      ], [ uParam18 ],;
	            [ uParam19   ], [ bChange   ], [ lReadOnly  ], [ lPassword   ], [ uParam23   ], [ cReadVar ],;
	            [ uParam25   ], [ uParam26  ], [ uParam27   ], [ lHasButton  ], [ lNoButton  ], [ uParam30 ],;
	            [ cLabelText ], [ nLabelPos ], [ oLabelFont ], [ nLabelColor ], [ cPlaceHold ], [ lPicturePriority ], [ lFocSel ] )
	*/

	oContrIni := ;
	TGet():New( nRow,;                          //[ nRow            ],;
							nCol,;                          //[ nCol            ],;
							bSetGet(cContrIni),;            //[ bSetGet         ],;
							oGrupo,;                        //[ oWnd            ],;
							nGetTam+10,;                    //[ nWidth          ],;
							nGetAlt,;                       //[ nHeight         ],;
							eVal( bSx3Pic, "CNA_CONTRA" ),; //[ cPict           ],;
							bValid,;                        //[ bValid          ],;
							,;                              //[ nClrFore        ],;
							,;                              //[ nClrBack        ],;
							,;                              //[ oFont           ],;
							,;                              //[ uParam12        ],;
							,;                              //[ uParam13        ],;
							,;                              //[ lPixel          ],;
							,;                              //[ uParam15        ],;
							,;                              //[ uParam16        ],;
							bWhen,;                         //[ bWhen           ],;
							,;                              //[ uParam18        ],;
							,;                              //[ uParam19        ],;
							bChange,;                       //[ bChange         ],;
							,;                              //[ lReadOnly       ],;
							,;                              //[ lPassword       ],;
							,;                              //[ uParam23        ],;
							"cContrIni",;                   //[ cReadVar        ],;
							,;                              //[ uParam25        ],;
							,;                              //[ uParam26        ],;
							,;                              //[ uParam27        ],;
							,;                              //[ lHasButton      ],;
							,;                              //[ lNoButton       ],;
							,;                              //[ uParam30        ],;
							"Contrato Início:",;            //[ cLabelText      ],;
							1,;                             //[ nLabelPos       ],;
							,;                              //[ oLabelFont      ],;
							,;                              //[ nLabelColor     ],;
							,;                              //[ cPlaceHold      ],;
							,;                              //[ lPicturePriority],;
							  )                             //[ lFocSel         ] )

	oContrIni:cF3 := "CN9"
	oContrIni:bChange := { || cContrFim := eVal( bSx3Spc, "CNA_CONTRA" ) }
	oContrIni:bValid := {|| Empty() .Or. ExistCpo("CN9", cContrIni ) }
	
	nCol+= 008
	
	oContrFim := ;
	TGet():New( nRow,;                          //[ nRow            ],;
							nCol,;                          //[ nCol            ],;
							bSetGet(cContrFim),;            //[ bSetGet         ],;
							oGrupo,;                        //[ oWnd            ],;
							nGetTam+10,;                    //[ nWidth          ],;
							nGetAlt,;                       //[ nHeight         ],;
							eVal( bSx3Pic, "CNA_CONTRA" ),; //[ cPict           ],;
							bValid,;                        //[ bValid          ],;
							,;                              //[ nClrFore        ],;
							,;                              //[ nClrBack        ],;
							,;                              //[ oFont           ],;
							,;                              //[ uParam12        ],;
							,;                              //[ uParam13        ],;
							,;                              //[ lPixel          ],;
							,;                              //[ uParam15        ],;
							,;                              //[ uParam16        ],;
							bWhen,;                         //[ bWhen           ],;
							,;                              //[ uParam18        ],;
							,;                              //[ uParam19        ],;
							bChange,;                       //[ bChange         ],;
							,;                              //[ lReadOnly       ],;
							,;                              //[ lPassword       ],;
							,;                              //[ uParam23        ],;
							"cContrFim",;                   //[ cReadVar        ],;
							,;                              //[ uParam25        ],;
							,;                              //[ uParam26        ],;
							,;                              //[ uParam27        ],;
							,;                              //[ lHasButton      ],;
							,;                              //[ lNoButton       ],;
							,;                              //[ uParam30        ],;
							"Contrato Final:",;             //[ cLabelText      ],;
							1,;                             //[ nLabelPos       ],;
							,;                              //[ oLabelFont      ],;
							,;                              //[ nLabelColor     ],;
							,;                              //[ cPlaceHold      ],;
							,;                              //[ lPicturePriority],;
							  )                             //[ lFocSel         ] )

	oContrFim:cF3 := "CN9"
	oContrIni:bValid := {|| Empty() .Or. ExistCpo("CN9", cContrFim ) }

	nCol+= 008

	oDataIni := ;
	TGet():New( nRow,;                          //[ nRow            ],;
							nCol,;                          //[ nCol            ],;
							bSetGet(dDataIni),;             //[ bSetGet         ],;
							oGrupo,;                        //[ oWnd            ],;
							nGetTam,;                       //[ nWidth          ],;
							nGetAlt,;                       //[ nHeight         ],;
							eVal( bSx3Pic, "F2_EMISSAO" ),; //[ cPict           ],;
							bValid,;                        //[ bValid          ],;
							,;                              //[ nClrFore        ],;
							,;                              //[ nClrBack        ],;
							,;                              //[ oFont           ],;
							,;                              //[ uParam12        ],;
							,;                              //[ uParam13        ],;
							,;                              //[ lPixel          ],;
							,;                              //[ uParam15        ],;
							,;                              //[ uParam16        ],;
							bWhen,;                         //[ bWhen           ],;
							,;                              //[ uParam18        ],;
							,;                              //[ uParam19        ],;
							bChange,;                       //[ bChange         ],;
							,;                              //[ lReadOnly       ],;
							,;                              //[ lPassword       ],;
							,;                              //[ uParam23        ],;
							"dDataIni",;                    //[ cReadVar        ],;
							,;                              //[ uParam25        ],;
							,;                              //[ uParam26        ],;
							,;                              //[ uParam27        ],;
							,;                              //[ lHasButton      ],;
							,;                              //[ lNoButton       ],;
							,;                              //[ uParam30        ],;
							"Data Início:",;                //[ cLabelText      ],;
							1,;                             //[ nLabelPos       ],;
							,;                              //[ oLabelFont      ],;
							,;                              //[ nLabelColor     ],;
							,;                              //[ cPlaceHold      ],;
							,;                              //[ lPicturePriority],;
							  )                             //[ lFocSel         ] )
	oDataIni:bChange := { || dDataFim := CTOD("") }

	nCol+= 007
	
	oDataFim := ;
	TGet():New( nRow,;                          //[ nRow            ],;
							nCol,;                          //[ nCol            ],;
							bSetGet(dDataFim),;             //[ bSetGet         ],;
							oGrupo,;                        //[ oWnd            ],;
							nGetTam,;                       //[ nWidth          ],;
							nGetAlt,;                       //[ nHeight         ],;
							eVal( bSx3Pic, "F2_EMISSAO" ),; //[ cPict           ],;
							bValid,;                        //[ bValid          ],;
							,;                              //[ nClrFore        ],;
							,;                              //[ nClrBack        ],;
							,;                              //[ oFont           ],;
							,;                              //[ uParam12        ],;
							,;                              //[ uParam13        ],;
							,;                              //[ lPixel          ],;
							,;                              //[ uParam15        ],;
							,;                              //[ uParam16        ],;
							bWhen,;                         //[ bWhen           ],;
							,;                              //[ uParam18        ],;
							,;                              //[ uParam19        ],;
							bChange,;                       //[ bChange         ],;
							,;                              //[ lReadOnly       ],;
							,;                              //[ lPassword       ],;
							,;                              //[ uParam23        ],;
							"dDataFim",;                    //[ cReadVar        ],;
							,;                              //[ uParam25        ],;
							,;                              //[ uParam26        ],;
							,;                              //[ uParam27        ],;
							,;                              //[ lHasButton      ],;
							,;                              //[ lNoButton       ],;
							,;                              //[ uParam30        ],;
							"Data Final:",;                 //[ cLabelText      ],;
							1,;                             //[ nLabelPos       ],;
							,;                              //[ oLabelFont      ],;
							,;                              //[ nLabelColor     ],;
							,;                              //[ cPlaceHold      ],;
							,;                              //[ lPicturePriority],;
							  )                             //[ lFocSel         ] )


	nRow+= 007
	nCol+= 240
  
	oBtnFiltro   := TButton():New(nRow   ,nCol ,"  Filtrar" ,oGrupo,bFiltro                         ,50,20,,,.F.,.T.,.F.,,.F.,,,.F. )
	oBtnSalvar   := TButton():New(nRow   ,nCol+100 ,"  Aprovar" ,oGrupo,bSalvar                         ,50,20,,,.F.,.T.,.F.,,.F.,,,.F. )
	oBtnSair     := TButton():New(nRow+23,nCol+100 ,"  Sair" 	  ,oGrupo,{|| nOpc := 0, ::oDlg:End() },50,20,,,.F.,.T.,.F.,,.F.,,,.F. )
	
	
	oBtnFiltro:SetCss(STYBTN005)
	oBtnSalvar:SetCss(STYBTN0003)
	oBtnSair:SetCss(STYBTN004)

	//oChkMark := TCHECKBOX():Create(oGrupo)
	//oChkMark:cName 		:= "Ao marcar essa opção após o acerramento da medição será gerado o pedido de venda."                                      
	//oChkMark:cCaption := "Gerar Pedido Venda"
	//oChkMark:nLeft 		:= oBtnSalvar:nRight + 50
	//oChkMark:nTop 		:= oBtnSalvar:nTop + 15
	//oChkMark:nWidth 	:= 150
	//oChkMark:nHeight 	:= 60
	//oChkMark:lShowHint 	:= .F.
	//oChkMark:lReadOnly 	:= .F.
	//oChkMark:Align 		:= 0
	//oChkMark:cVariable 	:= "self:nTipoMedicao"
	//oChkMark:bSetGet 	:= {|u| If(PCount()>0,lMark:=u,lMark) }
	//oChkMark:bChange 	:= {|| .T. }
	//oChkMark:lVisibleControl := .T.



	aItems := {'Gerar Pedido de Venda','Gerar Título Financeiro'}
	oRadio := TRadMenu():Create(oGrupo,,01,01,aItems,,,,,,,,100,15,,,,.T.)
	oRadio:bSetGet := {|u|Iif (PCount()==0,self:nTipoMedicao,self:nTipoMedicao:=u)}
	oRadio:cName 		:= "Determina como será a geração da medição, se ao encerrar irá gerar um PEDIDO DE VENDO ou TÍTULO FINANCEIRO."                                      
	oRadio:nLeft 		:= oBtnSalvar:nRight + 50
	oRadio:nTop 		:= oBtnSalvar:nTop + 15
	oRadio:nWidth 	:= 150
	oRadio:nHeight 	:= 60
	oRadio:lShowHint 	:= .T.
	oRadio:lReadOnly 	:= .F.
	oRadio:Align 		:= 0
	//oRadio:cVariable 	:= "self:nTipoMedicao"
	//oRadio:bSetGet 	:= {|u| If(PCount()>0,lMark:=u,lMark) }
	//oRadio:bChange 	:= {|| .T. }
	//oRadio:lVisibleControl := .T.


	::oDlg:Refresh()
	
Return


/*
	Method   : FiltersParam
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 14:35:52
	Descricao: Filtro dos Parametros
	Sintaxe  : <Vide Parametros Formais>
*/
Method FiltersParam() Class FIEMT_INI_SMAIS
  Static Function cFiltro()
	
	Local cFiltro := ""
	
	//cFiltro += 'CNA_FILIAL >= "' + FWxFilial("CNA") + '" .And. '
	//cFiltro += 'CNA_FILIAL <= "' + FWxFilial("CNA") + '" .And. '

	/*
		Filtro do Contrato
	*/
	If !Empty( cContrIni )
		cFiltro += 'CNA_CONTRA >= "'+ cContrIni + '" .And. '
	EndIf
	
	If !Empty( cContrFim )
		cFiltro += 'CNA_CONTRA <= "' + cContrFim + '" .And. '
	EndIf

	/*
		Filtro da Data do Contrato
	*/
	If !Empty( dDataIni )
		cFiltro += 'CNA_DTINI >= "'+cValToChar(dDataIni) + '" .And. '
	EndIf
	
	If !Empty( dDataFim )
		cFiltro += 'CNA_DTFIM <= "' + cValToChar(dDataFim) + '" .And. '
	EndIf
	
	/*
		Tratamento do Filtro
	*/
	cFiltro := Subs( cFiltro, 1, Rat( " .And. ", cFiltro ) )
	
Return cFiltro


/*
	Method   : SalvarAmarracao
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 20:38:33
	Descricao: Responsavel por vincular o produto SMAIS ao produto item do contrato 
	Sintaxe  : <Vide Parametros Formais>
*/
Method SalvarAmarracao() Class FIEMT_INI_SMAIS

Local lRet := .T.
	
Local cAlias	as character
Local nRecno	as numeric

Local nTmLeft  := ::oBrwCNB:oBrowse:LogicLen()
Local nAtLeft  := ::oBrwCNB:oBrowse:nAT 

Local nTmRight := ::oBrwSMAIS:oBrowse:LogicLen()
Local nAtRight := ::oBrwSMAIS:oBrowse:nAT

cAlias	:=	::oBrwSMAIS:Alias()
nRecno	:=	( cAlias )->( Recno() )

( cAlias )->( DBGoTop() )

While ( cAlias )->( !Eof() )

	ZG7->(dbGoTo( (cAlias)->RECZG7 ))
	If ::oBrwSMAIS:IsMark( ::cMarca )
			
			If (cAlias)->ZG7_PRDTOT == (cAliasCNB)->CNB_PRODUT 
				
				RecLock(cAlias,.F.)
						(cAlias)->ZG7_RECCNB := (cAliasCNB)->( RECCNB )
				MsUnlock()
				
				RecLock("ZG7",.F.)
						ZG7->ZG7_OK := ::cMarca
						ZG7->ZG7_RECCNB := (cAliasCNB)->( RECCNB )
				MsUnlock()
		
		EndIf
			
	ElseIf ZG7->ZG7_RECCNB == (cAliasCNB)->( RECCNB ) .And. ::oBrwCNB:IsMark( ::cMarca )
	
			If ApMsgNoYes("Deseja realmente desvincular item?")
  	
				cUpd := " UPDATE " 
				cUpd += RetSqlName("ZG7")
				cUpd += " SET ZG7_RECCNB = 0" 
				cUpd += " WHERE ZG7_INTEGR = ' '" 
				cUpd += " AND ZG7_RECCNB = " + cValToChar( (cAliasCNB)->( RECCNB ) )
					
				If TCSqlExec(cUpd) < 0
		  	
				    ConOut("O comand SQL gerou erro:", TCSqlError())
				    lRet := .F.
		  	
				EndIf
				
				If lRet
					RecLock("ZG7",.F.)
							ZG7->ZG7_OK := ""
							ZG7->ZG7_RECCNB := 0
					MsUnlock()
				EndIf				
				
				cWhr := " WHERE ZG7_OK <> ' ' AND ZG7_RECCNB = " + cValToChar( (cAliasCNB)->( RECCNB ) )
				
				cUpd := " UPDATE " 
				cUpd += RetSqlName("CNB")
				cUpd += " SET CNB_XOK = ' '" 
				cUpd += " WHERE NOT EXISTS ( SELECT 1 FROM " + RetSqlName("ZG7") + cWhr + ")"
				cUpd += " AND R_E_C_N_O_ = " + cValToChar( (cAliasCNB)->( RECCNB ) )
				cUpd += " AND CNB_XOK = '" + ::cMarca + "'" 
	  		
				If TCSqlExec(cUpd) < 0
				    ConOut("O comand SQL gerou erro:", TCSqlError())
				    lRet := .F.
				EndIf
				
				::ValidBrwCNB( .F., .T. )
				
			EndIf
						
	EndIf

	( cAlias )->( DBSkip() )

EndDo

	( cAlias )->( DBGoTo( nRecno ) )
	
	::oBrwSMAIS:ExecuteFilter(.t.)
	//::oBrwSMAIS:Refresh()
	
	Aviso("Parabéns!","Processo concluído com sucesso!!!",{"Sair"},2,,,"FWSKIN_SUCCES_ICO")
	
Return                                    


/*
	Method   : GetMedicao
	Autor    : Carlos Ryve Gandini
	Data/Time: 19/06/20 às 22:12:44
	Descricao: Encerra o processo gerando as medicoes
	Sintaxe  : <Vide Parametros Formais>
*/
Method GetMedicao( oSay ) Class FIEMT_INI_SMAIS
	Local oSMAIS := Nil
	Local lReturn := .F.
	
	oSMAIS := FIEMT_MEDICAO():New(::cMarca)

	If ValType(oSay) == "O"
	
		oSay:cCaption := "Processando Dados da Medição...Aguarde!"
		ProcessMessages()

	Endif

	FWMsgRun( , {|oSay| ::lSucess := oSMAIS:Gera_Medicao( ::oBrwCNA, ::oBrwCNB, ::oBrwSMAIS, self:nTipoMedicao , oSay, lBaseEsta )  },"Medições", "Aguarde...Integrando os dados conciliados!" )

	If ValType(oSay) == "O"
	
		oSay:cCaption := Iif(::lSucess,"PROCESSO CONCLUÍDO COM SUCESSO!","ATENÇÃO!...HOUVE PROBLEMA NO PROCESSO.")
		ProcessMessages()
		Sleep( 1000 )
		
	Endif
	
	If lReturn
	
	EndIf

Return

/*
	Method   : LoadSX3
	Autor    : Carlos Ryve Gandini
	Data/Time: 22/06/20 às 14:16:39
	Descricao: Retorna struct do dicionario
	Sintaxe  : <Vide Parametros Formais>
*/
Method LoadSX3(cArq,cCpoFilter,cCpoByPass) Class FIEMT_INI_SMAIS
Local aStruc := {}

PARAMTYPE 0 VAR cArq AS CHARACTER
PARAMTYPE 1 VAR cCpoFilter AS CHARACTER OPTIONAL DEFAULT ""
PARAMTYPE 2 VAR cCpoByPass AS CHARACTER OPTIONAL DEFAULT ""

	dbSelectArea("SX3")
	dbSetOrder(1)
	If MsSeek(cArq)

		While !EOF() .And. (X3_ARQUIVO == cArq)
			
			cField := rTrim(X3_CAMPO)
			
			If !Empty(cCpoFilter) .And. !cField $ cCpoFilter + "," + cCpoByPass
				dbSkip()
				Loop
			EndIf
			
			IF (!Empty(cCpoByPass) .And. cField $ cCpoByPass) .Or. X3USO(X3_USADO).and. cNivel >= X3_NIVEL .and. SX3->X3_CONTEXT # "V" 
					aAdd(aStruc,{ cField								,;
									      GetSX3Cache( cField, "X3_TIPO" )	,;
									      GetSX3Cache( cField, "X3_TAMANHO" ),;
									      GetSX3Cache( cField, "X3_DECIMAL" ) } )
			EndIF
			dbSkip()
		EndDO

	EndIf 

Return aStruc

Function u_RetFilter()
	Local cFilter := ""
	Local cTa := oSM:GetAlias()
	Local cTb := oCNB:GetAlias()

	cFilter := "(Empty((cAliasSM)->ZG7_RECCNB) .And. Empty((cAliasSM)->ZG7_INTEGR)) .Or. ((cAliasSM)->ZG7_RECCNB == " + cValToChar((cAliasCNB)->(RECCNB))+")"
	
Return cFilter

Function u_LegendSA1(cCliente,cLoja)
	Local nReturn := 0
	Local cQuery := ""
	Local cT := GetNextAlias()

	BeginSql Alias cT
	
		SELECT COUNT(*) QTD FROM 
			%TABLE:CNA% CNA,
			%TABLE:CN9% CN9,
			%TABLE:CNB% CNB,
			%TABLE:SA1% SA1,
			%TABLE:ZG7% ZG7,
			%TABLE:ZB0% ZB0
		WHERE CNA.CNA_FILIAL = %Exp:Iif(lBaseEsta,GetMv("MV_XSMFIBS",.F.,"02MT0001"),FWxFilial("CNA"))%  
		 AND CN9.CN9_FILIAL = CNA.CNA_FILIAL
		 AND CNA.CNA_CONTRA = CN9.CN9_NUMERO
		 AND CNA.CNA_REVISA = CN9.CN9_REVISA
		 AND CNA.CNA_CLIENT = %Exp:cCliente%
		 AND CNA.CNA_LOJACL = %Exp:cLoja%
		 AND CNB.CNB_FILIAL  = CNA.CNA_FILIAL
		 AND CNB.CNB_CONTRA  = CNA.CNA_CONTRA
		 AND CNB.CNB_REVISA  = CNA.CNA_REVISA
		 AND SA1.A1_XSMAIS = ZG7.ZG7_CODEMP
		 AND CN9.CN9_SITUAC =  '05'
		 AND (CN9.CN9_DTFIM = ' ' OR  CN9_DTFIM >= %Exp:DToS(dDataBase)%)
		 AND SUBSTR(ZG7.ZG7_DTRESU,5,2) = %Exp:cMesPar%
		 AND CNB.CNB_SLDMED  > 0
		 AND ZG7.ZG7_FILIAL = %Exp:FWxFilial("ZG7")%
		 AND ZG7.ZG7_CODEXA = ZB0.ZB0_CODEXA
		 AND CNB.CNB_PRODUT = ZB0.ZB0_COD
		 AND CNA.%NotDel%
		 AND CN9.%NotDel%
		 AND CNB.%NotDel%
		 AND SA1.%NotDel%
		 AND ZG7.%NotDel%
		 AND ZB0.%NotDel%
		 AND ROWNUM = 1
	 
	EndSql
	
	If (cT)->(!Eof())
		nReturn := (cT)->(QTD)
	EndIf
	
	(cT)->(dbCloseArea())
	
Return nReturn
