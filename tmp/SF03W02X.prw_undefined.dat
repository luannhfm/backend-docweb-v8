#INCLUDE 'TOTVS.CH'
#INCLUDE 'TBICONN.CH'
#INCLUDE 'RestFul.ch'

/*/{Protheus.doc} SF03W02X
    @description WebService Rest para realizar inclusão de titulos a receber
    @type User Function
    @author Rafael Karczevski
    @since 22/08/2019
    @version 1.0
    /*/
User Function SF03W02X()	
Return

/*/{Protheus.doc} SFCONTRECEBE
    @description WebService Rest para realizar inclusão de titulos a receber
    @type WebService Method
    @author Rafael Karczevski
    @since 22/08/2019
    @version 1.0
/*/
WSRESTFUL SFCONTRECEBE DESCRIPTION "Serviço REST operações do contas a receber"

    WSDATA RECEIVE As String //Json Recebido no corpo da requição
    WSDATA PREFIXO As String
    WSDATA NUM     As String
    WSDATA TIPO    As String
    WSDATA CGCFIL  As String
    
    WSMETHOD POST 	DESCRIPTION "Inclui novo titulo no contas a receber" 		WSSYNTAX ""
    WSMETHOD GET  	DESCRIPTION "Retorna informações sobre um titulo" 	        WSSYNTAX "/CONTRECEBE || /CONTRECEBE/{CGCFIL}{PREFIXO}{NUM}"
    WSMETHOD DELETE DESCRIPTION "Exclui um titulo do contas a receber" 	        WSSYNTAX "/CONTRECEBE || /CONTRECEBE/{CGCFIL}{PREFIXO}{NUM}"
    WSMETHOD PUT  	DESCRIPTION "Realiza a baixa de um titulo"                  WSSYNTAX "/CONTRECEBE || /CONTRECEBE/{CGCFIL}{PREFIXO}{NUM}"

END WSRESTFUL

/*/{Protheus.doc} GET
    @description Retorna informações de um titulo.
    @type WebService Method
    @author Rafael Karczevski
    @since 22/08/2019
    @version 1.0
/*/
WSMETHOD GET WSSERVICE SFCONTRECEBE

    Local cPrefix    := Self:PREFIXO
    Local cNum       := Self:NUM
    Local cCgcGil    := Self:CGCFIL
    Local aArea 	 
    Local cNextAlias 
    Local cJSON		 
    Local oTitulo    
    Local lRet		 
    Local nStart 

    If PepEnv(cCgcGil)
        aArea 	    := GetArea()
        cNextAlias  := GetNextAlias()
        cJSON		:= ""
        oTitulo     := SFCONTRECEBE():New()
        lRet		:= .T.
        nStart      := Seconds()

        FwLogMsg("INFO", /*cTransactionId*/, "REST", FunName(), "", "01", "[WS CONTRECEBE] Soliticou dados do titulo " + cNum + " - " + cPrefix, 0, (nStart - Seconds()), {})
        ::SetContentType("application/json")
        BeginSQL Alias cNextAlias
            SELECT 
                E1_PREFIXO,
                E1_NUM,
                E1_PARCELA,
                E1_TIPO,
                E1_CLIENTE,
                E1_LOJA,
                E1_NATUREZ,
                E1_EMISSAO,
                    E1_VENCTO,
                    E1_VALOR,
                    E1_HIST,
                    E1_CREDIT,
                    E1_CCC,
                    E1_ITEMC,
                    E1_XIDCNAB,
                    E1_XNUMBCO,
                    E1_NUMBCO,
                    E1_MULTNAT		    
                FROM %Table:SE1% SE1
                WHERE SE1.%notdel%
                    AND SE1.E1_FILIAL = %Exp:xFilial("SE1")%
                    AND SE1.E1_NUM = %Exp:cNum%
                    AND SE1.E1_PREFIXO = %Exp:cPrefix%
        EndSQL
        (cNextAlias)->( DbGoTop() )
        If (cNextAlias)->( !Eof() )
            FwLogMsg("INFO", /*cTransactionId*/, "REST", FunName(), "", "01", "[WS CONTRECEBE] Encontrou dados do titulo " + cNum + " - " + cPrefix, 0, (nStart - Seconds()), {})
            While (cNextAlias)->( !Eof() )
                
                oTitulo:E1_PREFIXO	:= AllTrim((cNextAlias)->(E1_PREFIXO) )
                oTitulo:E1_NUM	    := AllTrim((cNextAlias)->(E1_NUM	) )
                oTitulo:E1_PARCELA  := AllTrim((cNextAlias)->(E1_PARCELA) )
                oTitulo:E1_TIPO	    := AllTrim((cNextAlias)->(E1_TIPO	) )
                oTitulo:E1_CLIENTE  := AllTrim((cNextAlias)->(E1_CLIENTE) )
                oTitulo:E1_LOJA	    := AllTrim((cNextAlias)->(E1_LOJA	) )
                oTitulo:E1_NATUREZ  := AllTrim((cNextAlias)->(E1_NATUREZ) )
                oTitulo:E1_EMISSAO  := AllTrim((cNextAlias)->(E1_EMISSAO) )
                oTitulo:E1_VENCTO   := AllTrim((cNextAlias)->(E1_VENCTO ) )
                oTitulo:E1_VALOR	:= AllTrim((cNextAlias)->(E1_VALOR	) )
                oTitulo:E1_HIST	    := AllTrim((cNextAlias)->(E1_HIST	) )
                oTitulo:E1_CREDIT	:= AllTrim((cNextAlias)->(E1_CREDIT	) )
                oTitulo:E1_CCC 	    := AllTrim((cNextAlias)->(E1_CCC 	) )
                oTitulo:E1_ITEMC	:= AllTrim((cNextAlias)->(E1_ITEMC	) )
                oTitulo:E1_XIDCNAB  := AllTrim((cNextAlias)->(E1_XIDCNAB) )
                oTitulo:E1_XNUMBCO  := AllTrim((cNextAlias)->(E1_XNUMBCO) )
                oTitulo:E1_NUMBCO	:= AllTrim((cNextAlias)->(E1_NUMBCO	) )
                oTitulo:E1_MULTNAT  := AllTrim((cNextAlias)->(E1_MULTNAT) )

                (cNextAlias)->( DbSkip() )
            
            EndDo
            
            cJSON := FWJsonSerialize(oTitulo, .T., .T.,,.F.)
            ::SetResponse(cJSON)
            FwLogMsg("INFO", /*cTransactionId*/, "REST", FunName(), "", "01", "[WS CONTRECEBE] Respondeu com dados do titulo " + cNum + " - " + cPrefix, 0, (nStart - Seconds()), {})
                
        Else
            SetRestFault(400, "Erro ao encontrar o titulo")
            FwLogMsg("INFO", /*cTransactionId*/, "REST", FunName(), "", "01", "[WS CONTRECEBE] Erro ao encontrar o Titulo " + cNum + " - " + cPrefix, 0, (nStart - Seconds()), {})
            lRet := .F.
        EndIf

        (cNextAlias)->(DbCloseArea())
        RestArea(aArea)

        FwLogMsg("INFO", /*cTransactionId*/, "REST", FunName(), "", "01", "[WS CONTRECEBE] Finalização Titulo " + cNum + " - " + cPrefix, 0, (nStart - Seconds()), {})

        RESET ENVIRONMENT
    EndIf

Return(lRet)

/*/{Protheus.doc} POST
    @description Efetua a inclusão de um novo titulo a receber.
    @type WebService Method
    @author Rafael Karczevski
    @since 22/08/2019
    @version 1.0
/*/
WSMETHOD POST WSRECEIVE RECEIVE WSSERVICE SFCONTRECEBE

    Local cJSON 	 := Self:GetContent() // Pega a string do JSON 
    Local cCgcGil    := Self:CGCFIL
    Local oParseJSON := Nil 
    Local aDadosTit	 := {} //--> Array para ExecAuto do MATA030
    Local cJsonRet   := ""
    Local cArqLog	 := ""
    Local cErro		 := ""
    Local lRet		 := .T.
    Local aArea
    Private lMsErroAuto := .F.

    If PepEnv(cCgcGil)
        aArea		 := GetArea()

        // --> Cria o diretório para salvar os arquivos de log
        If !ExistDir("\log_tit")
            MakeDir("\log_tit")
        EndIf
        ::SetContentType("application/json")
        // --> Deserializa a string JSON
        FWJsonDeserialize(cJson, @oParseJSON)
        // E1_FILIAL+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO
        SE1->( DbSetOrder(1) )
        If !(SE1->( DbSeek( xFilial("SE1") + oParseJSON:E1_PREFIXO + oParseJSON:E1_NUM + oParseJSON:E1_PARCELA + oParseJSON:E1_TIPO ) ))

            aAdd(aDadosTit, {"E1_FILIAL"    , xFilial("SE1")        , Nil})
            aAdd(aDadosTit, {"E1_NUM"       , oParseJSON:E1_NUM     , Nil})
            aAdd(aDadosTit, {"E1_PREFIXO"   , oParseJSON:E1_PREFIXO , Nil})
            aAdd(aDadosTit, {"E1_PARCELA"   , oParseJSON:E1_PARCELA , Nil})
            aAdd(aDadosTit, {"E1_TIPO"      , oParseJSON:E1_TIPO    , Nil})
            aAdd(aDadosTit, {"E1_NATUREZ"   , oParseJSON:E1_NATUREZ , Nil})
            aAdd(aDadosTit, {"E1_CLIENTE"   , oParseJSON:E1_CLIENTE , Nil})
            aAdd(aDadosTit, {"E1_LOJA"      , oParseJSON:E1_LOJA    , Nil})
            aAdd(aDadosTit, {"E1_NOMCLI"    , Posicione("SA1", 1, xFilial("SA1") + oParseJSON:E1_CLIENTE + oParseJSON:E1_LOJA, "A1_NOME")               , Nil})
            aAdd(aDadosTit, {"E1_EMISSAO"   , sToD(oParseJSON:E1_EMISSAO) , Nil})
            aAdd(aDadosTit, {"E1_VENCTO"    , sToD(oParseJSON:E1_VENCTO ) , Nil})
            aAdd(aDadosTit, {"E1_VENCREA"   , sToD(oParseJSON:E1_VENCTO ) , Nil})
            aAdd(aDadosTit, {"E1_VALOR"     , oParseJSON:E1_VALOR   , Nil})
            aAdd(aDadosTit, {"E1_VALJUR"    , 0                     , Nil})
            aAdd(aDadosTit, {"E1_PORCJUR"   , 0                     , Nil})
            aAdd(aDadosTit, {"E1_HIST"      , oParseJSON:E1_HIST    , Nil})
            aAdd(aDadosTit, {"E1_MOEDA"     , 1                     , Nil})
            aAdd(aDadosTit, {"E1_CREDIT"    , oParseJSON:E1_CREDIT  , Nil})
            aAdd(aDadosTit, {"E1_CCC"       , oParseJSON:E1_CCC     , Nil})
            aAdd(aDadosTit, {"E1_ITEMC"     , oParseJSON:E1_ITEMC   , Nil})
            aAdd(aDadosTit, {"E1_NUMBCO"    , oParseJSON:E1_NUMBCO  , Nil})
            aAdd(aDadosTit, {"E1_MULTNAT"   , oParseJSON:E1_MULTNAT , Nil})
            aAdd(aDadosTit, {"E1_XIDCNAB"   , oParseJSON:E1_XIDCNAB , Nil})
            aAdd(aDadosTit, {"E1_XNUMBCO"   , oParseJSON:E1_XNUMBCO , Nil})

            MSExecAuto({|x,y| FINA040(x,y)}, aDadosTit, 3)

            If lMsErroAuto
                cArqLog := oParseJSON:A1_CGC + " - " + SubStr( Time(),1,5 ) + ".log"
                RollBackSX8()
                cErro := MostraErro("\log_tit", cArqLog)
                cErro := TrataErro(cErro) // --> Trata o erro para devolver para o client.
                SetRestFault(400, cErro)
                lRet := .F. 				
            Else
                ConfirmSX8()
                cJSONRet := '{"code":"204"';
                            + ',"message":"' + "Titulo incluido com sucesso" + '"';
                            + ',"E1_NUM":"'  + SE1->E1_NUM 	    + '"';
                            + ',"E1_PREFIXO":"' + SE1->E1_PREFIXO 	+ '"';
                            +'}'
                            
                ::SetResponse( cJSONRet )				
            EndIf		 
        Else
            SetRestFault(400, "Titulo ja existente: " + SE1->E1_NUM + " - " + SE1->E1_PREFIXO)
            lRet := .T. 	 
        EndIf

        RestArea(aArea)

        RESET ENVIRONMENT
    EndIf

Return(lRet)

/*/{Protheus.doc} PUT
    @description Realiza a baixa de um titulo no contas a receber.
    @type WebService Method
    @author Rafael Karczevski
    @since 22/08/2019
    @version 1.0
/*/
WSMETHOD PUT WSRECEIVE RECEIVE WSSERVICE SFCONTRECEBE

    Local cPrefix    := Self:PREFIXO
    Local cNum       := Self:NUM
    Local cTipo      := Self:TIPO
    Local cCgcGil    := Self:CGCFIL
    Local cJSON      := Self:GetContent() // --> Pega a string do JSON
    Local lRet       := .T.
    Local oParseJSON := Nil 
    Local aDadosTit	 := {} //--> Array para ExecAuto do MATA030
    Local cJsonRet   := ""
    Local cArqLog	 := ""
    Local cErro		 := ""
    Local aArea
    Private lMsErroAuto := .F.

    If PepEnv(cCgcGil)

        aArea := GetArea()
        If !ExistDir("\log_cli")
            MakeDir("\log_cli")
        EndIf
        ::SetContentType("application/json")
        // --> Deserializa a string JSON
        FWJsonDeserialize(cJson, @oParseJSON)

        Aadd( aDadosTit, {"E1_PREFIXO"  , oParseJSON:E1_PREFIXO     , Nil } )
        Aadd( aDadosTit, {"E1_NUM"      , oParseJSON:E1_NUM         , Nil } )
        Aadd( aDadosTit, {"E1_TIPO"     , oParseJSON:E1_TIPO        , Nil } )
        Aadd( aDadosTit, {"AUTMOTBX"    , oParseJSON:AUTMOTBX       , Nil } )
        Aadd( aDadosTit, {"AUTBANCO"    , oParseJSON:AUTBANCO       , Nil } )
        Aadd( aDadosTit, {"AUTAGENCIA"  , oParseJSON:AUTAGENCIA     , Nil } )
        Aadd( aDadosTit, {"AUTCONTA"    , oParseJSON:AUTCONTA       , Nil } )
        Aadd( aDadosTit, {"AUTDTBAIXA"  , sToD(oParseJSON:AUTDTBAIXA  )   , Nil } )
        Aadd( aDadosTit, {"AUTDTCREDITO", sToD(oParseJSON:AUTDTCREDITO)   , Nil } )
        Aadd( aDadosTit, {"AUTHIST"     , oParseJSON:AUTHIST        , Nil } )
        Aadd( aDadosTit, {"AUTJUROS"    , oParseJSON:AUTJUROS       , Nil } )
        Aadd( aDadosTit, {"AUTVALREC"   , oParseJSON:AUTVALREC      , Nil } )
        
        MSExecAuto({|x,y| Fina070(x,y)},aDadosTit,3) 
        
        If lMsErroAuto
            cArqLog := oParseJSON:E1_NUM + " - " + SubStr( Time(),1,5 ) + ".log"
            cErro := MostraErro("\log_cli", cArqLog)
            cErro := TrataErro(cErro) // --> Trata o erro para devolver para o client.
            SetRestFault(400, cErro)
            lRet := .F.
        Else
            cJSONRet := '{"code":"204"';
                        + ',"message":"' + "Titulo baixado com sucesso" + '"';
                        + ',"E1_NUM":"'  + oParseJSON:E1_NUM 	    + '"';
                        + ',"E1_PREFIXO":"' + oParseJSON:E1_PREFIXO 	+ '"';
                        +'}'
            ::SetResponse( cJSONRet )				
        EndIf		 
        
        RestArea(aArea)
        RESET ENVIRONMENT
    EndIf

Return(lRet)

/*/{Protheus.doc} DELETE
    @description Exclui um titulo do contas a receber.
    @type WebService Method
    @author Rafael Karczevski
    @since 22/08/2019
    @version 1.0
/*/
WSMETHOD DELETE WSRECEIVE RECEIVE WSSERVICE SFCONTRECEBE

    Local cCgcGil    := Self:CGCFIL
    Local aArea
    //Local cNextAlias := GetNextAlias()
    Local oParseJSON := Nil 
    Local cJSON 	 := Self:GetContent() // Pega a string do JSON 
    Local oTitulo
    Local lRet		 := .T.
    Local nStart
    Local aDadosTit  := {}
    Private lMsErroAuto := .F.

    If PepEnv(cCgcGil)

        aArea 	   := GetArea()
        oTitulo    := SFCONTRECEBE():New()
        nStart     := Seconds()
        
        ::SetContentType("application/json")
        // --> Deserializa a string JSON
        FWJsonDeserialize(cJson, @oParseJSON)

        aAdd(aDadosTit, {"E1_FILIAL"    , xFilial("SE1")        , Nil})
        aAdd(aDadosTit, {"E1_NUM"       , oParseJSON:E1_NUM     , Nil})
        aAdd(aDadosTit, {"E1_PREFIXO"   , oParseJSON:E1_PREFIXO , Nil})
        aAdd(aDadosTit, {"E1_PARCELA"   , oParseJSON:E1_PARCELA , Nil})
        aAdd(aDadosTit, {"E1_TIPO"      , oParseJSON:E1_TIPO    , Nil})
        aAdd(aDadosTit, {"E1_NATUREZ"   , oParseJSON:E1_NATUREZ , Nil})
        aAdd(aDadosTit, {"E1_CLIENTE"   , oParseJSON:E1_CLIENTE , Nil})
        aAdd(aDadosTit, {"E1_LOJA"      , oParseJSON:E1_LOJA    , Nil})
        aAdd(aDadosTit, {"E1_NOMCLI"    , Posicione("SA1", 1, xFilial("SA1") + oParseJSON:E1_CLIENTE + oParseJSON:E1_LOJA, "A1_NOME")               , Nil})
        aAdd(aDadosTit, {"E1_EMISSAO"   , sToD(oParseJSON:E1_EMISSAO) , Nil})
        aAdd(aDadosTit, {"E1_VENCTO"    , sToD(oParseJSON:E1_VENCTO ) , Nil})
        aAdd(aDadosTit, {"E1_VENCREA"   , sToD(oParseJSON:E1_VENCTO ) , Nil})
        aAdd(aDadosTit, {"E1_VALOR"     , oParseJSON:E1_VALOR   , Nil})
        aAdd(aDadosTit, {"E1_VALJUR"    , 0                     , Nil})
        aAdd(aDadosTit, {"E1_PORCJUR"   , 0                     , Nil})
        aAdd(aDadosTit, {"E1_HIST"      , oParseJSON:E1_HIST    , Nil})
        aAdd(aDadosTit, {"E1_MOEDA"     , 1                     , Nil})
        aAdd(aDadosTit, {"E1_CREDIT"    , oParseJSON:E1_CREDIT  , Nil})
        aAdd(aDadosTit, {"E1_CCC"       , oParseJSON:E1_CCC     , Nil})
        aAdd(aDadosTit, {"E1_ITEMC"     , oParseJSON:E1_ITEMC   , Nil})
        aAdd(aDadosTit, {"E1_NUMBCO"    , oParseJSON:E1_NUMBCO  , Nil})
        aAdd(aDadosTit, {"E1_MULTNAT"   , oParseJSON:E1_MULTNAT , Nil})
        aAdd(aDadosTit, {"E1_XIDCNAB"   , oParseJSON:E1_XIDCNAB , Nil})
        aAdd(aDadosTit, {"E1_XNUMBCO"   , oParseJSON:E1_XNUMBCO , Nil})

        MSExecAuto({|x,y| FINA040(x,y)}, aDadosTit, 5)

        If lMsErroAuto
            cArqLog := oParseJSON:E1_PREFIXO + oParseJSON:E1_NUM + " - " + SubStr( Time(),1,5 ) + ".log"
            RollBackSX8()
            cErro := MostraErro("\log_tit", cArqLog)
            cErro := TrataErro(cErro) // --> Trata o erro para devolver para o client.
            SetRestFault(400, cErro)
            lRet := .F. 				
        Else
            ConfirmSX8()
            cJSONRet := '{"code":"204"';
                        + ',"message":"' + "Titulo excluido com sucesso" + '"';
                        + ',"E1_NUM":"'  + SE1->E1_NUM 	    + '"';
                        + ',"E1_PREFIXO":"' + SE1->E1_PREFIXO 	+ '"';
                        +'}'
                        
            ::SetResponse( cJSONRet )				
        EndIf		

        RestArea(aArea)
        RESET ENVIRONMENT
    EndIf

Return(lRet)

/*/{Protheus.doc} TrataErro
    @description Trata o erro para devolver no JSON
    @type WebService Method
    @author Rafael Karczevski
    @since 22/08/2019
    @version 1.0
/*/
Static Function TrataErro(cErroAuto)

    Local nLines   := MLCount(cErroAuto)
    Local cNewErro := ""
    Local nErr	   := 0
    For nErr := 1 To nLines
        cNewErro += AllTrim( MemoLine( cErroAuto, , nErr ) ) + " - "
    Next nErr

Return(cNewErro)

/*/{Protheus.doc} PepEnv
    @description
    @type Static Function
    @author Rafael Karczevski
    @since 27/08/2019
    @version 1.0
    @param param, param_type, param_descr
    @return return, return_type, return_description
    @example
    (examples)
    @see (links_or_references)
    /*/
Static Function PepEnv(p_FilCgc)

    Local cCodFil := ""
    Local cCGc := ""
    Local lRet := .T.
    
    PREPARE ENVIRONMENT EMPRESA '01' FILIAL '01MT0001'
        dbSelectArea("SM0")
        SM0->(DbSetOrder(1))
        SM0->(DbGoTop())
        While !(SM0->(eof())) .and. cCGc <> p_FilCgc
            cCodFil := SM0->M0_CODFIL
            cCGc := SM0->M0_CGC
            SM0->(dbSkip())
        End

    If cCGc <> p_FilCgc        
        SetRestFault(400, "Não foi possivel localizar a filial solicitada!")
        lRet := .F.
    EndIf
    RESET ENVIRONMENT

    PREPARE ENVIRONMENT EMPRESA '01' FILIAL AllTrim(cCodFil)

Return lRet

/*/{Protheus.doc} SFCONTRECEBE
    @description Objeto de cliente para utilização em web service rest
    @type Class
    @author Rafael Karczevski
    @since 22/08/2019
    @version 1.0
    /*/
Class SFCONTRECEBE
	
	Data E1_PREFIXO			As String
    Data E1_NUM				As String
    Data E1_PARCELA			As String
    Data E1_TIPO			As String
    Data E1_CLIENTE			As String
    Data E1_LOJA			As String
    Data E1_NATUREZ			As String
    Data E1_EMISSAO	    	As String
    Data E1_VENCTO 	    	As String
    Data E1_VALOR			As String
    Data E1_HIST			As String
    Data E1_CREDIT			As String
    Data E1_CCC 	    	As String
    Data E1_ITEMC			As String
    Data E1_XIDCNAB			As String
    Data E1_XNUMBCO		    As String
    Data E1_NUMBCO		    As String
    Data E1_MULTNAT		    As String
    Data Message	    	As String
    Data AUTMOTBX           As String
    Data AUTBANCO           As String
    Data AUTAGENCIA         As String
    Data AUTCONTA           As String
    Data AUTDTBAIXA         As String
    Data AUTDTCREDITO       As String
    Data AUTHIST            As String
    Data AUTJUROS           As String
    Data AUTVALREC          As String
	
	Method New() Constructor
	
EndClass

/*/{Protheus.doc} New
Método Construtor
/*/
Method New() Class SFCONTRECEBE
    
    ::E1_PREFIXO	:= Nil
    ::E1_NUM		:= Nil
    ::E1_PARCELA	:= Nil
    ::E1_TIPO		:= Nil
    ::E1_CLIENTE	:= Nil
    ::E1_LOJA		:= Nil
    ::E1_NATUREZ	:= Nil
    ::E1_EMISSAO	:= Nil
    ::E1_VENCTO 	:= Nil
    ::E1_VALOR		:= Nil
    ::E1_HIST		:= Nil
    ::E1_CREDIT		:= Nil
    ::E1_CCC 	    := Nil
    ::E1_ITEMC		:= Nil
    ::E1_XIDCNAB	:= Nil
    ::E1_XNUMBCO	:= Nil
    ::E1_NUMBCO		:= Nil
    ::E1_MULTNAT	:= Nil
    ::Message	    := Nil
    ::AUTMOTBX      := Nil
    ::AUTBANCO      := Nil
    ::AUTAGENCIA    := Nil
    ::AUTCONTA      := Nil
    ::AUTDTBAIXA    := Nil
    ::AUTDTCREDITO  := Nil
    ::AUTHIST       := "Valor recebido s/ Titulo"
    ::AUTJUROS      := Nil
    ::AUTVALREC     := Nil

Return(Self)