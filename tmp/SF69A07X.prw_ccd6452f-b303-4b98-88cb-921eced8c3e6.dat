#INCLUDE "PROTHEUS.CH"
#INCLUDE "TOTVS.CH"
#INCLUDE "FWMVCDEF.CH"
#INCLUDE "PARMTYPE.CH"
#INCLUDE "FWBROWSE.CH"
#INCLUDE "MXVSTYLE.CH"

#DEFINE QLABEL_RED_A "QLabel{ font-weight: bold;text-align: left;background-color: #FFFFFF;color: #960D20;font-family: Arial, Helvetica, sans-serif;font-size: 12px;line-height: 140%;text-shadow: 1px 1px 1px #333232;column-count:2;column-width:10px;column-gap:0px}"

#DEFINE STR0001 "ATENÇÃO: Nesta rotina é listado todos os produtos S+ que ainda não foram vinculados a um produto TOTVS."
#DEFINE STR0002 "Lembrando que nesta interface somente poderá vincular um produto S+ a um produto TOTVS (1:1)."
#DEFINE STR0003 "Havendo necessidade novas amarrações, utilize a rotina principal."

#xtranslate bSetGet(<uvar>) => {|u| If(PCount() == 0,<uVar>,<uVar> := u)}

Static lImplementation := .F.

Static bSx3Spc   := {|cCpo| Space(GetSx3Cache(cCpo,"X3_TAMANHO")) }                        
Static bSx3Als   := {|cCpo| GetSx3Cache(cCpo,"X3_ARQUIVO") }                               
Static bSx3Tam   := {|cCpo| GetSx3Cache(cCpo,"X3_TAMANHO") }                               
Static bSx3Rel   := {|cCpo| GetSx3Cache(cCpo,"X3_RELACAO" ) }                               
Static bSx3Desc  := {|cCpo| GetSx3Cache(cCpo,"X3_TITULO" ) }                               
Static bSx3Tipo  := {|cCpo| GetSx3Cache(cCpo,"X3_TIPO"   ) }                               
Static bSx3Dec   := {|cCpo| GetSx3Cache(cCpo,"X3_DECIMAL") }                               
Static bSx3Pic   := {|cCpo| GetSx3Cache(cCpo,"X3_PICTURE") }                               
Static bSx3VldP  := {|cCpo,lTrat| e:=GetSx3Cache(cCpo,"X3_VALID"  ),Iif( lTrat .And. !Empty( e ), ' .AND. ' + e , '' ) }                               
Static bSx3VldU  := {|cCpo,lTrat| e:=GetSx3Cache(cCpo,"X3_VLDUSER"),Iif( lTrat .And. !Empty( e ), ' .AND. ' + e , '' ) }                               
Static bSx3Ini   := {|cCpo| Iif( eVal( bSx3Tipo, cCpo ) == "N", 0, Iif( eVal( bSx3Tipo, cCpo ) == "D", CtoD(""), eVal( bSx3Spc, cCpo ))) }

Static cTitulo := "Amarração Produto Totvs x SMAIS"
Static cAliasMVC := "ZB0"

/*{Protheus.doc} User Function SF69A07X
Amarração Produto Totvs x SMAIS
@author Carlos Ryve
@since 01/07/2020
@version 1.0
@type function
*/

User Function SF69A07X()
	Local aArea   := GetArea()
	Local oBrowse
	Private aRotina := {}

	//Definicao do menu
	aRotina := MenuDef()

	//Instanciando o browse
	oBrowse := FWMBrowse():New()
	oBrowse:SetAlias(cAliasMVC)
	oBrowse:SetDescription(cTitulo)
	oBrowse:DisableReport()

	//Ativa a Browse
	oBrowse:Activate()

	RestArea(aArea)
Return Nil

/*{Protheus.doc} MenuDef
Menu de opcoes na funcao SF69A07X
@author Carlos Ryve
@since 01/07/2020
@version 1.0
@type function
*/

Static Function MenuDef()
	Local aRotina := {}

	//Adicionando opcoes do menu
	ADD OPTION aRotina TITLE "Visualizar" ACTION "VIEWDEF.SF69A07X" OPERATION 1 ACCESS 0
	ADD OPTION aRotina TITLE "Incluir" ACTION "VIEWDEF.SF69A07X" OPERATION 3 ACCESS 0
	ADD OPTION aRotina TITLE "Lote" ACTION "u_SF69A7X()" OPERATION 3 ACCESS 0
	ADD OPTION aRotina TITLE "Alterar" ACTION "VIEWDEF.SF69A07X" OPERATION 4 ACCESS 0
	ADD OPTION aRotina TITLE "Excluir" ACTION "VIEWDEF.SF69A07X" OPERATION 5 ACCESS 0

Return aRotina

/*{Protheus.doc} ModelDef
Modelo de dados na funcao SF69A07X
@author Carlos Ryve
@since 01/07/2020
@version 1.0
@type function
*/

Static Function ModelDef()
	Local oStruct := FWFormStruct(1, cAliasMVC)
	Local oModel
	Local bPre := Nil
	Local bPos := Nil
	Local bCommit := Nil
	Local bCancel := Nil


	//Cria o modelo de dados para cadastro
	oModel := MPFormModel():New("SF69A07M", bPre, bPos, bCommit, bCancel)
	oModel:AddFields("ZB0MASTER", /*cOwner*/, oStruct)
	oModel:SetDescription("Modelo de dados - " + cTitulo)
	oModel:GetModel("ZB0MASTER"):SetDescription( "Dados de - " + cTitulo)
	oModel:SetPrimaryKey({})
Return oModel

/*{Protheus.doc} ViewDef
Visualizacao de dados na funcao SF69A07X
@author Carlos Ryve
@since 01/07/2020
@version 1.0
@type function
*/

Static Function ViewDef()
	Local oModel := FWLoadModel("SF69A07X")
	Local oStruct := FWFormStruct(2, cAliasMVC)
	Local oView

	//Cria a visualizacao do cadastro
	oView := FWFormView():New()
	oView:SetModel(oModel)
	oView:AddField("VIEW_ZB0", oStruct, "ZB0MASTER")
	oView:CreateHorizontalBox("TELA" , 100 )
	oView:SetOwnerView("VIEW_ZB0", "TELA")

Return oView



/*
	Funcao: u_B1SMAIS
	Autor:  Carlos Ryve
	Uso:	Filtro dos produtos Totvs utilizados pelo SMAIS
*/
Function u_B1SMAIS()
	Local cFilter	:= ""
	
	cFilter	+= "@#"
	cFilter	+= "SB1->("
	cFilter	+= "B1_FILIAL=='"+xFilial("SB1")+"'"
	cFilter	+= " .AND. "
	cFilter	+= "B1_MSBLQL <> '1'"
	cFilter	+= IIf( "02" $ cFilAnt, " .AND. B1_XPRDFIL == '02' .AND. B1_XPRDVEN == 'S'.AND. B1_GRUPO == 'QV01'" , ""  )
	cFilter	+= ")@#" 
	
Return( cFilter )

/*
	Method   : COESTA08
	Autor    : Carlos Ryve Gandini
	Data/Time: 22/04/20 às 07:45:58
	Descricao: Permite amarracao em lote unica produto S+
	Sintaxe  : <Vide Parametros Formais>
*/
Function u_SF69A7X()

Local aArea    := GetArea() 
Local aAreaZB0 := ZB0->( GetArea() )
Local aAreaSB1 := SB1->( GetArea() )

Local aBkpACols  := {}
Local oBtnSalvar := Nil
Local oBtnSair   := Nil

Local nOpc := 0

Private oDlg                               
Private aFieldX3 := {}

  DEFINE MSDIALOG oDlg TITLE "Amarração em Lote única - Produtos TOTVS x S+" FROM 000, 000  TO 500, 800 COLORS 0, 16777215 PIXEL

	oSay01 := tSay():New(005, 020, {|| STR0001 + CRLF + STR0002 + CRLF + STR0003}, oDlg, , , , , , .T., , , 360  , 060)
	oSay01:SetCSS( QLABEL_RED_A )
	
	//oSay01:cCaption := STR0001 + CRLF
	//oSay01:cCaption := STR0002 + CRLF
	//oSay01:cCaption += STR0003 
	//oSay01:Refresh()

  fCreateGD()
	fLoadGD()

	aBkpACols := aClone( oGD:aCols )
	
	oBtnSalvar   := TButton():New(220,280,"      Salvar",oDlg,{|| nOpc := 1, oDlg:End() },60,20,,,.F.,.T.,.F.,,.F.,,,.F. )
	oBtnSair     := TButton():New(220,340,"     Sair" 	,oDlg,{|| nOpc := 0, oDlg:End() },60,20,,,.F.,.T.,.F.,,.F.,,,.F. )
	oBtnSalvar:SetCss(STYBTN0003)
	oBtnSair:SetCss(STYBTN004)

  ACTIVATE MSDIALOG oDlg CENTERED

	If nOpc == 1 .And. !ArrayCompare( aBkpACols , oGD:aCols )

		FWMsgRun( , {|oSay| fGrava(oSay) },"Amarração Lote Unico","Aguarde...Atualizando dados!")

	EndIf

	RestArea( aAreaZB0 )
	RestArea( aAreaSB1 )
	RestArea( aArea    )

Return .T.

//------------------------------------------------
Static Function fCreateGD()
//------------------------------------------------
Local nX
Local nB
Local aFieldFill   := {}
Local aFields      := {"D1_ITEM","ZB0_CODEXA","ZB0_DESCEX","ZB0_COD","ZB0_DESC","ZB0_RECZG7","ZB0_RECSB1"}
Local aAlterFields := {"ZB0_COD"}
Local cValid       := ""

Private aHeaderEx    := {}
Private aColsEx      := {}
Static oGD

  // Define field properties
  DbSelectArea("SX3")                                              
  SX3->(DbSetOrder(2))
  For nX := 1 to Len(aFields)
    If SX3->(DbSeek(aFields[nX]))
		
	 cValid := eVal( bSx3VldP , aFields[nX] , .T. )		
	 cValid += eVal( bSx3VldU , aFields[nX] , .F. )

		Do Case
			Case rTrim(aFields[nX]) = "ZB0_COD"	
				cValid := 'Vazio() .or. (ExistCpo("SB1") .And. u_fDesPrd())'
				aAdd( aFieldX3, {SX3->X3_CAMPO,SX3->X3_OBRIGAT} ) 
				RecLock("SX3",.F.)
					SX3->X3_OBRIGAT := ""
				MsUnLock()
			Case rTrim(aFields[nX]) = "ZB0_DESC"
				cValid := 'Vazio()'
			OtherWise
				cValid := SX3->X3_VALID
		EndCase
	 		
      Aadd(aHeaderEx, {AllTrim(X3Titulo()),;
      				   SX3->X3_CAMPO,;
                       SX3->X3_PICTURE,;
                       Iif(rTrim(aFields[nX]) $ "ZB0_DESC|ZB0_DESCEX" , 30, SX3->X3_TAMANHO ),;
                       SX3->X3_DECIMAL,;
                       cValid,;
                       SX3->X3_USADO,;
                       SX3->X3_TIPO,;
                       SX3->X3_F3,;
                       SX3->X3_CONTEXT,;
                       SX3->X3_CBOX,;
                       SX3->X3_RELACAO})
    Endif
  Next nX

  // Define field values
  For nX := 1 to Len(aFields)
    If DbSeek(aFields[nX])
      Aadd(aFieldFill, CriaVar(SX3->X3_CAMPO))
    Endif
  Next nX
  Aadd(aFieldFill, .F.)
  Aadd(aColsEx, aFieldFill)

  oGD := MsNewGetDados():New( 038, 005, 200, 400, /*GD_INSERT+GD_DELETE+*/GD_UPDATE, "AllwaysTrue", "AllwaysTrue", "+D1_ITEM", aAlterFields,, 999, "AllwaysTrue", "", "AllwaysTrue", oDlg, aHeaderEx, aColsEx)
	
  DbSelectArea("SX3")                                              
  SX3->(DbSetOrder(2))
	For nB := 1 To Len(aFieldX3)
    If SX3->(DbSeek(aFieldX3[nB][1]))
			RecLock("SX3",.F.)
				SX3->X3_OBRIGAT := aFieldX3[nB][2]
			MsUnLock()
		EndIf
	Next nB   
	
Return

/*
	Method   : fLoadGD
	Autor    : Carlos Ryve Gandini
	Data/Time: 22/04/20 às 07:52:51
	Descricao: Realiza o Load dos dado da Grid
	Sintaxe  : <Vide Parametros Formais>
*/
Static Function fLoadGD()

	Local nPItem  := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="D1_ITEM"   })
	Local nPCodSM := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="ZB0_CODEXA"})
	Local nPDesSM := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="ZB0_DESCEX" })
	Local nPCodTO := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="ZB0_COD"})
	Local nPDesTO := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="ZB0_DESC"})
	Local nPRecSM := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="ZB0_RECZG7"})
	Local nPRecTO := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="ZB0_RECSB1"})
	
	Local nAte := 0
	Local nA   := 0
	Local cItem := "001"
	Local aTmp  := {}
	
	Local cT := GetNextAlias()

	BeginSql Alias cT
		SELECT DISTINCT 
			ZG7_CODEXA COD, ZG7_DESCEX DES
		FROM 
			%TABLE:ZG7% ZG7
		WHERE 1=1
			//AND ZG7_PRDTOT = ' '
			//AND NOT EXISTS (SELECT 1 FROM %TABLE:ZB0% ZB0 WHERE ZB0.ZB0_CODEXA = ZG7.ZG7_CODEXA AND ZB0.%NotDel% )
			AND ZG7.%NotDel%
	EndSql
	
	If (cT)->(!Eof())
		
		oGD:aCols := {}
		
		While	(cT)->(!Eof())

		//cLoc := Posicione( "SB1" ,1 , xFilial("SB1")+aCols[nA][nPCod] ,"B1_LOCPAD" )
		
		aTmp := {}
		Aadd( aTmp, cItem                     ) //Item
		Aadd( aTmp, (cT)->COD                   ) //Codigo S+
		Aadd( aTmp, Subs((cT)->DES,1,25)                  ) //Descricao S+
		Aadd( aTmp, eVal( bSx3Ini, 'ZB0_COD'    ))//Codigo Totvs
		Aadd( aTmp, eVal( bSx3Ini, 'ZB0_DESC'   ))//Descricao Totvs
		Aadd( aTmp, eVal( bSx3Ini, 'ZB0_RECZG7' ))//Recno ZG7
		Aadd( aTmp, eVal( bSx3Ini, 'ZB0_RECSB1' ))//Recno SB1
		Aadd( aTmp, .F.                         ) //Flag Deleted
		
		aAdd( oGD:aCols, aTmp )
		cItem := Soma1(cItem)
		
		(cT)->(dbSkip())
		EndDo
		
	EndIf
	
	oGD:Refresh()
	
Return .T.

/*
	Method   : fGrava
	Autor    : Carlos Ryve Gandini
	Data/Time: 22/04/20 às 07:53:43
	Descricao: Realiza a gravacao dos dados
	Sintaxe  : <Vide Parametros Formais>
*/
Static Function fGrava(oSay)

	Local nPItem  := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="D1_ITEM"   })
	Local nPCodSM := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="ZB0_CODEXA"})
	Local nPDesSM := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="ZB0_DESCEX" })
	Local nPCodTO := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="ZB0_COD"})
	Local nPDesTO := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="ZB0_DESC"})
	Local nPRecSM := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="ZB0_RECZG7"})
	Local nPRecTO := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="ZB0_RECSB1"})

	Local nTam := Len(oGD:aCols)
	Local nA   := 0

	If nTam > 0
		
		For nA := 1 To nTam
			
			If Empty( oGD:aCols[nA][nPCodTO] )
				Loop
			EndIf
			
			If Type("oSay") == "O"
				oSay:cCaption := "Aguarde...Sincronizando dados!!!" + CRLF + oGD:aCols[nA][nPCodSM]
				ProcessMessages()
			EndIf
			
			Sleep( 500 )
			
			RecLock("ZB0",.T.)
				ZB0->ZB0_CODEXA := oGD:aCols[nA][nPCodSM]
				ZB0->ZB0_DESCEX := oGD:aCols[nA][nPDesSM]
				ZB0->ZB0_COD    := oGD:aCols[nA][nPCodTO]
				ZB0->ZB0_DESC   := oGD:aCols[nA][nPDesTO]
				ZB0->ZB0_RECZG7 := 0
				ZB0->ZB0_RECSB1 := oGD:aCols[nA][nPRecTO]
			MsUnLock()

		Next nA

	EndIf

Return


/*
	Method   : A103DtVld
	Autor    : Carlos Ryve Gandini
	Data/Time: 22/04/20 às 07:50:23
	Descricao: So permite digitar a data de validade do lote apos o usuario digitar o Lote de Controle
	Sintaxe  : <Vide Parametros Formais>
*/
Function u_fDesPrd()
	Local lRet		 :=.T.
	Local aAreaAnt   := GetArea()
	Local aAreaSB1   := SB1->(GetArea())
	Local nPItem  := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="D1_ITEM"   })
	Local nPCodSM := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="ZB0_CODEXA"})
	Local nPDesSM := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="ZB0_DESCEX" })
	Local nPCodTO := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="ZB0_COD"})
	Local nPDesTO := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="ZB0_DESC"})
	Local nPRecSM := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="ZB0_RECZG7"})
	Local nPRecTO := aScan(oGD:aHeader,{|z| Alltrim(Upper(z[2]))=="ZB0_RECSB1"})


//
// POSICIONA A SB1
//
DbSelectArea("SB1")
If MsSeek(xFilial("SB1")+oGD:aCols[n,nPCodTO])         

	oGD:aCols[n,nPDesTO] := SB1->B1_DESC

EndIf

RestArea(aAreaSB1)
RestArea(aAreaAnt)                      

Return lRet