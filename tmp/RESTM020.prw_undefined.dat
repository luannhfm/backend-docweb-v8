#include 'totvs.ch'
#include 'restful.ch'
#INCLUDE 'FWMVCDEF.CH'
#include "Protheus.ch"
#include "rwmake.ch"
#include "topconn.ch"
#include "TbiConn.ch"
#include "PARMTYPE.CH"

#define CRLF          CHR ( 13 ) + CHR ( 10 )
#define PROC_LABEL    "Integracao Fornecedores Paradigma com o Protheus"
#define PROC_NAME     "APIM020"

Static bSx3Tam   := {|cCpo| GetSx3Cache(cCpo,"X3_TAMANHO") }

Private oError
Private bError      := { |e| oError := e, Break(e) }
Private bErrorBlock := ErrorBlock( bError )

/*
	Method   : API Integracao Fornecedor
	Autor    : Carlos Ryve Gandini
	Data/Time: 20/04/21 às 13:43:13
	Descricao: Integracao Fornecedor Paradigma no Protheus
	Sintaxe  : <Vide Parametros Formais>
*/
WSRESTFUL Supplier DESCRIPTION 'API integration Supplier Paradigm' FORMAT APPLICATION_JSON
	WSDATA RequestNumber As Character

	WSMETHOD POST ProductInclusion DESCRIPTION 'Supplier Inclusion' WSSYNTAX '/supplier/supplierInclusion' PRODUCES APPLICATION_JSON
ENDWSRESTFUL

/*
supplierInclusion method POST utilizando jSonObject
*/
WSMETHOD POST ProductInclusion WSRECEIVE WSRESTFUL Supplier

Local nX,nY

Local cMethod := "POST"
Local cMessage := ""
Local cResult := ""
Local cJson := Self:GetContent()
Local cError
Local cErrProc := ""

Local lReturn := .T.

Local aArea := GetArea()

Local oJson
Local oItems

Local lSX8 := .F.
Local nCnt := 0
Local aVet := {}
Local cLog := ""
Local cErr := ""
Local lAut := .T. //Verificar
Local cNum := ""
Local cLoj := ""
Local cCGC := ""
Local cTip := ""

Private _dDtIni := Ctod("")
Private _cHora := Time()
Private cPathErr := SuperGetMV("MV_XPATHER", .F., "\log\")
Private cFldErr := "RESTM020"

SET CENTURY ON
SET DATE BRITISH
_dDtIni := Date()

ConOut("***********************************************************************************************")
ConOut("* J2A: API responsavel integracao Fornecedor com Protheus                                     *")
ConOut("* Início: " + DtoC(_dDtIni) + " - " + _cHora + "                                             *")
ConOut("* Montagem do ambiente na empresa                                                             *")
ConOut("***********************************************************************************************")

If !fSetAmb(.T.)
	SetSoapFault("ERROR","ERRO ABRIR AMBIENTE")
	Return(.F.)
Endif

_SetOwnerPrvt("idExecutor"	 , GetServerIp()+":"+alltrim(str(GetServerPort())) )

FWMonitorMsg("(" + cEmpAnt + "/" + cFilAnt + ") Executor em execucao (" + idExecutor + ")")

_SetOwnerPrvt("nA2COD"  , eVal( bSx3Tam , "A2_COD"    ))
_SetOwnerPrvt("nA2LOJA" , eVal( bSx3Tam , "A2_LOJA"   ))
_SetOwnerPrvt("nA2TIPO" , eVal( bSx3Tam , "A2_TIPO"   ))
_SetOwnerPrvt("nA2CGC"  , eVal( bSx3Tam , "A2_CGC"    ))
_SetOwnerPrvt("nA2NOME" , eVal( bSx3Tam , "A2_NOME"   ))
_SetOwnerPrvt("nA2NREDU", eVal( bSx3Tam , "A2_NREDUZ" ))
_SetOwnerPrvt("nA2END"  , eVal( bSx3Tam , "A2_END"    ))

_SetOwnerPrvt("nA2BAIRRO" , eVal( bSx3Tam, "A2_BAIRRO"  ))
_SetOwnerPrvt("nA2EST"    , eVal( bSx3Tam, "A2_EST"     ))
_SetOwnerPrvt("nA2COD_MUN", eVal( bSx3Tam, "A2_COD_MUN" ))
_SetOwnerPrvt("nA2MUN"    , eVal( bSx3Tam, "A2_MUN"     ))
_SetOwnerPrvt("nA2CEP"    , eVal( bSx3Tam, "A2_CEP"     ))
_SetOwnerPrvt("nA2DDD"    , eVal( bSx3Tam, "A2_DDD"     ))
_SetOwnerPrvt("nA2TEL"    , eVal( bSx3Tam, "A2_TEL"     ))
_SetOwnerPrvt("nA2FAX"    , eVal( bSx3Tam, "A2_FAX"     ))
_SetOwnerPrvt("nA2INSCR"  , eVal( bSx3Tam, "A2_INSCR"   ))
_SetOwnerPrvt("nA2INSCRM" , eVal( bSx3Tam, "A2_INSCRM"  ))
_SetOwnerPrvt("nA2CONTATO", eVal( bSx3Tam, "A2_CONTATO" ))
_SetOwnerPrvt("nA2BANCO"  , eVal( bSx3Tam, "A2_BANCO"   ))
_SetOwnerPrvt("nA2AGENCIA", eVal( bSx3Tam, "A2_AGENCIA" ))
_SetOwnerPrvt("nA2XDVAGE" , eVal( bSx3Tam, "A2_XDVAGE" ))
_SetOwnerPrvt("nA2NUMCON" , eVal( bSx3Tam, "A2_NUMCON"  ))
_SetOwnerPrvt("nA2XDVCTA" , eVal( bSx3Tam, "A2_XDVCTA"  ))
_SetOwnerPrvt("nA2XOPERAC", eVal( bSx3Tam, "A2_XOPERAC"  ))
_SetOwnerPrvt("nA2EMAIL"  , eVal( bSx3Tam, "A2_EMAIL"   ))
_SetOwnerPrvt("nA2HPAGE"  , eVal( bSx3Tam, "A2_HPAGE"   ))
_SetOwnerPrvt("nA2CNAE"   , eVal( bSx3Tam, "A2_CNAE"    ))
_SetOwnerPrvt("nA2PAIS"   , eVal( bSx3Tam, "A2_PAIS" ))
_SetOwnerPrvt("nA2CODPAIS", eVal( bSx3Tam, "A2_CODPAIS" ))
_SetOwnerPrvt("nA2COMPLEM", eVal( bSx3Tam, "A2_COMPLEM" ))
_SetOwnerPrvt("nA2CONTA"  , eVal( bSx3Tam, "A2_CONTA"   ))
_SetOwnerPrvt("nTPESSOA"  , eVal( bSx3Tam, "A2_TPESSOA" ))


Private lMsErroAuto     := .F.
Private lMsHelpAuto     := .T.
Private lAutoErrNoFile  := .T.

//Se nao existir o diretorio de logs dentro da Protheus Data, sera criado
IF !ExistDir(cPathErr)
	MakeDir(cPathErr)
EndIF
//Se nao existir o diretorio de logs dentro da Protheus Data, sera criado
IF !ExistDir(cPathErr+cFldErr)
	MakeDir(cPathErr+cFldErr)
EndIF

//Definindo o conteudo como JSON, e pegando o content e dando um parse para ver se a estrutura esta ok
Self:SetContentType("application/json")
oJson   := JsonObject():New()
cError  := oJson:FromJson(cJson)

//Se tiver algum erro no Parse, encerra a execuÃ§Ã£o
IF !Empty(cError)

	SetRestFault(500,'Parser Json Error',.T.)
	DisarmTransaction()
	lReturn := .F.

Else

	aAutoItens := {}

	If oJson <> nil .Or. !Empty( oJson )

		showConsole("BEGIN Line :" + cValtoChar(ProcLine()) + " Time :" + Time() , "N", idExecutor)

		showConsole("fSetErrorHandler Line :" + cValtoChar(ProcLine()) + " Time :" + Time() , "N", idExecutor)
		fSetErrorHandler("Integrando fornecedor via API - Inicio do Processo")
		showConsole("BEGIN SEQUENCE Line :" + cValtoChar(ProcLine()) + " Time :" + Time() , "N", idExecutor)

		BEGIN SEQUENCE

			/*
			Autor       : Carlos Ryve Gandini
			Data/Time   : 23/04/21 às 16:30:44
			Detalhe     : Tratativa MVC, utilizando a model do fornecedor
			*/
			IncSupplier(oJson,@cErrProc)

			RECOVER

			DisarmTransaction()
			cErrProc := "Campos obrigatórios não enviados corretamente. Verificar com a PBS."

		END SEQUENCE

		fResetErrorHandler()
		Sleep(1000)

	EndIf

	aDados := {}
	If !Empty(cErrProc)
		aAdd( aDados , idExecutor )
		aAdd( aDados , "0" )
		aAdd( aDados , cErrProc )
		aAdd( aDados , cResult )
	Else
		aAdd( aDados , idExecutor )
		aAdd( aDados , "1" )
		aAdd( aDados , "Processo integrado com sucesso." )
		aAdd( aDados , cResult )
	EndIf

	oRet := fReturn(cMethod, aDados, cMessage) // Montagem da estrutura de retorno da API
	::SetResponse(oRet:toJson())

EndIf

RestArea(aArea)
FreeObj(oJson)

fSetAmb(.F.)

ConOut("***********************************************************************************************")
ConOut("* J2A: API responsavel integracao do Paradigma com Protheus                                   *")
ConOut("* Iní­cio: " + DtoC(_dDtIni) + " - " + Time() + "                                              *")
ConOut("* Ambiente Fechado                                                                            *")
ConOut("***********************************************************************************************")

Return(lReturn)



Static Function ShowConsole(msg, cTipo, info)
/*/f/
	---------------------------------------------------------------------------------------
	<Descricao> : Exibe as mensagens de processamento no console do Protheus
	<Autor> : Carlos Ryve
	<Data> : 20/04/2021
	<Parametros> : msg, cTipo, info
	msg		: Mensagem a ser exibida no console
	cTipo	: "N" - (Default) Somente exibe mensagem
	: "I" - Indica iní­cio de processamento
	: "E" - Indica falha de processamento. Envia e-mail reportando mensagem.
	info	: Informações adicionais à mensagem.
	<Retorno> : Nenhum
	<Tipo> (Menu,Trigger,Validacao,Ponto de Entrada,Genericas,Especificas ) : E
	<Obs> :
	---------------------------------------------------------------------------------------
*/
	Local il, nl
	Local dIni := Date()
	Default cTipo := "N"
	
	If cTipo == "I" // inicio
		ConOut( Repl("*",120))
		ConOut("* "+PROC_LABEL)
		ConOut("* Environment: "+GetEnvServer())
	EndIF
	
	If ValType(info) == "U"
		info := ""
	Else
		info := " ("+info+")"
	EndIf
	
	msg := "* "+PROC_NAME+info+" - " + dtoc(dIni) + "-" + Time() + ": "+msg
	nl := mlCount(msg,120,4,.f.)
	
	For il := 1 to nl
		ConOut(memoline(msg,120,il, 4,.f.))
	Next
	
	If cTipo == "I" // inico
		ConOut( Repl("*",120))
	EndIf

	If cTipo == "E"
		ConOut( SendMail(msg) )
	EndIf

Return

/*{Protheus.doc} function fReturn
Função que monta a estrutura de retorno da API
@author  Carlos Ryve Gandini
@since   22/04/2021
@version 12.1.27
*/
Static Function fReturn(cMethod, aDados, cMessage)
	Local oRet := JsonObject():new()

	fSetErrorHandler(EncodeUTF8("Falha na montagem da estrutura de retorno da API"))

	If cMethod == "GET"
		If !Empty(cMessage)
			oRet["success"]	:= .F.
			oRet["message"]	:= EncodeUTF8(cMessage)
		Else
			oRet["companyId "] 	:= aDados[3]
			oRet["id"] 			:= aDados[4]
			oRet["xmlType"] 	:= aDados[5]
			oRet["xmlMessage"] 	:= Encode64(aDados[6])
		EndIf

	ElseIf cMethod == "POST"
		If !Empty(cMessage)
			oRet["status"]	:= 0
			oRet["message"]	:= cMessage //EncodeUTF8(cMessage)
		Else
			oRet["status"]	:= aDados[2]
			oRet["message"]	:= aDados[3] //EncodeUTF8(aDados[3])
		EndIf
	EndIf

	fResetErrorHandler()

Return oRet

/*{Protheus.doc} function fSetErrorHandler
Tratamento de Erros
@author  Carlos Ryve Gandini
@since   22/04/2021
@version All
*/
Static Function fSetErrorHandler(cTitle)

	bError  	:= { |e| oError := e , oError:Description := cTitle + CRLF + oError:Description,;
		showConsole("Error :" + oError:Description , "N", idExecutor),;
		Break(e) }
	bErrorBlock := ErrorBlock( bError )

Return .T.

/*{Protheus.doc} function fResetErrorHandler
Tratamento de Erros
@author Carlos Ryve Gandini
@since   22/04/2021
@version All
*/
Static Function fResetErrorHandler(cTitle)

	bError  	:= { |e| oError := e , Break(e) }
	bErrorBlock := ErrorBlock( bError )

Return .T.

/*{Protheus.doc} function fCompress
FunÃ§Ã£o que compacta e converte objeto JSON para String
@author  Carlos Ryve Gandini 
@since   22/04/2021
@version 12.1.27
*/
Static Function fCompress(oObj)
	Local cJson    := ""
	Local cComp    := ""
	Local lCompact := .F.

	// Set gzip format to Json Object
	cJson := oObj:toJSON()

	If Type("::GetHeader('Accept-Encoding')") != "U"  .and. 'GZIP' $ Upper(::GetHeader('Accept-Encoding') )
		lCompact := .T.
	EndIf

	If(lCompact)
		::SetHeader('Content-Encoding','gzip')
		GzStrComp(cJson, @cComp, @nLenComp )
	Else
		cComp := cJson
	Endif
Return cComp

/*{Protheus.doc} function fCompress
Função que prepara abertura ambiente da empresa
@author  Carlos Ryve Gandini 
@since   22/04/2021
@version 12.1.27
*/
Static Function fSetAmb(lOpenEnv)

	Local lReturn := .T.

	If lOpenEnv
		If Select("SX2") == 0
			RpcSetType(3)
			lReturn := RpcSetEnv("01","01MT0001")
		ElseIf !lOpenEnv
			RpcClearEnv()
		Endif
	Endif

Return lReturn

/*
	Autor       : Carlos Ryve Gandini
	Data/Time   : 23/04/21 às 16:28:14
	Detalhe     : Inclusion Supplier MVC
*/
Static Function IncSupplier(oJsonIt,cErro)

	Local oModel
	Local sTpPessoa := "PF"
	Local lAchouCNPJ := .F.
	Local nOper := 3
	Local nY := 0

	lDeuCerto := .F.

	cCNPJ := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']:GetJsonObject('sNrCnpj'       ),nA2CGC)
	QQOUT("CNPJ : " + cCNPJ)

	SA2->( dbSetOrder(3) )
	If !Empty(cCNPJ) .And. SA2->( MsSeek( FWxFilial("SA2")+AllTrim(cCNPJ) ) )
		lAchouCNPJ := .T.
		nOper := 4
		QQOUT("FORNECEDOR ENCONTRADO:" + SA2->A2_NOME)
	EndIf

	//Pegando o modelo de dados, setando a operaÃ§Ã£o de inclusÃ£o
	oModel := FWLoadModel("MATA020")
	oModel:SetOperation(nOper)
	oModel:Activate()


	cTip := IIf(Len(AllTrim(cCNPJ)) > 11, "J" , "F")//PadR(oJsonIt['RetornarEmpresaPorCnpjResult']:GetJsonObject('nIdTipoPessoa'),nA2TIPO)
	sCep     := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']:GetJsonObject('sDsCep'    ), nA2CEP    )
	sEmail   := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']:GetJsonObject('sDsEmailContato'  ), nA2EMAIL  )
	cEndereco  := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']:GetJsonObject('sDsEndereco' ), nA2END)
	sComplem := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']:GetJsonObject('sDsEnderecoComplemento'), nA2COMPLEM)
	sContato := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']:GetJsonObject('sNmContato'), nA2CONTATO)
	cNome      := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']:GetJsonObject('sNmEmpresa'), nA2NOME)
	cNomeFant  := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']:GetJsonObject('sNmFantasia'    ), nA2NREDU)
	sInscr   := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']:GetJsonObject('sNrInscricaoEstadual'  ), nA2INSCR  )
	sInscrm  := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']:GetJsonObject('sNrInscricaoMunicipal' ), nA2INSCRM )

	If !Empty(sInscrm)
		sTpPessoa := "OS"
	EndIf

	sDDD     := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']:GetJsonObject('sNrTelefoneDDD'    ), nA2DDD    )
	sTel     := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']:GetJsonObject('sNrTelefone'    ), nA2TEL    )
	sMunicipio := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']:GetJsonObject('sNmCidade'), nA2MUN)
	sBairro  := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']:GetJsonObject('sNmBairro' ), nA2BAIRRO )
	sEstado    := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']:GetJsonObject('sSgEstado'   ), nA2EST)
	//sConta   := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']['lstEmpresaBanco']['EmpresaBancoDTO']:GetJsonObject('sCdContaContabil'  ), nA2CONTA  )


	sNomeFavor := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']['lstEmpresaBanco']['EmpresaBancoDTO']:GetJsonObject('sNmTitular'), nA2NOME )
	sBanco   := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']['lstEmpresaBanco']['EmpresaBancoDTO']:GetJsonObject('sCdBanco'), nA2BANCO  )
	sAgencia := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']['lstEmpresaBanco']['EmpresaBancoDTO']:GetJsonObject('sCdAgencia'), nA2AGENCIA)
	sAgenDig := PadR(oJsonIt['RetornarEmpresaPorCnpjResult']['lstEmpresaBanco']['EmpresaBancoDTO']:GetJsonObject('sCdAgenciaDigito'), nA2XDVAGE)
	sNumcon  := PadR( oJsonIt['RetornarEmpresaPorCnpjResult']['lstEmpresaBanco']['EmpresaBancoDTO']:GetJsonObject('sCdContaCorrente'), nA2NUMCON )
	sDvCta  := PadR( oJsonIt['RetornarEmpresaPorCnpjResult']['lstEmpresaBanco']['EmpresaBancoDTO']:GetJsonObject('sCdContaDigito'), nA2XDVCTA )
	sCtaTipo := StrZero( oJsonIt['RetornarEmpresaPorCnpjResult']['lstEmpresaBanco']['EmpresaBancoDTO']:GetJsonObject('nCdTipoConta'), nA2XOPERAC )


	//sCdMun   := PadR(oJsonIt:GetJsonObject('sCdMun'  ), nA2COD_MUN)
	//sFax     := PadR(oJsonIt:GetJsonObject('sFax'    ), nA2FAX    )
	//sHpage   := PadR(oJsonIt:GetJsonObject('sHpage'  ), nA2HPAGE  )
	//sCnae    := PadR(oJsonIt:GetJsonObject('sCnae'   ), nA2CNAE   )
	//sCdPais  := PadR(oJsonIt:GetJsonObject('sCdPais' ), nA2PAIS)
	//sCdPaisBac := PadR(oJsonIt:GetJsonObject('sCdPaisBac' ), nA2CODPAIS)

	//Pegando o model dos campos da SA2
	oSA2Mod:= oModel:getModel("SA2MASTER")


	QQOUT("TIPO DE OPERACAO" + CValToChar(nOper))
	If nOper == 3
		QQOUT("FORNECEDOR NOVO A SER CADASTRADO")
		oSA2Mod:setValue("A2_TIPO",      cTip         ) // Tipo
		oSA2Mod:setValue("A2_CGC" ,       cCNPJ       ) // CNPJ/CPF
	EndIf

	oSA2Mod:setValue("A2_NOME"  , cNome       ) // Nome
	oSA2Mod:setValue("A2_NREDUZ", cNomeFant   ) // Nome reduz.
	oSA2Mod:setValue("A2_END"   , cEndereco   ) // Endereco
	oSA2Mod:setValue("A2_BAIRRO", sBairro     ) // Bairro
	oSA2Mod:setValue("A2_EST"   , sEstado     ) // Estado
	//oSA2Mod:setValue("A2_COD_MUN",   sCdMun     ) // Codigo Municipio

	If nOper == 3
		oSA2Mod:setValue("A2_MUN",       sMunicipio    ) // Municipio
	EndIf

	oSA2Mod:setValue("A2_CEP"    , sCep        ) // CEP
	oSA2Mod:setValue("A2_INSCR"  , sInscr      ) // Inscricao Estadual
	oSA2Mod:setValue("A2_INSCRM" , sInscrm     ) // Inscricao Municipal
 //oSA2Mod:setValue("A2_PAIS"   , sCdPais     ) // Pais
	oSA2Mod:setValue("A2_EMAIL"  , rTrim(sEmail)) // E-Mail
	oSA2Mod:setValue("A2_DDD"    , sDDD        ) // DDD
	oSA2Mod:setValue("A2_TEL"    , sTel        ) // Fone
 //oSA2Mod:setValue("A2_FAX"    , sFax        ) // FAX
	oSA2Mod:setValue("A2_TPESSOA", sTpPessoa   ) // Tipo Pessoa
	oSA2Mod:setValue("A2_MSBLQL" , "1"         ) // Bloqueado
	oSA2Mod:setValue("A2_CONTATO", sContato    ) // Contato
	oSA2Mod:setValue("A2_BANCO"  , sBanco      ) // Banco
	oSA2Mod:setValue("A2_AGENCIA", sAgencia    ) // Agencia
	oSA2Mod:setValue("A2_XDVAGE" , sAgenDig    ) // Digito Agencia
	oSA2Mod:setValue("A2_NUMCON" , sNumcon     ) // Numero da Conta
	oSA2Mod:setValue("A2_XDVCTA" , sDvCta      ) // Conta Digito
	oSA2Mod:setValue("A2_XOPERAC", sCtaTipo    ) // Conta Digito
 //oSA2Mod:setValue("A2_CODPAIS", sCdPaisBac  ) // Pais Bacen
	oSA2Mod:setValue("A2_COMPLEM", sComplem    ) // Complemento
 //oSA2Mod:setValue("A2_CONTA"  , sConta      ) // Conta Contabil

	//Se conseguir validar as informacoes
	If oModel:VldData()

		//Tenta realizar o Commit
		If oModel:CommitData()
			lDeuCerto := .T.
		Else
			lDeuCerto := .F.
		EndIf

	Else

		lDeuCerto := .F.

	EndIf

	//Se nao deu certo a inclusao, grava o log com a mensagem de erro
	If ! lDeuCerto
	
		//Busca o Erro do Modelo de Dados
		aErro := oModel:GetErrorMessage()

		AutoGrLog("Geracao do arquivo de log Integracao Paradigma")
		AutoGrLog("")
		AutoGrLog(Replicate("=", 20))

		AutoGrLog("Id do formulario de origem:"  + ' [' + AllToChar(aErro[01]) + ']')
		AutoGrLog("Id do campo de origem: "      + ' [' + AllToChar(aErro[02]) + ']')
		AutoGrLog("Id do formulario de erro: "   + ' [' + AllToChar(aErro[03]) + ']')
		AutoGrLog("Id do campo de erro: "        + ' [' + AllToChar(aErro[04]) + ']')
		AutoGrLog("Id do erro: "                 + ' [' + AllToChar(aErro[05]) + ']')
		AutoGrLog("Mensagem do erro: "           + ' [' + AllToChar(aErro[06]) + ']')
		AutoGrLog("Mensagem da solucao: "        + ' [' + AllToChar(aErro[07]) + ']')
		AutoGrLog("Valor atribui­do: "            + ' [' + AllToChar(aErro[08]) + ']')
		AutoGrLog("Valor anterior: "             + ' [' + AllToChar(aErro[09]) + ']')

		cErro := ""

		cArqLog := "Error_Supplier_"+cValToChar(Date())+"-"+ StrTran(Time(), ':', '-')+".log"

		aLogAuto    := {}
		aLogAuto    := GetAutoGrLog()

		AutoGrLog(Replicate("=", 20))

		For nY := 1 To Len(aLogAuto)
			cErro += aLogAuto[nY] + CRLF
		Next nY

		MemoWrite(cPathErr+cFldErr+"\"+cArqLog, cErro)

		SetRestFault(500, cErro)

		DisarmTransaction()

		ConOut("***********************************************************************************************")
		ConOut("J2A     : API responsavel integracao do Fornecedor Paradigma x Protheus                        ")
		ConOut("DateTime: " + DtoC(_dDtIni) + " - " + Time() + "                                               ")
		ConOut("cArqLog : " + cArqLog                                                                           )
		ConOut("cErro   : " + cErro                                                                             )
		ConOut("***********************************************************************************************")

	EndIf

	//Desativa o modelo de dados
	oModel:DeActivate()

Return lDeuCerto
