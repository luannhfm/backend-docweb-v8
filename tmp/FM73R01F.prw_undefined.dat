#INCLUDE "PROTHEUS.CH"

/*/{Protheus.doc} FM73R01F
Impressão da proposta comercial da FIEMT, com integração WORD.
@type function
@author Franklin de Brito de Oliveira
@since 29/07/2021
/*/
User Function FM73R01F()

Local aArea			:= GetArea()						//Armazena area atual
Local hWord 		:= ParamIXB[1]						//Objeto usado para preenchimento
Local cProposta		:= Space(TamSX3("CJ_PROPOST")[1])	//Numero da proposta comercial
Local cDtEmissao	:= Space(TamSX3("CJ_EMISSAO")[1])	//Data de emissao
local cDtValidade := Space(TamSX3("ADY_DATA")[1])
Local cCodigo		:= Space(TamSX3("A1_COD")[1])		//Codigo da entidade (cliente ou prospect)
Local cLoja			:= Space(TamSX3("A1_LOJA")[1])		//Loja
Local cNome 		:= Space(TamSX3("A1_NOME")[1])		//Nome
Local cEndereco		:= Space(TamSX3("A1_END")[1])   	//Endereco
Local cBairro		:= Space(TamSX3("A1_BAIRRO")[1])    //Bairro
Local cCidade		:= Space(TamSX3("A1_MUN")[1])  	    //Cidade
Local cUF			:= Space(TamSX3("A1_ESTADO")[1])  	//Estado (UF)
Local cNReduz := Space(TamSX3("A1_NREDUZ")[1])
Local cCGC := Space(TamSX3("A1_CGC")[1])
Local cInscrE := Space(TamSX3("A1_INSCR")[1])
local cCEP := Space(TamSX3("A1_CEP")[1])
Local lMsDocument	:= SuperGetMv("MV_FTMSDOC",,.F.)    //Define se a proposta comercial sera vinculada ao banco de conhecimento
Local cPRevisa		:= ' '                              //Revisao dos itens da proposta comercial gravado na tabela ADZ
Local aTipo09		:= {}								//Array que armazena o tipo de pagamento 9
Local aCronoFin		:= {}								//Array que armazena o cronograma financeiro
Local cRevisao		:= ' '                              //Controla a revisao do documento
Local nTotProsp		:= 0								//Total da proposta comercial
Local nI			:= 0                               	//Usado no laco do While
Local nY			:= 0								//Usado no laco do While
Local nQtdFuncio    := 0

    cProposta	:= ADY->ADY_PROPOS
    cPRevisa	:= ADY->ADY_PREVIS
    cDtEmissao	:= Dtoc(ADY->ADY_DATA)
    dDtValidade := ADY->ADY_DATA+20
    aTipo09		:= Ft600Tip09(cProposta,cPRevisa)
    aCronoFin	:= Ft600CroFin(cProposta,cPRevisa,aTipo09)

    if DoW(dDtValidade) == 7  //Sábado
        cDtValidade := Dtoc(dDtValidade+2)
    elseif DoW(dDtValidade) == 1 //Domingo
        cDtValidade := Dtoc(dDtValidade+1)
    else
        cDtValidade := Dtoc(dDtValidade)
    endif

    If ADY->ADY_ENTIDA == "1"
        dbSelectArea("SA1")
        dbSetOrder(1)
        If	dbSeek(xFilial("SA1")+ADY->ADY_CODIGO+ADY->ADY_LOJA)
            cCodigo		:= AllTrim(ADY->ADY_CODIGO)
            cLoja		:= AllTrim(ADY->ADY_LOJA)
            cNome 		:= AllTrim(SA1->A1_NOME)
            cEndereco	:= AllTrim(SA1->A1_END)
            cBairro		:= AllTrim(SA1->A1_BAIRRO)
            cCidade		:= AllTrim(SA1->A1_MUN)
            cUF			:= AllTrim(SA1->A1_EST)
            cNReduz 	:= AllTrim(SA1->A1_NREDUZ)
            cCGC := AllTrim(Transform(SA1->A1_CGC, IIF(SA1->A1_PESSOA=="J", "@R 99.999.999/9999-99", "@R 99.999.999-99")))
            cInscrE := AllTrim(SA1->A1_INSCR)
            cCEP := AllTrim(Transform(SA1->A1_CEP, "@R 99999-999"))
            nQtdFuncio := SA1->A1_XQTEMP
        Endif
    Else
        dbSelectArea("SUS")
        dbSetOrder(1)
        If	dbSeek(xFilial("SUS")+ADY->ADY_CODIGO+ADY->ADY_LOJA)
            cCodigo		:= AllTrim(ADY->ADY_CODIGO)
            cLoja		:= AllTrim(ADY->ADY_LOJA)
            cNome 		:= AllTrim(SUS->US_NOME)
            cEndereco	:= AllTrim(SUS->US_END)
            cBairro		:= AllTrim(SUS->US_BAIRRO)
            cCidade		:= AllTrim(SUS->US_MUN)
            cUF			:= AllTrim(SUS->US_EST)
            cNReduz 	:= AllTrim(SUS->US_NREDUZ)
            cCGC := AllTrim(Transform(SUS->US_CGC, IIF(SUS->US_PESSOA=="J", "@R 99.999.999/9999-99", "@R 99.999.999-99")))
            cInscrE := AllTrim(SUS->US_INSCR)
            cCEP := AllTrim(Transform(SUS->US_CEP, "@R 99999-999"))
            nQtdFuncio := SUS->US_QTFUNC
        Endif
    Endif

    cNomeWord	:=	''
    cNomeWord	:= 'P'+cProposta

    If lMsDocument	
        //Faz revisao do documento pelo banco de conhecimento.
        OLE_SetDocumentVar(hWord,'cRevisao'	,Ft600Rev(cProposta))
    Else
        OLE_SetDocumentVar(hWord,'cRevisao'	,cRevisao)
    EndIf

    //Descricao da Oportunidade de Venda
    OLE_SetDocumentVar(hWord,'cDesOport',Capital(POSICIONE("AD1",1,xFilial("AD1")+ADY->ADY_OPORTU,"AD1_DESCRI")))

    //Dados do emissor da proposta
    OLE_SetDocumentVar(hWord, 'cM0NomeCom', SM0->M0_NOMECOM)
    OLE_SetDocumentVar(hWord, 'cM0Filial', SM0->M0_FILIAL)
    OLE_SetDocumentVar(hWord, 'cM0Cgc', Transform(SM0->M0_CGC, "@R 99.999.999/9999-99"))
    OLE_SetDocumentVar(hWord, 'cM0Insc', SM0->M0_INSC)
    OLE_SetDocumentVar(hWord, 'cM0EndCob', SM0->M0_ENDCOB)
    OLE_SetDocumentVar(hWord, 'cM0CidCob', SM0->M0_CIDCOB)
    OLE_SetDocumentVar(hWord, 'cM0EstCob', SM0->M0_ESTCOB)
    OLE_SetDocumentVar(hWord, 'cM0CEPCob', Transform(SM0->M0_CEPCOB, "@R 99999-999"))
    OLE_SetDocumentVar(hWord, 'cM0Tel', SM0->M0_TEL)

    //Dados do consultor
    dbSelectArea("SA3")
    dbSetOrder(1)   //A3_FILIAL+A3_COD
    If	dbSeek(xFilial("SA3")+ADY->ADY_VEND)
        OLE_SetDocumentVar(hWord, 'A3_NOME', SA3->A3_NOME)
        OLE_SetDocumentVar(hWord, 'A3_CARGO', Posicione("SUM", 1, xFilial("SUM")+SA3->A3_CARGO, "UM_DESC"))
        OLE_SetDocumentVar(hWord, 'A3_TEL', SA3->A3_CEL)
        OLE_SetDocumentVar(hWord, 'A3_EMAIL', SA3->A3_EMAIL)
        OLE_SetDocumentVar(hWord, 'A3_HPAGE', SA3->A3_HPAGE)
    Endif
    
    //Atualiza variaveis do cabecalho - Variaveis
    OLE_SetDocumentVar(hWord,'cProposta'	,'P'+cProposta)
    OLE_SetDocumentVar(hWord,'cDtEmissao'	,cDtEmissao)
    OLE_SetDocumentVar(hWord,'cDtValidade'	,cDtValidade)
    OLE_SetDocumentVar(hWord,'cCodigo'		,cCodigo)
    OLE_SetDocumentVar(hWord,'cNome'		,cNome)
    OLE_SetDocumentVar(hWord,'cEndereco'	,cEndereco)
    OLE_SetDocumentVar(hWord,'cBairro'		,cBairro)
    OLE_SetDocumentVar(hWord,'cCidade'		,cCidade)
    OLE_SetDocumentVar(hWord,'cUF'			,cUF)
    OLE_SetDocumentVar(hWord,'cNReduz', cNReduz)
    OLE_SetDocumentVar(hWord,'cCGC', cCGC)
    OLE_SetDocumentVar(hWord,'cInscrE', cInscrE)
    OLE_SetDocumentVar(hWord,'cCEP', cCEP)
    OLE_SetDocumentVar(hWord,'nQtdFuncio', nQtdFuncio)

    //Dados do representante do cliente
    dbSelectArea("SU5")
    dbSetOrder(1)   //U5_FILIAL+U5_CODCONT+U5_IDEXC	
    If	dbSeek(xFilial("SU5")+ADY->ADY_XASSIN)
        OLE_SetDocumentVar(hWord, 'U5_CONTAT', SU5->U5_CONTAT)
        OLE_SetDocumentVar(hWord, 'U5_FUNCAO', Posicione("SUM", 1, xFilial("SUM")+SU5->U5_FUNCAO, "UM_DESC"))
        OLE_SetDocumentVar(hWord, 'U5_FCOM1', Transform(SU5->U5_DDD+SU5->U5_FCOM1, "@R 999 9999-9999"))
        OLE_SetDocumentVar(hWord, 'U5_EMAIL', SU5->U5_EMAIL)
        OLE_SetDocumentVar(hWord, 'U5_URL', SU5->U5_URL)
    Endif

    //Atualiza variaveis do item - Tabela
    DbSelectArea("ADZ")
    DbSetOrder(3)
    If dbSeek(xFilial("ADZ")+cProposta+cPRevisa) 
        While ADZ->(!Eof()) .and. xFilial("ADZ") == ADZ->ADZ_FILIAL .AND. cProposta == ADZ->ADZ_PROPOS
            nI++
            OLE_SetDocumentVar(hWord,"cProd"+Alltrim(str(nI))  ,Alltrim( Posicione("SB1",1,xFilial("SB1")+ADZ->ADZ_PRODUT,"B1_DESC") ) )
            OLE_SetDocumentVar(hWord,"nQuant"+Alltrim(str(nI)) ,Transform(ADZ->ADZ_QTDVEN,"999,999,999.99"))
            OLE_SetDocumentVar(hWord,"nValUni"+Alltrim(str(nI)),Transform(ADZ->ADZ_PRCVEN,"@E 999,999,999.99"))
            OLE_SetDocumentVar(hWord,"nTotal"+Alltrim(str(nI)) ,Transform(ADZ->ADZ_TOTAL,"@E 999,999,999.99"))
            nTotProsp += ADZ->ADZ_TOTAL
            ADZ->(dbSkip())
        Enddo
        OLE_SetDocumentVar(hWord,'nTotProp',Transform(nTotProsp,"@E 999,999,999.99"))
    Endif

    If nI > 0
        OLE_SetDocumentVar(hWord,'nItens_Proposta',alltrim(Str(nI)))
        OLE_ExecuteMacro(hWord,"Itens_Proposta") 
    Endif

    //Proposta de Servicos
    DbSelectArea("AF1")
    DbSetOrder(4)
    If DbSeek(xFilial("AF1")+cProposta)
        DbSelectArea("AF5")
        DbSetOrder(1)
        If DbSeek(xFilial("AF5")+AF1->AF1_ORCAME)
            OLE_SetDocumentVar(hWord,"cLine",AllTrim(AF5->AF5_DESCRI)) 
            While AF5->(!EOF()) .AND.  xFilial("AF5")+ AF1->AF1_ORCAME == AF5_FILIAL + AF5_ORCAME
                nY++
                If AF5->AF5_STATUS <> '2'
                    If Len(AF5_EDT) == 2  
                        OLE_SetDocumentVar(hWord,"cLine"+Alltrim(str(nY)),AllTrim(AF5->AF5_DESCRI))
                    End
                    If Len(AF5_EDT) > 2   
                        OLE_SetDocumentVar(hWord,"cLine"+Alltrim(str(nY)),AllTrim(AF5->AF5_DESCRI))
                        DbSelectArea("AF2")
                        DbSetOrder(2)
                        If  DbSeek(xFilial("AF2")+AF5->AF5_ORCAME+AF5->AF5_EDT)
                            While AF2->(!EOF()) .AND. xFilial("AF2")+ AF5->AF5_ORCAME + AF5->AF5_EDT == AF2_FILIAL + AF2_ORCAME + AF2_EDTPAI
                                nY++
                                OLE_SetDocumentVar(hWord,"cLine"+Alltrim(str(nY)),Space(2)+AllTrim(AF2->AF2_DESCRI))
                                AF2->(DbSkip())
                            End
                        EndIf
                    EndIf
                EndIf
                AF5->(DbSkip())
            End
        EndIf
    EndIf

    If nY > 0	
        OLE_SetDocumentVar(hWord,'nItens_PServico',alltrim(Str(nY))) 
        OLE_ExecuteMacro(hWord,"Itens_PServico") 
    Endif

    //Atualiza a condicoes de pagamento
    OLE_SetDocumentVar(hWord, 'ADY_CONDPG', AllTrim(Posicione("SE4", 1, xFilial("SE4")+ADY->ADY_CONDPG, "E4_DESCRI")))
    OLE_SetDocumentVar(hWord, 'ADY_XNECES', AllTrim(ADY->ADY_XNECES))
    OLE_SetDocumentVar(hWord,'ADY_XOBJET', AllTrim(ADY->ADY_XOBJET))
    OLE_SetDocumentVar(hWord,'ADY_XCRONO', AllTrim(ADY->ADY_XCRONO))
    OLE_SetDocumentVar(hWord, 'ADY_XACRIT', AllTrim(ADY->ADY_XACRIT))

    RestArea(aARea)

Return Nil

/*/{Protheus.doc} Ft600Rev
Cria revisao do documento.
@type function
@author Franklin de Brito de Oliveira
@since 29/07/2021
@param cProposta, character, numero da proposta
@return character, revisão da proposta
/*/
Static Function Ft600Rev(cProposta)
Local cLocRev		:= '' 	   				//Localiza a se existe docs de revisao no servidor
Local cRevisao 		:= '' 					//Revisao do documento
Local cNomeWord		:= "P"+cProposta   		//P+Numero da Proposta
Local nCount 		:= 1  					//Incremento

    DbSelectArea("ACB")
    DbSetOrder(2)

    If !DbSeek(xFilial("ACB")+Upper(cNomeWord+'.doc'))
        cRevisao := cNomeWord
        Return(cRevisao)
    Else
        While ACB->(!Eof())
            cLocRev := ' - R'+cValToChar(nCount)
            If !DbSeek(xFilial("ACB")+Upper(cNomeWord+cLocRev+'.doc'))
                cRevisao := cNomeWord+cLocRev
                Exit
            EndIf
            nCount++
            ACB->(DbSkip())
        End
    EndIf

Return cRevisao

/*/{Protheus.doc} Ft600Tip09
Inicializa o vetor aTipo09 com as parcelas previamente salvas.
@type function
@author Franklin de Brito de Oliveira
@since 29/07/2021
@param cProposta, character, numero da proposta
@param cPRevisa, character, numero da revisão
@return array, parcelas conforme condição de pagamento
/*/
Static Function Ft600Tip09(cProposta,cPRevisa)

Local aArea		:= GetArea()
Local aAreaSCJ	:= SCJ->(GetArea())
Local aAreaSCK	:= SCK->(GetArea())
Local aProdutos := {}
Local aTipo09	:= {}
Local nIt		:= 0
Local nNumParc	:= SuperGetMv("MV_NUMPARC")
Local cProxParc	:= ""
Local dDtVenc	:= Nil
Local nVlParc	:= 0
Local nPc		:= 0

    dbSelectArea("SE4")	
    dbSetOrder(1)

    DbSelectarea("SCJ")	
    DbSetOrder(1)

    DbSelectArea("SCK")
    DbSetOrder(1)  		

    DbSelectArea("ADZ")
    DbSetOrder(3)   

    If dbSeek(xFilial("ADZ")+cProposta+cPRevisa) 	
        While ADZ->(!EOF()) .AND. ADZ_FILIAL == xFilial("ADZ")  .AND. ADZ_PROPOS == cProposta
            aAdd(aProdutos,{ADZ_PRODUT,ADZ_ORCAME,ADZ_ITEMOR,ADZ_ITEM})
            ADZ->(DbSkip())
        End
    EndIf

    For nIt := 1 to Len(aProdutos)
        If  SCK->(DbSeek(xFilial("SCK") + aProdutos[nIt][02] + aProdutos[nIt][03] + aProdutos[nIt][01]))
            SCJ->(DbSeek(xFilial("SCJ") + SCK->CK_NUM + SCK->CK_CLIENTE + SCK->CK_LOJA ))
            SE4->(DbSeek(xFilial("SE4") + SCJ->CJ_CONDPAG))
            If	SE4->E4_TIPO == "9"
                cProxParc := "0"
                For nPc:=1 To nNumParc
                    cProxParc := Soma1(cProxParc)
                    dDtVenc := &("SCJ->CJ_DATA"+cProxParc)
                    nVlParc	:= &("SCJ->CJ_PARC"+cProxParc)
                    If	nVlParc > 0
                        aadd( aTipo09,{SCK->CK_PRODUTO, dDtVenc , nVlParc ,SCJ->CJ_CONDPAG, aProdutos[nIt][04] } )
                    Endif
                Next
            Endif
        EndIf
    Next nIt

    RestArea(aAreaSCJ)
    RestArea(aAreaSCK)
    RestArea(aArea)

Return aTipo09

/*/{Protheus.doc} Ft600CroFin
Monta o Cronograma Financeiro.
@type function
@author Franklin de Brito de Oliveira
@since 29/07/2021
@param cProposta, character, numero da proposta
@param cPRevisa, character, revisão da proposta
@param aTipo09, array, parcelas conforme condição de pagamento
@return array, cronograma financeiro
/*/
Static Function  Ft600CroFin(cProposta,cPRevisa,aTipo09)

Local aArea			:= GetArea()
Local aVencto 		:= {}
Local aCronoAtu		:= {}
Local nC			:= 0
Local nA			:= 0
Local nI			:= 0
Local nPosData		:= 0
Local cTipoPar		:= SuperGetMv("MV_1DUP")
Local cSequencia    := " "
Local aProdutos		:= {}
Local aCronoFin		:= {}

    DbSelectArea("ADZ")
    DbSetOrder(3) 

    If dbSeek(xFilial("ADZ")+cProposta+cPRevisa) 
        While ADZ->(!EOF()) .AND. ADZ_FILIAL == xFilial("ADZ")  .AND. ADZ_PROPOS == cProposta
            aAdd(aProdutos,{ADZ_PRODUT,ADZ_TOTAL,ADZ_CONDPG,ADZ_DT1VEN})
            ADZ->(DbSkip())
        End
    EndIf

    For nI:=1 To Len(aProdutos)	
        dbSelectArea("SE4")
        dbSetOrder(1)
        IF	dbSeek(xFilial("SE4")+aProdutos[nI][03]) 
            If	E4_TIPO <> "9"
                //Atualiza cronograma financeiro para condicao diferente do tipo 9
                aVencto := Condicao(aProdutos[nI][02],aProdutos[nI][03],0,dDatabase,0)
                For nA:=1 To Len(aVencto)
                    If	!Empty(aProdutos[nI][04]) .AND. aProdutos[nI][04] <> dDataBase .AND. nA == 1
                        aVencto[nA,1] := aProdutos[nI][04]
                    Endif
                    
                    nPosData := aScan( aCronoAtu, { |x| x[1] == aVencto[nA,1] } )
                    
                    If	nPosData == 0
                        aadd(aCronoAtu,{aVencto[nA,1],aVencto[nA,2]})
                    Else
                        aCronoAtu[nPosData,2] += aVencto[nA,2]
                    Endif
                Next nA
            Endif
        Endif
    Next nI

    //Atualiza cronograma financeiro para condicao de pagamento tipo 9
    If	Len(aTipo09)>0
        For nA:=1 To Len(aTipo09)
            If	Len(aCronoAtu)>0
                nPosData := aScan( aCronoAtu, { |x| x[1] == aTipo09[nA,2] } )
            Else
                nPosData := 0
            Endif
            
            If	nPosData == 0
                aadd(aCronoAtu,{aTipo09[nA,2],aTipo09[nA,3]})
            Else
                aCronoAtu[nPosData,2] += aTipo09[nA,3]
            Endif
        Next nA
    Endif

    //Trata o iniciador da parcela inicial
    If	cTipoPar == "A"
        cSequencia	:= "9"
    Else
        cSequencia	:= "0"
    Endif

    //Ordena as parcelas pela data de vencimento
    aCronoAtu := ASort(aCronoAtu,,,{|parc1,parc2|parc1[1]<parc2[1]})

    //Atualiza cronograma financeiro
    For nC:=1 To Len(aCronoAtu)
        cSequencia := Soma1(cSequencia)
        If	nC == 1
            aadd(aCronoFin,{"",CtoD(Space(8)),0})
            aCronoFin[nC,1] := cSequencia
            aCronoFin[nC,2] := aCronoAtu[nC,1]
            aCronoFin[nC,3] := aCronoAtu[nC,2]
        Else
            AAdd(aCronoFin,{cSequencia,aCronoAtu[nC,1],aCronoAtu[nC,2] })
        Endif
    Next nC

    RestArea(aArea)

Return aCronoFin
