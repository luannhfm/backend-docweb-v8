#include 'protheus.ch'
#include 'parmtype.ch'

/*/{Protheus.doc} IMPM01F
	Função para realizar operações em tabelas Pai-Filho/Master-Detail nas rotinas
	dos bens duráveis  

@author franklin.oliveira
@since 20/09/2016

@param cMaster, characters, Nome do modelo master
@param cDetail, characters, Nome do modelo detail
@param aCpoMaster, array, Campos a serem operados no modelo master
@param aCpoDetail, array, Campos a serem operados no modelo detail
@param cModelo, characters, Nome do modelo de dados
@param cOperac, characters, Operação a ser realizada

@type function
/*/
User Function IMPM01F(cMaster, cDetail, aCpoMaster, aCpoDetail, cModelo, cOperac)

Local oModel, oAux, oStruct
Local nI		:= 0
Local nJ		:= 0
Local nPos		:= 0
Local lRet		:= .T.
Local aAux		:= {}
Local aC		:= {}
Local aH		:= {}
Local nItErro	:= 0
Local lAux		:= .T.
	
	dbSelectArea( cDetail )
	dbSetOrder( 1 )

	dbSelectArea( cMaster )
	dbSetOrder( 1 )
	
	// Aqui ocorre o instânciamento do modelo de dados (Model)
	oModel := FWLoadModel( cModelo )
	
	// Temos que definir qual a operação deseja: 3 – Inclusão / 4 – Alteração / 5 - Exclusão
	oModel:SetOperation( cOperac )
	
	// Antes de atribuirmos os valores dos campos temos que ativar o modelo
	oModel:Activate()
	
	// Instanciamos apenas a parte do modelo referente aos dados de cabeçalho
	oAux := oModel:GetModel( cMaster + 'MASTER' )
	
	// Obtemos a estrutura de dados do cabeçalho
	oStruct := oAux:GetStruct()
	aAux := oStruct:GetFields()
	
	If lRet
		For nI := 1 To Len( aCpoMaster )
			// Verifica se os campos passados existem na estrutura do cabeçalho
			If ( nPos := aScan( aAux, { |x| AllTrim( x[3] ) == AllTrim( aCpoMaster[nI][1] ) } ) ) > 0
				// É feita a atribuição do dado ao campo do Model do cabeçalho
				If !( lAux := oModel:SetValue( cMaster + 'MASTER', aCpoMaster[nI][1], aCpoMaster[nI][2] ) )
					// Caso a atribuição não possa ser feita, por algum motivo (validação, por exemplo)
					// o método SetValue retorna .F.
					lRet := .F.
					Exit
				EndIf
			EndIf
		Next
	EndIf
	
	If lRet
		// Instanciamos apenas a parte do modelo referente aos dados do item
		oAux := oModel:GetModel( cDetail + 'DETAIL' )
		
		// Obtemos a estrutura de dados do item
		oStruct := oAux:GetStruct()
		aAux := oStruct:GetFields()
		nItErro := 0
		
		For nI := 1 To Len( aCpoDetail )
			// Incluímos uma linha nova
			// ATENÇÃO: Os itens são criados em uma estrutura de grid (FORMGRID), portanto já é criada uma primeira linha
			//branco automaticamente, desta forma começamos a inserir novas linhas a partir da 2ª vez
			If nI > 1
				// Incluímos uma nova linha de item
				If ( nItErro := oAux:AddLine() ) <> nI
					// Se por algum motivo o método AddLine() não consegue incluir a linha, 
					// ele retorna a quantidade de linhas já 
					// existem no grid. Se conseguir retorna a quantidade mais 1
					lRet := .F.
					Exit
				EndIf
			EndIf
			
			For nJ := 1 To Len( aCpoDetail[nI] )
				// Verifica se os campos passados existem na estrutura de item
				If ( nPos := aScan( aAux, { |x| AllTrim( x[3] ) == AllTrim( aCpoDetail[nI][nJ][1] ) } ) ) > 0
					If !( lAux := oModel:SetValue( cDetail + 'DETAIL', aCpoDetail[nI][nJ][1], aCpoDetail[nI][nJ][2] ) )
						// Caso a atribuição não possa ser feita, por algum motivo (validação, por exemplo)
						// o método SetValue retorna .F.
						lRet := .F.
						nItErro := nI
						Exit
					EndIf
				EndIf
			Next
		
			If !lRet
				Exit
			EndIf
		Next
	EndIf
	
	If lRet
		// Faz-se a validação dos dados, note que diferentemente das tradicionais "rotinas automáticas"
		// neste momento os dados não são gravados, são somente validados.
		If ( lRet := oModel:VldData() )
			// Se os dados foram validados faz-se a gravação efetiva dos
			// dados (commit)
			oModel:CommitData()
		EndIf
	EndIf
	
	If !lRet
		// Se os dados não foram validados obtemos a descrição do erro para gerar
		// LOG ou mensagem de aviso
		aErro := oModel:GetErrorMessage()
		
		// A estrutura do vetor com erro é:
		// [1] identificador (ID) do formulário de origem
		// [2] identificador (ID) do campo de origem
		// [3] identificador (ID) do formulário de erro
		// [4] identificador (ID) do campo de erro
		// [5] identificador (ID) do erro
		// [6] mensagem do erro
		// [7] mensagem da solução
		// [8] Valor atribuído
		// [9] Valor anterior
		
		AutoGrLog( "Id do formulário de origem:" + ' [' + AllToChar( aErro[1] ) + ']' )
		AutoGrLog( "Id do campo de origem: " + ' [' + AllToChar( aErro[2] ) + ']' )
		AutoGrLog( "Id do formulário de erro: " + ' [' + AllToChar( aErro[3] ) + ']' )
		AutoGrLog( "Id do campo de erro: " + ' [' + AllToChar( aErro[4] ) + ']' )
		AutoGrLog( "Id do erro: " + ' [' + AllToChar( aErro[5] ) + ']' )
		AutoGrLog( "Mensagem do erro: " + ' [' + AllToChar( aErro[6] ) + ']' )
		AutoGrLog( "Mensagem da solução: " + ' [' + AllToChar( aErro[7] ) + ']' )
		AutoGrLog( "Valor atribuído: " + ' [' + AllToChar( aErro[8] ) + ']' )
		AutoGrLog( "Valor anterior: " + ' [' + AllToChar( aErro[9] ) + ']' )
		
		If nItErro > 0
			AutoGrLog( "Erro no Item: " + ' [' + AllTrim( AllToChar( nItErro ) ) + ']' )
		EndIf
		
		MostraErro()
	EndIf
	
	// Desativamos o Model
	oModel:DeActivate()

Return lRet