#INCLUDE 'PROTHEUS.CH'
#INCLUDE 'RWMAKE.CH'
#INCLUDE 'FONT.CH'
#INCLUDE 'COLORS.CH'
#INCLUDE 'TOPCONN.CH'
#Include "TBICONN.CH"

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa  ³ SF06A45X ³ Autor ³ Leonardo P. de Castro ³ Data ³ 04/11/09 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Locacao   ³                  ³Contato ³                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Rotina para geracao da lista de cobranca. (mBrowse)         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Aplicacao ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Analista Resp.³  Data  ³                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ³  /  /  ³                                               ³±±
±±³              ³  /  /  ³                                               ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

User Function SF06A45X()

Local _lAcesso := .F.
Private cCadastro := "Geração de Lista de Cobrança"
Private aRotina := MenuDef()
Private cDelFunc := ".T." // Validacao para a exclusao. Pode-se utilizar ExecBlock
Private cString := "ZAJ"

_lAcesso := U_TcSupOk()

If !_lAcesso
	Alert("Esta operação somente poderá ser realizada por um Supervisor!")
	Return()
EndIF

dbSelectArea("ZAJ")
dbSetOrder(1)

mBrowse(6,1,22,75,cString,,,,,,,,,,,.F.,,)

Return()

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³MenuDef() ºAutor  ³Leonardo P de Castroº Data ³  11/11/2009 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Funcao que define o array contendo as funcoes disponeis no  º±±
±±º          ³menu principal da rotina.                                   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ P10                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function MenuDef()

// Na funcao U_SF06A54X esta passando o 1o parametro como 1000, que nao eh usado para nada.
// Foi colocado porque o schedule entende o 1o parametro sempre como array
Local _aRet := { 	{"Pesquisar"  ,"AxPesqui"  ,0,2,0,.T.},;
	{"Gerar Lista","U_A006XIni",0,3,0,.T.},;
	{"Enviar SMS"  ,"U_SF06A54X({1})"  ,0,2,0,.T.},;
	{"Checar SMS"  ,"U_SF06A54X({2})"  ,0,2,0,.T.}}

Return( _aRet )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³A006XIni  ºAutor  ³Leonardo P de Castroº Data ³  11/11/09   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Rotina para chamada da rotina de geracao de lista de co-   º±±
±±º          ³ branca.                                                    º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ P10                                                       º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

User Function A006XIni

If MsgYesNo("Confirma a geração da lista para o dia " + DtoC(dDataBase) + " ?")
	Processa( {|| U_SF06A44X() }, "Processando...","",.T.)
EndIF
Return()

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³A006XGer  ºAutor  ³Leonardo P de Castroº Data ³  11/11/09   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Rotina para  geracao de lista de cobranca                  º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ P10                                                       º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
/*
User Function A006XGer()

Local _lRet := .T.
Local _lGera := .F.
Local _aAreSA1 := SA1->(GetArea())
Local _aAreZAE := ZAE->(GetArea())
Local _aAreZAJ := ZAJ->(GetArea())
Local _cQuery := ""
Local _nReg := 0
Local _nRegua := 0
Local _aParams := {} //variavel para tratar o retorno da funcao SPCGE001
Local _nDia := DOW(dDataBase) // 1 - Domingo,..., 7 - Sabado
Local _aAgenda := {}
Local _cFilial := ""
Local _dData   := StoD("//")
Local _cHora   := ""
Local _cCodFas := ""
Local _cCodCli := ""
Local _cLojCli := ""
Local _cNomCli := ""
Local _cCpf    := ""
Local _cAten   := ""
Local _nTotDiv := 0
Local _cFilDon := ""

_cMotPag := AllTrim(GetMV("MV_MOTPAG",.F.))
_cFasPag := AllTrim(GetMV("MV_FASEPAG",.F.))
_cMotTrg := AllTrim(GetMV("MV_MOTTRG",.F.))
_cFasTrg := AllTrim(GetMV("MV_FASETRG",.F.))

//Obtenho os parametros da ZAO
_aParams := U_TcParam()

//Verifico se é necessario gerar lista para este dia
If _nDia >= 2 .And. _nDia <= 6
	_lGera := .T.
ElseIf (_nDia = 1 .Or. _nDia = 7) .And. _aParams[1] = "3"
	_lGera := .T.
ElseIf _nDia = 1 .And. _aParams[1] = "2"
	_lGera := .T.
ElseIf _nDia = 7 .And. _aParams[1] = "1"
	_lGera := .T.
EndIF

If !_lGera
	Alert("A geração da lista não está autorizada para este dia.")
	Return()
EndIF

//Obtenho a carteira de clientes para analisar
_cQuery := " SELECT "
_cQuery += "  		E1_CLIENTE, E1_LOJA, E1_VALOR, E1_ATRASO "
_cQuery += " FROM "
_cQuery += "  		(SELECT "
_cQuery += "  				E1_CLIENTE, E1_LOJA, SUM(E1_VALOR) E1_VALOR, MAX(E1_ATRASO) E1_ATRASO "
_cQuery += "  		 FROM "
_cQuery += "  				(SELECT "
_cQuery += "  						E1_CLIENTE, E1_LOJA, E1_VALOR, "
_cQuery += "  						(DATEDIFF(dd,GETDATE(),CONVERT(DATETIME, CONVERT(CHAR(20), E1_VENCREA),108))*-1) AS E1_ATRASO "
_cQuery += "  					FROM "
_cQuery +=  						RetSqlName("SE1")
_cQuery += "  					WHERE "
_cQuery += "  						E1_FILIAL  BETWEEN '" + _aParams[9] + "' AND '" + _aParams[10] + "' AND "
_cQuery += "  	 					E1_TIPO    IN (" + _aParams[8] + ") AND "
_cQuery += "  	 					E1_SALDO   >  0         AND "
_cQuery += "  	 					D_E_L_E_T_ <> '*' "
_cQuery += "  					GROUP BY "
_cQuery += "  							E1_CLIENTE, E1_LOJA, E1_VALOR, E1_VENCREA) T01 "
//Se for valor total, retirar este where
If _aParams[2] = "1"
	_cQuery += " 		  WHERE
	_cQuery += "  					E1_ATRASO > 0 "
EndIF
_cQuery += "  		  GROUP BY "
_cQuery += "  					E1_CLIENTE, E1_LOJA) T02 "
_cQuery += "  ORDER BY "
_cQuery += "  		  E1_ATRASO ASC "
_cQuery := ChangeQuery(_cQuery)

If Select("TCLI") > 0
	DbSelectArea("TCLI")
	TCLI->(DbCloseArea())
EndIf

TcQuery _cQuery New Alias TCLI

TCLI->(DbEval({|| _nReg++}))
TCLI->(DbGoTop())

_nRegua := (_nReg * 2)

ProcRegua(_nRegua)

While TCLI->(!Eof())
	
	IncProc("Carregando dados... Aguarde...")
	
	_cFilial := xFilial("ZAJ")
	_dData   := dDataBase
	_cHora   := ""
	_cCodFas := ""
	_cCodCli := ""
	_cLojCli := ""
	_cNomCli := ""
	_cCpf    := ""
	_cAten   := ""
	_nTotDiv := TCLI->E1_VALOR
	_cFilDon := ""
	
	//Verifico se nao é funcionario...
	DbSelectArea("MA7")
	MA7->(DbSetOrder(1))
	
	If MA7->(DbSeek(xFilial("MA7") + TCLI->E1_CLIENTE + TCLI->E1_LOJA))
		If MA7->MA7_TIPCAD = "F"
			MA7->(DbCloseArea())
			TCLI->(DbSkip())
			Loop
		EndIF
	Else //Nao encontrei, gero log e passo para proximo registro
		SA1->(DbCloseArea())
		TCLI->(DbSkip())
		Loop
	EndIF
	
	//Verifico se existe agendamento para o cliente
	_cQuery := ""
	_cQuery += " SELECT TOP 1 * FROM " + RetSqlName("ZAK")
	_cQuery += " WHERE "
	_cQuery += " ZAK_CLIENT+ZAK_LOJA = '" + TCLI->E1_CLIENTE + TCLI->E1_LOJA + "' AND  "
	_cQuery += " ZAK_DTPATE >= '" + DtoS(_dData) + "' AND  "
	_cQuery += " D_E_L_E_T_ <> '*'   "
	_cQuery += " ORDER BY   "
	_cQuery += " ZAK_DTPATE ASC "
	
	If Select("tAte") > 0
		DbSelectArea("tAte")
		tAte->(DbCloseArea())
	EndIf
	
	TcQuery _cQuery New Alias tAte
	
	If !Empty(tAte->ZAK_COD)
		//Dia do agendamento, gerar a lista
		If StoD(tAte->ZAK_DTPATE) != _dData
			TCLI->(DbSkip())
			Loop
		EndIF
	EndIF
	
	//Obtenho dados do cliente...
	DbSelectArea("SA1")
	SA1->(DbSetOrder(1))
	//Encontrei o cliente, carrego variaveis
	If SA1->(DbSeek(xFilial("SA1") + TCLI->E1_CLIENTE + TCLI->E1_LOJA))
		_cCodCli := SA1->A1_COD
		_cLojCli := SA1->A1_LOJA
		_cNomCli := SA1->A1_NOME
		_cCpf	 := SA1->A1_CGC
	Else //Nao encontrei, gero log e passo para proximo registro
		SA1->(DbCloseArea())
		TCLI->(DbSkip())
		Loop
	EndIF
	
	//Obtenho dados da fase...
	DbSelectArea("ZAE")
	ZAE->(DbSetOrder(1))
	
	//Seleciona o último atendimento do Cliente
	_cQuery := " SELECT TOP 1 ZAK_CODMOT "
	_cQuery += " FROM " + RetSqlName("ZAK")
	_cQuery += " WHERE ZAK_CLIENT + ZAK_LOJA = '" + TCLI->E1_CLIENTE + TCLI->E1_LOJA + "' AND D_E_L_E_T_ = ''  "
	_cQuery += " ORDER BY ZAK_COD DESC "
	
	If Select("TZAK") > 0
		DbSelectArea("TZAK")
		TZAK->(DbCloseArea())
	EndIf
	
	TcQuery _cQuery New Alias TZAK
	
	If !Empty(TZAK->ZAK_CODMOT)
		//Gera a cobrança na fase definida no parâmetro MV_FASEPAG onde o código de atendimento	contém no parâmetro MV_MOTPAG
		If  TZAK->ZAK_CODMOT $ _cMotPag
			_cHora := "00:00"
			_cCodFas := _cFasPag
		EndIf
		//Gera cobrança na fase definida no parâmetro MV_FASETRG onde o código de atendimento contém no parâmetro MV_MOTTRG
		If 	TZAK->ZAK_CODMOT $ _cMotTrg
			_cHora := "00:00"
			_cCodFas := _cFasTrg
		EndIf
	EndIf
	TZAK->(DbCloseArea())
	
	//Valida se a fase existe e não esta bloqueada
	If !Empty(_cCodFas) .And. ZAE->(DbSeek(xFilial("ZAE") + _cCodFas))
		If ZAE->ZAE_MSBLQL = 'S'
			_cCodFas := ""
		EndIf
	Else
		_cCodFas := ""
	EndIf
	
	ZAE->(DbGoTop())
	
	While ZAE->(!Eof()) .And. Empty(_cCodFas)
		
		If ZAE->ZAE_MSBLQL = 'S'
			ZAE->(DbSkip())
			Loop
		EndIF
		
		If (TCLI->E1_ATRASO >= ZAE->ZAE_PRZDE .And. TCLI->E1_ATRASO <= ZAE->ZAE_PRZATE)
			_cHora := "00:00"
			_cCodFas := ZAE->ZAE_COD
			
			//Por loja, obtenho a filial do titulo com o maior numero de dias de atraso
			If ZAE->ZAE_PORLOJA = 'S'
				
				_cQuery := " SELECT TOP 1 "
				_cQuery += " 		E1_FILIAL, E1_CLIENTE, E1_LOJA, SUM(E1_VALOR) E1_VALOR, MAX(E1_ATRASO) E1_ATRASO "
				_cQuery += " FROM "
				_cQuery += " 	(SELECT "
				_cQuery += " 			E1_FILIAL, E1_CLIENTE, E1_LOJA, E1_VALOR, "
				_cQuery += " 			(DATEDIFF(dd,GETDATE(),CONVERT(DATETIME, CONVERT(CHAR(20), E1_VENCREA),108))*-1) AS E1_ATRASO "
				_cQuery += " 	 FROM "
				_cQuery +=  			RetSqlName("SE1")
				_cQuery += " 	 WHERE "
				_cQuery += "  			E1_FILIAL  BETWEEN '" + _aParams[9] + "' AND '" + _aParams[10] + "' AND "
				_cQuery += " 			E1_CLIENTE + E1_LOJA = '" + TCLI->E1_CLIENTE + TCLI->E1_LOJA + "' AND "
				_cQuery += "  	 		E1_TIPO    IN (" + _aParams[8] + ")	AND "
				_cQuery += " 			E1_SALDO   >  0         AND  "
				_cQuery += " 			D_E_L_E_T_ <> '*' "
				_cQuery += " 	 GROUP BY "
				_cQuery += " 			E1_FILIAL, E1_CLIENTE, E1_LOJA, E1_VALOR, E1_VENCREA) T01 "
				_cQuery += " WHERE "
				_cQuery += " 		E1_ATRASO > 0 "
				_cQuery += " GROUP BY "
				_cQuery += " 		E1_FILIAL, E1_CLIENTE, E1_LOJA "
				_cQuery += " ORDER BY "
				_cQuery += " 		E1_ATRASO DESC "
				_cQuery := ChangeQuery(_cQuery)
				
				If Select("TFIL") > 0
					DbSelectArea("TFIL")
					TFIL->(DbCloseArea())
				EndIf
				
				TcQuery _cQuery New Alias TFIL
				
				_cFilDon := TFIL->E1_FILIAL
			EndIF
			Exit
		EndIF
		ZAE->(DbSkip())
	EndDo
	
	//Nao encontrei, gero log e passo para proximo registro
	If Empty(_cCodFas)
		ZAE->(DbCloseArea())
		TCLI->(DbSkip())
		Loop
	EndIf
	
	//Obtenho dados do ultimo atendimento...
	DbSelectArea("ZAJ")
	ZAJ->(DbSetOrder(2))
	ZAJ->(DbSeek(xFilial("ZAJ") + TCLI->E1_CLIENTE + TCLI->E1_LOJA))
	
	While ZAJ->(!Eof()) .And. ZAJ->ZAJ_CLIENTE + ZAJ->ZAJ_LOJA = TCLI->E1_CLIENTE + TCLI->E1_LOJA
		
		If ZAJ->ZAJ_ATEND = 'N'
			ZAJ->(DbSkip())
			Loop
		EndIF
		
		_cAten := DtoC(ZAJ->ZAJ_DATA) + " " + ZAJ->ZAJ_HORA
		ZAJ->(DbSkip())
	EndDo
	
	Aadd(_aAgenda,{_cFilial, _dData, _cHora, _cCodFas, _cCodCli, _cLojCli, _cNomCli, _cCpf, _cAten, _nTotDiv, "N", _cFilDon})
	
	SA1->(DbCloseArea())
	ZAE->(DbCloseArea())
	ZAJ->(DbCloseArea())
	
	TCLI->(DbSkip())
EndDo

If !Empty(_aAgenda)
	For _nX := 1 To Len(_aAgenda)
		
		IncProc("Gravando dados... Aguarde...")
		
		DbSelectArea("ZAJ")
		ZAJ->(DbSetOrder(2))
		
		If ZAJ->(!DbSeek(xFilial("ZAJ") + _aAgenda[_nX,05] + _aAgenda[_nX,06] + DtoS(_aAgenda[_nX,02])))
			If RecLock("ZAJ",.T.)
				Replace ZAJ->ZAJ_FILIAL  With _aAgenda[_nX,01]
				Replace ZAJ->ZAJ_DATA    With _aAgenda[_nX,02]
				Replace ZAJ->ZAJ_HORA    With _aAgenda[_nX,03]
				Replace ZAJ->ZAJ_CODFASE With _aAgenda[_nX,04]
				Replace ZAJ->ZAJ_CLIENTE With _aAgenda[_nX,05]
				Replace ZAJ->ZAJ_LOJA    With _aAgenda[_nX,06]
				Replace ZAJ->ZAJ_NOME    With _aAgenda[_nX,07]
				Replace ZAJ->ZAJ_CNP     With _aAgenda[_nX,08]
				Replace ZAJ->ZAJ_UTLATEN With _aAgenda[_nX,09]
				Replace ZAJ->ZAJ_VLRDIV  With _aAgenda[_nX,10]
				Replace ZAJ->ZAJ_ATEND   With _aAgenda[_nX,11]
				Replace ZAJ->ZAJ_FILDONO With _aAgenda[_nX,12]
				ZAJ->(MsUnLock())
			EndIF
		EndIF
	Next _nX
Else
	Alert("Nenhum registro foi encontrado para gravacao da lista!")
EndIF

RestArea(_aAreSA1)
RestArea(_aAreZAE)
RestArea(_aAreZAJ)

Return()
*/