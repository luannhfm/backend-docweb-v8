#include "Rwmake.ch"
#include "Protheus.ch"


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  |SF06A58X  ºAutor  ³Caio Renan          º Data ³09/09/2011   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Funcao que efetua o estorno da cobranca gerada pela opcao   º±±
±±º          ³telacobranca                                                º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
CAMPOS CRIADOS

ZAL->ZAL_DTEST := dDataBase
TAMANHO 8; REAL; ALTERAR; DATA; DATA DO ESTORNO

ZAL->ZAL_USERID := __cUserId
TAMANHO 6; REAL; ALTERAR; CARACTER; ID DO USUARIO QUE REALIZOU O ESTORNO

*/

User Function SF06A58X()


	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Declaracao de Variaveis                                             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	Private cCadastro := "Estorno de cobranca"

	Private aRotina := { {"Pesquisar","AxPesqui",0,1} ,;
		{"Estornar" , "U_ESTRENEG(2)",0,2} }

	Private cDelFunc := ".T." // Validacao para a exclusao. Pode-se utilizar ExecBlock

	Private cString := "SA1"

	dbSelectArea("SA1")
	dbSetOrder(1)

	dbSelectArea(cString)
	mBrowse( 6,1,22,75,cString)

Return

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Funcao que faz a visualizacao da renegociacao efetuada pela telecobranca³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

User Function EstReneg()
	Local aButtons := {}
	Local _cFilter := ""
	Static tela
	Private aHeaderEx := {}
	Private aColsEx := {}

	_cFilter := "ZAK->ZAK_CLIENT = '"+SA1->A1_COD+"' .AND. ZAK->ZAK_LOJA = '"+SA1->A1_LOJA+"' "

	dbSelectArea("ZAK")
	ZAK->(dbSetOrder(2)) // INDICE 2: DATA + HORA

	Set Filter To &(_cFilter)

	ZAK->( dbGoBottom() )

	If !ZAK->(Eof())
		dbSelectArea("ZAL")
		ZAL->(dbSetOrder(2)) // INDICE 2: CODIGO ATENDIMENTO

		While !ZAK->(Bof()) .and. !ZAL->(dbSeek(xFilial("ZAL")+ZAK->ZAK_COD ))
			ZAK->(dbSkip(-1))
		Enddo

		If ZAL->(dbSeek(xFilial("ZAL")+ZAK->ZAK_COD ) )
			DEFINE MSDIALOG tela TITLE "Cobrança" FROM 000, 000  TO 500, 700 COLORS 0, 16777215 PIXEL

			fMSNewGe1()
			RegToMemory("ZAL", .F., .F.)
			fZALFld()
			EnchoiceBar(tela, {|| Estornar(),Tela:End() }, {|| tela:End() },,aButtons)

			ACTIVATE MSDIALOG tela CENTERED
		Else
			Alert( "Cliente nao possui negociacao confirmada" )
		EndIf
	Else
		Alert("Cliente nao possui atendimento")
	EndIf

	Set Filter To

Return

//------------------------------------------------
Static Function fMSNewGe1()
	//------------------------------------------------
	Local nX
	Local aFieldFill := {}
	Local aFields := {}
	Local aAlterFields := {}
	Local _nCampos := 0
	Static oMSNewGe1

	// Define field properties
	DbSelectArea("SX3")
	SX3->(DbSetOrder(1))
	SX3->(DbSeek("ZAM") )
	While SX3->X3_ARQUIVO = "ZAM"
		If X3USO(X3_USADO) .AND. cNivel >= x3_nivel
			Aadd(aHeaderEx, {AllTrim(X3Titulo()),SX3->X3_CAMPO,SX3->X3_PICTURE,SX3->X3_TAMANHO,SX3->X3_DECIMAL,SX3->X3_VALID,;
				SX3->X3_USADO,SX3->X3_TIPO,SX3->X3_F3,SX3->X3_CONTEXT,SX3->X3_CBOX,SX3->X3_RELACAO})
			_nCampos++ // CONTAGEM DE QUANTIDADE DE CAMPOS QUE IRAO APARECER.
		Endif
		SX3->(dbSkip())
	EndDo

	// Define field values
	dbSelectArea("ZAM")
	ZAM->( dbSetOrder(1) )
	If ZAM->( dbSeek(xFilial("ZAM")+ZAL->ZAL_COD) )
		While ZAM->ZAM_CODNEG = ZAL->ZAL_COD
			aadd(aFieldFill , Array(_nCampos + 1) )

			_nQuant := Len(aFieldFill)
			For _nx := 1 to _nCampos
				aFieldFill[_nQuant , _nx] := ZAM->&(aHeaderEx[_nx,2])
			Next
			aFieldFill[_nQuant , _nCampos + 1] := .F.
			ZAM->(dbSkip())
		EndDo
	EndIf

	aColsEx := aFieldFill

	oMSNewGe1 := MsNewGetDados():New( 136, 005, 240, 340, , "AllwaysTrue", "AllwaysTrue", "+Field1+Field2", aAlterFields,, 999, "AllwaysTrue", "", "AllwaysTrue", tela, aHeaderEx, aColsEx)

Return

//------------------------------------------------
Static Function fZALFld()
	//------------------------------------------------
	Local aFields := {}
	Local aAlterFields := {}
	Static oZALFld

	oZALFld := MsMGet():New("ZAL",0,1,,,,aFields,{40,5,130,340},aAlterFields,,,,,tela,,.T.)

Return


/*
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³funcao que faz o estorno da renegociacao                                             ³
//³                                                                                     ³
//³procedimentos a serem realizados:                                                    ³
//³excluir a baixa dos titulos negociados.                                              ³
//³excluir os titulos gerados                                                           ³
//³                                                                                     ³
//³apenas executar o estorno quando todos os titulos gerados, estiverem em abertos ainda³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
*/

Static Function Estornar()
	Local aCols := aColsEx
	Local aHeader := aHeaderEx
	Local _lSaldoDif := .F. // VARIAVEL DE CONTROLE PARA SALDO DIFERENTE SE FOR .T. EXISTE TITULOS QUE JA FOI PAGO E POR ISSO NAO FARA ESTORNO DA  NEGOCIACAO
	Local _lTitGer := .T.
	Local _lFilant := .F.
	Local lOk := .T.

	Private nPosPref	:= aScan(aHeader, {|x| AllTrim(x[2]) == Upper("ZAM_PREFIX")} )
	Private nPosNum		:= aScan(aHeader, {|x| AllTrim(x[2]) == Upper("ZAM_NUM")} )
	Private nPosParc	:= aScan(aHeader, {|x| AllTrim(x[2]) == Upper("ZAM_PARCEL")} )
	Private nPosTipo	:= aScan(aHeader, {|x| AllTrim(x[2]) == Upper("ZAM_TIPO")} )
	Private nPosOper	:= aScan(aHeader, {|x| AllTrim(x[2]) == Upper("ZAM_OPER")} )
	Private nPosFilt	:= aScan(aHeader, {|x| AllTrim(x[2]) == Upper("ZAM_FILTIT")} )

	dbSelectARea("SE1")
	dbSetOrder(1)

	For _nx := 1 to Len(aCols)
		If aCols[_nx,nPosOper] == "G" // TITULOS QUE FORAM GERADOS
			_cALias := GetNextAlias()
			_cSql := " SELECT SE1.E1_FILIAL FROM "+RetSQLName("SE1")+" SE1  WHERE "
			_cSql += "  E1_PREFIXO = '"+aCols[_nx,nPosPref]+"' AND "
			_cSql += "  E1_NUM = '"+aCols[_nx,nPosNum]+"' AND "
			_cSql += "  E1_PARCELA = '"+aCols[_nx,nPosParc]+"' AND "
			_cSql += "  E1_TIPO = '"+aCols[_nx,nPosTipo]+"' AND "
			_cSql += "  D_E_L_E_T_ = ' ' "
			DbUseArea(.T., "TOPCONN", TCGenQry(,,ChangeQuery(_cSql)), _cALias, .F., .F.)
			_cFilial := (_cAlias)->E1_FILIAL
			(_cAlias)->( dbCloseArea() )

			If _cFilial != cFilAnt .AND. !Empty(_cFilial) // verifica se estorno esta sendo feito na mesma filial que realizou a negociacao
				_lFilant := .T. // para o usuario realizar o estorno é necessário estar na mesma filial que realizou o atendimento.
				exit
			Endif

			If SE1->( dbSeek(_cFilial+aCols[_nx,nPosPref]+aCols[_nx,nPosNum]+aCols[_nx,nPosParc]+aCols[_nx,nPosTipo] ) )
				If SE1->E1_VALOR <> SE1->E1_SALDO // VERIFICACAO SE TITULO JA FOI PAGO INTEGRAL OU PARCIALMENTE.
					_lSaldoDif := .T.
					exit
				EndIf
			Else
				_lTitGer := .F.
				exit
			EndIf
		EndIf
	Next
	If _lFilant
		Alert("Renegociação feita na loja "+_cFilial+CRLF+;
			"o estorno deve ser realizado logado na filial da renegociação!")
		Return
	Endif

	If !_lTitGer
		Alert( "Os titulos negociados foram cancelados." )
		Return
	EndIf

	If _lSaldoDIf
		Alert("Os titulos gerados ja foram recebidos, estorno nao pode ser efetuado")
		Return
	EndIf

	If !MsgYesNo("Confirmar estorno da negociacao?")
		Return
	EndIf

	Begin Transaction

		For _nx := 1 to Len(aCols)
			_cChave := aCols[_nx,nPosPref]+aCols[_nx,nPosNum]+aCols[_nx,nPosParc]+aCols[_nx,nPosTipo]
			If aCols[_nx,nPosOper] == "G" .and. lOk// TITULOS QUE FORAM GERADOS SERAO EXCLUIDOS
				lMsErroAuto := .F.
				_cALias := GetNextAlias()
				_cSql := " SELECT SE1.E1_FILIAL FROM "+RetSQLName("SE1")+" SE1  WHERE "
				_cSql += "  E1_PREFIXO = '"+aCols[_nx,nPosPref]+"' AND "
				_cSql += "  E1_NUM = '"+aCols[_nx,nPosNum]+"' AND "
				_cSql += "  E1_PARCELA = '"+aCols[_nx,nPosParc]+"' AND "
				_cSql += "  E1_TIPO = '"+aCols[_nx,nPosTipo]+"' AND "
				_cSql += "  D_E_L_E_T_ = ' ' "
				DbUseArea(.T., "TOPCONN", TCGenQry(,,ChangeQuery(_cSql)), _cALias, .F., .F.)
				_cFilial := (_cAlias)->E1_FILIAL
				(_cAlias)->( dbCloseArea() )

				aDados:={	{"E1_FILIAL"  ,_cFilial		,Nil},;
					{"E1_PREFIXO" ,aCols[_nx,nPosPref]		,Nil},;
					{"E1_NUM"	  ,aCols[_nx,nPosNum]		,Nil},;
					{"E1_PARCELA" ,aCols[_nx,nPosParc]     ,Nil},;
					{"E1_CLIENTE"	,SA1->A1_COD  ,Nil},;
					{"E1_LOJA"		,SA1->A1_LOJA ,Nil},;
					{"E1_TIPO"    ,aCols[_nx,nPosTipo]    	,Nil}}

				MsgRun( "Excluindo título " + _cChave,'Aguarde', {|| 	CursorWait(),;
					MSExecAuto({|x,y,z|Fina040(x,y,z)},aDados,5),;
					CursorArrow() } )

				If lMsErroAuto
					DisarmTransaction()
					lOk := .F.
					Alert("Erro na execução da exclusao do titulo. Contate o administrador do sistema.")
					MostraErro()
					Exit
				EndIf


			ElseIf aCols[_nx,nPosOper] == "B" .and. lOk// TITULOS QUE FORAM BAIXADOS, TERAO A BAIXA EXCLUIDA
				lMsErroAuto := .F.

				//Baixa por Dacao.
				_aVetBx := {{"E1_FILIAL"	,aCols[_nx,nPosFilt]   ,Nil},;
					{"E1_PREFIXO"	,aCols[_nx,nPosPref]  ,Nil},;
					{"E1_NUM"		,aCols[_nx,nPosNum]     ,Nil},;
					{"E1_PARCELA"	,aCols[_nx,nPosParc]  ,Nil},;
					{"E1_CLIENTE"	,SA1->A1_COD  ,Nil},;
					{"E1_LOJA"		,SA1->A1_LOJA ,Nil},;
					{"E1_TIPO"	    ,aCols[_nx,nPosTipo]  ,Nil}}

				MsgRun( "Realizando a exclusao da baixa do título  " + _cChave,'Aguarde', {|| 	CursorWait(),;
					MSExecAuto({|x,y| fina070(x,y)}, _aVetBx,5),;
					CursorArrow() } )

				If lMsErroAuto
					DisarmTransaction()
					lOk := .F.
					Alert("Erro na execução da baixa. Contacte o administrador do sistema.")
					MostraErro()
					Exit
				EndIf

			EndIf
		Next

	End Transaction

	If !lMsErroAuto // apenas altera status se deu tudo certo...
		RecLock("ZAL")// ALTERACAO DO STATUS DA NEGOCIACAO
		ZAL->ZAL_STATUS := 'A'
		ZAL->ZAL_DTEST := dDataBase
		ZAL->ZAL_USERID := __cUserId
		MsUnlock("ZAL")
	EndIf

Return
