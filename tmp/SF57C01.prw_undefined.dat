#Include 'Protheus.ch'
#Include 'fwmvcdef.ch'

/*/{Protheus.doc} SF57C01
Cadastro de Amarração - Filial X UO X CR

@author 	Jose Leite de Barros Neto
@version 	1.0
@since 		22/08/2014

@return Nil
/*/
User Function SF57C01()
	
	Local oBrowse
	
	Private aRotina := MenuDef()
	
	//Instancio a classe FWMBrowse
	oBrowse := FWMBrowse():New()
	
	//Setando o Alias a ser utilizado
	oBrowse:SetAlias( 'ZZX' )
	
	//Descrição do Cabeçalho
	oBrowse:SetDescription('Cadastro de Amarração - Filial X UO X CR')
	
	//Ativando
	oBrowse:Activate()
	
Return( Nil )

/** {Protheus.doc} MenuDef
Funcao para Montar o Menu

@author: 	Jose Leite de Barros Neto
@since: 	22/08/2014
@Uso: 		SFIEMT
*/
Static Function MenuDef()
	
	Local aRotina := {}

	aAdd( aRotina, { 'Pesquisar' , 'PesqBrw'        , 0, 1, 0, .T. } )
	aAdd( aRotina, { 'Visualizar', 'ViewDef.SF57C01', 0, 2, 0, Nil } )
	aAdd( aRotina, { 'Incluir'   , 'ViewDef.SF57C01', 0, 3, 0, Nil } )
	aAdd( aRotina, { 'Alterar'   , 'ViewDef.SF57C01', 0, 4, 0, Nil } )
	aAdd( aRotina, { 'Excluir'   , 'ViewDef.SF57C01', 0, 5, 0, Nil } )
	aAdd( aRotina, { 'Imprimir'  , 'ViewDef.SF57C01', 0, 8, 0, Nil } )
	aAdd( aRotina, { 'Copiar'    , 'ViewDef.SF57C01', 0, 9, 0, Nil } )
	
Return( aRotina )

/** {Protheus.doc} ModelDef
Funcao para Montar o Modelo de Dados

@author: 	Jose Leite de Barros Neto
@since: 	22/08/2014
@Uso: 		SFIEMT
*/
Static Function ModelDef()
	
	Local oModel
	Local oStruZZXMASTER := FWFormStruct( 1, 'ZZX', { |X|  AllTrim(X) $ 'ZZX_CUSTO, ZZX_DCUSTO, ZZX_FILAUX' } )
	Local oStruZZXDETAIL := FWFormStruct( 1, 'ZZX', { |X| .Not. (AllTrim(X) $ 'ZZX_CUSTO, ZZX_DCUSTO, ZZX_FILAUX') } )
	
	oModel := MPFormModel():New( 'SF57C01M' )
	
	oStruZZXDETAIL:SetProperty( "ZZX_ITEM", MODEL_FIELD_VALID  , {| oGrid | Valid( oGrid ) } )
	
	oModel:AddFields( 'ZZXMASTER'	,				, oStruZZXMASTER )
	oModel:AddGrid('ZZXDETAIL'		, 'ZZXMASTER'	, oStruZZXDETAIL )
	
	oModel:SetRelation( 'ZZXDETAIL', { { 'ZZX_FILIAL', 'xFilial( "ZZX" )' }, {'ZZX_CUSTO', 'ZZX_CUSTO' }}, ZZX->( IndexKey( 1 ) ) )
	
	oModel:GetModel( 'ZZXDETAIL' ):SetUniqueLine( { 'ZZX_ITEM' } )
	
	oModel:GetModel( 'ZZXDETAIL' ):SetLPost( {|| ValLinGrid()} )
	
	oModel:GetModel( 'ZZXDETAIL' ):SetOptional( .T. )
	
	oModel:SetDescription( 'Amarração - Filial X UO X CR' )
	
	oModel:GetModel( 'ZZXMASTER' ):SetDescription( 'Cabeçalho do Cadastro' )
	oModel:GetModel( 'ZZXDETAIL' ):SetDescription( 'Itens do Cadastro' )
	
	oModel:SetPrimaryKey( { "ZZX_FILIAL", "ZZX_CUSTO", "ZZX_ITEM" } )
	
Return( oModel )

/** {Protheus.doc} ViewDef
Funcao para Montar a Interface

@author: 	Jose Leite de Barros Neto
@since: 	22/08/2014
@Uso: 		SFIEMT
*/
Static Function ViewDef()
	
	Local oView
	Local oModel  := FWLoadModel( 'SF57C01' )
	
	Local oStruZZXMASTER := FWFormStruct( 2, 'ZZX', { |X|  AllTrim(X) $ 'ZZX_CUSTO, ZZX_DCUSTO, ZZX_FILAUX' } )
	Local oStruZZXDETAIL := FWFormStruct( 2, 'ZZX', { |X| .Not. (AllTrim(X) $ 'ZZX_CUSTO, ZZX_DCUSTO, ZZX_FILAUX') } )
	
	oView := FWFormView():New()
	
	oView:SetModel( oModel )
	
	oView:AddField( 'VZZXMASTER', oStruZZXMASTER, 'ZZXMASTER' )
	oView:AddGrid( 'VZZXDETAIL', oStruZZXDETAIL, 'ZZXDETAIL' )
	
	oView:CreateHorizontalBox( 'CABECALHO', 15 )
	oView:CreateHorizontalBox( 'DETALHE', 85 )
	
	oView:SetOwnerView( 'VZZXMASTER', 'CABECALHO' )
	oView:SetOwnerView( 'VZZXDETAIL', 'DETALHE' )
	
	oView:EnableTitleView( 'VZZXMASTER' )
	oView:EnableTitleView( 'VZZXDETAIL' )
	
	oView:SetCloseOnOk( {|| .t.} )
	
Return( oView )

/** {Protheus.doc} Valid
Funcao para validar o CR informado

@author: 	Jose Leite de Barros Neto
@since: 	22/08/2014
@Uso: 		SFIEMT
*/
Static Function Valid( oGrid )
	
	Local lRetorno 	:= .T.
	Local oModel 		:= FwModelActive()
	Local oMdlCab		:= oModel:GetModel( "ZZXMASTER" )
	Local cCusto		:= oMdlCab:GetValue( "ZZX_CUSTO" )
	Local cItem		:= oGrid:GetValue( "ZZX_ITEM" )
	Local cMsg			:= ""
	Local nLinha		:= oGrid:nLine
	
	DbSelectArea("CTA")
	DBSetOrder(3)
	If .Not. DbSeek(xFilial("CTA") + cCusto + cItem)
		
		cMsg := "A UO: "+AllTrim(cCusto)+" e o CR: "+AllTrim(cItem)+" não estão amarrados na tabela CTA " + CRLF
		cMsg += "Deseja Continuar? "
		
		If MsgYesNo(cMsg,"ATENÇÃO")
			
			oGrid:GoLine( nLinha )
			If .Not. oGrid:IsDeleted()
				oGrid:SetValue( "ZZX_DITEM", "Informe a Descrição do CR" )
			EndIf
			
		EndIf
		
	EndIf
	
Return( lRetorno )

/** {Protheus.doc} ValLinGrid
Funcao para validar linha da Grid

@author: 	Jose Leite de Barros Neto
@since: 	22/08/2014
@Uso: 		SFIEMT
*/
Static Function ValLinGrid()
	
	Local lRet		:= .T.
	Local oModel  := FwModelActive()
	Local nOperac	:= oModel:GetOperation()
	Local oMdlCab	:= oModel:GetModel( "ZZXMASTER" )
	Local oMdlGrd	:= oModel:GetModel( "ZZXDETAIL" )
	Local cCusto	:= oMdlCab:GetValue( "ZZX_CUSTO" )
	Local cItem	:= oMdlGrd:GetValue( "ZZX_ITEM" )
	
	lRet := IIf( .Not. Empty(cCusto), .T., .F. )
	
	If .Not. lRet
		ShowHelpDlg( "AJUDA", { "UO não informada" , "Verifique!"  }, 5, { "Insira uma UO válida!" } , 5 )
	ElseIf .Not. Empty(cItem) .And. .Not. oMdlGrd:IsDeleted()
		
		DbSelectArea('ZZX')
		DbSetOrder(1)
		DbGoTop()
		ZZX->(DbSeek(xFilial('ZZX') + Padr(cCusto, TamSx3('ZZX_CUSTO')[1]) + Padr(cItem, TamSx3('ZZX_ITEM')[1])))
		While .Not. Eof()
		
			If ZZX->ZZX_ITEM = cItem
				lRet := IIf( nOperac = 3, .F., .T.)
				Exit
			EndIf
			
			ZZX->(DbSkip())
		End
		
		ZZX->(dbCloseArea())
		
	EndIf
	
	If .Not. lRet
		ShowHelpDlg( "AJUDA", { "CR já existente para essa UO" , "INCLUSÃO NÃO PERMITIDA"  }, 5, { "Informe um CR que ainda não esteja cadastrada para essa UO" } , 5 )
	EndIf
	
Return( lRet )