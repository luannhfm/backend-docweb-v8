#Include 'Protheus.ch'
#INCLUDE "TOPCONN.CH"

static __cCodtur as char
static __cCodcur as char
static __cDescur as char
static __cPerlet as char
static __cUnidCu as char

/*/{Protheus.doc} Função para trazer as turmas para o cadastro da Necessidade de Docente
    @type  Function SF69A07X
    @author Daniel Castro - TOTVS
    @since 25/05/2021
    @version version
    /*/

//=====================================================================
User Function SF69A13X()

	Local aArea := GetArea()
	Private aTurma := {}

	Processa( {|| Carrega() }, "Aguarde...", "Carregando dados...",.F.)

	If  Empty(__cCodtur) .Or. Empty(__cCodcur) .Or. Empty(__cDescur) .Or. Empty(__cPerlet) .Or.Empty(__cUnidCu)

		__cCodtur  := ""
		__cCodcur := ""
		__cDescur := ""
		__cPerlet := ""
		__cUnidCu := ""

	EndIf

	RestArea(aArea)

Return(.T.)

//=====================================================================
//Return da Função SXB
//=====================================================================
User Function SF6913_1()
//Codigo da Turma
Return(__cCodtur)
//=====================================================================
User Function SF6913_2()
//Codigo do Curso
Return(__cCodcur)
//=====================================================================
User Function SF6913_3()
//Descrição do Curso
Return(__cDescur)
//=====================================================================
User Function SF6913_4()
//Codigo Periodo Letivo
Return(__cPerlet)
//=====================================================================
User Function SF6913_5()
//Codigo Periodo Letivo
Return(__cUnidCu)
//=====================================================================

Static Function Carrega()

	Local aAllFiliais := StrToKArr(SuperGetMV("MV_XALLFCD", .F., ""), ';')
	Local cQuery := ""
	Local nTotal := 0
	Local cCodCol := Iif(SubStr(xFilial("ZBB"),1,4) == "03MT","3","2")
	Local cInCGC := fGetCGCs()

	cQuery += "    SELECT DISTINCT " + CRLF
	cQuery += "      HF.CODGRADE AS CODGRADE, " + CRLF
	cQuery += "      HF.CODHABILITACAO AS CODHABILITACAO, "+ CRLF
	cQuery += "      HF.CODCURSO AS CODCURSO, "+ CRLF
	cQuery += "      MO.CODMODALIDADECURSO AS CODMODALIDADECURSO, "+ CRLF
	cQuery += "      MO.DESCRICAO AS MODALIDADECURSO, "+ CRLF
	cQuery += "      UN.CODFILIAL, "+ CRLF
	cQuery += "      UN.NOME AS UNIDADE, "+ CRLF
	cQuery += "      UN.CGC AS CNPJ, "+ CRLF
	cQuery += "      TU.CODTURMA AS CODTURMA, "+ CRLF
	cQuery += "      TU.DTINICIAL AS TURMA_DTINICIAL, "+ CRLF
	cQuery += "      TU.DTFINAL AS TURMA_DTFINAL, "+ CRLF
	cQuery += "      TD.IDTURMADISC AS IDTURMADISC, "+ CRLF
	cQuery += "      TD.CODDISC, "+ CRLF
	cQuery += "      DI.NOME AS DI_UNIDADE_CURRICULAR, "+ CRLF
	cQuery += "      DI.CH AS CH_UNIDADE_CURRICULAR, "+ CRLF
	cQuery += "      TU.IDPERLET AS PERLET, " + CRLF
	cQuery += "      PL.CODPERLET AS PERIODO_LETIVO " + CRLF
	cQuery += "    FROM RM.STURMA@RMSGE TU "+ CRLF
	cQuery += "    INNER JOIN
	cQuery += "     RM.SPLETIVO@RMSGE PL ON PL.CODCOLIGADA = TU.CODCOLIGADA
	cQuery += "     AND PL.IDPERLET = TU.IDPERLET
	cQuery += "    INNER JOIN "+ CRLF
	cQuery += "      RM.SHABILITACAOFILIAL@RMSGE HF ON HF.CODCOLIGADA = TU.CODCOLIGADA "+ CRLF
	cQuery += "                            AND HF.IDHABILITACAOFILIAL = TU.IDHABILITACAOFILIAL "+ CRLF
	cQuery += "    INNER JOIN "+ CRLF
	cQuery += "      RM.SGRADE@RMSGE GR ON GR.CODCOLIGADA = HF.CODCOLIGADA "+ CRLF
	cQuery += "                AND GR.CODGRADE = HF.CODGRADE "+ CRLF
	cQuery += "                AND GR.CODHABILITACAO = HF.CODHABILITACAO "+ CRLF
	cQuery += "                AND GR.CODCURSO = HF.CODCURSO "+ CRLF
	cQuery += "    INNER JOIN "+ CRLF
	cQuery += "      RM.SCURSO@RMSGE CU ON CU.CODCOLIGADA = GR.CODCOLIGADA "+ CRLF
	cQuery += "                AND CU.CODCURSO = GR.CODCURSO "+ CRLF
	cQuery += "    INNER JOIN "+ CRLF
	cQuery += "      RM.SCURSOCOMPL@RMSGE CU_C ON CU_C.CODCOLIGADA = CU.CODCOLIGADA "+ CRLF
	cQuery += "                        AND CU_C.CODCURSO = CU.CODCURSO "+ CRLF
	cQuery += "    INNER JOIN "+ CRLF
	cQuery += "      RM.SMODALIDADECURSO@RMSGE MO ON MO.CODCOLIGADA = CU.CODCOLIGADA "+ CRLF
	cQuery += "                          AND MO.CODMODALIDADECURSO = CU.CODMODALIDADECURSO "+ CRLF
	cQuery += "    INNER JOIN "+ CRLF
	cQuery += "      RM.GFILIAL@RMSGE UN ON UN.CODCOLIGADA = HF.CODCOLIGADA "+ CRLF
	cQuery += "                  AND UN.CODFILIAL = HF.CODFILIAL "+ CRLF
	cQuery += "    INNER JOIN "+ CRLF
	cQuery += "      RM.STURMADISC@RMSGE TD ON TD.CODCOLIGADA    = TU.CODCOLIGADA "+ CRLF
	cQuery += "                      AND TD.CODFILIAL      = TU.CODFILIAL "+ CRLF
	cQuery += "                      AND TD.CODTURMA       = TU.CODTURMA "+ CRLF
	cQuery += "                      AND TD.IDPERLET       = TU.IDPERLET "+ CRLF
	cQuery += "    INNER JOIN "+ CRLF
	cQuery += "      RM.SDISCIPLINA@RMSGE DI ON DI.CODCOLIGADA = TD.CODCOLIGADA "+ CRLF
	cQuery += "                      AND DI.CODDISC = TD.CODDISC "+ CRLF
	cQuery += "    WHERE "+ CRLF
	cQuery += "        TU.CODCOLIGADA = '" +cCodCol+ "' AND " + CRLF
	if Ascan(aAllFiliais, cFilAnt) == 0
		cQuery += "        UN.CGC IN (" + cInCGC + ")  AND " + CRLF
	endif
	cQuery += "        TU.DTFINAL >= TO_DATE('" + DtoS(dDataBase) + "', 'YYYYMMDD')  " + CRLF
	cQuery += "    ORDER BY 1,6,8 "+ CRLF

	TCQuery cQuery New Alias "QRY"

	//Setando o tamanho da régua
	Count To nTotal
	ProcRegua(nTotal)

	If nTotal <> 0
		QRY->(dbGotop())

		Processa( {|| tela() }, "Aguarde...", "Carregando Tela...",.F.)

	else
		help(;
			NIL, ;
			NIL, ;
			"Sem dados", ;
			NIL, ;
			"A consulta de turmas não encontrou dados", ;
			1, ;
			0, ;
			NIL, ;
			NIL, ;
			NIL, ;
			NIL, ;
			NIL, ;
			{"Verifique se há turmas cadastradas no SGE"} ;
		)
	EndIf

	QRY->(dbCloseArea())


Return

//=====================================================================
Static Function tela()

	Local oDlg
	Local oTree
	Local lPri := .T.
	Local cModal := ""
	Local cUni := ""
	Local cTur := ""
	Local nCount	:= 0
	Local IMAGE1  	:= "" 	// Imagem quando nï¿½vel estiver fechado
	Local IMAGE2  	:= "" 	// Imagem quando nï¿½vel estiver aberto
	Local aNodes	:= {}

	DEFINE DIALOG oDlg TITLE "Escolha a Turma..." FROM 180,180 TO 550,700 PIXEL
// Cria a Tree    
	oTree := DbTree():New(0,0,160,260,oDlg,,,.T.)

	While QRY->(!EOF())
		IncProc("Montando estrutura ..." + Alltrim(QRY->CODGRADE))
		If lPri .Or. cModal <> QRY->CODGRADE
			//Cabeçalho - Modalidade
			nCount++
			aAdd(aNodes,{'00', StrZero(nCount,7), "", Alltrim(QRY->CODGRADE) + "-" + Alltrim(QRY->MODALIDADECURSO), IMAGE1, IMAGE2})
		EndIf

		If lPri .Or. cUni <> QRY->UNIDADE .Or. cModal <> QRY->CODGRADE
			//Filial
			nCount++
			aadd( aNodes, {'01', StrZero(nCount,7), "", Alltrim(QRY->UNIDADE), IMAGE1, IMAGE2} )
		EndIf

		If lPri .Or. cUnC <> QRY->DI_UNIDADE_CURRICULAR .Or. cUni <> QRY->UNIDADE
		//Unidade Curricular
			nCount++
			aadd( aNodes, {'02', StrZero(nCount,7), "", Alltrim(QRY->DI_UNIDADE_CURRICULAR), IMAGE1, IMAGE2} )
		EndIf

		If lPri .Or. cTur <> QRY->CODTURMA .Or. cUnC <> QRY->DI_UNIDADE_CURRICULAR
			//Turma
			nCount++
			aadd( aNodes, {'03', StrZero(nCount,7), "", Alltrim(QRY->CODTURMA) + ;
														" | " + Alltrim(QRY->DI_UNIDADE_CURRICULAR) + ;
														" | " + Alltrim(QRY->UNIDADE), IMAGE1, IMAGE2} )
		EndIf

		lPri := .F.
		cModal := QRY->CODGRADE
		cUni := QRY->UNIDADE
		cTur := QRY->CODTURMA
		cUnC := QRY->DI_UNIDADE_CURRICULAR

		aAdd(aTurma,{Alltrim(QRY->CODTURMA),;
			Alltrim(QRY->CODGRADE),;
			Alltrim(QRY->MODALIDADECURSO),;
			Alltrim(QRY->PERIODO_LETIVO),;
			Alltrim(QRY->DI_UNIDADE_CURRICULAR)})

		QRY->(dbSkip())

	EndDo

	oTree:PTSendTree( aNodes )

	TButton():New( 172,02,"Selecionar", oDlg,{|| Export(oTree:GetPrompt(.T.)), oDlg:End() }, 40,10,,,.F.,.T.,.F.,,.F.,,,.F. )

	ACTIVATE DIALOG oDlg CENTERED


Return


//===============================================================================
Static Function Export(cTur)

	Local aDados := Separa(cTur, " | ", .T.)
	Local nPosTur := aScan(aTurma,{|x| x[1] == aDados[1] .And. x[5] == aDados[2] })
	
	If nPosTur <> 0
		__cCodtur := aTurma[nPosTur,1]
		__cCodcur := aTurma[nPosTur,2]
		__cDescur := aTurma[nPosTur,3]
		__cPerlet := aTurma[nPosTur,4]
		__cUnidCu := aTurma[nPosTur,5]
	Else
		__cCodtur :=""
		__cCodcur :=""
		__cDescur :=""
		__cPerlet :=""
		__cUnidCu :=""
	EndIf

Return

/*/{Protheus.doc} fGetCGCs
	(long_description)
	@type  Static Function
	@author user
	@since 21/09/2022
	@version version
	@param param_name, param_type, param_descr
	@return return_var, return_type, return_description
	@example
	(examples)
	@see (links_or_references)
/*/
Static Function fGetCGCs()
	Local AFilFiliais := {}

	Local cInCGCs := ""
	Local nCount := 0
	
	cInCGCs := "'" + fCNPJ() + "'"
	
	AFilFiliais := StrToKArr(SuperGetMV("MV_XFILFCD", .F., ""), ';')

	if Len(AFilFiliais) > 0
		for nCount := 1 to Len(AFilFiliais)
			if nCount <= Len(AFilFiliais)
				cInCGCs += ","
			endif
			cInCGCs += "'" + fCNPJ(AllTrim(AFilFiliais[nCount])) + "'"
		next
	endif

Return cInCGCs

/*/{Protheus.doc} fCNPJ
	(Retorna o CNPJ da Filial )
	@type  Static Function
	@author user
	@since 08/08/2022
	@version version
	@param param_name, param_type, param_descr
	@return return_var, return_type, return_description
	@example
	(examples)
	@see (links_or_references)
/*/
Static Function fCNPJ(cCodFilP)
Local cCNPJ := ""
Local aSm0 := {}
Local nPos := 0

DEFAULT cCodFilP := cfilant

aSm0 := fwloadsm0()
nPos := Ascan( aSm0 , {|x| Alltrim(x[2]) == Alltrim( cCodFilP )})
If nPos > 0
	cCNPJ := Alltrim(aSm0[nPos][18])  
	cCNPJ := Transform( cCNPJ , '@R 99.999.999/9999-99' )
EndIf

Return cCNPJ
