#include 'totvs.ch'
#include 'parmtype.ch'
#include 'topconn.ch'

/*/{Protheus.doc} LanContabilFolhaAdapter
Classe Adapter para o serviço
@type class
@author  Walmir Junior
@since   20/09/2020
@version 1.0
/*/

CLASS LanContabilFolhaAdapter FROM FWAdapterBaseV2
	DATA lIsFolRM as logical
	DATA cMethod as string
	METHOD New()
	METHOD GetListLanCtbilFolha()
	METHOD GetListItensColaborador()
	METHOD getJSONResponse()
EndClass

//-------------------------------------------------------------------
/*/{Protheus.doc} New
Método construtor
@type method
@param cVerb, character, verbo HTTP utilizado
@author  Walmir Junior
@since   20/09/2020
@version 1.0
/*/
//-------------------------------------------------------------------
Method New( cVerb ) CLASS LanContabilFolhaAdapter
	_Super:New( cVerb, .T. )
return

//-------------------------------------------------------------------
/*/{Protheus.doc} GetListLanCtbilFolha
Método que retorna uma lista de lançamentos contábeis de Produtos e Serviços
@type method
@author  Walmir Junior
@since   12/11/2020
@version 1.0
/*/
//-------------------------------------------------------------------
Method GetListLanCtbilFolha() CLASS LanContabilFolhaAdapter
	Local aArea 	AS ARRAY
	Local cWhere	AS CHAR
	
    aArea   := FwGetArea()
	AddMapFields( self )
	::SetQuery( GetQuery( ::lIsFolRM ) )
	
	cWhere := " ZD7.D_E_L_E_T_ = ' ' "
	cWhere += " AND (ZAR.ZAR_SITUAC IS NULL OR ZAR.ZAR_SITUAC IN ('P','A')) "
	
	::SetWhere( cWhere )
	
	if ::lIsFolRM
		::SetOrder( "ZD7_FILRAT", "ZD7_MAT" )
	else
		::SetOrder( "RA_NOME", "RA_MAT" )
	endif

	//Executa a consulta, se retornar .T. tudo ocorreu conforme esperado
	If ::Execute() 
		// Gera o arquivo Json com o retorno da Query
		::FillGetResponse()
	EndIf
	
    FwrestArea(aArea)

return

//-------------------------------------------------------------------
/*/{Protheus.doc} GetListItensColaborador
Método que retorna uma lista de itens contábeis do período para o colaborador.
@type method
@author  Walmir Junior
@since   07/04/2021
@version 1.0
/*/
//-------------------------------------------------------------------
Method GetListItensColaborador() CLASS LanContabilFolhaAdapter
	Local aArea 	AS ARRAY
	Local cWhere	AS CHAR
	
    aArea   := FwGetArea()
	AddMapFdsItens( self )
	::SetQuery( GetQueryItens() )
	
	cWhere := " ZD7.D_E_L_E_T_ = ' ' "
	
	::SetWhere( cWhere )
	
	::SetOrder( "ZD7_ITEM", "CTD_DESC01" )

	//Executa a consulta, se retornar .T. tudo ocorreu conforme esperado
	If ::Execute() 
		// Gera o arquivo Json com o retorno da Query
		::FillGetResponse()
	EndIf
	
    FwrestArea(aArea)

return

//-------------------------------------------------------------------
/*/{Protheus.doc} AddMapFields
Função para geração do mapa de campos
@type function
@param oSelf, object, Objeto da prórpia classe
@author  Walmir Junior
@since   20/09/2020
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function AddMapFields( oSelf )
	
	if oSelf:lIsFolRM
		oSelf:AddMapFields( 'filial'			, 'ZD7_FILRAT'	, .T., .T., {'ZD7_FILRAT'	, 'C', TamSX3('ZD7_FILRAT')[1]	, 0} )
		oSelf:AddMapFields( 'periodo'			, 'ZD7_MESANO'	, .T., .T., {'ZD7_MESANO'	, 'C', TamSX3('ZD7_MESANO')[1]	, 0} )
		oSelf:AddMapFields( 'centro_custo'		, 'ZD7_CC'		, .T., .F., {'ZD7_CC'		, 'C', TamSX3('ZD7_CC')[1]		, 0} )	
		oSelf:AddMapFields( 'matricula'			, 'ZD7_MAT'		, .T., .F., {'ZD7_MAT'		, 'C', TamSX3('ZD7_MAT')[1]		, 0} )
		oSelf:AddMapFields( 'cc_desc'			, 'CTT_DESC01'	, .T., .F., {'CTT_DESC01'	, 'C', TamSX3('CTT_DESC01')[1]	, 0} )
		oSelf:AddMapFields( 'perc_disponivel'	, 'ZAU_PERCDS'	, .T., .F., {'ZAU_PERCDS'	, 'C', TamSX3('ZAU_PERCDS' )[1]	, 0}, "NVL(ZAU_PERCDS,100)" )
	else	
		oSelf:AddMapFields( 'filial'    		, 'ZD7_FILRAT'  , .T., .T., { 'ZD7_FILRAT' 	, 'C', TamSX3( 'ZD7_FILRAT'	)[1] , 0 } )
		oSelf:AddMapFields( 'periodo'   		, 'ZD7_MESANO'  , .T., .T., { 'ZD7_MESANO'  , 'C', TamSX3( 'ZD7_MESANO' )[1] , 0 } )
		oSelf:AddMapFields( 'centro_custo'  	, 'ZD7_CC'    	, .T., .F., { 'ZD7_CC'    	, 'C', TamSX3( 'ZD7_CC'   	)[1] , 0 } )	
		oSelf:AddMapFields( 'matricula'    		, 'RA_MAT' 		, .T., .F., { 'RA_MAT'   	, 'C', TamSX3( 'RA_MAT'  	)[1] , 0 } )
		oSelf:AddMapFields( 'cpf'  				, 'RA_CIC'  	, .T., .F., { 'RA_CIC'  	, 'C', TamSX3( 'RA_CIC' 	)[1] , 0 } )
		oSelf:AddMapFields( 'nome' 				, 'RA_NOME'  	, .T., .T., { 'RA_NOME'  	, 'C', TamSX3( 'RA_NOME' 	)[1] , 0 } )
		oSelf:AddMapFields( 'admissao' 			, 'RA_ADMISSA'  , .T., .F., { 'RA_ADMISSA'  , 'C', TamSX3( 'RA_ADMISSA' )[1] , 0 } )
		oSelf:AddMapFields( 'hr_mes' 			, 'RA_HRSMES'	, .T., .F., { 'RA_HRSMES'	, 'N', TamSX3( 'RA_HRSMES' 	)[1] , 0 } )
		oSelf:AddMapFields( 'hr_semana'			, 'RA_HRSEMAN'  , .T., .F., { 'RA_HRSEMAN'  , 'N', TamSX3( 'RA_HRSEMAN' )[1] , 0 } )
		oSelf:AddMapFields( 'cc_desc'			, 'CTT_DESC01'  , .T., .F., { 'CTT_DESC01'  , 'C', TamSX3( 'CTT_DESC01' )[1] , 0 } )
		oSelf:AddMapFields( 'perc_disponivel'	, 'ZAU_PERCDS'	, .T., .F., { 'ZAU_PERCDS'  , 'C', TamSX3( 'ZAU_PERCDS' )[1] , 0 } )
	endif
	
return 

//-------------------------------------------------------------------
/*/{Protheus.doc} AddMapFdsItens
Função para geração do mapa de campos
@type function
@param oSelf, object, Objeto da prórpia classe
@author  Walmir Junior
@since   07/04/2021
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function AddMapFdsItens( oSelf )
	
	oSelf:AddMapFields( 'filial'    	, 'ZD7_FILIAL'  , .T., .T., { 'ZD7_FILIAL' 	, 'C', TamSX3( 'ZD7_FILIAL'	)[1] , 0 } )
	oSelf:AddMapFields( 'periodo'   	, 'ZD7_MESANO'  , .T., .T., { 'ZD7_MESANO'  , 'C', TamSX3( 'ZD7_MESANO' )[1] , 0 } )
	oSelf:AddMapFields( 'matricula'    	, 'ZD7_MAT'		, .T., .F., { 'ZD7_MAT'   	, 'C', TamSX3( 'ZD7_MAT'  	)[1] , 0 } )
	oSelf:AddMapFields( 'centro_custo'  , 'ZD7_CC'    	, .T., .F., { 'ZD7_CC'    	, 'C', TamSX3( 'ZD7_CC'   	)[1] , 0 } )	
	oSelf:AddMapFields( 'item'    		, 'ZD7_ITEM'  	, .T., .T., { 'ZD7_ITEM' 	, 'C', TamSX3( 'ZD7_ITEM'	)[1] , 0 } )
	oSelf:AddMapFields( 'desc'   		, 'CTD_DESC01'  , .T., .T., { 'CTD_DESC01'  , 'C', TamSX3( 'CTD_DESC01' )[1] , 0 } )
	
return Nil

//------------------------------------------------------------------
/*/{Protheus.doc} GetQuery
Retorna a query usada no serviço
@type function
@param oSelf, object, Objeto da prórpia classe
@author  Walmir Junior
@since   20/09/2020
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function GetQuery( lIsFolRM )
	Local cQuery AS CHARACTER

	DEFAULT lIsFolRM := .F.
	
	if lIsFolRM
		cQuery := " SELECT DISTINCT #QueryFields#"
		cQuery += " FROM " + RetSqlName( 'ZD7' ) + " ZD7 INNER JOIN "
		cQuery += " " + RetSqlName( 'CTT' ) + " CTT ON CTT.D_E_L_E_T_ = ' ' AND SUBSTR(ZD7_FILIAL,1,4) = RTRIM(CTT_FILIAL) AND ZD7_CC = CTT_CUSTO INNER JOIN " 
		cQuery += " " + RetSqlName( 'CTD' ) + " CTD ON CTD.D_E_L_E_T_ = ' ' AND SUBSTR(ZD7_FILIAL,1,4) = RTRIM(CTD_FILIAL) AND ZD7_ITEM = CTD_ITEM INNER JOIN " 
		cQuery += " " + RetSqlName( 'CT1' ) + " CT1DEB ON CT1DEB.D_E_L_E_T_ = ' ' AND SUBSTR(ZD7_FILIAL,1,4) = RTRIM(CT1DEB.CT1_FILIAL) AND ZD7_CTADEB = CT1DEB.CT1_CONTA LEFT JOIN " 
		cQuery += " " + RetSqlName( 'ZAU' ) + " ZAU ON ZAU.D_E_L_E_T_ = ' ' AND RTRIM(ZAU.ZAU_FILIAL) = SUBSTR(ZD7.ZD7_FILRAT,1,4) AND ZAU.ZAU_FILORI = ZD7.ZD7_FILRAT"
		cQuery += " AND ZAU.ZAU_MATRIC = ZD7.ZD7_MAT AND ZAU.ZAU_PERIOD = ZD7.ZD7_MESANO AND ZAU.ZAU_CONDOR = ZD7.ZD7_CTADEB "
		cQuery += " AND ZAU.ZAU_CCDORI = ZD7.ZD7_CC AND ZAU.ZAU_ITMDOR = ZD7.ZD7_ITEM LEFT JOIN "
		cQuery += " " + RetSqlName( 'ZAR' ) + " ZAR ON ZAR.D_E_L_E_T_ = ' ' "
		cQuery += " AND ZAR.ZAR_CHVZAU = ZAU.ZAU_FILIAL || ZAU.ZAU_FILORI || ZAU.ZAU_MATRIC || ZAU.ZAU_PERIOD || ZAU.ZAU_CONDOR || ZAU.ZAU_CCDORI || ZAU.ZAU_ITMDOR "
		cQuery += " WHERE #QueryWhere#"
		cQuery += " GROUP BY ZD7_FILRAT, ZD7_MESANO, ZD7_CC, ZD7_MAT, CTT_DESC01, ZAU_PERCDS "
	else
		cQuery := " SELECT DISTINCT #QueryFields#"
		cQuery += " FROM " + RetSqlName( 'ZD7' ) + " ZD7 INNER JOIN "
		cQuery += " " + RetSqlName( 'SRA' ) + " SRA ON SRA.D_E_L_E_T_ = ' ' AND ZD7_FILIAL = RA_FILIAL AND ZD7_MAT = RA_MAT INNER JOIN " 
		cQuery += " " + RetSqlName( 'SRV' ) + " SRV ON SRV.D_E_L_E_T_ = ' ' AND SUBSTR(ZD7_FILIAL,1,4) = RTRIM(RV_FILIAL) AND ZD7_VERBA = RV_COD INNER JOIN " 
		cQuery += " " + RetSqlName( 'CTT' ) + " CTT ON CTT.D_E_L_E_T_ = ' ' AND SUBSTR(ZD7_FILIAL,1,4) = RTRIM(CTT_FILIAL) AND ZD7_CC = CTT_CUSTO INNER JOIN " 
		cQuery += " " + RetSqlName( 'CTD' ) + " CTD ON CTD.D_E_L_E_T_ = ' ' AND SUBSTR(ZD7_FILIAL,1,4) = RTRIM(CTD_FILIAL) AND ZD7_ITEM = CTD_ITEM INNER JOIN " 
		cQuery += " " + RetSqlName( 'CT1' ) + " CT1DEB ON CT1DEB.D_E_L_E_T_ = ' ' AND SUBSTR(RA_FILIAL,1,4) = RTRIM(CT1DEB.CT1_FILIAL) AND ZD7_CTADEB = CT1DEB.CT1_CONTA LEFT JOIN " 
		cQuery += " " + RetSqlName( 'ZAU' ) + " ZAU ON ZAU.D_E_L_E_T_ = ' ' AND RTRIM(ZAU.ZAU_FILIAL) = SUBSTR(ZD7.ZD7_FILRAT,1,4) AND ZAU.ZAU_FILORI = ZD7.ZD7_FILRAT"
		cQuery += " AND ZAU.ZAU_MATRIC = SRA.RA_MAT AND ZAU.ZAU_PERIOD = ZD7.ZD7_MESANO AND ZAU.ZAU_CONDOR = ZD7.ZD7_CTADEB "
		cQuery += " AND ZAU.ZAU_CCDORI = ZD7.ZD7_CC AND ZAU.ZAU_ITMDOR = ZD7.ZD7_ITEM LEFT JOIN "
		cQuery += " " + RetSqlName( 'ZAR' ) + " ZAR ON ZAR.D_E_L_E_T_ = ' ' "
		cQuery += " AND ZAR.ZAR_CHVZAU = ZAU.ZAU_FILIAL || ZAU.ZAU_FILORI || ZAU.ZAU_MATRIC || ZAU.ZAU_PERIOD || ZAU.ZAU_CONDOR || ZAU.ZAU_CCDORI "
		cQuery += " || ZAU.ZAU_ITMDOR "
		cQuery += " WHERE #QueryWhere#"
		cQuery += " GROUP BY ZD7_FILRAT,ZD7_MESANO,ZD7_CC,RA_MAT,RA_CIC,RA_NOME,RA_ADMISSA,RA_HRSMES,RA_HRSEMAN,CTT_DESC01,ZAU_PERCDS "
	endif

Return cQuery

//------------------------------------------------------------------
/*/{Protheus.doc} GetQueryItens
Retorna a query usada no serviço
@type function
@param oSelf, object, Objeto da prórpia classe
@author  Walmir Junior
@since   07/04/2021
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function GetQueryItens()
	Local cQuery AS CHARACTER
	
	cQuery := " SELECT DISTINCT #QueryFields#"
	cQuery += " FROM " + RetSqlName( 'ZD7' ) + " ZD7 INNER JOIN "
	cQuery += " " + RetSqlName( 'CTT' ) + " CTT ON CTT.D_E_L_E_T_ = ' ' AND SUBSTR(ZD7_FILIAL,1,4) = RTRIM(CTT_FILIAL) AND ZD7_CC = CTT_CUSTO INNER JOIN " 
	cQuery += " " + RetSqlName( 'CTD' ) + " CTD ON CTD.D_E_L_E_T_ = ' ' AND SUBSTR(ZD7_FILIAL,1,4) = RTRIM(CTD_FILIAL) AND ZD7_ITEM = CTD_ITEM INNER JOIN " 
	cQuery += " " + RetSqlName( 'CT1' ) + " CT1DEB ON CT1DEB.D_E_L_E_T_ = ' ' AND SUBSTR(ZD7_FILIAL,1,4) = RTRIM(CT1DEB.CT1_FILIAL) AND ZD7_CTADEB = CT1DEB.CT1_CONTA " 
	cQuery += " WHERE #QueryWhere#"
	cQuery += " GROUP BY ZD7_FILIAL, ZD7_MESANO, ZD7_MAT, ZD7_CC, ZD7_ITEM, CTD_DESC01 "

Return cQuery

Method getJSONResponse() CLASS LanContabilFolhaAdapter
Local cReturn := ""
	
	cReturn := _Super:getJSONResponse()
	
	if ::lIsFolRM
		if ::cMethod == "getLancContabilFolha"
			cReturn := fGetFolRM(cReturn)
		endif
	endif

Return cReturn

/*/{Protheus.doc} fGetFolRM
Busca os dados da folha no RM
@type  Static Function
@author Franklin de Brito de Oliveira
@since 13/07/2022
@param cJson, string, string no formato JSON com o resultado do método getJSONResponse 
@return string, string no formato JSON com o resultado acrescido dos dados da folha no RM
/*/
Static Function fGetFolRM(cJson)
Local aDadFunc := {}
Local aListFun := {}
Local aNewItems := {}
Local cRet := ""
Local cReturn := ""
Local nLinha := 0
Local nListFun := 0
Local nItems := 0
Local nPesq := 0
Local oReturn
	oReturn := JsonObject():New()
	cRet := oReturn:FromJSON( cJson )
	if ValType(cRet) == "U"
		nItems := len(oReturn['items'])
		for nLinha := 1 to nItems
			nPesq++
			if nPesq == 20 .or. nLinha >= nItems
				aListFun := GtLstFnc(aDadFunc)
				for nListFun := 1 to Len(aListFun)
					Aadd(aNewItems, aListFun[nListFun])
				next
				aDadFunc := {}
				nPesq := 1
			endif
			Aadd(aDadFunc, JsonObject():New())
			aDadFunc[nPesq] := oReturn['items'][nLinha]
		next nLinha
	else
		Conout("Falha ao popular JsonObject. Erro: " + cRet)
	endif
	aSort(aNewItems, /*nInicio*/, /*nCont*/, { |x, y| x['nome'] < y['nome'] })
	oReturn['items'] := aNewItems
	cReturn := oReturn:ToJSON()
	FreeObj(oReturn)
Return cReturn

/*/{Protheus.doc} GtLstFnc
Busca os dados da folha no banco do RM Folha
@type  Static Function
@author Franklin de Brito de Oliveira
@since 13/07/2022
@param aDadFunc, array, lista de funcionários, no formato JSON, que serão pesquisados
@return array, lista de funcionários, no formato JSON, atualizada
/*/
Static Function GtLstFnc(aDadFunc)
Local _cQuery := ""
Local _cDbSql := AllTrim(SuperGetMV("MV_XDBRMFO", .F., "MSSQL/RM"))
Local cSrvAddr := GetSrvProfString("DBServer", "Localhost")
Local nDBPort	:= Val(GetSrvProfString("DbPort", "7890"))
local cWhere := ""
Local nItem := 0
Local nPos := 0

	//Conecta Banco RM
	nHndSql := TcLink(_cDbSql, cSrvAddr, nDBPort)

	If nHndSql < 0
		ConOut(FunName() + ": Erro ("+ str(nHndSql,4) +") ao conectar com "+ _cDbSql +" em "+ cSrvAddr)
	else
		if TCSetConn(nHndSql)
			for nItem := 1 to Len(aDadFunc)
				if nItem == 1
					cWhere += "("
				else
					cWhere += "OR ("
				endif
				cWhere += "	CODCOLIGADA = '" + SUBSTR(aDadFunc[nItem]['filial'], 2, 1) + "' ""
				cWhere += "	AND CHAPA = '" + aDadFunc[nItem]['matricula'] + "' "
				cWhere += " )"
			next
			//Realiza a Consulta no RM
			_cQuery := " "
			_cQuery += " SELECT "
			_cQuery += " 	dbo.PFUNC.CHAPA AS matricula "
			_cQuery += " 	,dbo.PFUNC.NOME AS NomeFuncionario "
			_cQuery += " 	,dbo.PFUNC.JORNADAMENSAL / 60 AS HoraMensal "
			_cQuery += " 	,dbo.PFUNC.JORNADAMENSAL / 60 / 5 AS HoraSemanal "
			_cQuery += " 	,dbo.PPESSOA.CPF "
			_cQuery += " 	,convert(varchar, dbo.PFUNC.DATAADMISSAO, 112) AS DATAADMISSAO "
			_cQuery += " FROM dbo.PFUNC "
			_cQuery += " INNER JOIN dbo.PPESSOA ON  "
			_cQuery += " dbo.PPESSOA.CODIGO = dbo.PFUNC.CODPESSOA "
			_cQuery += " WHERE "
			_cQuery += cWhere
			_cQuery += " ORDER BY NomeFuncionario "

			TCQUERY _cQuery NEW ALIAS "TMPA"

			If (TCSQLExec(_cQuery) < 0)
				TMPA->(DbCloseArea())
				ConOut(FunName() + ": TCSQLError() " + TCSQLError())
			else
				DbSelectArea("TMPA")
				DbGoTop()
				while !TMPA->(EoF())
					nPos := AScan(aDadFunc, {|aFunc| aFunc['matricula']==AllTrim(TMPA->MATRICULA)})
					aDadFunc[nPos]['cpf'] := AllTrim(TMPA->CPF)
					aDadFunc[nPos]['nome'] := AllTrim(TMPA->NOMEFUNCIONARIO)
					aDadFunc[nPos]['admissao'] := AllTrim(TMPA->DATAADMISSAO)
					aDadFunc[nPos]['hr_mes'] := TMPA->HORAMENSAL
					aDadFunc[nPos]['hr_semana'] := TMPA->HORASEMANAL
					TMPA->(dbSkip())
				end
				TMPA->(DbCloseArea())
			EndIf
		else
			ConOut("Houve problema na troca de conexao para o Ambiente, contate o Administrador")
		endif
		// Fecha a conexão com o RM
		TcUnlink( nHndSql )
	Endif

Return aDadFunc
