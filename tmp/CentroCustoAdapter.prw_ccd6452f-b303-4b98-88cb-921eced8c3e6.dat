#include 'totvs.ch'
#include 'parmtype.ch'

/*/{Protheus.doc} CentroCustoAdapter
Classe Adapter para o serviço
@author  Walmir Junior
@since   05/10/2020
@version 1.0
/*/

CLASS CentroCustoAdapter FROM FWAdapterBaseV2
	METHOD New()
	METHOD GetListCentroCusto()
EndClass

//-------------------------------------------------------------------
/*/{Protheus.doc} New
Método construtor
@param cVerb, verbo HTTP utilizado
@author  Walmir Junior
@since   05/10/2020
@version 1.0
/*/
//-------------------------------------------------------------------
Method New( cVerb ) CLASS CentroCustoAdapter
	_Super:New( cVerb, .T. )
return

//-------------------------------------------------------------------
/*/{Protheus.doc} GetListCentroCusto
Método que retorna uma lista de centros de custo.
@author  Walmir Junior
@since   05/10/2020
@version 1.0
/*/
//-------------------------------------------------------------------
Method GetListCentroCusto() CLASS CentroCustoAdapter
	Local aArea 	AS ARRAY
	Local cWhere	AS CHAR
	

	aArea   := FwGetArea()
	AddMapFields( self )
	::SetQuery( GetQuery() )

	cWhere :=	" D_E_L_E_T_ = ' ' AND CTT_BLOQ = '2' AND "+; //" LENGTH(TRIM(CTT_CUSTO)) >= 10 AND "+;
				" (	( CTT_DTEXIS = ' ' Or CTT_DTEXIS <= '" + GravaData(dDataBase,.F.,8) + "' ) AND "+;
				"	( CTT_DTEXSF = ' ' Or CTT_DTEXSF >= '" + GravaData(dDataBase,.F.,8) + "')	) AND "+;
				" CTT_CUSTO NOT LIKE '9999%' "

	::SetWhere( cWhere )
	
    ::SetOrder( " CTT_FILIAL, CTT_CUSTO, CTT_DESC01 " )

	//Executa a consulta, se retornar .T. tudo ocorreu conforme esperado
	If ::Execute() 
		// Gera o arquivo Json com o retorno da Query
		::FillGetResponse()
	EndIf
	
    FwrestArea(aArea)

return

//-------------------------------------------------------------------
/*/{Protheus.doc} AddMapFields
Função para geração do mapa de campos
@param oSelf, object, Objeto da prórpia classe
@author  Walmir Junior
@since   05/10/2020
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function AddMapFields( oSelf )
	
	oSelf:AddMapFields( 'filial'    	, 'CTT_FILIAL'	, .T., .T., { 'CTT_FILIAL'  , 'C', TamSX3( 'CTT_FILIAL' )[1] , 0 } )
	oSelf:AddMapFields( 'centrocusto'	, 'CTT_CUSTO'	, .T., .F., { 'CTT_CUSTO'   , 'C', TamSX3( 'CTT_CUSTO'  )[1] , 0 } )	
	oSelf:AddMapFields( 'descricao'	    , 'CTT_DESC01'	, .T., .F., { 'CTT_DESC01'  , 'C', TamSX3( 'CTT_DESC01' )[1] , 0 } )
	oSelf:AddMapFields( 'classe'	    , 'CTT_CLASSE'	, .T., .F., { 'CTT_CLASSE'  , 'C', TamSX3( 'CTT_CLASSE' )[1] , 0 } )
	oSelf:AddMapFields( 'bloqueado'	    , 'CTT_BLOQ'	, .T., .F., { 'CTT_BLOQ' 	, 'C', TamSX3( 'CTT_BLOQ' )[1] 	 , 0 } )
	/*
	Classe da Conta Contábil. Podera ser:
	1 = Sintetica (Totalizadora de Valores)
	2 = Analitica (Recebe Valores no Lcto)
	*/

	/*
	Indica se a conta está ou não bloqueada
	para os lançamentos contábeis.
	1 - Conta Bloqueada
	2 - Conta Ativa
	*/

return 

//------------------------------------------------------------------
/*/{Protheus.doc} GetQuery
Retorna a query usada no serviço
@param oSelf, object, Objeto da prórpia classe
@author  Walmir Junior
@since   05/10/2020
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function GetQuery()
	Local cQuery AS CHARACTER
	
	cQuery := " SELECT #QueryFields#"
    cQuery +=   " FROM " + RetSqlName( 'CTT' ) + " CTT "
    cQuery += " WHERE #QueryWhere#"

Return cQuery
