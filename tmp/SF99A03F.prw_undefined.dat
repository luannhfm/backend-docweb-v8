#INCLUDE 'Protheus.ch'
#INCLUDE 'FWMVCDEF.CH'

/*/{Protheus.doc} User Function SF99A03F
Cadastro MVC do Controle de tabelas de API (ZCP)
@type  Function
@author Franklin de Brito de Oliveira
@since 18/10/2022
/*/
User Function SF99A03F()
    Local oBrowse
    // Instanciamento da Classe de Browse
    oBrowse := FWMBrowse():New()
    // Definição da tabela do Browse
    oBrowse:SetAlias('ZCP')
    // Titulo da Browse
    oBrowse:SetDescription('Controle de tabelas de API')
    // Opcionalmente pode ser desligado a exibição dos detalhes
    oBrowse:DisableDetails()
    // Ativação da Classe
    oBrowse:Activate()
Return NIL
/*/{Protheus.doc} MenuDef
    define as operações quer serão realizadas no cadastro
    @type  Static Function
    @author Franklin de Brito de Oliveira
    @since 18/10/2022
    @return array, operações disponiveis no cadastro
/*/
Static Function MenuDef()

Return FWMVCMenu( 'SF99A03F' )

/*/{Protheus.doc} ModelDef
    define as regras de negócio ou modelo de dados do cadastro
    @type  Static Function
    @author Franklin de Brito de Oliveira
    @since 18/10/2022
    @return object, objeto de modelo de dados (Model)
/*/
Static Function ModelDef()
    // Cria a estrutura a ser usada no Modelo de Dados
    Local oStruZCP := FWFormStruct( 1, 'ZCP' )
    Local oModel // Modelo de dados que será construído
    // Cria o objeto do Modelo de Dados
    oModel := MPFormModel():New('F99A03FM' )
    // Adiciona ao modelo um componente de formulário
    oModel:AddFields( 'ZCPMASTER', /*cOwner*/, oStruZCP)
    // Adiciona a descrição do Modelo de Dados
    oModel:SetDescription( 'Model do Controle de tabelas de API' )
    // Adiciona a descrição do Componente do Modelo de Dados
    oModel:GetModel( 'ZCPMASTER' ):SetDescription( 'Dados do Controle de tabelas de API' )
    //Definie a chave primária
    oModel:SetPrimaryKey( { "ZCP_FILIAL", "ZCP_ALIAS" } )
    // Retorna o Modelo de dados
Return oModel

/*/{Protheus.doc} ViewDef
    Define e renderiza o modelo de dados (Model). Possibilita exibição dos dados.
    @type  Static Function
    @author Franklin de Brito de Oliveira
    @since 18/10/2022
    @return object, o objeto de interface (View) gerado
    /*/
Static Function ViewDef()
    // Cria um objeto de Modelo de dados baseado no ModelDef() do fonte informado
    Local oModel := FWLoadModel( 'SF99A03F' )
    // Cria a estrutura a ser usada na View
    Local oStruZCP := FWFormStruct( 2, 'ZCP' )
    // Interface de visualização construída
    Local oView 
    // Cria o objeto de View
    oView := FWFormView():New()
    // Define qual o Modelo de dados será utilizado na View
    oView:SetModel( oModel )
    // Adiciona no nosso View um controle do tipo formulário 
    // (antiga Enchoice)
    oView:AddField( 'VIEW_ZCP', oStruZCP, 'ZCPMASTER' )
    // Criar um "box" horizontal para receber algum elemento da view
    oView:CreateHorizontalBox( 'TELA' , 100 )
    // Relaciona o identificador (ID) da View com o "box" para exibição
    oView:SetOwnerView( 'VIEW_ZCP', 'TELA' )
    // Retorna o objeto de View criado
Return oView
