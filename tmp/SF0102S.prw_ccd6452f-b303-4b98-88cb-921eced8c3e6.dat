#Include 'Protheus.ch'
#Include 'FWMVCDEF.CH'
#Include 'Topconn.ch'


/*/{Protheus.doc} SF0102S
	Browse MVC da rotina do cadastro de bens duráveis
	
@author Sergio Ricardo Leite Salustiano
@since 14/09/2016

@type function
/*/
User Function SF0102S()

	Local oBrowse
	Private _cFilCod :=  FWCODFIL()                                                                                                                     

	oBrowse:= FWMBrowse():New()
	oBrowse:SetAlias('ZEA')
	oBrowse:SetDescription('Cadastro de Bens')
	oBrowse:AddLegend("ZEA_SITBEM =='A'","GREEN"       ,"Ativo")
	oBrowse:AddLegend("ZEA_SITBEM =='B'","BR_CANCEL"   ,"Baixado")
	oBrowse:AddLegend("ZEA_SITBEM =='E'","BLUE"        ,"Emprestado")
	oBrowse:AddLegend("ZEA_SITBEM =='T'","BR_AMARELO"  ,"Transferido")
	oBrowse:AddLegend("ZEA_SITBEM =='C'","BR_PRETO"    ,"A Classificar")
	oBrowse:SetFilterDefault("ZEA_FILORI == _cFilCod .OR. ZEA_FILATU == _cFilCod ")
	oBrowse:SetAttach( .T. )
	//oBrowse:SetOpenChart( .T. ) //Define se o gráfico virá aberto ou oculto no carregamento do browse
	
	oBrowse:Activate()

Return Nil

/*/{Protheus.doc} MenuDef
	Definição do menu da rotina do cadastro de bens duráveis
	
@author Sergio Ricardo Leite Salustiano
@since 14/09/2016

@type function
/*/
Static Function MenuDef()

	Local aRotina := {}

	ADD OPTION aRotina Title 'Visualizar' Action 'VIEWDEF.SF0102S' OPERATION 2 ACCESS 0
	ADD OPTION aRotina Title 'Incluir'    Action 'VIEWDEF.SF0102S' OPERATION 3 ACCESS 0
	ADD OPTION aRotina Title 'Alterar'    Action 'VIEWDEF.SF0102S' OPERATION 4 ACCESS 0
	ADD OPTION aRotina Title 'Excluir'    Action 'VIEWDEF.SF0102S' OPERATION 5 ACCESS 0
	ADD OPTION aRotina Title 'Imprimir'   Action 'VIEWDEF.SF0102S' OPERATION 8 ACCESS 0
	ADD OPTION aRotina Title 'Copiar'     Action 'VIEWDEF.SF0102S' OPERATION 9 ACCESS 0

Return aRotina

/*/{Protheus.doc} ModelDef
	Definição do modelo de dados da rotina do cadastro de bens duráveis
	
@author Sergio Ricardo Leite Salustiano
@since 14/09/2016

@type function
/*/
Static Function ModelDef()

	Local oStruZEA := FWFormStruct(1,'ZEA')
	Local oModel

	oModel := MPFormModel():New('SF0102SM',,{ |oModel| fTudoOk( oModel )}, { |oModel| F0102SMPOS( oModel ) } )
	oModel:AddFields('ZEAMASTER',/*cOwner*/,oStruZEA)
	oModel:SetDescription('Cadastro de Bens')
	oModel:GetModel('ZEAMASTER'):SetDescription('Cadastro de Bens')
	oModel:SetPrimaryKey( { "ZEA_FILIAL", "ZEA_CODIGO" } )
	
	//Se for a rotina de Cadastro de Bens, torno os campos ZEA_LOCAL, ZEA_CODRES e ZEA_FORNEC Obrigatórios
	If FunName() == 'SF0102S'
		oStruZEA:SetProperty( 'ZEA_LOCAL'  , MODEL_FIELD_OBRIGAT, .T. )
		oStruZEA:SetProperty( 'ZEA_CODRES' , MODEL_FIELD_OBRIGAT, .T. )
		oStruZEA:SetProperty( 'ZEA_FORNEC' , MODEL_FIELD_OBRIGAT, .T. )
	EndIf
	
	//Se for a rotina de de aceite da movimentação de bens, torno os campos ZEA_LOCAL, ZEA_CODRES e ZEA_FORNEC editáveis
	If FunName() == 'SF0105S'
		oStruZEA:SetProperty( 'ZEA_LOCAL' , MODEL_FIELD_WHEN, FwBuildFeature(STRUCT_FEATURE_WHEN, /* cExprAdvPL */) )
		oStruZEA:SetProperty( 'ZEA_CODRES', MODEL_FIELD_WHEN, FwBuildFeature(STRUCT_FEATURE_WHEN, /* cExprAdvPL */) )
		oStruZEA:SetProperty( 'ZEA_CCORES', MODEL_FIELD_WHEN, FwBuildFeature(STRUCT_FEATURE_WHEN, /* cExprAdvPL */) )
	EndIf
	
	//Se for a rotina de de Importação de bens, torno os campos ZEA_LOCAL, ZEA_CODRES e ZEA_FORNEC editáveis
	If FunName() == 'SF0105F'
		oStruZEA:SetProperty( 'ZEA_LOCAL' , MODEL_FIELD_WHEN, FwBuildFeature(STRUCT_FEATURE_WHEN, /* cExprAdvPL */) )
		oStruZEA:SetProperty( 'ZEA_PRCAQS', MODEL_FIELD_WHEN, FwBuildFeature(STRUCT_FEATURE_WHEN, /* cExprAdvPL */) )
		oStruZEA:SetProperty( 'ZEA_CODRES', MODEL_FIELD_WHEN, FwBuildFeature(STRUCT_FEATURE_WHEN, /* cExprAdvPL */) )
		oStruZEA:SetProperty( 'ZEA_CCORES', MODEL_FIELD_WHEN, FwBuildFeature(STRUCT_FEATURE_WHEN, /* cExprAdvPL */) )
	EndIf

Return oModel

/*/{Protheus.doc} ViewDef
	Definição da visualização de dados da rotina do cadastro de bens duráveis
	
@author Sergio Ricardo Leite Salustiano
@since 14/09/2016

@type function
/*/
Static Function ViewDef()

	Local oModel := FWloadModel('SF0102S')
	Local oStruZEA := FWFormStruct(2,'ZEA')
	Local oView := FWFormView():New()

	oView:SetModel(oModel)
	oView:AddField('VIEW_ZEA',oStruZEA,'ZEAMASTER')
	oView:CreateHorizontalBox('TELA',100)
	oView:SetOwnerView('VIEW_ZEA', 'TELA')
	
	//Metodo que seta um bloco de código para verificar se a janela deve ou não ser fechada após a execução do botão OK na View.
	oView:SetCloseOnOk( {|| .t.} )

Return oView


/*/{Protheus.doc} F0102SMPOS
	Função para gravação manual do formulário de cadastro 

@author Sergio Ricardo Leite Salustiano
@since 14/09/2016
@param oModel, object, Modelo de dados ativo

@type function
/*/
Static Function F0102SMPOS( oModel )
	Local aArea			:= GetArea()
	Local cCodBem 	    := oModel:GetValue( 'ZEAMASTER', 'ZEA_CODIGO' )
	Local dDTAquis 	    := oModel:GetValue( 'ZEAMASTER', 'ZEA_DTAQUI' )
	Local cOrigem		:= oModel:GetValue( 'ZEAMASTER', 'ZEA_ORIGEM' )
	Local lRet			:= .T.
	Local nOperation 	:= oModel:GetOperation()
	Local aCposCab      := {}
	Local cQry          := " "
	Local cSeq          := " "

	If nOperation == MODEL_OPERATION_INSERT

		DbSelectArea("ZEA")
		DbSetOrder(1)
		
		//Caso o código do bem já exista, atualizo por um código novo. 
		If MsSeek(xFilial("ZEA") + cCodBem)
			cCodBem := U_NextZEAC()
			
			oModel:SetValue( 'ZEAMASTER', 'ZEA_CODIGO', cCodBem )
			
			Help( , , 'Help', , 'O codigo do bem foi atualizado para [ ' + cCodBem + ' ].', 1, 0)
		EndIf
		
		cQry := " "
		cQry += "SELECT MAX(ZEB_SEQ) SEQ FROM " + RETSQLNAME("ZEB") + " ZEB "
		cQry += "WHERE ZEB_CODBEM = '" + cCodBem + "'"	
		cQry += "AND ZEB.D_E_L_E_T_ <> '*' "	

		TCQUERY cQry NEW ALIAS "TRBZEA"

		DBSELECTAREA("TRBZEA")

		cSeq := PADL(TRBZEA->SEQ,3)
		aCposCab := {}
		aAdd(aCposCab, {'ZEB_FILIAL', xFilial()             	})		
		aAdd(aCposCab, {'ZEB_CODBEM', cCodBem               	})	
		aAdd(aCposCab, {'ZEB_SEQ'   , SOMA1(cSeq)           	})
		aAdd(aCposCab, {'ZEB_DTMOV' , dDTAquis              	})
		
		If AllTrim(cOrigem) == AllTrim('SF0105S')
			aAdd(aCposCab, {'ZEB_TIPMOV', "T"                 		})
			aAdd(aCposCab, {'ZEB_HISTOR', "TRANSFERENCIA DO BEM"    })
		Else
			aAdd(aCposCab, {'ZEB_TIPMOV', "A"                 	})
			aAdd(aCposCab, {'ZEB_HISTOR', "AQUISIÇÃO DO BEM" 	})
		EndIf 

		If U_IMPM01S('ZEB',aCposCab,'SF0103S',3)
			lRet := .T.
		Else
			lRet := .F.
			Help( , , 'Help', , 'Não foi possível gravar o histórico do bem.', 1, 0)
		EndIf

		TRBZEA->(DBCLOSEAREA())
	EndIf
	
	If lRet == .T.
		FWFormCommit( oModel )
	EndIf

	RestArea(aArea)

Return lRet

/*/{Protheus.doc} fTudoOk
	Função para pós-validação do formulário de cadastro
	
@author Sergio Ricardo Leite Salustiano
@since 14/09/2016
@param oModel, object, Modelo de dados ativo

@type function
/*/
Static Function fTudoOk( oModel )

Local lRet		:= .T.
/*
Local cLocal	:= oModel:GetValue('ZEAMASTER', 'ZEA_LOCAL')
Local nOper		:= oModel:GetOperation()
*/
Return lRet

/*/{Protheus.doc} NextZEAC
@description Função para preenchimento do campo código do bem Onde: O primeiro caracter é igual o segundo caracter da filial logada. Os demais são o código sequencial.
@author franklin.oliveira
@since 29/08/2016
@type function
@history 23/01/2019, Alan Teles de Oliveira, Alterado regra de controle da sequencia numérica respeitando a mesma ordem definida no bem imobilizado.
@Return cZEACodigo, Caracter, Código do bem
/*/
User Function NextZEAC()

	Local aArea  		:= GetArea()
	Local cZEACodigo	:= ""
	Local cQueryZEA 	:= ""
	Local nPosCod		:= 0
	Local aFilCod		:= {}

	aFilCod := {{'01MT', '5'}, {'02MT', '2'}, {'03MT', '3'}, {'04MT', '4'}, {'05MT', '6'}}
	
	dbSelectArea("ZEA")
	
	cQueryZEA := " SELECT MAX(ZEA_CODIGO) ZEA_CODIGO "
	cQueryZEA += " FROM " + RetSqlName("ZEA")
	cQueryZEA += " WHERE SUBSTR(ZEA_FILORI, 1, 4) = '" + LEFT(cFilAnt, 4) + "' "
	cQueryZEA += " AND D_E_L_E_T_ = ' ' "

	cQueryZEA := ChangeQuery(cQueryZEA)
	
	If Select("MAXZEA") > 0
		dbSelectArea("MAXZEA")
		dbCloseArea()
	Endif
	
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQueryZEA),"MAXZEA")	
	
	dbSelectArea("MAXZEA")
	dbGoTop()
	
	If Empty(MAXZEA->ZEA_CODIGO)

		nPosCod 	:= aScan(aFilCod, {|x| x[1] == SubStr(cFilAnt, 1, 4)})
		cZEACodigo 	:= aFilCod[nPosCod, 2] + StrZero(1, Len(ZEA->ZEA_CODIGO) - 1)	

	Else
		cZEACodigo := Soma1(MAXZEA->ZEA_CODIGO)
	EndIf

	RestArea(aArea)

Return(cZEACodigo)