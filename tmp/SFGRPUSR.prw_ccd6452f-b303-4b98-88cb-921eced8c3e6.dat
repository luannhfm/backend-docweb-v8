#INCLUDE 'PROTHEUS.CH'


/*/{Protheus.doc} SFGRPUSR
@description Classe responsavel por controlar as informações.

@author Alan Teles de Oliveira
@since 19/12/2018
@version 11.8

/*/
Class SFGRPUSR 

	data cUsuario
	data cGrupo
	data cEmail
	data aGrupo
	data lBloq
	data cFil
	data cMat
	
	Method New() Constructor
	Method SetGrupo()
	Method GetGroup()
	Method ValidGroup()
	Method HasInGroup()

EndClass


/*/{Protheus.doc} New
@description Metodo Construtor.

@author Alan Teles de Oliveira
@since 19/12/2018 
@version 11.8

@param p_cUsuario, character, Codigo do usuario do sistema.

/*/
Method New(p_cUsuario) Class SFGRPUSR

	default p_cUsuario := __cUserID
	
	self:cUsuario := p_cUsuario
	self:lBloq := .f.
	self:cFil := ""
	self:cMat := ""
	self:cGrupo := ""
	self:aGrupo := {}
	self:SetGrupo()

Return self


/*/{Protheus.doc} SetGrupo
@description Identifica se o usuário está adicionado em determinado grupo.
			Seta o atributo de grupo com o cadastrado no usuario.

@author Alan Teles de Oliveira
@since 19/12/2018
@version 11.8

@param p_cUserId, caracter, código do usuario a ser pesquisado.

@type function
/*/
Method SetGrupo(p_cUserId) Class SFGRPUSR
	
	local aUsuario 	:= {}
	local aGrupos 	:= {}
	
	default p_cUserId := self:cUsuario
	
	PswOrder(1)
	if (PswSeek(p_cUserId, .t.) )
		aUsuario := PswRet(1)
		aGrupos := aUsuario[1][10]
		self:aGrupo := aGrupos
		self:lBloq := aUsuario[1][17]
		self:cFil := SubStr(aUsuario[1][22],3,TamSx3("A1_FILIAL")[1])
		self:cMat := Right(aUsuario[1][22],TamSx3("RA_MAT")[1])
		self:cGrupo := ""
		
		for nX:= 1 to Len(aGrupos)
			
			self:cGrupo += "|"+aGrupos[nX]
		
		next
		
	endif
	
Return


/*/{Protheus.doc} GetGroup
@description Retorna o(s) grupo(s) do usuario.

@author Alan Teles de Oliveira
@since 19/12/2018
@version 11.8

@param p_cUserId, character, Codigo do usuario.
@return cGrupo, Codigo do(s) grupo(s) que o usuario esta vinculado.

@type function
/*/
Method GetGroup(p_cUserId) Class SFGRPUSR 

	local cGrupo := ""
	local aUsuario := {}
	local aGrupos := {}
	
	default p_cUserId := ""
	
	if !Empty(p_cUserId)
	
		PswOrder(1)
		if (PswSeek(p_cUserId, .t.) )
			aUsuario    := PswRet(1)
			aGrupos     := aUsuario[1][10]
			
			for nX:= 1 to Len(aGrupos)
				
				cGrupo += "|"+aGrupos[nX]
			
			next
			
		endif
		
	else
	
		cGrupo := self:cGrupo
	
	endif

Return cGrupo


/*/{Protheus.doc} ValidGroup
@description Valida o grupo do usuario.

@author Alan Teles de Oliveira
@since 19/12/2018
@version 11.8

@param p_cGrupo, caracter, código grupo a ser pesquisado.

@return lRet, Valida se o usuario pertence ao grupo passado.

@type function
/*/
Method ValidGroup(p_cGrupo) Class SFGRPUSR

	local lRet := .f.

	default p_cGrupo := ""
	
	if p_cGrupo $ self:cGrupo
		lRet := .t.
	endif

Return lRet


//-------------------------------------------------------------------
/*/{Protheus.doc} function
@description Valida se os grupos passados separados por '|', estão no cadastro de usuário.

@author  Alan Teles de Oliveira
@since   19/12/2018
@version 11.8

@param p_cGrupos, character, Grupos seraparados por '|' para verificar se o usuario pertence.

@return lRet, logical, Retorno se pertence ou não.
/*/
//-------------------------------------------------------------------
Method HasInGroup(p_cGrupos) Class SFGRPUSR

	local lRet := .f.
	local aGrupos := {}
	local nX := 0

	default p_cGrupos := ""

	aGrupos := Strtokarr2( p_cGrupos, "|", .t.)

	for nX:=1 to Len(aGrupos)

		if aGrupos[nX] $ self:cGrupo

			lRet := .t.
			exit

		endif

	next

Return lRet 