#INCLUDE 'PROTHEUS.CH'
#INCLUDE 'RWMAKE.CH'
#INCLUDE 'FONT.CH'
#INCLUDE 'COLORS.CH'
#INCLUDE 'TOPCONN.CH'
#Include "TBICONN.CH"

/* ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa  ³ SF06A44X ³ Autor ³ Leonardo P. de Castro ³ Data ³ 04/11/09 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Locacao   ³                  ³Contato ³                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Rotina para geracao da lista de cobranca. (Via Schedule)    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Aplicacao ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Analista Resp.³  Data  ³                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ³  /  /  ³                                               ³±±
±±³              ³  /  /  ³                                               ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

User Function SF06A44X(_aParams)

Local _lRet 	:= .T.
Local _lGera 	:= .F.
Local _aAreZAE
Local _aAreZAJ
Local _cQuery 	:= ""
Local _nReg 	:= 0
//Local _aParams 	:= {} //variavel para tratar o retorno da funcao SPCGE001
Local _aParRot 	:= {} //variavel para tratar o retorno da funcao SPCGE001
Local _dData   := Date()
Local _nDia 	:= DOW(_dData) // 1 - Domingo,..., 7 - Sabado
Local _aAgenda := {}
Local _cFilial := ""
//Local _dData   := StoD("//")
Local _cHora   := ""
Local _cCodFas := ""
Local _cCodCli := ""
Local _cLojCli := ""
Local _cNomCli := ""
Local _cCpf    := ""
Local _cAten   := ""
Local _nTotDiv := 0
Local _cFilDon := ""
Local _cMotAte := ""
Local _cMotPag := ""
Local _cFasPag := ""
Local _cMotTrg := ""
Local _cFasTrg := ""
Local _nMaxDia := 0
Local _nCount  := 0
//Walmir Junior 01/09/2020 - Criar inteligência para gerar registro na fase de SMS e na fase de TELA DE COBRANÇA também.
Local _aFases  := {}
Local _nx  := 0

ConOut("SF06A44X -> Inicio da Rotina")

//Executado atraves de schedule
If Valtype( _aParams ) != "U"
	Prepare Environment Empresa _aParams[1] Filial _aParams[2] Tables 'SE1','ZAJ','ZAO' MODULO "FIN"
EndIf
//Prepare Environment Empresa '01' Filial '01MT0001' Tables 'SE1','ZAJ','ZAO' MODULO "FIN"

_cMotPag := AllTrim(GetMV("MV_MOTPAG",.F.))
_cFasPag := AllTrim(GetMV("MV_FASEPAG",.F.))
_cMotTrg := "XX"//AllTrim(GetMV("MV_MOTTRG",.F.))
_cFasTrg := "XX"//AllTrim(GetMV("MV_FASETRG",.F.))

//Obtenho os parametros da ZAO
_aParRot := U_TcParam()

//Verifico se é necessario gerar lista para este dia
If _nDia >= 2 .And. _nDia <= 6
	_lGera := .T.
ElseIf (_nDia = 1 .Or. _nDia = 7) .And. _aParRot[1] = "3"
	_lGera := .T.
ElseIf _nDia = 1 .And. _aParRot[1] = "2"
	_lGera := .T.
ElseIf _nDia = 7 .And. _aParRot[1] = "1"
	_lGera := .T.
EndIF

If Valtype( _aParams ) != "U"
	If !_lGera
		Reset Environment
		Return()
	EndIF
EndIf

//Buscar a data maxima de atraso dos titulos que serao analisados
DbSelectArea("ZAE")
ZAE->(DbSetOrder(1))
ZAE->(DbGoTop())
While ZAE->(!Eof())

	If (ZAE->ZAE_MSBLQL $ 'N| ') .and. (ZAE->ZAE_PRZATE > _nMaxDia)
		_nMaxDia := ZAE->ZAE_PRZATE
	EndIF

	ZAE->(DbSkip())
EndDo

ConOut("SF06A44X -> Inicio do comando SQL (TCLI) ")

//Obtenho a carteira de clientes para analisar
_cQuery := " SELECT " + CRLF
_cQuery += "  		E1_CLIENTE, E1_LOJA, A1_NOME, A1_CGC, E1_SALDO AS E1_VALOR, E1_ATRASO, ZEF_RECORR, PROXATE " + CRLF
_cQuery += " FROM " + CRLF
_cQuery += "  		(SELECT " + CRLF
_cQuery += "  				E1_CLIENTE, E1_LOJA, A1_NOME, A1_CGC, ZEF_RECORR, SUM(E1_SALDO) AS E1_SALDO, SUM(E1_VALOR) E1_VALOR, MAX(E1_ATRASO) E1_ATRASO, NVL((SELECT MAX(ZAK_DTPATE) FROM ZAK010 WHERE ZAK_CLIENT = E1_CLIENTE AND ZAK_LOJA = E1_LOJA AND D_E_L_E_T_ = ' '),'20000101') AS PROXATE " + CRLF
_cQuery += "  		 FROM " + CRLF
_cQuery += "  				(SELECT " + CRLF
_cQuery += "  						E1_CLIENTE, E1_LOJA, SUM(E1_SALDO) AS E1_SALDO, NVL(ZEF_RECORR, 'N') AS ZEF_RECORR, SUM(E1_VALOR) E1_VALOR, A1_NOME, A1_CGC, " + CRLF
_cQuery += "  						ROUND(SYSDATE - Case When E1_VENCREA = ' ' Then Sysdate Else TO_DATE(E1_VENCREA,'YYYYMMDD') END ) AS E1_ATRASO " + CRLF
_cQuery += "  					FROM " + CRLF
_cQuery +=  						RetSqlName("SE1") + " E1 " + CRLF

_cQuery += "  					INNER JOIN  " + CRLF
_cQuery +=  						RetSqlName("SA1") + " A1 " + CRLF
_cQuery += "  					ON A1_FILIAL = '" + xFilial("SA1") + "' AND A1_COD = E1_CLIENTE AND A1_LOJA = E1_LOJA AND A1.D_E_L_E_T_ <> '*'  " + CRLF

_cQuery += "					LEFT JOIN " + RetSqlName("ZEF") + " ZEF " + CRLF
_cQuery += "  					ON E1_FILIAL =  ZEF_FILIAL " + CRLF
_cQuery += "						AND E1_NUM = ZEF_NUM " + CRLF
_cQuery += "						AND E1_CLIENTE = ZEF_CLIENT " + CRLF
_cQuery += "						AND E1_LOJA = ZEF_LOJA " + CRLF
_cQuery += "						AND E1_PREFIXO = ZEF_PREFIX " + CRLF
_cQuery += "						AND E1_PARCELA = ZEF_PARCEL " + CRLF
_cQuery += "						AND E1_TIPO = ZEF_TIPO " + CRLF
_cQuery += "						AND ZEF.D_E_L_E_T_ <> '*' " + CRLF

_cQuery += "  					WHERE " + CRLF
_cQuery += "  						E1_FILIAL  BETWEEN '" + _aParRot[9] + "' AND '" + _aParRot[10] + "' AND " + CRLF
_cQuery += "  	 					E1_TIPO    IN (" + _aParRot[8] + ")	AND " + CRLF
_cQuery += "  	 					E1_SALDO   >  0         AND " + CRLF
_cQuery += "  	 					E1_XCOBJ  !=  'S'       AND " + CRLF
//Walmir Junior 28/08/2020 - Não buscar títulos sem lançamento financeiro no SGE.
_cQuery += "  	 					E1_XIDCNAB !=  ' '       AND " + CRLF
_cQuery += "  	 					E1.D_E_L_E_T_ <> '*' 	 AND" + CRLF
_cQuery += "  	 					A1.A1_XCOBRAN <> '2' " + CRLF

_cQuery += "  					GROUP BY " + CRLF
_cQuery += "  							E1_CLIENTE, E1_LOJA, A1_NOME, A1_CGC, NVL(ZEF_RECORR, 'N'), ROUND(SYSDATE - Case When E1_VENCREA = ' ' Then Sysdate Else TO_DATE(E1_VENCREA,'YYYYMMDD') END )) T01 " + CRLF

//Se for valor total, retirar este where
If _aParRot[2] = "1"
	_cQuery += " 		  WHERE " + CRLF
	_cQuery += "  					E1_ATRASO > 0 AND E1_ATRASO < " + Str(_nMaxDia) +" AND ZEF_RECORR != 'S' " + CRLF
EndIF

_cQuery += "  		  GROUP BY " + CRLF
_cQuery += "  					E1_CLIENTE, E1_LOJA, A1_NOME, A1_CGC, ZEF_RECORR) T02 " + CRLF
_cQuery += " WHERE " + CRLF
_cQuery += " TO_DATE(PROXATE,'YYYYMMDD') <= SYSDATE" + CRLF
_cQuery += "  ORDER BY " + CRLF
_cQuery += "  		  E1_ATRASO ASC " + CRLF

_cQuery := ChangeQuery(_cQuery)

If Select("TCLI") > 0
	DbSelectArea("TCLI")
	TCLI->(DbCloseArea())
EndIf

TcQuery _cQuery New Alias TCLI
ConOut("SF06A44X -> Fim do comando SQL (TCLI)")

TCLI->(DbEval({|| _nReg++}))
ConOut("SF06A44X -> Numero de cliente encontrados: " + StrZero(_nReg,10))

TCLI->(DbGoTop())

ConOut("SF06A44X -> Inicio do comando de criacao do array...")


While TCLI->(!Eof())

	_nCount++
	If Mod(_nCount, 100) = 0
		ConOut(Str(_nCount))
	EndIf

	_cFilial := xFilial("ZAJ")
	_cHora   := ""
	_cCodFas := ""
	_cCodCli := ""
	_cLojCli := ""
	_cNomCli := ""
	_cCpf    := ""
	_cAten   := ""
	_nTotDiv := TCLI->E1_VALOR
	_cFilDon := ""

	//Verifico se cliente deve ir para lista cobranca...
// inserido clausula no where para selecao de cliente que poder ser cobrados
//	DbSelectArea("SA1")
//	SA1->(DbSetOrder(1))
//	If SA1->(DbSeek(xFilial("SA1") + TCLI->E1_CLIENTE + TCLI->E1_LOJA))
		/*If SA1->A1_COBRANC = "N"
			TCLI->(DbSkip())
			Loop
		EndIF*/
//	Else
//		TCLI->(DbSkip())
//		Loop
//	EndIF

	//VALIDA PROXIMO ATENDIMENTO
	// If !Empty(TCLI->PROXATE) .and. sToD(TCLI->PROXATE) <= dDataBase
	// 	TCLI->(DbSkip())
	// 	Loop
	// EndIf

	//Verifico se existe agendamento para o cliente
	//Deve ser verificado o agendamento com data maior, ou seja, se o cliente tiver agendamento para o dia 1 e 5, ele só vai pra lista no dia 5
	_cQuery := ""
	_cQuery += " SELECT * FROM " + RetSqlName("ZAK")
	_cQuery += " WHERE ROWNUM = 1 AND "
	_cQuery += " ZAK_CLIENT+ZAK_LOJA = '" + TCLI->E1_CLIENTE + TCLI->E1_LOJA + "' AND "
	_cQuery += " ZAK_DTPATE >= '" + DtoS(_dData) + "' AND  "
	_cQuery += " D_E_L_E_T_ <> '*' "
	_cQuery += " ORDER BY ZAK_DTPATE DESC "

	If Select("tAte") > 0
		DbSelectArea("tAte")
		tAte->(DbCloseArea())
	EndIf

	TcQuery _cQuery New Alias tAte

	If !Empty(tAte->ZAK_COD)
		//Se atendimento ao cliente estiver agendado para um dia diferente do dia que está sendo gerada a lista, não gerar a lista
		If StoD(tAte->ZAK_DTPATE) != _dData
			TCLI->(DbSkip())
			Loop
		EndIF
	EndIF

	//Obtenho dados do cliente...
	_cCodCli := TCLI->E1_CLIENTE
	_cLojCli := TCLI->E1_LOJA
	_cNomCli := TCLI->A1_NOME
	_cCpf	 := TCLI->A1_CGC

	//Obtenho dados da fase...
	DbSelectArea("ZAE")
	ZAE->(DbSetOrder(1))
	_aFases := {}

	//Seleciona o último atendimento do Cliente
	_cQuery := " SELECT ZAK_CODMOT "
	_cQuery += " FROM " + RetSqlName("ZAK")
	_cQuery += " WHERE ROWNUM = 1 AND ZAK_CLIENT||ZAK_LOJA = '" + TCLI->E1_CLIENTE + TCLI->E1_LOJA + "' AND D_E_L_E_T_ = ' '  "
	_cQuery += " ORDER BY ZAK_COD DESC "

	If Select("TZAK") > 0
		DbSelectArea("TZAK")
		TZAK->(DbCloseArea())
	EndIf

	TcQuery _cQuery New Alias TZAK

	If !Empty(TZAK->ZAK_CODMOT)
		//Gera a cobrança na fase definida no parâmetro MV_FASEPAG onde o código de atendimento	contém no parâmetro MV_MOTPAG
		If  TZAK->ZAK_CODMOT $ _cMotPag
			_cHora := "00:00"
			_cCodFas := _cFasPag
		EndIf
		//Gera cobrança na fase definida no parâmetro MV_FASETRG onde o código de atendimento contém no parâmetro MV_MOTTRG
		If 	TZAK->ZAK_CODMOT $ _cMotTrg
			_cHora := "00:00"
			_cCodFas := _cFasTrg
		EndIf
	EndIf
	TZAK->(DbCloseArea())
	
	//Valida se a fase existe e não esta bloqueada
	If !Empty(_cCodFas) .And. ZAE->(DbSeek(xFilial("ZAE") + _cCodFas))
		If ZAE->ZAE_MSBLQL = 'S'
			_cCodFas := ""
		Else
			//Wjr - Alteração no controle de fases da lista de cobranças, para permitir gerar registro no envio de SMS e também na TELA DE COBRANÇA.
			aAdd(_aFases, _cCodFas)
		EndIf
	Else
		_cCodFas := ""
	EndIf
	
	DbSelectArea("ZAE")
	ZAE->(DbSetOrder(1)) //ZAE_FILIAL + ZAE_COD
	ZAE->(DbGoTop())
	
	If Empty(_cCodFas)
		While ZAE->(!Eof())
	
			If ZAE->ZAE_MSBLQL = 'S'
				ZAE->(DbSkip())
				Loop
			EndIF
	
			If (TCLI->E1_ATRASO >= ZAE->ZAE_PRZDE .And. TCLI->E1_ATRASO <= ZAE->ZAE_PRZATE)
				_cHora := "00:00"
				_cCodFas := ZAE->ZAE_COD
				//Wjr - Alteração no controle de fases da lista de cobranças, para permitir gerar registro no envio de SMS e também na TELA DE COBRANÇA.
				If _cFasPag != _cCodFas
					aAdd(_aFases, _cCodFas)
				EndIf
				
				//Por loja, obtenho a filial do titulo com o maior numero de dias de atraso
				If ZAE->ZAE_PORLOJA = 'S'
	
					_cQuery := " SELECT "
					_cQuery += " 		E1_FILIAL"
					_cQuery += " FROM "
					_cQuery +=  		RetSqlName("SE1")
					_cQuery += " WHERE ROWNUM = 1 AND "
					_cQuery += " 		E1_CLIENTE + E1_LOJA = '" + TCLI->E1_CLIENTE + TCLI->E1_LOJA + "' AND "
					_cQuery += "  		E1_TIPO    IN (" + _aParRot[8] + ")	AND "
					_cQuery += " 		E1_SALDO   >  0         AND  "
					_cQuery += " 		D_E_L_E_T_ <> '*' "
					_cQuery += " ORDER BY "
					_cQuery += " 		E1_VENCREA "
					_cQuery := ChangeQuery(_cQuery)
	
					If Select("TFIL") > 0
						DbSelectArea("TFIL")
						TFIL->(DbCloseArea())
					EndIf
	
					TcQuery _cQuery New Alias TFIL
	
					_cFilDon := TFIL->E1_FILIAL
				EndIF
			EndIF
			ZAE->(DbSkip())
		EndDo
	EndIf
	//Nao encontrei, gero log e passo para proximo registro
	If Empty(_cCodFas)
		ZAE->(DbCloseArea())
		TCLI->(DbSkip())
		Loop
	EndIf

	//Obtenho dados do ultimo atendimento...
	_cQuery := " SELECT "
	_cQuery += " 		ZAJ_DATA, ZAJ_HORA "
	_cQuery += " FROM "
	_cQuery +=  		RetSqlName("ZAJ")
	_cQuery += " WHERE ROWNUM = 1 AND "
	_cQuery += " 		ZAJ_CLIENT = '" + TCLI->E1_CLIENTE + "' AND "
	_cQuery += " 		ZAJ_LOJA = '" + TCLI->E1_LOJA + "' AND "
	_cQuery += " 		ZAJ_ATEND = 'S' AND "
	_cQuery += " 		D_E_L_E_T_ <> '*' "
	_cQuery += " ORDER BY "
	_cQuery += " 		ZAJ_DATA DESC, ZAJ_HORA DESC "
	_cQuery := ChangeQuery(_cQuery)

	If Select("TZAJ") > 0
		DbSelectArea("TZAJ")
		TZAJ->(DbCloseArea())
	EndIf

	TcQuery _cQuery New Alias TZAJ

	_cAten := SubStr(TZAJ->ZAJ_DATA,7,2) + "/" + SubStr(TZAJ->ZAJ_DATA,5,2) + "/" + SubStr(TZAJ->ZAJ_DATA,3,2) + " " + TZAJ->ZAJ_HORA

	TZAJ->(DbCloseArea())

	// Incluir no array somente se o valor da divida for maior que ZERO
	If _nTotDiv > 0
		
		For _nx := 1 to Len(_aFases)
		
			DbSelectArea("ZAJ")
			ZAJ->(DbSetOrder(1))
	
			If ZAJ->(!DbSeek(xFilial("ZAJ") + DtoS(_dData) + _cHora + PadR( _aFases[_nx], TamSX3("ZAJ_CODFAS")[1] ) + _cCodCli + _cLojCli ))
					If RecLock("ZAJ",.T.)
							Replace ZAJ->ZAJ_FILIAL  With _cFilial
							Replace ZAJ->ZAJ_DATA    With _dData
							Replace ZAJ->ZAJ_HORA    With _cHora
							Replace ZAJ->ZAJ_CODFASE With _aFases[_nx]
							Replace ZAJ->ZAJ_CLIENTE With _cCodCli
							Replace ZAJ->ZAJ_LOJA    With _cLojCli
							Replace ZAJ->ZAJ_NOME    With _cNomCli
							Replace ZAJ->ZAJ_CNP     With _cCpf
							Replace ZAJ->ZAJ_UTLATEN With _cAten
							Replace ZAJ->ZAJ_VLRDIV  With _nTotDiv
							Replace ZAJ->ZAJ_ATEND   With "N"
							Replace ZAJ->ZAJ_FILDONO With _cFilDon
							ZAJ->(MsUnLock())
					EndIF
			EndIF
			
		Next
		
	EndIf

	ZAE->(DbCloseArea())
	ZAJ->(DbCloseArea())

	TCLI->(DbSkip())
EndDo

ConOut("SF06A44X -> Fim do comando de criacao do array...")


/*


ConOut("SF06A44X -> Inicio do comando de gravacao da tabela ZAJ...")

If !Empty(_aAgenda)
	For _nX := 1 To Len(_aAgenda)
		DbSelectArea("ZAJ")
		ZAJ->(DbSetOrder(2))

			If ZAJ->(!DbSeek(xFilial("ZAJ") + _aAgenda[_nX,05] + _aAgenda[_nX,06] + DtoS(_aAgenda[_nX,02])))
				If RecLock("ZAJ",.T.)
						Replace ZAJ->ZAJ_FILIAL  With _aAgenda[_nX,01]
						Replace ZAJ->ZAJ_DATA    With _aAgenda[_nX,02]
						Replace ZAJ->ZAJ_HORA    With _aAgenda[_nX,03]
						Replace ZAJ->ZAJ_CODFASE With _aAgenda[_nX,04]
						Replace ZAJ->ZAJ_CLIENTE With _aAgenda[_nX,05]
						Replace ZAJ->ZAJ_LOJA    With _aAgenda[_nX,06]
						Replace ZAJ->ZAJ_NOME    With _aAgenda[_nX,07]
						Replace ZAJ->ZAJ_CNP     With _aAgenda[_nX,08]
						Replace ZAJ->ZAJ_UTLATEN With _aAgenda[_nX,09]
						Replace ZAJ->ZAJ_VLRDIV  With _aAgenda[_nX,10]
						Replace ZAJ->ZAJ_ATEND   With _aAgenda[_nX,11]
						Replace ZAJ->ZAJ_FILDONO With _aAgenda[_nX,12]
					ZAJ->(MsUnLock())
				EndIF
			EndIF
		//ConOut("SF06A44X -> Registro " + StrZero(_nX,10) + " de " + StrZero(Len(_aAgenda),10) +  " gravado com sucesso!")
	Next _nX

	//Verifica se existe agendamentos para este dia e altera a lista gerada.
Else
	ConOut("SF06A44X -> Nenhum registro foi encontrado para gravacao...")
EndIF

*/

ConOut("SF06A44X -> Fim do comando de gravacao da tabela ZAJ...")
ConOut("SF06A44X -> Fim da Rotina")

If Valtype( _aParams ) != "U"
	Reset Environment
EndIf
Return()
