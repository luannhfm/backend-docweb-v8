#Include 'Protheus.ch'

/*/{Protheus.doc} SF73M01F
Função para realizar carga no cadastro de clientes	
			     	
@author 	Franklin de Brito de Oliveira
@since 	01/11/2017
@version 	1.0		

@return Nil, Nulo

/*/
User Function SF73M01F()

Local _lRet		:= .F.
Local nOpcoes   := GETF_LOCALHARD+GETF_NETWORKDRIVE

Private _aEstrut	:= {}
Private _cArqTxt	:= Space(50)
Private _cMemo  	:= ""

Private lMsErroAuto := .F.

	//_cArqTxt := U_SFXX01J('Importacao de Clientes','Arquivos csv (*.csv) |*.csv|')
	_cArqTxt :=  cGetFile('Arquivos csv (*.csv) |*.csv|', "Selecione o arquivo CSV", , , .T., nOpcoes )
	
	//Abre o Arquivo
	nHdl    := fOpen(_cArqTxt,68)

	If nHdl == -1
		MsgAlert("O arquivo de nome "+_cArqTxt+" nao pode ser aberto! Verifique os parametros.","Atencao!")
		Return
	Endif

	Processa({ |lEnd| _aEstrut := SA1CSV(_cArqTxt) 	}, "LENDO ARQUIVO CSV DE CLIENTE")
	Processa({ |lEnd| _lRet := IMPSA1(_aEstrut) 	}, "ATUALIZANDO REGISTROS")


	MemoWrite( "C:\plog\csv\clientes_" + cFilAnt + ".TXT", _cMemo )
	MsgAlert("FIM DA IMPORTACAO DO CADASTRO DE CLIENTES")

Return( _lRet )

/** {Protheus.doc} IMPSA1
Funcao que realiza a importacao do cliente

@param: 	_aEstrut, Array com a estrutura dos campos
@author: 	Jose Leite de Barros Neto
@since: 	28/03/2014
@Uso: 		SFIEMT
*/
Static Function IMPSA1(_aEstrut)
	
	Local _lRet := .F.
	Local _nContador	:= 0
	Local _i 			:= 0
	Local _cMsgAlt		:= "Carga Arrecadacao - por: "+ AllTrim(cUserName) + " - " + DtoC(dDataBase) + " - " + AllTrim(Time())
	Local nRec			:= Len(_aEstrut)-1

	For _i := 2 to Len(_aEstrut)
	
		ProcRegua(nRec)
	
		//A1_CGC
		_cCGC	:= StrTran( StrTran( StrTran( _aEstrut[_i][1],".","" ),"/","" ),"-","" )
		
		//A1_NOME
		_cNome	:= AllTrim(_aEstrut[_i][2])
		
		//A1_NREDUZ
		_cNReduz	:= AllTrim(_aEstrut[_i][3])
		
		//A1_XSITREC
		_cSitRec := AllTrim(_aEstrut[_i][4])
		
		//A1_DTNASC
		_dDtNas	:= CtoD(_aEstrut[_i][5])
		
		//A1_CNAE
		_cCnae	:= AllTrim(_aEstrut[_i][6]) 
		
		//A1_XDSCNAE
		_cDscCnae := AllTrim(Posicione("CC3",1,xFilial("CC3") + PadR(_cCnae,TAMSX3("CC3_COD")[1]),"CC3_DESC"))
		
		//A1_END
		_cEnd := AllTrim(_aEstrut[_i][7])
		
		//A1_BAIRRO
		_cBairro := AllTrim(_aEstrut[_i][8])
		
		//A1_CXPOSTA
		_cCxPost := AllTrim(_aEstrut[_i][9])
		
		//A1_CEP
		_cCEP := AllTrim( StrTran(StrTran(StrTran( _aEstrut[_i][10],".","" ),"/",""),"-","" ))
		
		//A1_EST
		_cEst	:= AllTrim(_aEstrut[_i][12])

		//A1_MUN
		_cMun	:= _aEstrut[_i][11]

		//A1_COD_MUN
		_cCodMun	:= Posicione("CC2", 2, xFilial("CC2") + PadR(_cMun, TamSX3("CC2_MUN")[1]), "CC2_CODMUN")
		
		//A1_ENDCOB
		If Empty( AllTrim(_aEstrut[_i][13]) )
			_cEndCob := _cEnd
		Else
			_cEndCob := AllTrim(_aEstrut[_i][13])
		EndIf
		
		//A1_BAIRROC
		If Empty( AllTrim(_aEstrut[_i][14]) )
			_cBairroC := _cBairro
		Else
			_cBairroC := AllTrim(_aEstrut[_i][14])
		EndIf
		
		//A1_CEPC
		If Empty( AllTrim(StrTran(StrTran(StrTran( _aEstrut[_i][15],".","" ),"/",""),"-","" )) )
			_cCEPC := _cCEP
		Else
			_cCEPC := AllTrim(StrTran(StrTran(StrTran( _aEstrut[_i][15],".","" ),"/",""),"-","" ))
		EndIf
		
		//A1_ESTC
		If Empty( AllTrim(_aEstrut[_i][17]) )
			_cEstC := _cEst
		Else
			_cEstC := AllTrim(_aEstrut[_i][17])
		EndIf
		
		//A1_MUNC
		If Empty( AllTrim(_aEstrut[_i][16]) )
			_cMunC := _cMun
		Else
			_cMunC := AllTrim(_aEstrut[_i][16])
		EndIf
		
		//A1_XPRDIN1
		_cPrdIn1 := AllTrim(_aEstrut[_i][18])
		
		//A1_XPRDIN2
		_cPrdIn2 := AllTrim(_aEstrut[_i][19])
		
		//A1_XPRDIN3
		_cPrdIn3 := AllTrim(_aEstrut[_i][20])
		
		//A1_XMATPR1
		_cMatPr1 := AllTrim(_aEstrut[_i][21])
		
		//A1_XMATPR2
		_cMatPr2 := AllTrim(_aEstrut[_i][22])
		
		//A1_XMATPR3
		_cMatPr3 := AllTrim(_aEstrut[_i][23])
		
		//A1_XPRRES1
		_cPrRes1 := AllTrim(_aEstrut[_i][24])
		
		//A1_XPRRES2
		_cPrRes2 := AllTrim(_aEstrut[_i][25])
		
		//A1_XPRRES3
		_cPrRes3 := AllTrim(_aEstrut[_i][26])
		
		//A1_XDESRES
		_cDesRes := AllTrim(_aEstrut[_i][27])
		
		//A1_XIMPEXP
		_cImpExp := AllTrim(_aEstrut[_i][28])
		
		//A1_CONTATO
		_cContat := AllTrim(_aEstrut[_i][29])
		
		//A1_XEMLCON
		_cEmlCon := AllTrim(_aEstrut[_i][30])
		
		//A1_XDDDCON
		_cDDDCon := SubStr(AllTrim( _aEstrut[_i][31] ), 1, 2)
		
		//A1_XTELCON
		_cTelCon :=  StrTran(AllTrim(_aEstrut[_i][32]),"-","")
		
		//A1_XCELCON
		_cCelCon := StrTran(AllTrim(_aEstrut[_i][33]),"-","")
		
		//A1_XCGOCON
		_cCgoCon := AllTrim( _aEstrut[_i][34] )
		
		//A1_XQTEMP
		_cQtdEmp := Val(AllTrim( _aEstrut[_i][35] ))
		
		//A1_XPORTE
		_cPorte := AllTrim( _aEstrut[_i][36] )
		
		//A1_XSTATU
		_cStatu	:= AllTrim( _aEstrut[_i][37] )
		
		//A1_XMOTATU
		_cMotAtu	:= AllTrim( _aEstrut[_i][38] )
		
		If Len(_cMotAtu) = 1
			_cMotAtu := "0" + _cMotAtu	
		EndIf
					
		//Descrição do motivo de atualização
		_cDescAtu := Posicione("ZCM",1,xFilial("ZCM") + _cMotAtu,"ZCM_MOTIVO")
		
		//A1_XCARIEL
		_cCarIEL := dDataBase
		
		//A1_XALTARR
		//_cAltArr := _cMsgAlt
		
		//Incrementa a regua
		IncProc("Processando registro " + Str(_i, 3) + " De " + Str(nRec) + ": " + Transform(_cCGC, "@R 99.999.999/9999-99"))
		
		DbSelectArea("SA1")
		SA1->(DbSetOrder(3))
		SA1->(DbGotop())
		If SA1->(DbSeek( xFilial("SA1") + PADR( AllTrim( _cCGC ),TAMSX3("A1_CGC")[1])))
			_nOpc		:= 4
			_cCliente	:= SA1->A1_COD
			_cLoja		:= SA1->A1_LOJA
			_cMsBlql	:= SA1->A1_MSBLQL
		Else
			loop
		EndIf
		
		_aCliente := {}
		
		aAdd( _aCliente ,{"A1_COD"		,_cCliente		,Nil}) // Codigo
		aAdd( _aCliente ,{"A1_LOJA"  	,_cLoja  		,Nil}) // Loja
		aAdd( _aCliente ,{"A1_MSBLQL"  	,_cMsBlql		,Nil}) // Bloqueio de Tela
		aAdd( _aCliente ,{"A1_NOME"  	,_cNome			,Nil}) // Nome do cliente
		aAdd( _aCliente ,{"A1_NREDUZ"  	,_cNReduz		,Nil}) // Nome Reduzido do cliente
		aAdd( _aCliente ,{"A1_XSITREC" 	,_cSitRec		,Nil}) // Situacao na Receita
		aAdd( _aCliente ,{"A1_DTNASC" 	,_dDtNas		,Nil}) // Data de Nasc. ou Abertura
		aAdd( _aCliente ,{"A1_CNAE" 	,_cCnae			,Nil}) // Codigo CNAE do Cliente
		aAdd( _aCliente ,{"A1_XDSCNAE" 	,_cDscCnae		,Nil}) // Descritivo Cnae
		aAdd( _aCliente ,{"A1_END" 		,_cEnd			,Nil}) // Endereco do cliente
		aAdd( _aCliente ,{"A1_BAIRRO"	,_cBairro		,Nil}) // Bairro do cliente
		aAdd( _aCliente ,{"A1_CXPOSTA"	,_cCxPost		,Nil}) // Caixa Postal 
		aAdd( _aCliente ,{"A1_CEP"		,_cCEP			,Nil}) // Cod Enderecamento Postal
		aAdd( _aCliente ,{"A1_EST"		,_cEST			,Nil}) // Estado do cliente
		//aAdd( _aCliente ,{"A1_COD_MUN"	,_cCodMun		,Nil}) // Código do Municipio
		aAdd( _aCliente ,{"A1_MUN"		,_cMun			,Nil}) // Municipio do cliente		
		aAdd( _aCliente ,{"A1_ENDCOB"	,_cEndCob		,Nil}) // End.de cobr. do cliente
		aAdd( _aCliente ,{"A1_BAIRROC"	,_cBairroC		,Nil}) // Bairro de cobranca
		aAdd( _aCliente ,{"A1_CEPC"		,_cCEPC			,Nil}) // Cep de Cobranca
		aAdd( _aCliente ,{"A1_MUNC"		,_cMunC			,Nil}) // Municipio de Cobranca
		aAdd( _aCliente ,{"A1_ESTC"		,_cEstC			,Nil}) // Uf de Cobranca
		aAdd( _aCliente ,{"A1_XPRDIN1"	,_cPrdIn1		,Nil}) // Produto Industrializado 1
		aAdd( _aCliente ,{"A1_XPRDIN2"	,_cPrdIn2		,Nil}) // Produto Industrializado 2
		aAdd( _aCliente ,{"A1_XPRDIN3"	,_cPrdIn3		,Nil}) // Produto Industrializado 3
		aAdd( _aCliente ,{"A1_XMATPR1"	,_cMatPr1		,Nil}) // Materia Prima 1
		aAdd( _aCliente ,{"A1_XMATPR2"	,_cMatPr2		,Nil}) // Materia Prima 2
		aAdd( _aCliente ,{"A1_XMATPR3"	,_cMatPr3		,Nil}) // Materia Prima 3
		aAdd( _aCliente ,{"A1_XPRRES1"	,_cPrRes1		,Nil}) // Principal Residuo 1
		aAdd( _aCliente ,{"A1_XPRRES2"	,_cPrRes2		,Nil}) // Principal Residuo 2
		aAdd( _aCliente ,{"A1_XPRRES3"	,_cPrRes3		,Nil}) // Principal Residuo 3
		aAdd( _aCliente ,{"A1_XDESRES"	,_cDesRes		,Nil}) // Destino Residuo
		aAdd( _aCliente ,{"A1_XIMPEXP"	,_cImpExp		,Nil}) // Importadora ou Exportador
		aAdd( _aCliente ,{"A1_CONTATO"	,_cContat		,Nil}) // Nome do Contato
		aAdd( _aCliente ,{"A1_XEMLCON"	,_cEmlCon		,Nil}) // Email do Contato
		aAdd( _aCliente ,{"A1_XDDDCON"	,_cDDDCon		,Nil}) // DDD do contato principal
		aAdd( _aCliente ,{"A1_XTELCON"	,_cTelCon		,Nil}) // Telefone do contato princ
		aAdd( _aCliente ,{"A1_XCELCON"	,_cCelCon		,Nil}) // Celular do contato princ.
		aAdd( _aCliente ,{"A1_XCGOCON"	,_cCgoCon		,Nil}) // Cargo do contato principa
		aAdd( _aCliente ,{"A1_XQTEMP"	,_cQtdEmp		,Nil}) // Quantidade de Funcionario 
		
		If _cPorte $ "1234"
			aAdd( _aCliente ,{"A1_XPORTE"	,_cPorte		,Nil}) // Porte da empresa
		EndIf 
		
		aAdd( _aCliente ,{"A1_XSTATU"	,_cStatu		,Nil}) // Status atualização
		aAdd( _aCliente ,{"A1_XMOTATU"	,_cDescAtu		,Nil}) // Motivo atualização
		aAdd( _aCliente ,{"A1_XCARIEL"	,_cCarIEL		,Nil}) // Data da Carga pelo IEL 
		//aAdd( _aCliente ,{"A1_XALTARR"	,_cAltArr		,Nil}) //Alteracao Arrecadacao		
		
		lMsErroAuto := .F.
		
		Begin Transaction

			MSExecAuto({|x,y| MATA030(x,y)},_aCliente,_nOpc) //3- Inclusão, 4- Alteração, 5- Exclusão
			
			If lMsErroAuto
				MostraErro("C:\plog\log\", _cCGC + ".LOG")
				DisarmTransaction()
			EndIf
		
		End Transaction
		
		_nContador++
		
	Next _i

	If _nContador > 0
		_lRet := .T.
	EndIf
	
Return( _lRet )

/** {Protheus.doc} SA1CSV
Funcao que realiza a Leitura do arquivo CSV

@param: 	cArquivo, Caminho do arquivo que sera lido
@author: 	Jose Leite de Barros Neto
@since: 	28/03/2014
@Uso: 		SFIEMT
*/
Static Function SA1CSV(cArquivo)
	
	Local cBuffer     := ""
	Local cAux        := ""
	Local cString     := ""
	Local cSeparador  := ""  //Verifica o tipo de separador do arquivo texto
	Local aTmp        := {}
	Local aEstrutura  := {}
	Local nCont       := 0
	Local cEof        := Chr(10)+ Chr(13)
	Local nRec        := 0
	Local lAspa       := .F.

	//Leitura da quantidade de Registros do Arquivo
	FT_FUSE(cArquivo)
	FT_FGOTOP()
	
	While !FT_FEOF()
		nRec++
		FT_FSKIP()
	End

	ProcRegua(nRec)

	//Leitura do arquivo e verificacao do ultimo caracter da linha lida para  consistencia da pesquisa
	FT_FGOTOP()

	While !FT_FEOF()
	
		cBuffer:= AllTrim(FT_FREADLN())
	
		If At(";",cBuffer) > 0
			cSeparador:= ";" 
		Else //linha de arquivo incorreta.
			IncProc()
			FT_FSKIP()
			Loop
		Endif
	
		If (SubStr(cBuffer,Len(cBuffer),1)<>cSeparador)
			cBuffer += cSeparador + cEof + cSeparador
		Else
			cBuffer += cEof + cSeparador
		Endif
	
		//Incrementa a regua
		IncProc()
	
		//Carrega o array aEstrutura com o resultado da Importacao
		cLinha:= fTAcento(cBuffer)
		lAspa := .F.

		For nCont := 1 To Len(cBuffer)
		
			cAux   := SubStr(cLinha,1,1)
			cLinha := SubStr(cLinha,2)
			
			If (cAux == cEof)
				Exit
			Endif
		
			//Sao verificadas as marcacoes feitas pelo Excel para concatenacao de strings
			Do Case
			
				Case cAux == '"'
					lAspa := !lAspa
					
				Case cAux == cSeparador .And. !lAspa
					aAdd(aTmp,cString)
					cString := ""
					
				OtherWise
					cString += cAux
					
			EndCase
		
		Next nCont
	
		For nCont := Len(aTmp)+1 To 11
			aAdd(aTmp,"")
		Next nCont
	
		//Validacao para nao salvar registros sem entidades
		If !Empty(aTmp[1]) .OR. !Empty(aTmp[2])
			aAdd(aEstrutura,aTmp)
			aTmp := {}
		Endif
		
		FT_FSKIP()
	End

	FT_FUSE()

Return( aEstrutura )