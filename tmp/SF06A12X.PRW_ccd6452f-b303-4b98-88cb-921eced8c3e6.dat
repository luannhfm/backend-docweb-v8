#INCLUDE "PROTHEUS.CH"
#INCLUDE "TBICONN.CH"
#INCLUDE "FWMVCDEF.CH"
#INCLUDE "FWADAPTEREAI.CH"
#INCLUDE "MATA103X.CH"

/*/{Protheus.doc} SF06A12X
(long_description)
@author j2a.luizjunior
@since 18/11/2016
@version 1.0
@example
(examples)
@see (links_or_references)
/*/

User Function SF06A12X

	If SF1->F1_STATUS != "A"
		Help("",1,"A140ESTORN")
	ElseIf SF1->F1_TIPO $ "NDB"
		XA103NFiscal("SF1",Recno(),5,,.T.)	
	Else
		Help("",1,"A140NCLASS")
	EndIf

Return


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A103NFiscal³ Autor ³ Edson Maricate       ³ Data ³24.01.2000³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Programa de Incl/Alter/Excl/Visu.de NF Entrada             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ A103NFiscal(ExpC1,ExpN1,ExpN2,ExpL1,ExpL2)	              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                   ³±±
±±³          ³ ExpN1 = Numero do registro                                 ³±±
±±³          ³ ExpN2 = Numero da opcao selecionada                        ³±±
±±³          ³ ExpL1 = lWhenGet (default = .F.)                           ³±±
±±³          ³ ExpL2 = Estorno de NF Classificada (chamada MATA140)       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA103                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Static Function XA103NFiscal(cAlias,nReg,nOpcx,lWhenGet,lEstNfClass)

Local lContinua		:= .T.
Local l103Inclui	:= .F.
Local l103Exclui	:= .F.
Local lClaNfCfDv 	:= .F.
Local lDigita		:= .F.
Local lAglutina		:= .F.
Local lQuery		:= .F.
Local lGeraLanc		:= .F.
Local lExcViaEIC	:= .F.
Local lExcViaTMS	:= .F.
Local lProcGet		:= .T.
Local lTxNeg        := .F.
Local lConsMedic    := .F.
Local lRatLiq       := .T.
Local lRatImp       := .F.
Local nTaxaMoeda	:= 0

Local lMT103NFE		:= Existblock("MT103NFE")
Local lTMT103NFE	:= ExistTemplate("MT103NFE")
Local lMT103BCLA	:= ExistBlock("MT103BCLA")
Local lRetBCla		:= .F.
Local lIntACD		:= SuperGetMV("MV_INTACD",.F.,"0") == "1"
Local lPyme			:= If( Type( "__lPyme" ) <> "U", __lPyme, .F. )
Local lClassOrd		:= ( SuperGetMV( "MV_CLASORD" ) == "1" )  //Indica se na classificacao do documento de entrada os itens devem ser ordenados por ITEM+COD.PRODUTO
Local lNfeOrd		:= ( GetNewPar( "MV_NFEORD" , "2" ) == "1" ) // Indica se na visualizacao do documento de entrada os itens devem ser ordenados por ITEM+COD.PRODUTO
Local lFimp			:= SF1->(FieldPos("F1_FIMP")) > 0
Local lNfVcOri		:= GetNewPar("MV_NFVCORI","2") == "1"
Local lMvAtuComp    := SuperGetMV("MV_ATUCOMP",,.F.)
Local lVisDirf		:= SuperGetMv("MV_VISDIRF",.F.,"1") == "1"
Local lNgMnTes		:= SuperGetMV("MV_NGMNTES") == "S"
Local lNgValOsLot	:= FindFunction("NGVALOSLOT")
Local lHasLocEquip  := FindFunction("At800AtNFEnt") .And. AliasInDic("TEW")
Local lRet          := .T.
Local aArea2        := {}
Local aMT103BCLA	:= {}

Local nRecSF1		:= 0
Local nOpc			:= 0
Local nItemSDE		:= 0
Local nTpRodape		:= 1
Local nX			:= 0
Local nY			:= 0
Local nCounterSD1	:= 0
Local nMaxCodes		:= SetMaxCodes( 9999 )
Local nIndexSE2		:= 0
Local nScanBsPis	:= 0
Local nScanVlPis	:= 0
Local nScanAlPis	:= 0
Local nScanBsCof	:= 0
Local nScanVlCof	:= 0
Local nScanAlCof	:= 0
Local nLoop			:= 0
Local nHoras 		:= 0
Local nTamTjOrd		:= TamSX3("TJ_ORDEM")[1]

Local lPCCBaixa		:= SuperGetMv("MV_BX10925",.T.,"2") == "1"  .and. (!Empty( SE5->( FieldPos( "E5_VRETPIS" ) ) ) .And. !Empty( SE5->( FieldPos( "E5_VRETCOF" ) ) ) .And. ;
	!Empty( SE5->( FieldPos( "E5_VRETCSL" ) ) ) .And. !Empty( SE5->( FieldPos( "E5_PRETPIS" ) ) ) .And. ;
	!Empty( SE5->( FieldPos( "E5_PRETCOF" ) ) ) .And. !Empty( SE5->( FieldPos( "E5_PRETCSL" ) ) ) .And. ;
	!Empty( SE2->( FieldPos( "E2_SEQBX"   ) ) ) .And. !Empty( SFQ->( FieldPos( "FQ_SEQDES"  ) ) ) )

Local cModRetPIS	:= GetNewPar( "MV_RT10925", "1" )

Local aStruSF3		:= {}
Local aStruSDE		:= {}
Local aStruSE2		:= {}
Local aStruSD1		:= {}
Local aRecSD1		:= {}
Local aRecSE1		:= {}
Local aRecSE2		:= {}
Local aRecSF3		:= {}
Local aRecSC5		:= {}
Local aRecSDE		:= {}
Local aHeadSDE		:= {}
Local aHeadSE2		:= {}
Local aColsSE2		:= {}
Local aHeadSEV		:= {}
Local aColsSEV		:= {}
Local aColsSDE		:= {}
Local aHistor		:= {}
Local aObjects		:= {}
Local aInfo			:= {}
Local aPosGet		:= {}
Local aPosObj		:= {}
Local aPages		:= {"HEADER"}
Local aInfForn		:= {"","",CTOD("  /  /  "),CTOD("  /  /  "),"","","",""}
Local a103Var		:= {0,0,0,0,0,0,0,0,0}
Local aButControl	:= {}
Local aTitles		:= {} // foi alterado por causa do SIGAGSP.
Local aSizeAut		:= {}
Local aButVisual	:= {}
Local aButtons		:= {}
Local aMemUser      := {}
Local aRateio		:= {0,0,0}
Local aFldCBAtu	    // foi alterado por causa do SIGAGSP.
Local aRecClasSD1	:= {}
Local aRelImp		:= MaFisRelImp("MT100",{ "SD1" })
Local aFil10925		:= {}
Local aMultas       := {}
Local cDoc 			:= SF1->F1_DOC
Local cSer 			:= SF1->F1_SERIE

Local cTituloDlg	:= IIf(Type("cCadastro") == "C" .And. Len(cCadastro) > 0,cCadastro,OemToAnsi("Documento de Entrada")) //"Documento de Entrada" 
Local cPrefixo		:= IIf(Empty(SF1->F1_PREFIXO),&(SuperGetMV("MV_2DUPREF")),SF1->F1_PREFIXO)
Local cHistor		:= ""
Local cItem			:= ""
Local cItemSDE		:= ""
Local cQuery		:= ""
Local cAliasSF3		:= "SF3"
Local cAliasSDE		:= "SDE"
Local cAliasSE2		:= "SE2"
Local cAliasSD1		:= "SD1"
Local cAliasSB1		:= "SB1"
Local cAliasVVF		:= "VVF"
Local cAliasAnt		:= ""
Local cFornIss		:= Space(Len(SE2->E2_FORNECE))
Local cDescri		:= Space(Len(SE2->E2_NOMFOR))
Local cLojaIss		:= Space(Len(SE2->E2_LOJA))
Local dVencISS		:= CtoD("")
Local nSpedExc 		:= GetNewPar("MV_SPEDEXC",24)
Local dDtDigit 		:= dDataBase

Local cVarFoco		:= "     "
Local cIndex		:= ""
Local cCond			:= ""
Local cNatureza		:= ""

Local cCpBasePIS	:= ""
Local cCpValPIS		:= ""
Local cCpAlqPIS		:= ""
Local cCpBaseCOF	:= ""
Local cCpValCOF		:= ""
Local cCpAlqCOF		:= ""
Local cInfISS 		:= ""
Local nPosRec		:= 0
Local nCombo		:= 2
Local nItValido		:= 0
Local oDlg
Local oHistor
Local oLivro
Local oCombo
Local oCodRet

Local bKeyF12		:= Nil
Local bPMSDlgNF		:= {||PmsDlgNF(nOpcx,cNFiscal,cSerie,cA100For,cLoja,cTipo)} // Chamada da Dialog de Gerenc. Projetos
Local bCabOk		:= {|| .T.}
Local bIPRefresh	:= {|| MaFisToCols(aHeader,aCols,,"MT100"),Eval(bRefresh),Eval(bGdRefresh)}	// Carrega os valores da Funcao fiscal e executa o Refresh
Local bWhileSD1		:= { || .T. }
Local lMT103NAT		:= Existblock("MT103NAT")
Local nTitles1		:= 1
Local nTitles2		:= 2
Local nTitles3		:= 3
Local nTitles4		:= 4
Local nTitles5		:= 5
Local nTitles6		:= 6
Local nTitles7		:= 7
Local lGspInUseM	:= If(Type('lGspInUse')=='L', lGspInUse, .F.)
Local lLojaAtu		:= ( GetNewPar( "MV_LJ10925", "1" ) == "1" )
Local aAUTOISS		:= &(GetNewPar("MV_AUTOISS",'{"","","",""}'))
Local lNfeDanfe     := FindFunction("NfeFldDiv")
Local aNFEletr		:= {}
Local aNoFields     := {}
Local nNFe			:= 0
Local nConfNF       := 0
Local cDelSDE 	    := ""
Local aCodR	        :=	{}
Local cRecIss	    :=	"1"
Local oRecIss
Local nLancAp		:= 0
Local nInfDiv       := 0
Local nInfAdic      := 0
Local nPosGetLoja   := IIF(TamSX3("A2_COD")[1]< 10,(2.5*TamSX3("A2_COD")[1])+(110),(2.8*TamSX3("A2_COD")[1])+(100))
Local aHeadCDA		:= {}
Local aColsCDA		:= {}
Local lRatAFN       := .T.
Local aCtbInf       := {} //Array contendo os dados para contabilizacao online:
						//		[1] - Arquivo (cArquivo)
						//		[2] - Handle (nHdlPrv)
						//		[3] - Lote (cLote)
						//      [4] - Habilita Digitacao (lDigita)
						//      [5] - Habilita Aglutinacao (lAglutina)
						//      [6] - Controle Portugal (aCtbDia)
						//		[7,x] - Campos flags atualizados na CA100INCL
						//		[7,x,1] - Descritivo com o campo a ser atualizado (FLAG)
						//		[7,x,2] - Conteudo a ser gravado na flag
						//		[7,x,3] - Alias a ser atualizado
						//		[7,x,4] - Recno do registro a ser atualizado
Local aMT103CTB  := {}
						
Local lExcCmpAdt := .T.
Local cStatCon   := ""
Local nQtdConf   := 0
Local oList
Local aListBox   := {}
Local oEnable    := LoadBitmap( GetResources(), "ENABLE" )
Local oDisable   := LoadBitmap( GetResources(), "DISABLE" )
Local lCompAdt	 := .F.
Local aPedAdt	 := {}
Local aRecGerSE2 := {}
Local nPosPC 		:= 0
Local nPosItPC   	:= 0
Local nPosItNF	:= 0
Local nPosRat		:= 0
//Rafael Karczevski - 17/07/2019 - Adicionado devido a nova versão MATA103X.prx
Local lSubSerie     := cPaisLoc == "BRA" .And. SF1->(ColumnPos("F1_SUBSERI")) > 0 .And. SuperGetMv("MV_SUBSERI",.F.,.F.)

//Verifica se a funcionalidade Lista de Presente esta ativa e aplicada
Local lUsaLstPre := SuperGetMV("MV_LJLSPRE",,.F.) .And. IIf(FindFunction("LjUpd78Ok"),LjUpd78Ok(),.F.)
Local a			 := 0
Local aDigEnd	   	:= {} 
Local lVer116		:= (VAL(GetVersao(.F.)) == 11 .And. GetRpoRelease() >= "R6"  .Or.  VAL(GetVersao(.F.))  > 11)
Local lDistMov		:= SuperGetMV("MV_DISTMOV",.F.,.F.)

//Variaveis utilizadas na integracao NG
Local nG 		:= 0
Local nPORDEM	:= 0

//Variaveis de Posicoes no Browse
Local nNumCol 		
Local lPrjCni := FindFunction("ValidaCNI") .And. ValidaCNI()

//Chamado SDFPWW
Local cAglutFil := SuperGetMV("MV_PCCAGFL",,"1")
Local aAreaSM0  := {}
Local cCGCSM0   := ""
Local cEmpAtu   := ""

//Tratamendo de ISS por municipio.
Local nInfISS := 0
Local lISSxMun := SuperGetMV("MV_ISSXMUN",.F.,.F.) .And. FindFunction("ISSFldDiv")
Local aInfISS	:= Iif(lISSxMun,{{CriaVar("F1_INCISS"),CriaVar("CC2_MUN"),CriaVar("F1_ESTPRES"),CriaVar("CC2_MDEDMA"),CriaVar("CC2_MDEDSR"),;
					CriaVar("CC2_PERMAT"),CriaVar("CC2_PERSER")},;
					{CriaVar("D1_TOTAL"),CriaVar("D1_ABATISS"),CriaVar("D1_ABATMAT"),CriaVar("D1_BASEISS"),CriaVar("D1_VALISS")},;
						 {CriaVar("D1_TOTAL"),CriaVar("D1_ABATINS"),CriaVar("D1_ABATINS"),CriaVar("D1_BASEINS"),CriaVar("D1_VALINS")}},{})
Local aObjetos := aClone(aInfISS)

Local lIntegGFE := SuperGetMV("MV_INTGFE",.F.,.F.) .And. SuperGetMV("MV_INTGFE2",.F.,"2") $ "1" .And. SuperGetMv("MV_GFEI10",.F.,"2") == "1"
Local lCmpPLS := SC7->(FieldPos("C7_LOTPLS")) > 0 .And. SC7->(FieldPos("C7_CODRDA")) > 0 

Local aRetMaFisAjIt   := {}

// Conferencia fisica do SIGAACD
Local lCpConfFis := SA2->(FieldPos('A2_CONFFIS')) > 0
Local cMVTPCONFF := SuperGetMV("MV_TPCONFF",.F.,"1")
Local cMVCONFFIS := SuperGetMV("MV_CONFFIS",.F.,"N")

// Informacoes Adicionais do Documento
Local oDescMun
Local cDescMun := ""

Local lIntGC	 := IIf((SuperGetMV("MV_VEICULO",,"N")) == "S",.T.,.F.)
Local lFrtPgIt := FindFunction("FRTPegaIT")   //Função de Retorno do número do item.
Local lRatFor	 := SuperGetMV("MV_RATFOR",.F.,.F.)

DEFAULT lEstNfClass	    := .F.

// foi alterado por causa do SIGAGSP.
aAdd(aTitles, OemToAnsi("Totais")) //"Totais"
aAdd(aTitles, OemToAnsi("Inf. Fornecedor/Cliente")) //"Inf. Fornecedor/Cliente"
aAdd(aTitles, OemToAnsi("Descontos/Frete/Despesas")) //"Descontos/Frete/Despesas"
aAdd(aTitles, OemToAnsi("Livros Fiscais")) //"Livros Fiscais"
aAdd(aTitles, OemToAnsi("Impostos")) //"Impostos"
aAdd(aTitles, OemToAnsi("Duplicatas")) //"Duplicatas"

aFldCBAtu	:= Array(Len(aTitles)) // foi alterado por causa do SIGAGSP.

PRIVATE oLancApICMS
PRIVATE oFisRod
PRIVATE cDirf		:= Space(Len(SE2->E2_DIRF))
PRIVATE cCodRet		:= Space(Len(SE2->E2_CODRET))
PRIVATE l103Visual	:= .F.
PRIVATE lReajuste	:= .F.
PRIVATE lAmarra		:= .F.
PRIVATE lConsLoja	:= .F.
PRIVATE lPrecoDes	:= .F.
PRIVATE lVldAfter	:= .F.
PRIVATE cTipo		:= ""
//Rafael Karczevski - 17/07/2019 - Adicionado para atender a nova versão do MATA103.prw
PRIVATE c103Tp 		:= ""
PRIVATE aColsDHP 	:= {}
PRIVATE aHeadDHP 	:= {}
PRIVATE lMT100Tok 	:= .t.

PRIVATE cFormul		:= ""
PRIVATE cNFiscal	:= ""
PRIVATE cSerie		:= ""
PRIVATE cA100For	:= ""
PRIVATE cLoja		:= ""
PRIVATE cEspecie	:= ""
PRIVATE cCondicao	:= ""
PRIVATE cForAntNFE	:= ""
PRIVATE dDEmissao	:= dDataBase
PRIVATE n			:= 1
PRIVATE nMoedaCor	:= 1
PRIVATE nTaxa       := 0
PRIVATE aCols		:= {}
PRIVATE aHeader		:= {}
PRIVATE aRatVei		:= {}
PRIVATE aRatFro		:= {}
PRIVATE aArraySDG	:= {}
PRIVATE aRatAFN		:= {}	//Variavel utilizada pela Funcao PMSDLGRQ - Gerenc. Projetos
PRIVATE aHdrAFN		:= {}	//Variavel utilizada pela Funcao PMSDLGRQ - Gerenc. Projetos (Cabecalho da aRatAFN)
PRIVATE aMemoSDE    := {}
PRIVATE aOPBenef    := {}
PRIVATE xUserData	:= NIL
PRIVATE lCondFor := .F.

PRIVATE bRefresh	:= {|nX| NfeFldChg(nX,nY,,aFldCBAtu)}
PRIVATE bGDRefresh	:= {|| IIf(oGetDados<>Nil,(oGetDados:oBrowse:Refresh()),.F.) }		// Efetua o Refresh da GetDados
PRIVATE oGetDados
PRIVATE oFolder
PRIVATE oFoco103
PRIVATE l240		:=.F.
PRIVATE l241		:=.F.
PRIVATE aBaseDup
PRIVATE aBackColsSDE:={}
PRIVATE l103TolRec  := .F.
PRIVATE l103Class   := .F.
PRIVATE lMudouNum   := .F.
PRIVATE lNfMedic    := .F.
PRIVATE aColsD1		:=	aCols   
PRIVATE aHeadD1		:=	aHeader
PRIVATE cCodDiario  := ""
PRIVATE cAliasTPZ   := ""
PRIVATE cUfOrig		:= ""
PRIVATE bIRRefresh	:= {|nX| NfeFldChg(nX,oFolder:nOption,oFolder,aFldCBAtu)}
PRIVATE lContDCL   := .T.
PRIVATE l103GAuto	:= IIf(TYPE("lGravaG")== "L",lGravaG,.T.)

//Variáveis para tratamento para aba de Duplicatas
PRIVATE dEmisOld	:= ""
PRIVATE cCA100ForOld:= ""
PRIVATE cCondicaoOld:= "" 
PRIVATE lMoedTit	:= (SuperGetMv("MV_MOEDTIT",.F.,"N") == "S")
PRIVATE dNewVenc	:= CTOD('  /  /  ')

//Tratamento PLS
PRIVATE lUsouLtPLS	:= .F.
PRIVATE cLotPLS		:= ""
PRIVATE cCodRDA		:= ""
PRIVATE cOpeLt		:= ""

PRIVATE aInfApurICMS := {}

PRIVATE aInfAdic	:= {}
PRIVATE lFldInfAdic	:= .F.

PRIVATE aHeaderSA0		:= {}
PRIVATE aColsSA0		:= {}

&("M->F1_CHVNFE") := ""

If !Empty(aRotina[nOpcx][1])
	If "Excluir" $ aRotina[nOpcx][1]	// "Excluir"
		dbSelectArea("SD1")
		dbSetOrder(1)
		dbSeek(xFilial("SD1") + SF1->F1_DOC + SF1->F1_SERIE + SF1->F1_FORNECE + SF1->F1_LOJA )
	EndIf
EndIf

dDtdigit 	:= IIf(SF1->(FieldPos('F1_DTDIGIT'))>0 .And. !Empty(SF1->F1_DTDIGIT),SF1->F1_DTDIGIT,SF1->F1_EMISSAO)

If ( Type("aAutoImp") == "U" )
	PRIVATE aAutoImp := {}
EndIf

If ( Type("aNFEDanfe") == "U" )
	PRIVATE aNFEDanfe := {}
EndIf

If ( Type("aDanfeComp") == "U" )
	Private aDanfeComp:= {}
Else
	aDanfeComp:= {}
EndIf

If nOpcX == 6
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Verifica se o usuario tem permissao de delecao. ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If (VAL(GetVersao(.F.)) == 11 .And. GetRpoRelease() >= "R6" .Or. VAL(GetVersao(.F.))  > 11) .And. FindFunction("MaAvalPerm")
		aArea2 := GetArea()
		SD1->(dbSeek(xFilial("SD1")+cDoc+cSer))
		While !SD1->(Eof()) .And. lRet .And. SD1->D1_DOC == cDoc .And. SD1->D1_SERIE == cSer
			If IsInCallStack("MATA103") //Documento de Entrada
				lRet := MaAvalPerm(1,{SD1->D1_COD,"MTA103",5})
			ElseIf IsInCallStack("MATA102N") // Remito de Entrada
				lRet := MaAvalPerm(1,{SD1->D1_COD,"MT102N",5})
			ElseIf IsInCallStack("MATA101N") // Factura de Entrada
				lRet := MaAvalPerm(1,{SD1->D1_COD,"MT101N",5})
			EndIf
			SD1->(dbSkip())
		End
		RestArea(aArea2)
		If !lRet
			Help(,,1,'SEMPERM')
		EndIf
	EndIf
	// Valida exclusao de NF gerada pelo SIGAGFE
	If SF1->(FieldPos("F1_ORIGEM"))>0 .And. !IsInCallStack("GFEA065") .And. Alltrim(SF1->F1_ORIGEM) $ "GFEA065"
		MsgAlert("Notas geradas pelo módulo SIGAGFE não podem ser excluídas através dessa rotina.") //"Notas geradas pelo módulo SIGAGFE não podem ser excluídas através dessa rotina."
		lRet := .F.
		Return lRet
	Endif
	
	If SF1->(FieldPos("F1_ORIGEM")) > 0 .And. Alltrim(SF1->F1_ORIGEM) == "MSGEAI" .And. !l103Auto
		MsgAlert("NF gerada por outro sistema, somente podera ser excluida pelo sistema que a originou") //"NF gerada por outro sistema, somente podera ser excluida pelo sistema que a originou"
		lRet := .F.
		Return lRet
	Endif
EndIf

If lRet
	//Exec.Block p/Executar Ponto de Entrada de Multiplas Naturezas - MT103MNT
	bBlockSev1	:= {|nX| A103MNat(@aHeadSev, @aColsSev)}     
	bBlockSev2  := {|nX| NfeTOkSEV(@aHeadSev, @aColsSev,.F.)}
	
	//Arquivo temporario utilizado na integracao com SIGAMNT
	aCAMPTPZ := {}
	AADD(aCAMPTPZ,{"TPZ_ITEM"   ,"C",04,0}) //Numero do item
	AADD(aCAMPTPZ,{"TPZ_CODIGO" ,"C",15,0}) //Codigo do produto
	AADD(aCAMPTPZ,{"TPZ_LOCGAR" ,"C",06,0}) //Localizacao
	AADD(aCAMPTPZ,{"TPZ_ORDEM"  ,"C",06,0}) //Ordem de servico
	AADD(aCAMPTPZ,{"TPZ_QTDGAR" ,"N",09,0}) //Quantidade de garantia
	AADD(aCAMPTPZ,{"TPZ_UNIGAR" ,"C",01,0}) //Unidade de garantia
	AADD(aCAMPTPZ,{"TPZ_CONGAR" ,"C",01,0}) //Tipo do contador da garantia
	AADD(aCAMPTPZ,{"TPZ_QTDCON" ,"N",09,0}) //Quantidade do contador da garantia
	
	cArqTPZ := CriaTrab(aCAMPTPZ)
	cAliasTPZ := GetNextAlias()
	dbUseArea(.T.,,cArqTPZ,cAliasTPZ,.f.)  
	cIndTrbTPZ := CriaTrab(Nil, .F.)
	 
	IndRegua(cAliasTPZ,cIndTrbTPZ,"TPZ_ITEM",,,"Selecionando Registros...") //"Selecionando Registros..."
	 
	If !InTransact()  
		dbClearIndex()
	EndIf    
	
	dbSetIndex(cIndTrbTPZ + OrdBagExt())
	
	cDelSDE := If(lEstNfClass,GetNewPar("MV_DELRATC","1"),"1")	

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Funcao utilizada para verificar a ultima versao dos fontes      ³
	//³ SIGACUS.PRW, SIGACUSA.PRX e SIGACUSB.PRX, aplicados no rpo do   |
	//| cliente, assim verificando a necessidade de uma atualizacao     |
	//| nestes fontes. NAO REMOVER !!!							        ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !(FindFunction("SIGACUS_V") .And. SIGACUS_V() >= 20050512)
		Final("Atualizar SIGACUS.PRW !!!") //"Atualizar SIGACUS.PRW !!!"
	EndIf
	If !(FindFunction("SIGACUSA_V") .And. SIGACUSA_V() >= 20100201)
		Final("Atualizar SIGACUSA.PRX !!!") //"Atualizar SIGACUSA.PRX !!!"
	EndIf
	If !(FindFunction("SIGACUSB_V") .And. SIGACUSB_V() >= 20050512)
		Final("Atualizar SIGACUSB.PRX !!!") //"Atualizar SIGACUSB.PRX !!!"
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Funcao utilizada para verificar a ultima versao do ATUALIZADOR  ³
	//³ do dicionario do modulo de Compras necessario para o uso do     |
	//| recurso de grade produtos no MP10 Relese I deverá ser retirado  |
	//| no proximo Release da Versao quando o dicionario for Atualizado |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	//If !(FindFunction("UPDCOM01_V") .And. UPDCOM01_V() >= 20070820)
	//	Final("Atualizar UPDCOM01_V.PRW ou checar o processamento deste UPDATE !!!") // "Atualizar UPDCOM01_V.PRW ou checar o processamento deste UPDATE !!!"
	//EndIf
	//-- Validação para forçar atualizar o SIGAWMS
	If IntDL()
		If !FindFunction("WmsAvalSF1") .Or. !FindFunction("WmsAvalSD1")
			Final("Atualize o SIGAWMS com o chamado TSDZH3") //"Atualize o SIGAWMS com o chamado TSDZH3"
		EndIf
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se o tratamento eh pela baixa e disabilita a altera ³
	//³ cao do tipo de retencao                                      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lPccBaixa
		cModRetPis	:= "3"
	Endif	
	
	aBackSDE	:= If(Type('aBackSDE')=='U',{},aBackSDE)
	aAdd(aButtons, {'PEDIDO',{||A103ForF4( NIL, NIL, lNfMedic, lConsMedic, aHeadSDE, @aColsSDE,aHeadSEV, aColsSEV, @lTxNeg, @nTaxaMoeda),aBackColsSDE:=ACLONE(aColsSDE)},OemToAnsi("Selecionar Pedido de Compra"+" - <F5> "),"Pedido"} ) //"Selecionar Pedido de Compra"
	aAdd(aButtons, {'pedido',{||A103ItemPC( NIL,NIL,NIL,lNfMedic,lConsMedic,aHeadSDE,@aColsSDE, ,@lTxNeg, @nTaxaMoeda),aBackColsSDE:=ACLONE(aColsSDE)},OemToAnsi("Selecionar Pedido de Compra ( por item )"+" - <F6> "),"Item Ped"} ) //"Selecionar Pedido de Compra ( por item )"
	If !lGspInUseM
		aAdd(aButtons, {'RECALC',{||A103NFORI()},OemToAnsi("Selecionar Documento Original ( Devolucao/Beneficiamento/Complemento )"+" - <F7> "),"Origem"} ) //"Selecionar Documento Original ( Devolucao/Beneficiamento/Complemento )"
		If SD3->(FieldPos("D3_CHAVEF1")) > 0 .And. SuperGetMV("MV_PRNFBEN",.F.,.F.) .And. FindFunction("ARetBenef")
			SF5->(dbSetOrder(1))
			If SF5->(dbSeek(xFilial("SF5")+GetMV("MV_TMPAD")))
				aAdd(aButtons, {'RECALC',{||ARetBenef()},"Retorno de Beneficiamento","Retorno Ben."} ) //"Retorno de Beneficiamento#Retorno Ben."
			EndIf
		EndIf
		aAdd(aButtons, {'bmpincluir',{||A103LoteF4()},OemToAnsi("Selecionar lotes disponiveis"+" - <F8> "),"Selecionar Lotes Disponiveis"} ) //"Selecionar Lotes Disponiveis"
		If ! lPyme
			aAdd(aButVisual,{"budget",{|| a120Posic(cAlias,nReg,nOpcX,"NF")},OemToAnsi("Consulta Aprovacao"),OemToAnsi("Consulta Aprovacao")}) //"Consulta Aprovacao"
		EndIf
		If ( aRotina[ nOpcX, 4 ] == 2 .Or. aRotina[ nOpcX, 4 ] == 6 ) .And. !AtIsRotina("A103TRACK")
			AAdd(aButtons  ,{ "bmpord1", {|| A103Track() }, OemToAnsi("System Tracker"), OemToAnsi("System Tracker") } )  // "System Tracker"
			AAdd(aButVisual,{ "bmpord1", {|| A103Track() }, OemToAnsi("System Tracker"), OemToAnsi("System Tracker") } )  // "System Tracker"
		EndIf 	

		If aRotina[ nOpcX, 4 ] == 2
			AAdd(aButVisual,{ "clips", {|| A103Conhec() }, "Banco de Conhecimento", "Conhecim." } ) // "Banco de Conhecimento", "Conhecim."
		EndIf 	
	EndIf
	
	If lRatFor .And. AliasInDic("SA0")
		aAdd(aButtons	, {'RATFOR',{||A103RatFor(cNFiscal,cSerie,3)}, OemToAnsi("Rateio de fornecedor"), OemToAnsi("Rateio de fornecedor")} ) //"Rateio de fornecedor"
		aAdd(aButVisual	, {'RATFOR',{||A103RatFor(cNFiscal,cSerie,2)}, OemToAnsi("Rateio de fornecedor"), OemToAnsi("Rateio de fornecedor")} ) //"Rateio de fornecedor"
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Permite pesquisar docs de saida de devolucao para vincular   ³
	//³ com compra - Projeto Oleo e Gas                              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lNfVcOri .And. !Empty(SD1->(FieldPos("D1_NFVINC")))
		aAdd(aButtons, {"NOTE",{||NfeVincOri()},OemToAnsi("Pesquisa Doc Saida - Vínculo"),"Pesquisa Doc Saida - Vínculo"} )//"Pesquisa Doc Saida - Vínculo" 
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Tratamento para rotina automatica                            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If Type('l103Auto') == 'U'
		PRIVATE l103Auto	:= .F.
	EndIf
	lWhenGet   := IIf(ValType(lWhenGet) <> "L" , .F. , lWhenGet)
	
	lVldAfter  := lWhenGet
	
	lConsMedic := FINDFUNCTION( "A103GCDISP" ) .And. A103GCDisp()
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define a funcao utilizada ( Incl.,Alt.,Visual.,Exclu.)  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Do Case
	Case aRotina[nOpcx][4] == 2
		l103Visual := .T.
		INCLUI := IIf(Type("INCLUI")=="U",.F.,INCLUI)
		ALTERA := IIf(Type("ALTERA")=="U",.F.,ALTERA)	
	Case aRotina[nOpcx][4] == 3
		l103Inclui	:= .T.
		INCLUI := IIf(Type("INCLUI")=="U",.F.,INCLUI)
		ALTERA := IIf(Type("ALTERA")=="U",.F.,ALTERA)		
	Case aRotina[nOpcx][4] == 4
		l103Class	:= .T.
		l103TolRec  := .T.
		INCLUI := IIf(Type("INCLUI")=="U",.F.,INCLUI)
		ALTERA := IIf(Type("ALTERA")=="U",.F.,ALTERA)		
	Case aRotina[nOpcx][4] == 5 .Or. aRotina[nOpcx][4] == 20 .or. aRotina[nOpcx][4] == 21
		l103Exclui	:= .T.
		l103Visual	:= .T.
		INCLUI := IIf(Type("INCLUI")=="U",.F.,INCLUI)
		ALTERA := IIf(Type("ALTERA")=="U",.F.,ALTERA)	
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Indica a chamada de exclusao via SIGAEIC                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If aRotina[ nOpcx, 4 ] == 20
			lExcViaEIC := .T.
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Encontra o nOpcx referente ao tipo 5 - Exclusao padrao  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !Empty( nScan := AScan( aRotina, { |x| x[4] == 5 } ) )
				nOpcx := nScan
			EndIf 	
		EndIf 	
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Indica a chamada de exclusao via SIGATMS                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If aRotina[ nOpcx, 4 ] == 21
			lExcViaTMS := .T.
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Encontra o nOpcx referente ao tipo 5 - Exclusao padrao  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !Empty( nScan := AScan( aRotina, { |x| x[4] == 5 } ) )
				nOpcx := nScan
			EndIf 	
		EndIf
	
	OtherWise
		l103Visual := .T.
		INCLUI := IIf(Type("INCLUI")=="U",.F.,INCLUI)
		ALTERA := IIf(Type("ALTERA")=="U",.F.,ALTERA)
	EndCase
	
	If IntDl() .And. (l103Inclui .Or. l103Class)
		WmsAvalSF1("6")
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Preenche automaticamente o fornecedor/loja ISS atraves do parâmetro                   ³
	//³MV_AUTOISS = {Fornecedor,Loja,Dirf,CodRet}                                            ³
	//³Apenas efetua o processamento se todas as posicoes do parametro estiverem preenchidas ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !l103Visual .And. aAUTOISS <> NIL .And. Len(aAUTOISS) == 4	//Sempre vai entrar, o default eh todas as posicoes do array vazio, porem quando for
		//	vazio temos de manter a qtd de caracteres definidas na declaracao LOCAL das variaveis cFornIss,
		//	cLojaIss, cDirf e cCodRet, senao nao eh permitido a digitacao no rodape da NF devido ao tamanho
		//	ser ZERO (declaracao LOCAL do aAUTOISS).
		
		cFornIss := Iif (Empty (aAUTOISS[01]), cFornIss, PadR(aAUTOISS[01], TamSX3("A2_COD")[1]))
		cLojaIss := Iif (Empty (aAUTOISS[02]), cLojaIss, PadR(aAUTOISS[02], TamSX3("A2_LOJA")[1]))		
		cDirf    := Iif (Empty (aAUTOISS[03]), cDirf,    aAUTOISS[03])
		cCodRet  := Iif (Empty (aAUTOISS[04]), cCodRet,  aAUTOISS[04])
		
		If !Empty( cCodRet )
			If aScan( aCodR, {|aX| aX[4]=="IRR"})==0
				aAdd( aCodR, {99, cCodRet, 1, "IRR"} )
			Else
				aCodR[aScan( aCodR, {|aX| aX[4]=="IRR"})][2] := cCodRet
			EndIf
		EndIf

		// Somente ira preencher se o cadastro no SA2 existir
		If SA2->(MsSeek(xFilial("SA2")+cFornIss+cLojaIss))
			cFornIss := SA2->A2_COD
			cLojaIss := SA2->A2_LOJA
		Else
			cFornIss := Space(Len(SE2->E2_FORNECE))
			cLojaIss := Space(Len(SE2->E2_LOJA))
		Endif
	Endif
	
	/*
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Implementado o tratamento  para trazer o codigo de Retencao gravado na tabela³
	//|SE2 qdo ultilizada o parametro MV_VISDIRF=1                                  |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	*/
	If lVisDirf .And. l103Visual
		dbSelectArea("SE2")
		SE2->(dbSetOrder(6))
		SE2->(dbSeek(xFilial("SE2")+SF1->F1_FORNECE+SF1->F1_LOJA+SF1->F1_PREFIXO+SF1->F1_DOC))
		If !Empty(SE2->E2_DIRF) .And. !Empty(SE2->E2_CODRET)
			cDirf   := SE2->E2_DIRF
			cCodRet := SE2->E2_CODRET
				
			If !Empty( cCodRet )
				If aScan( aCodR, {|aX| aX[4]=="IRR"})==0
					aAdd( aCodR, {99, cCodRet, 1, "IRR"} )
				Else
					aCodR[aScan( aCodR, {|aX| aX[4]=="IRR"})][2]	:=	cCodRet
				EndIf
			EndIf
		EndIf	
	EndIf
	
	nRecSF1	 := IIF(INCLUI,0,SF1->(RecNo()))
	
	If l103Class
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica data da emissao de acordo com a data base           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If dDataBase < SF1->F1_EMISSAO
			lContinua := .F.		
			Aviso(OemToAnsi("Atenção"),OemToAnsi("Não é possível classificar notas emitidas posteriormente a data corrente do sistema."),{"Ok"})//"Não é possível classificar notas emitidas posteriormente a data corrente do sistema."
		EndIf
		
		If lContinua
			If !Empty( nScanBsPis := aScan(aRelImp,{|x| x[1]=="SD1" .And. x[3]=="IT_BASEPS2"} ) ) .And. ;
					!Empty( nScanVlPis := aScan(aRelImp,{|x| x[1]=="SD1" .And. x[3]=="IT_VALPS2"} ) ) .And. ;
					!Empty( nScanAlPis := aScan(aRelImp,{|x| x[1]=="SD1" .And. x[3]=="IT_ALIQPS2"} ) )		
				cCpBasePIS  := aRelImp[nScanBsPis,2]
				cCpValPIS   := aRelImp[nScanVlPis,2]
				cCpAlqPIS   := aRelImp[nScanAlPis,2]		
			EndIf
		
			If !Empty( nScanBsCof := aScan(aRelImp,{|x| x[1]=="SD1" .And. x[3]=="IT_BASECF2"} ) ) .And. ;
					!Empty( nScanVlCof := aScan(aRelImp,{|x| x[1]=="SD1" .And. x[3]=="IT_VALCF2"} ) ) .And. ;
					!Empty( nScanAlCof := aScan(aRelImp,{|x| x[1]=="SD1" .And. x[3]=="IT_ALIQCF2"} ) )
				cCpBaseCOF  := aRelImp[nScanBsCOF,2]
				cCpValCOF   := aRelImp[nScanVlCOF,2]
				cCpAlqCOF   := aRelImp[nScanAlCOF,2]
			EndIf
		EndIf
	EndIf
	
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define as Hot-keys da rotina                                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !l103Auto .And. (l103Inclui .Or. l103Class .Or. lWhenGet)
		SetKey( VK_F4 , { || A103F4() } )
		SetKey( VK_F5 , { || A103ForF4( NIL, NIL, lNfMedic, lConsMedic, aHeadSDE, @aColsSDE, aHeadSEV, aColsSEV, @lTxNeg, @nTaxaMoeda ),aBackColsSDE:=ACLONE(aColsSDE) } )
		SetKey( VK_F6 , { || If(Empty(ReadVar()),(A103ItemPC( NIL,NIL,NIL,lNfMedic,lConsMedic,aHeadSDE,@aColsSDE,,@lTxNeg, @nTaxaMoeda),aBackColsSDE:=ACLONE(aColsSDE)),) } )
		SetKey( VK_F7 , { || A103NFORI() } )
		SetKey( VK_F8 , { || A103LoteF4() } )	
		SetKey( VK_F9 , { |lValidX3| NfeRatCC(aHeadSDE,aColsSDE,l103Inclui.Or.l103Class,lValidX3),aBackColsSDE:=ACLONE(aColsSDE)})
		bKeyF12 := SetKey( VK_F12 , Nil )
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Integracao com o modulo de Projetos                        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ	
		If IntePms()		// Integracao PMS
			SetKey( VK_F10, { || Eval(bPmsDlgNF)} )
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Integracao com o modulo de Transportes                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If IntTMS()		// Integracao TMS
			SetKey( VK_F11, { || oGetDados:oBrowse:lDisablePaint:=.T.,A103RatVei(),oGetDados:oBrowse:lDisablePaint:=.F.} )
		EndIf
	ElseIf !l103Auto .Or. lWhenGet
		bKeyF12 := SetKey( VK_F12 , Nil )  
		If nOPCX<>6
			SetKey( VK_F9 , { |lValidX3| oGetDados:oBrowse:lDisablePaint:=.T.,NfeRATCC(aHeadSDE,aColsSDE,l103Inclui.Or.l103Class,lValidX3),oGetDados:oBrowse:lDisablePaint:=.F.,aBackColsSDE:=ACLONE(aColsSDE) } )
		EndIf
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Integracao com o modulo de Projetos                        ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ	
	If IntePms()		// Integracao PMS
		aadd(aButtons	, {'PROJETPMS',{||Eval(bPmsDlgNF)},OemToAnsi("Projetos"+" - <F10> "),OemToAnsi("Projetos")}) //"Projetos"
		aadd(aButVisual	, {'PROJETPMS',{||Eval(bPmsDlgNF)},OemToAnsi("Projetos"+" - <F10> "),OemToAnsi("Projetos")}) //"Projetos"
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Integracao com o modulo de Transportes                     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If IntTMS()		// Integracao TMS
		Aadd(aButtons	, {'CARGA'		,{||oGetDados:oBrowse:lDisablePaint:=.T.,A103RATVEI(),oGetDados:oBrowse:lDisablePaint:=.F. },"Rateio por Veiculo/Viagem"+" - <F11>" , "Rat. Veic"}) //"Rateio por Veiculo/Viagem"
		Aadd(aButVisual	, {'CARGA'		,{||oGetDados:oBrowse:lDisablePaint:=.T.,A103RATVEI(),oGetDados:oBrowse:lDisablePaint:=.F. },"Rateio por Veiculo/Viagem"+" - <F11>", "Rat. Veic" }) //"Rateio por Veiculo/Viagem"
		Aadd(aButtons	, {'CARGASEQ'	,{||oGetDados:oBrowse:lDisablePaint:=.T.,A103FROTA(),oGetDados:oBrowse:lDisablePaint:=.F. },"Rateio por Frota","Rat. Frota"}) //"Rateio por Frota"
		Aadd(aButVisual	, {'CARGASEQ'	,{||oGetDados:oBrowse:lDisablePaint:=.T.,A103FROTA(),oGetDados:oBrowse:lDisablePaint:=.F. },"Rateio por Frota","Rat. Frota"}) //"Rateio por Frota"
	EndIf
	If !lGSPInUseM
		Aadd(aButtons	, {'S4WB013N' ,{||oGetDados:oBrowse:lDisablePaint:=.T.,NfeRatCC(aHeadSDE,aColsSDE,l103Inclui.Or.l103Class),oGetDados:oBrowse:lDisablePaint:=.F.,aBackColsSDE:=ACLONE(aColsSDE) },OemToAnsi("Rateio do item por Centro de Custo"+" - <F9> "),"Rat.CC"} ) //"Rateio do item por Centro de Custo"
		Aadd(aButVisual	, {'S4WB013N' ,{||oGetDados:oBrowse:lDisablePaint:=.T.,NfeRatCC(aHeadSDE,aColsSDE,l103Inclui.Or.l103Class),oGetDados:oBrowse:lDisablePaint:=.F.,aBackColsSDE:=ACLONE(aColsSDE) },OemToAnsi("Rateio do item por Centro de Custo"+" - <F9> "),"Rat.CC"} ) //"Rateio do item por Centro de Custo"
		aadd(aButVisual	, {"S4WB005N" ,{|| NfeViewPrd() },"Historico de Compras","Historico"}) //"Historico de Compras"
	EndIf	
			 
	If lPrjCni  
		If l103Inclui .or. l103Class
			Aadd(aButtons,{'DESTINOS',{|| F641RatFin("MATA103") },"Incluir Rateio Financeiro","Rat.Financ."}) 
		ElseIf l103Visual .or. l103Exclui
			Aadd(aButVisual,{'DESTINOS',{|| F641AltRat("MATA103",2) },"Visualizar Rateio Financeiro","Rat.Financ."}) 
		EndIf
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Botao para exportar dados para EXCEL                    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If FindFunction("RemoteType") .And. RemoteType() == 1
		aAdd(aButtons   , {PmsBExcel()[1],{|| DlgToExcel({ {"CABECALHO",OemToAnsi("Documento de Entrada"),{RetTitle("F1_TIPO"),RetTitle("F1_FORMUL"),RetTitle("F1_DOC"),RetTitle("F1_SERIE"),RetTitle("F1_EMISSAO"),RetTitle("F1_FORNECE"),RetTitle("F1_LOJA"),RetTitle("F1_ESPECIE"),RetTitle("F1_EST")},{cTipo,cFormul,cNFiscal,cSerie,dDEmissao,cA100For,cLoja,cEspecie,cUfOrig}},{"GETDADOS",OemToAnsi("Itens"),aHeader,aCols},{"GETDADOS",OemToAnsi("Duplicatas"),aHeadSE2,aColsSE2}})},PmsBExcel()[2],PmsBExcel()[3]})
		aAdd(aButVisual , {PmsBExcel()[1],{|| DlgToExcel({ {"CABECALHO",OemToAnsi("Documento de Entrada"),{RetTitle("F1_TIPO"),RetTitle("F1_FORMUL"),RetTitle("F1_DOC"),RetTitle("F1_SERIE"),RetTitle("F1_EMISSAO"),RetTitle("F1_FORNECE"),RetTitle("F1_LOJA"),RetTitle("F1_ESPECIE"),RetTitle("F1_EST")},{cTipo,cFormul,cNFiscal,cSerie,dDEmissao,cA100For,cLoja,cEspecie,cUfOrig}},{"GETDADOS",OemToAnsi("Itens"),aHeader,aCols},{"GETDADOS",OemToAnsi("Duplicatas"),aHeadSE2,aColsSE2}})},PmsBExcel()[2],PmsBExcel()[3]})
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Selecao de multas - SIGAGCT                             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If FINDFUNCTION( "A103GCDISP" ) .And. A103GCDisp()
		AAdd(aButtons, { "checked", {|| A103Multas(dDEmissao,cA100For,cLoja,aMultas) }, "Seleciona Multas", "Multas" } )  //"Seleciona Multas", "Multas"
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Tratamento p/ Nota Fiscal geradas no SIGAEIC            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !l103Inclui .And. SF1->F1_IMPORT == "S"
		If !lExcViaEIC .And. l103Exclui
			Help( "", 1, "A103EXCIMP" )  // "Este documento nao pode ser excluido pois foi criado pelo SIGAEIC. A exclusao devera ser efetuada pelo SIGAEIC."
		Else
			A103NFEIC(cAlias,nReg,nOpcx)
		EndIf 	
		lContinua := .F.
	EndIf
	
	//Verifica se o Produto é do tipo armamento.
	If l103Exclui .And. SB5->(FieldPos("B5_TPISERV")) > 0
			
			aArea2 := GetArea()
			
			If SD1->(dbSeek(xFilial("SD1")+SF1->F1_DOC+SF1->F1_SERIE))
				
				DbSelectArea('SB5')
				SB5->(DbSetOrder(1)) // acordo com o arquivo SIX -> A1_FILIAL+A1_COD+A1_LOJA
				
				If SB5->(DbSeek(xFilial('SB5')+SD1->D1_COD)) // Filial: 01, Código: 000001, Loja: 02
					If FindFunction("aT720Mov") .AND. SB5->B5_TPISERV=='2' 
						lRetorno := aT720Mov(SD1->D1_DOC,SD1->D1_SERIE)
						If !lRetorno
							lContinua := lRetorno
							Help( "", 1, "At720Mov" )	
						EndIf			
					ElseIf FindFunction("aT710Mov") .AND. SB5->B5_TPISERV=='1' 
						lRetorno := aT710Mov(SD1->D1_DOC,SD1->D1_SERIE)
						If !lRetorno
							lContinua := lRetorno
							Help( "", 1, "At710Mov" )	
						EndIf
					ElseIf FindFunction("aT730Mov") .AND. SB5->B5_TPISERV=='3' 
						lRetorno := aT730Mov(SD1->D1_DOC,SD1->D1_SERIE)
						If !lRetorno
							lContinua := lRetorno
							Help( "", 1, "At730Mov" )	
						EndIf		
					EndIf
					 
				EndIf
				
			EndIf
			
			RestArea(aArea2)
	EndIf

	// Inicializa variaveis aba Informacoes Adicionais
	If FindFunction("A103ChkInfAdic")
		A103ChkInfAdic(IIF(l103Inclui,1,2))
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Notas Fiscais NAO Classificadas geradas pelo SIGAEIC NAO deverao ser visualizadas no MATA103 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If l103Visual .And. !Empty(SF1->F1_HAWB) .And. Empty(SF1->F1_STATUS)
		Aviso("A103NOVIEWEIC","Este documento foi gerado pelo SIGAEIC e ainda NÃO foi classificado, para visualizar utilizar a opção classificar ou no Modulo SIGAEIC opção Desembaraço/recebimento de importação/Totais. Apos a classificação o documento pode ser visualizado normalmente nesta opção.",{"Ok"}) // "Este documento foi gerado pelo SIGAEIC e ainda NÃO foi classificado, para visualizar utilizar a opção classificar ou no Modulo SIGAEIC opção Desembaraço/recebimento de importação/Totais. Apos a classificação o documento pode ser visualizado normalmente nesta opção."
		lContinua := .F.
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Notas Fiscais excluídas, rastreamento contábil ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lContinua .And. l103Visual .And. ( SD1->(Deleted()) .Or. SF1->(Deleted()) ) .And. IsInCallStack("CTBC010ROT")
		Aviso("A103NOVIEWDEL","Este documento encontrasse excluído e não é possível visualiza-lo.",{"Ok"}) //"Este documento encontrasse excluído e não é possível visualiza-lo."
		lContinua := .F.
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Inicializa as variaveis                                      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cTipo		:= IIf(l103Inclui,CriaVar("F1_TIPO",.F.),SF1->F1_TIPO)
	cFormul		:= IIf(l103Inclui,CriaVar("F1_FORMUL",.F.),SF1->F1_FORMUL)
	cNFiscal	:= IIf(l103Inclui,CriaVar("F1_DOC"),SF1->F1_DOC)
	cSerie		:= IIf(l103Inclui,CriaVar("F1_SERIE"),SF1->F1_SERIE)
	dDEmissao	:= IIf(l103Inclui,CriaVar("F1_EMISSAO"),SF1->F1_EMISSAO)
	cA100For	:= IIf(l103Inclui,CriaVar("F1_FORNECE",.F.),SF1->F1_FORNECE)
	cLoja		:= IIf(l103Inclui,CriaVar("F1_LOJA",.F.),SF1->F1_LOJA)
	cEspecie	:= IIf(l103Inclui,CriaVar("F1_ESPECIE"),SF1->F1_ESPECIE)
	cCondicao	:= IIf(l103Inclui,CriaVar("F1_COND"),SF1->F1_COND)
	cUfOrig		:= IIf(l103Inclui,CriaVar("F1_EST"),SF1->F1_EST)
	cRecIss		:= IIf(l103Inclui,CriaVar("F1_RECISS"),SF1->F1_RECISS)
	
	If lISSxMun .And. SF1->(FieldPos("F1_ESTPRES")) > 0 .And. SF1->(FieldPos("F1_INCISS")) > 0
		aInfISS[1,1] := IIf(l103Inclui,CriaVar("F1_INCISS"),SF1->F1_INCISS)
		aInfISS[1,3] := IIf(l103Inclui,CriaVar("F1_ESTPRES"),SF1->F1_ESTPRES)
		aInfAdic[1]  := aInfISS[1,1]
		cDescMun     := Posicione("CC2",1,xFilial("CC2")+aInfISS[1,3]+aInfISS[1,1],"CC2_MUN")
	ElseIf SF1->(FieldPos("F1_INCISS")) > 0 .And. SF1->(FieldPos("F1_ESTPRES")) > 0
		cInfISS := IIf(l103Inclui,CriaVar("F1_ESTPRES"),SF1->F1_ESTPRES)
		If Len(aInfAdic) > 0
			cDescMun    := Posicione("CC2",1,xFilial("CC2")+cInfISS+aInfAdic[1],"CC2_MUN")
		Endif
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Trata codigo do diario  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ( FindFunction( "UsaSeqCor" ) .And. UsaSeqCor() ) 
		cCodDiario := IIf(l103Inclui,CriaVar("F1_DIACTB"),SF1->F1_DIACTB)
	EndIf
	
	If (!cTipo$"DB" .And. !Empty(cA100For) .And. cA100For+cLoja <> SA2->A2_COD+SA2->A2_LOJA)
		SA2->(DbSetOrder(1))
		SA2->(MsSeek(xFilial("SA2")+cA100For+cLoja))
	EndIf
	
	If cPaisLoc == "BRA"
		If l103Inclui
			aNFEletr  := {CriaVar("F1_NFELETR"),CriaVar("F1_CODNFE"),CriaVar("F1_EMINFE"),CriaVar("F1_HORNFE"),CriaVar("F1_CREDNFE"),CriaVar("F1_NUMRPS"),;
						 Iif(SF1->(FieldPos("F1_MENNOTA")) > 0,CriaVar("F1_MENNOTA"),Nil),;
						 Iif(SF1->(FieldPos("F1_MENPAD")) > 0,CriaVar("F1_MENPAD"),Nil)}
			If lNfeDanfe  
				A103CheckDanfe(2)
				If l103Auto
					If aScan(aAutoCab,{|x| AllTrim(x[1])=="F1_TPFRETE"})>0
						aNFEDanfe[14]:=aAutoCab[aScan(aAutoCab,{|x| AllTrim(x[1])=="F1_TPFRETE"})][2]
					EndIF
				EndIf
			EndIf	
		Else
			aNFEletr  := {SF1->F1_NFELETR,SF1->F1_CODNFE,SF1->F1_EMINFE,SF1->F1_HORNFE,SF1->F1_CREDNFE,SF1->F1_NUMRPS,;
						 Iif(SF1->(FieldPos("F1_MENNOTA")) > 0,SF1->F1_MENNOTA,Nil),;
						 Iif(SF1->(FieldPos("F1_MENPAD")) > 0,SF1->F1_MENPAD,Nil)}
			If lNfeDanfe    
				A103CargaDanfe()
			EndIf	
		Endif
	Endif
	
	If l103Class .And. Empty(cCondicao) .And. SF1->F1_STATUS <> 'C'
		DbSelectArea("SA2")
		DbSetOrder(1)
		If MsSeek(xFilial("SA2")+cA100For+cLoja)
			cCondicao  := SA2->A2_COND
			lCondFor	:= .T.
		EndIf
		DbSelectArea("SF1")
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Inicializa as variaveis do pergunte                          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	//AjustaSX3()
	//AjustaSX1()
	//AjustaSX6()
	//AjustaHlp()
	
	Pergunte("MTA103",.F.)
	//Carrega as variaveis com os parametros da execauto
	//Ma103PerAut()
	
	lDigita     := (mv_par01==1)
	lAglutina   := (mv_par02==1)
	lReajuste   := (mv_par04==1)
	lAmarra     := (mv_par05==1)
	lGeraLanc   := (mv_par06==1)
	lConsLoja   := (mv_par07==1)
	IsTriangular(mv_par08==1)
	nTpRodape   := (mv_par09)
	lPrecoDes   := (mv_par10==1)
	lDataUcom   := (mv_par11==1)
	lAtuAmarra  := (mv_par12==1)
	lRatLiq     := (mv_par13==2)
	lRatImp     := (mv_par13==1 .And. mv_par14==2)
	If lContinua
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Ponto de entrada para adicao de campos memo do usuario       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ExistBlock( "MT103MEM" )
			If Valtype(	aMemUser := ExecBlock( "MT103MEM", .F., .F. ) ) == "A"
				aEval( aMemUser, { |x| aAdd( aMemoSDE, x ) } )
			EndIf
		EndIf 
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Template acionando ponto de entrada                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lTMt103NFE
			ExecTemplate("MT103NFE",.F.,.F.,nOpcx)
		EndIf
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Ponto de entrada no inicio do Documento de Entrada         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lMt103NFE
			Execblock("MT103NFE",.F.,.F.,nOpcx)
		EndIf
		If l103Inclui .Or. l103Class
			If l103Class
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Ponto de Entrada na Classificacao da NF                    ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If ExistBlock("MT100CLA")
					ExecBlock("MT100CLA",.F.,.F.)
				EndIf
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Validacoes para Inclusao/Classificacao de NF de Entrada    ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !NfeVldIni(l103Class,lGeraLanc,@lClaNfCfDv)
				lContinua := .F.
			EndIf
		ElseIf l103Exclui
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ As Validacoes para Exclusao de NF de Entrada serao aplicadas³
			//³ somente quando a NFE nao esteja Bloqueada.                  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !SF1->F1_STATUS $ "BC" 
				If !XMaCanDelF1(nRecSF1,@aRecSC5,aRecSE2,Nil,Nil,Nil,Nil,aRecSE1,lExcViaEIC,lExcViaTMS)
					lContinua := .F.
				EndIf
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Integracao com o modulo de Armazenagem - SIGAWMS                  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lContinua .And. IntDL() //-- Validação se pode excluir a nota fiscal pelo WMS
				lContinua := WmsAvalSF1(Iif(lEstNfClass,"2","4"),"SF1")
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ As Validacoes para Exclusao de NF de Entrada serao aplicadas³
			//³ somente quando a O.S. no modulo de manutenca o de ativos    ³
			//³ esteja aberta.                                               ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lNgMnTes .And. lNgValOsLot .And. lContinua
				lContinua := NGVALOSLOT(nRecSF1)
			EndIf

			// quando a nota for de devolução, valida se já houve uma nova movimentaçao no equipamento
			If lContinua .And. SF1->F1_TIPO == 'D'.And. lHasLocEquip .And. !At800ExcD1( nRecSF1 ) 
				lContinua := .F.
			EndIf
			
		EndIf
	EndIf	
	If lContinua
		If !l103Inclui .And. !l103Auto
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Inicializa as veriaveis utilizadas na exibicao da NF         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			//NfeCabOk(l103Visual,/*oTipo*/,/*oNota*/,/*oEmissao*/,/*oFornece*/,/*oLoja*/,/*lFiscal*/,cUfOrig,aInfISS[1,1],aInfISS[1,3])
			
			If lISSxMun
				NfeCabOk(l103Visual,/*oTipo*/,/*oNota*/,/*oEmissao*/,/*oFornece*/,/*oLoja*/,/*lFiscal*/,cUfOrig,aInfISS[1,1],aInfISS[1,3])
			Else
				NfeCabOk(l103Visual,/*oTipo*/,/*oNota*/,/*oEmissao*/,/*oFornece*/,/*oLoja*/,/*lFiscal*/,cUfOrig)
			EndIf
	
		Else
			If !l103Inclui
				MaFisIni(SF1->F1_FORNECE,SF1->F1_LOJA,IIf(cTipo$'DB',"C","F"),cTipo,Nil,MaFisRelImp("MT100",{"SF1","SD1"}),,!l103Visual,,,,,,,,,,,,,,,,,dDEmissao)
			EndIf
		EndIf
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Montagem do aHeader                                          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If Type("aBackSD1")=="U" .Or. Empty(aBackSD1)
			aBackSD1 := {}
		EndIf
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Trava os registros do SF1 - Alteracao e Exclusao       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If l103Class .Or. l103Exclui
			If !SoftLock("SF1")
				lContinua := .F.
			EndIf
		EndIf
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Tratamento da exclusão da nota fiscal de entrada - NF-e SEFAZ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If l103Exclui 
			If SF1->F1_FORMUL == "S" .And. "SPED"$cEspecie .And. lFimp .And. (cAlias)->F1_FIMP$"TS" //verificacao apenas da especie como SPED e notas que foram transmitidas ou impressoo DANFE
				//nHoras := SubtHoras( dDtdigit, SF1->F1_HORA, dDataBase, substr(Time(),1,2)+":"+substr(Time(),4,2) )
				nHoras := SubtHoras(IIF(SF1->(FieldPos("F1_DAUTNFE"))<>0 .And. !Empty(SF1->F1_DAUTNFE),SF1->F1_DAUTNFE,dDtdigit),IIF(SF1->(FieldPos("F1_HAUTNFE"))<>0 .And. !Empty(SF1->F1_HAUTNFE),SF1->F1_HAUTNFE,SF1->F1_HORA), dDataBase, substr(Time(),1,2)+":"+substr(Time(),4,2) )
				If nHoras > nSpedExc .And. SF1->F1_STATUS<>"C"
					MsgAlert("Não foi possivel excluir a(s) nota(s), pois o prazo para o cancelamento da(s) NF-e é de " + Alltrim(STR(nSpedExc)) +" horas")
					lContinua := .F.
				ElseiF SF1->(FieldPos("F1_STATUS"))>0.And. SF1->F1_STATUS=="C" .And. l103Exclui
					Aviso("Atenção","Não foi possivel excluir a nota, pois a mesma já foi transmitida e encotra-se bloqueada. Será necessário realizar a primeiro a classificação da nota e posteriormente a exclusão!",{"Ok"}) //Não foi possivel excluir a nota, pois a mesma já foi transmitida e encotra-se bloqueada. Será necessário realizar a primeiro a classificação da nota e posteriormente a exclusão!"		
					lContinua := .F.			
				Else	
					lContinua := .T.
				EndIf
			EndIf
		EndIf

		If l103Exclui .and. lIntGC
			cAliasAnt := Alias()
			cAliasVVF := "SQLVVF"
			cQuery := "SELECT VVF.R_E_C_N_O_ FROM "+RetSqlName("VVF")+" VVF "
			cQuery += "WHERE VVF.VVF_FILIAL='"+xFilial("VVF")+"' AND "
			cQuery += "VVF.VVF_NUMNFI = '"+SF1->F1_DOC+"' AND VVF.VVF_SERNFI = '"+SF1->F1_SERIE+"' AND VVF.VVF_CODFOR = '"+SF1->F1_FORNECE+"' AND VVF.VVF_LOJA = '"+SF1->F1_LOJA+"' AND "
			cQuery += "VVF.D_E_L_E_T_=' '"
			cQuery := ChangeQuery(cQuery)

			dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasVVF,.T.,.T.)
			
			If (cAliasVVF)->(!Eof()) .and. !(FM_PILHA("OFI") .or. FM_PILHA("VEI"))
				cMensagem:= "Não é possível excluir esse documento pois "+CHR(10)+CHR(13) // "Não é possível excluir esse documento pois "
				cMensagem+= "sua origem ocorreu no Módulo de Veículos. "+CHR(10)+CHR(13) // "sua origem ocorreu no Módulo de Veículos. "
				cMensagem+= "Portanto seu Cancelamento só será possível no módulo de Veículos."+CHR(10)+CHR(13) // "Portanto seu Cancelamento só será possível no módulo de Veículos."
				Help(" ",1,"NAOEXCNFS","NAOEXCNFS",cMensagem,1,0)					
				lContinua := .F.                                           	      
			Endif
	
			DbSelectArea(cAliasVVF)
			dbCloseArea()
			DbSelectArea(cAliasAnt)
	
		Endif		
	
		If lContinua
			If l103Class .Or. l103Visual .Or. l103Exclui
				aadd(aTitles,("Historico")) //"Historico"
	
				If !l103Class .And. !Empty( MaFisScan("NF_RECISS",.F.) )
					MaFisAlt("NF_RECISS",SF1->F1_RECISS)					
				EndIf
				cRecIss	:=	MaFisRet(,"NF_RECISS")
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Carrega o Array contendo os Registros Fiscais.(SF3)     ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				DbSelectArea("SF3")
				DbSetOrder(4)
				#IFDEF TOP
					If TcSrvType()<>"AS/400"
						lQuery    := .T.
						cAliasSF3 := "A103NFISCAL"
						aStruSF3  := SF3->(dbStruct())
	
						cQuery    := "SELECT SF3.*,SF3.R_E_C_N_O_ SF3RECNO "
						cQuery    += "  FROM "+RetSqlName("SF3")+" SF3 "
						cQuery    += " WHERE SF3.F3_FILIAL     = '"+xFilial("SF3")+"'"
						cQuery    += "   AND SF3.F3_CLIEFOR	   = '"+SF1->F1_FORNECE+"'"
						cQuery    += "   AND SF3.F3_LOJA	   = '"+SF1->F1_LOJA+"'"
						cQuery    += "   AND SF3.F3_NFISCAL	   = '"+SF1->F1_DOC+"'"
						cQuery    += "   AND SF3.F3_SERIE	   = '"+SF1->F1_SERIE+"'"
						cQuery    += "   AND SF3.F3_FORMUL	   = '"+SF1->F1_FORMUL+"'"
						cQuery    += "   AND SF3.D_E_L_E_T_	   = ' ' "
						cQuery    += " ORDER BY "+SqlOrder(SF3->(IndexKey()))
	
						cQuery := ChangeQuery(cQuery)
	
						dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSF3,.T.,.T.)
						For nX := 1 To Len(aStruSF3)
							If aStruSF3[nX,2]<>"C"
								TcSetField(cAliasSF3,aStruSF3[nX,1],aStruSF3[nX,2],aStruSF3[nX,3],aStruSF3[nX,4])
							EndIf
						Next nX
					Else
				#ENDIF						
					MsSeek(xFilial("SF3")+SF1->F1_FORNECE+SF1->F1_LOJA+SF1->F1_DOC+SF1->F1_SERIE)
					#IFDEF TOP
					EndIf
					#ENDIF
				While !Eof() .And. lContinua .And.;
						xFilial("SF3") == (cAliasSF3)->F3_FILIAL .And.;
						SF1->F1_FORNECE == (cAliasSF3)->F3_CLIEFOR .And.;
						SF1->F1_LOJA == (cAliasSF3)->F3_LOJA .And.;
						SF1->F1_DOC == (cAliasSF3)->F3_NFISCAL .And.;
						SF1->F1_SERIE == (cAliasSF3)->F3_SERIE
					If Substr((cAliasSF3)->F3_CFO,1,1) < "5" .And. (cAliasSF3)->F3_FORMUL == SF1->F1_FORMUL
						aadd(aRecSF3,If(lQuery,(cAliasSF3)->SF3RECNO,SF3->(RecNo())))
					EndIf
					DbSelectArea(cAliasSF3)
					dbSkip()
				EndDo
				If lQuery
					DbSelectArea(cAliasSF3)
					dbCloseArea()
					DbSelectArea("SF3")
				EndIf
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Monta o Array contendo as registros do SDE           ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				DbSelectArea("SDE")
				DbSetOrder(1)		
				#IFDEF TOP
					If TcSrvType()<>"AS/400"
						lQuery    := .T.
						aStruSDE  := SDE->(dbStruct())
						cAliasSDE := "A103NFISCAL"
						cQuery    := "SELECT SDE.*,SDE.R_E_C_N_O_ SDERECNO "
						cQuery    += "  FROM "+RetSqlName("SDE")+" SDE "
						cQuery    += " WHERE SDE.DE_FILIAL	 ='"+xFilial("SDE")+"'"
						cQuery    += "   AND SDE.DE_DOC		 ='"+SF1->F1_DOC+"'"
						cQuery    += "   AND SDE.DE_SERIE	 ='"+SF1->F1_SERIE+"'"
						cQuery    += "   AND SDE.DE_FORNECE  ='"+SF1->F1_FORNECE+"'"
						cQuery    += "   AND SDE.DE_LOJA     ='"+SF1->F1_LOJA+"'"
						cQuery    += "   AND SDE.D_E_L_E_T_  =' ' "
						cQuery    += " ORDER BY "+SqlOrder(SDE->(IndexKey()))
	
						cQuery := ChangeQuery(cQuery)
	
						dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSDE,.T.,.T.)
						For nX := 1 To Len(aStruSDE)
							If aStruSDE[nX,2]<>"C"
								TcSetField(cAliasSDE,aStruSDE[nX,1],aStruSDE[nX,2],aStruSDE[nX,3],aStruSDE[nX,4])
							EndIf
						Next nX
					Else
				#ENDIF
					MsSeek(xFilial("SDE")+SF1->F1_DOC+SF1->F1_SERIE+SF1->F1_FORNECE+SF1->F1_LOJA)
					#IFDEF TOP
					EndIf
					#ENDIF
				While ( !Eof() .And. lContinua .And.;
						xFilial('SDE') == (cAliasSDE)->DE_FILIAL .And.;
						SF1->F1_DOC == (cAliasSDE)->DE_DOC .And.;
						SF1->F1_SERIE == (cAliasSDE)->DE_SERIE .And.;
						SF1->F1_FORNECE == (cAliasSDE)->DE_FORNECE .And.;
						SF1->F1_LOJA == (cAliasSDE)->DE_LOJA )
					If Empty(aBackSDE)
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Montagem do aHeader                                          ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						DbSelectArea("SX3")
						DbSetOrder(1)
						MsSeek("SDE")
						While ( !EOF() .And. SX3->X3_ARQUIVO == "SDE" )
							If X3USO(SX3->X3_USADO) .AND. cNivel >= SX3->X3_NIVEL .And. !"DE_CUSTO"$SX3->X3_CAMPO
								aadd(aBackSDE,{ TRIM(X3Titulo()),;
									SX3->X3_CAMPO,;
									SX3->X3_PICTURE,;
									SX3->X3_TAMANHO,;
									SX3->X3_DECIMAL,;
									SX3->X3_VALID,;
									SX3->X3_USADO,;
									SX3->X3_TIPO,;
									SX3->X3_F3,;
									SX3->X3_CONTEXT })
							EndIf
							DbSelectArea("SX3")
							dbSkip()
						EndDo
					EndIf
					aHeadSDE  := aBackSDE
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Adiciona os campos de Alias e Recno ao aHeader para WalkThru.³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ADHeadRec("SDE",aHeadSDE)
	
					aadd(aRecSDE,If(lQuery,(cAliasSDE)->SDERECNO,SDE->(RecNo())))
					If cItemSDE <> 	(cAliasSDE)->DE_ITEMNF
						cItemSDE	:= (cAliasSDE)->DE_ITEMNF
						aadd(aColsSDE,{cItemSDE,{}})
						nItemSDE++
					EndIf
	
					aadd(aColsSDE[nItemSDE][2],Array(Len(aHeadSDE)+1))
					For nY := 1 to Len(aHeadSDE)
						If IsHeadRec(aHeadSDE[nY][2])
							aColsSDE[nItemSDE][2][Len(aColsSDE[nItemSDE][2])][nY] := IIf(lQuery , (cAliasSDE)->SDERECNO , SDE->(Recno())  )
						ElseIf IsHeadAlias(aHeadSDE[nY][2])
							aColsSDE[nItemSDE][2][Len(aColsSDE[nItemSDE][2])][nY] := "SDE"
						ElseIf ( aHeadSDE[nY][10] <> "V")
							aColsSDE[nItemSDE][2][Len(aColsSDE[nItemSDE][2])][nY] := (cAliasSDE)->(FieldGet(FieldPos(aHeadSDE[nY][2])))
						Else
							aColsSDE[nItemSDE][2][Len(aColsSDE[nItemSDE][2])][nY] := (cAliasSDE)->(CriaVar(aHeadSDE[nY][2]))
						EndIf
						aColsSDE[nItemSDE][2][Len(aColsSDE[nItemSDE][2])][Len(aHeadSDE)+1] := .F.
					Next nY
	
					DbSelectArea(cAliasSDE)
					dbSkip()
				EndDo
				aBackColsSDE:=ACLONE(aColsSDE)
				If lQuery
					DbSelectArea(cAliasSDE)
					dbCloseArea()
					DbSelectArea("SDE")
				EndIf
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Monta o Array contendo as duplicatas SE2             ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If SF1->F1_TIPO$"DB"
					cPrefixo := PadR( cPrefixo, Len( SE1->E1_PREFIXO ) )
					DbSelectArea("SE1")
					DbSetOrder(2)
					MsSeek(xFilial("SE1")+SF1->F1_FORNECE+SF1->F1_LOJA+cPrefixo+SF1->F1_DOC)
					While !Eof() .And. xFilial("SE1") == SE1->E1_FILIAL .And.;
							SF1->F1_FORNECE == SE1->E1_CLIENTE .And.;
							SF1->F1_LOJA == SE1->E1_LOJA .And.;
							cPrefixo == SE1->E1_PREFIXO .And.;
							SF1->F1_DOC == SE1->E1_NUM
						If (SE1->E1_TIPO $ MV_CRNEG)
							aadd(aRecSe1,SE1->(Recno()))
						EndIf
						DbSelectArea("SE1")
						dbSkip()
					EndDo
				Else
					If Empty(aRecSE2)
						cPrefixo := PadR( cPrefixo, Len( SE2->E2_PREFIXO ) )
						DbSelectArea("SE2")
						DbSetOrder(6)
						#IFDEF TOP
							If TcSrvType()<>"AS/400"
								lQuery    := .T.
								aStruSE2  := SE2->(dbStruct())
								cAliasSE2 := "A103NFISCAL"
								cQuery    := "SELECT SE2.*,SE2.R_E_C_N_O_ SE2RECNO "
								cQuery    += "  FROM "+RetSqlName("SE2")+" SE2 "
								cQuery    += " WHERE SE2.E2_FILIAL  ='"+xFilial("SE2")+"'"
								cQuery    += "   AND SE2.E2_FORNECE ='"+SF1->F1_FORNECE+"'"
								cQuery    += "   AND SE2.E2_LOJA    ='"+SF1->F1_LOJA+"'"
								cQuery    += "   AND SE2.E2_PREFIXO ='"+cPrefixo+"'"
								cQuery    += "   AND SE2.E2_NUM     ='"+SF1->F1_DUPL+"'"
								cQuery    += "   AND SE2.E2_TIPO    ='"+MVNOTAFIS+"'"
								cQuery    += "   AND SE2.D_E_L_E_T_ =' ' "
								cQuery    += "ORDER BY "+SqlOrder(SE2->(IndexKey()))
	
								cQuery := ChangeQuery(cQuery)
	
								dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSE2,.T.,.T.)
								For nX := 1 To Len(aStruSE2)
									If aStruSE2[nX][2]<>"C"
										TcSetField(cAliasSE2,aStruSE2[nX][1],aStruSE2[nX][2],aStruSE2[nX][3],aStruSE2[nX][4])
									EndIf
								Next nX
							Else
						#ENDIF
							MsSeek(xFilial("SE2")+SF1->F1_FORNECE+SF1->F1_LOJA+cPrefixo+SF1->F1_DUPL)
							#IFDEF TOP
							EndIf
							#ENDIF
						While ( !Eof() .And. lContinua .And.;
								xFilial("SE2")    == (cAliasSE2)->E2_FILIAL  		   .And.;
								SF1->F1_FORNECE   == (cAliasSE2)->E2_FORNECE 		  .And.;
								SF1->F1_LOJA      == (cAliasSE2)->E2_LOJA    		   .And.;
								AllTrim(cPrefixo) == AllTrim((cAliasSE2)->E2_PREFIXO) .And.;
								SF1->F1_DUPL      == (cAliasSE2)->E2_NUM )
								
								If AllTrim((cAliasSE2)->E2_TIPO) == AllTrim(MVNOTAFIS)
									aadd(aRecSE2,If(lQuery,(cAliasSE2)->SE2RECNO,(cAliasSE2)->(RecNo())))
								EndIf
								DbSelectArea(cAliasSE2)
							dbSkip()
						Enddo
						If lQuery
							DbSelectArea(cAliasSE2)
							dbCloseArea()
							DbSelectArea("SE2")
						EndIf
					EndIf
				EndIf
			EndIf
	
			If !l103Inclui
			
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Faz a montagem do aCols com os dados do SD1                  ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				DbSelectArea("SD1")
				DbSetOrder(1)
				#IFDEF TOP        
					aStruSD1  := SD1->(dbStruct()) 
					If TcSrvType()<>"AS/400" .And. Ascan(aStruSD1,{|x| x[2] == "M" }) == 0
						lQuery    := .T.
						cAliasSD1 := "A103NFISCAL"
						cAliasSB1 := "A103NFISCAL"
						cQuery    := "SELECT SD1.*,SD1.R_E_C_N_O_ SD1RECNO, B1_GRUPO,B1_CODITE,B1_TE,B1_COD "
						cQuery    += "  FROM "+RetSqlName("SD1")+" SD1, "
						cQuery    += RetSqlName("SB1")+" SB1 "					
						cQuery    += " WHERE SD1.D1_FILIAL	= '"+xFilial("SD1")+"'"
						cQuery    += "   AND SD1.D1_DOC		= '"+SF1->F1_DOC+"'"
						cQuery    += "   AND SD1.D1_SERIE	= '"+SF1->F1_SERIE+"'"
						cQuery    += "   AND SD1.D1_FORNECE	= '"+SF1->F1_FORNECE+"'"
						cQuery    += "   AND SD1.D1_LOJA	= '"+SF1->F1_LOJA+"'"
						cQuery    += "   AND SD1.D1_TIPO	= '"+SF1->F1_TIPO+"'"
						cQuery    += "   AND SD1.D_E_L_E_T_	= ' '"
						cQuery    += "   AND SB1.B1_FILIAL  = '"+xFilial("SB1")+"'"
						cQuery    += "   AND SB1.B1_COD 	= SD1.D1_COD "
						cQuery    += "   AND SB1.D_E_L_E_T_ =' ' " 					
	
						If (l103Class .And. lClassOrd) .Or. (l103Visual .And. lClassOrd) .Or. lNfeOrd
							cQuery    += "ORDER BY "+SqlOrder( "D1_FILIAL+D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA+D1_ITEM+D1_COD" )
						Else
							cQuery    += "ORDER BY "+SqlOrder(SD1->(IndexKey()))
						EndIf
	
						cQuery := ChangeQuery(cQuery)
	
						dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSD1,.T.,.T.)
						For nX := 1 To Len(aStruSD1)
							If aStruSD1[nX][2]<>"C"
								TcSetField(cAliasSD1,aStruSD1[nX][1],aStruSD1[nX][2],aStruSD1[nX][3],aStruSD1[nX][4])
							EndIf
						Next nX
					Else
				#ENDIF
					lQuery := .F.
					MsSeek(xFilial("SD1")+SF1->F1_DOC+SF1->F1_SERIE+SF1->F1_FORNECE+SF1->F1_LOJA)
					#IFDEF TOP
					EndIf
					#ENDIF
	
				bWhileSD1 := { || ( !Eof().And. lContinua .And. ;
					(cAliasSD1)->D1_FILIAL== xFilial("SD1") .And. ;
					(cAliasSD1)->D1_DOC == SF1->F1_DOC .And. ;
					(cAliasSD1)->D1_SERIE == SF1->F1_SERIE .And. ;
					(cAliasSD1)->D1_FORNECE == SF1->F1_FORNECE .And. ;
					(cAliasSD1)->D1_LOJA == SF1->F1_LOJA ) }
	
				If !lQuery .And. ((l103Class .And. lClassOrd) .Or. (l103Visual .And. lClassOrd) .Or. lNfeOrd)
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Este procedimento eh necessario para fazer a montagem        ³
					//³ do acols na ordem ITEM + COD quando classificacao em CDX     ³
					//³ e o parametro MV_CLASORD estiver ativado                     ³				
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					aRecClasSD1 := {}
					While ( !Eof().And. lContinua .And. ;
							(cAliasSD1)->D1_FILIAL== xFilial("SD1") .And. ;
							(cAliasSD1)->D1_DOC == SF1->F1_DOC .And. ;
							(cAliasSD1)->D1_SERIE == SF1->F1_SERIE .And. ;
							(cAliasSD1)->D1_FORNECE == SF1->F1_FORNECE .And. ;
							(cAliasSD1)->D1_LOJA == SF1->F1_LOJA )
	
						AAdd( aRecClasSD1, { ( cAliasSD1 )->D1_ITEM + ( cAliasSD1 )->D1_COD, ( cAliasSD1 )->( Recno() ) } )
	
					( cAliasSD1 )->( dbSkip() )
				EndDo 				

				ASort( aRecClasSD1, , , { |x,y| y[1] > x[1] } )

				nCounterSD1 := 1
				bWhileSD1 := { || nCounterSD1 <= Len( aRecClasSD1 ) .And. lContinua  }
			EndIf	
		EndIf	
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Portaria CAT83  - Se o parâmetro não estiver ativo, não inclui o campo no acols ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !SuperGetMv("MV_CAT8309",.F.,.F.)
			If SD1->(FieldPos("D1_CODLAN"))>0
				aAdd(aNoFields,"D1_CODLAN")
			EndIf
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ FILLGETDADOS (Monstagem do aHeader e aCols)                  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³FillGetDados( nOpcx, cAlias, nOrder, cSeekKey, bSeekWhile, uSeekFor, aNoFields, aYesFields, lOnlyYes,       ³
		//³				  cQuery, bMountFile, lInclui )                                                                ³
		//³nOpcx			- Opcao (inclusao, exclusao, etc).                                                         ³
		//³cAlias		- Alias da tabela referente aos itens                                                          ³
		//³nOrder		- Ordem do SINDEX                                                                              ³
		//³cSeekKey		- Chave de pesquisa                                                                            ³
		//³bSeekWhile	- Loop na tabela cAlias                                                                        ³
		//³uSeekFor		- Valida cada registro da tabela cAlias (retornar .T. para considerar e .F. para desconsiderar ³
		//³				  o registro)                                                                                  ³
		//³aNoFields	- Array com nome dos campos que serao excluidos na montagem do aHeader                         ³
		//³aYesFields	- Array com nome dos campos que serao incluidos na montagem do aHeader                         ³
		//³lOnlyYes		- Flag indicando se considera somente os campos declarados no aYesFields + campos do usuario   ³
		//³cQuery		- Query para filtro da tabela cAlias (se for TOP e cQuery estiver preenchido, desconsidera     ³
		//³	           parametros cSeekKey e bSeekWhiele)                                                              ³
		//³bMountFile	- Preenchimento do aCols pelo usuario (aHeader e aCols ja estarao criados)                     ³
		//³lInclui		- Se inclusao passar .T. para qua aCols seja incializada com 1 linha em branco                 ³
		//³aHeaderAux	-                                                                                              ³
		//³aColsAux		-                                                                                              ³
		//³bAfterCols	- Bloco executado apos inclusao de cada linha no aCols                                         ³
		//³bBeforeCols	- Bloco executado antes da inclusao de cada linha no aCols                                     ³
		//³bAfterHeader -                                                                                              ³
		//³cAliasQry	- Alias para a Query                                                                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lFimp .And. SF1->F1_FIMP$'TS' .And. SF1->F1_STATUS='C' .And. l103Class//Tratamento para bloqueio de alteracoes na classificacao de uma nota bloqueada e ja transmitida.
			nOpcX:= 2			
			FillGetDados(nOpcX,"SD1",1,/*cSeek*/,/*{|| &cWhile }*/,{||.T.},aNoFields,/*aYesFields*/,/*lOnlyYes*/,cQuery,{|| MontaaCols(bWhileSD1,lQuery,l103Class,lClassOrd,lNfeOrd,aRecClasSD1,@nCounterSD1,cAliasSD1,cAliasSB1,@aRecSD1,@aRateio,cCpBasePIS,cCpValPIS,cCpAlqPIS,cCpBaseCOF,cCpValCOF,cCpAlqCOF,@aHeader,@aCols,l103Inclui,aHeadSDE,aColsSDE,@lContinua) },Inclui,/*aHeaderAux*/,/*aColsAux*/,/*bAfterCols*/,/*bbeforeCols*/,/*bAfterHeader*/,/*cAliasQry*/)
		Else
			FillGetDados(nOpcX,"SD1",1,/*cSeek*/,/*{|| &cWhile }*/,{||.T.},aNoFields,/*aYesFields*/,/*lOnlyYes*/,cQuery,{|| MontaaCols(bWhileSD1,lQuery,l103Class,lClassOrd,lNfeOrd,aRecClasSD1,@nCounterSD1,cAliasSD1,cAliasSB1,@aRecSD1,@aRateio,cCpBasePIS,cCpValPIS,cCpAlqPIS,cCpBaseCOF,cCpValCOF,cCpAlqCOF,@aHeader,@aCols,l103Inclui,aHeadSDE,aColsSDE,@lContinua) },Inclui,/*aHeaderAux*/,/*aColsAux*/,/*bAfterCols*/,/*bbeforeCols*/,/*bAfterHeader*/,/*cAliasQry*/)
		 EndIf

		If lQuery
			DbSelectArea(cAliasSD1)
			dbCloseArea()
			DbSelectArea("SD1")
		EndIf
		
		If lContinua
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Compatibilizacao da Base X.07 p/ X.08       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If Empty(SF1->F1_RECBMTO) .And. !l103Class .And. !l103Visual
			MaFisAlt("NF_VALIRR",SF1->F1_IRRF,)
			MaFisAlt("NF_VALINS",SF1->F1_INSS,)
			MaFisAlt("NF_DESPESA",SF1->F1_DESPESA,)
			MaFisAlt("NF_FRETE",SF1->F1_FRETE,)
			MaFisAlt("NF_SEGURO",SF1->F1_SEGURO,)
		EndIf
		If !l103Class
			MaFisAlt("NF_FUNRURAL",SF1->F1_CONTSOC,)
		EndIf
		If !l103Visual .And. Empty(SF1->F1_HAWB) 
			MaFisAlt("NF_TOTAL",SF1->F1_VALBRUT,)
		Endif
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Rateio do valores de Frete/Seguro/Despesa do PC            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If SuperGetMV("MV_EASY",.F.,"N") == "N"
			If aRateio[1] <> 0
				MaFisAlt("NF_SEGURO",aRateio[1])
			EndIf
			If aRateio[2] <> 0
				MaFisAlt("NF_DESPESA",aRateio[2])
			EndIf
			If aRateio[3] <> 0
				MaFisAlt("NF_FRETE",aRateio[3])
			EndIf
			If aRateio[1]+aRateio[2]+aRateio[3] <> 0
				MaFisToCols(aHeader,aCols,,"MT100")
			EndIf
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Monta o Array contendo os Historico da NF                  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aHistor := A103Histor(SF1->(RecNo()))
	EndIf
	EndIf

	If (l103Inclui .Or. l103Class) .And. !l103Auto
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ PNEUAC - Ponto de Entrada definicao da Operacao            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ExistBlock("MT103PN")
			If !Execblock("MT103PN",.F.,.F.,)
				lContinua := .F.
			EndIf
		EndIf
	EndIf
	If lContinua .And. !l103Auto .And. !Len(aCols) > 0
		lContinua := .F.
		Help(" ",1,"RECNO")
	EndIf
	If lContinua

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³********************A T E N C A O ***************************³
		//³Quando for feita manutencao em alguma VALIDACAO dos GETs,    ³
		//³atualize as funcoes que se encontram no array aValidGet      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ		
		If ( l103Auto )
			aValidGet := {}
			aVldBlock := {}
			aNFeAut	  := aClone(aNFEletr)
			aDanfe    := aClone(aNFEDanfe)
			aIISS	  := aClone(aInfISS)
			aAdd(aVldBlock,{||NFeTipo(cTipo,@cA100For,@cLoja)})
			aAdd(aVldBlock,{||NfeFormul(cFormul,@cNFiscal,@cSerie)})
			aAdd(aVldBlock,{||NfeFornece(cTipo,@cA100For,@cLoja,,@nCombo,@oCombo,@cCodRet,@oCodRet,@aCodR,@cRecIss).And.CheckSX3("F1_DOC")})
			aAdd(aVldBlock,{||NfeFornece(cTipo,@cA100For,@cLoja,,@nCombo,@oCombo,@cCodRet,@oCodRet,@aCodR,@cRecIss).And.CheckSX3("F1_SERIE")})
			aAdd(aVldBlock,{||CheckSX3('F1_EMISSAO') .And. NfeEmissao(dDEmissao)})
			aAdd(aVldBlock,{||NfeFornece(cTipo,@cA100For,@cLoja,@cUfOrig,@nCombo,@oCombo,@cCodRet,@oCodRet,@aCodR,@cRecIss).And.CheckSX3("F1_FORNECE",cA100For)})
			aAdd(aVldBlock,{||NfeFornece(cTipo,@cA100For,@cLoja,@cUfOrig,@nCombo,@oCombo,@cCodRet,@oCodRet,@aCodR,@cRecIss).And.CheckSX3("F1_LOJA",cLoja)})
			aAdd(aVldBlock,{||CheckSX3('F1_ESPECIE',cEspecie)})
			aAdd(aVldBlock,{||CheckSX3('F1_EST',cUfOrig)})
			aAdd(aVldBlock,{||Vazio(cNatureza).Or.(ExistCpo('SED',cNatureza).And.NfeVldRef("NF_NATUREZA",cNatureza)) .And. If(lMt103Nat,ExecBlock("MT103NAT",.F.,.F.,cNatureza),.T.)})
			For nX = 11 to 59
				aAdd(aVldBlock,"")
			Next nX

			If l103Inclui
				Aadd(aValidGet,{"cTipo"    ,aAutoCab[ProcH("F1_TIPO"),2],"Eval(aVldBlock[1])",.F.})
				Aadd(aValidGet,{"cFormul"  ,aAutoCab[ProcH("F1_FORMUL"),2],"Eval(aVldBlock[2])",.F.})
				Aadd(aValidGet,{"cNFiscal" ,aAutoCab[ProcH("F1_DOC"),2],"Eval(aVldBlock[3])",.F.})
				Aadd(aValidGet,{"cSerie"   ,aAutoCab[ProcH("F1_SERIE"),2],"Eval(aVldBlock[4])",.F.})
				Aadd(aValidGet,{"dDEmissao",aAutoCab[ProcH("F1_EMISSAO"),2],"Eval(aVldBlock[5])",.F.})
				Aadd(aValidGet,{"cA100For" ,aAutoCab[ProcH("F1_FORNECE"),2],"Eval(aVldBlock[6])",.F.})
				Aadd(aValidGet,{"cLoja"    ,aAutoCab[ProcH("F1_LOJA"),2],"Eval(aVldBlock[7])",.F.})
				Aadd(aValidGet,{"cEspecie" ,aAutoCab[ProcH("F1_ESPECIE"),2],"Eval(aVldBlock[8])",.F.})
				
				If ProcH("F1_MOEDA") > 0
					Aadd(aValidGet,{"nMoedaCor" ,aAutoCab[ProcH("F1_MOEDA"),2],"",.F.})
				EndIf
				
				If ProcH("F1_TXMOEDA") > 0
					Aadd(aValidGet,{"nTaxa"     ,aAutoCab[ProcH("F1_TXMOEDA"),2],"",.F.})
				EndIf
				
				If ProcH("F1_EST") > 0
					Aadd(aValidGet,{"cUfOrig"  ,aAutoCab[ProcH("F1_EST"),2],"Eval(aVldBlock[9])",.F.})
				EndIf

				If cPaisLoc == "BRA"
					// NFE				    
					If ProcH("F1_NFELETR") > 0
						aVldBlock[11] := {||CheckSX3('F1_NFELETR',aNFeAut[01])}
						Aadd(aValidGet,{"aNFeAut[01]",aAutoCab[ProcH("F1_NFELETR"),2],"Eval(aVldBlock[11])",.F.}) 		
						aNFEletr[01] := aAutoCab[ProcH("F1_NFELETR"),2]
					Endif
					If ProcH("F1_CODNFE") > 0
						aVldBlock[12] := {||CheckSX3('F1_CODNFE',aNFeAut[02])}
						Aadd(aValidGet,{"aNFeAut[02]",aAutoCab[ProcH("F1_CODNFE"),2],"Eval(aVldBlock[12])",.F.}) 		
						aNFEletr[02] := aAutoCab[ProcH("F1_CODNFE"),2]
					Endif
					If ProcH("F1_EMINFE") > 0
						aVldBlock[13] := {||A103NFe('EMINFE',aNFeAut) .And. CheckSX3('F1_EMINFE',aNFeAut[03])}
						Aadd(aValidGet,{"aNFeAut[03]",aAutoCab[ProcH("F1_EMINFE"),2],"Eval(aVldBlock[13])",.F.}) 		
						aNFEletr[03] := aAutoCab[ProcH("F1_EMINFE"),2]
					Endif
					If ProcH("F1_HORNFE") > 0
						aVldBlock[14] := {||CheckSX3('F1_HORNFE',aNFeAut[04])}
						Aadd(aValidGet,{"aNFeAut[04]",aAutoCab[ProcH("F1_HORNFE"),2],"Eval(aVldBlock[14])",.F.}) 		
						aNFEletr[04] := aAutoCab[ProcH("F1_HORNFE"),2]
					Endif
					If ProcH("F1_CREDNFE") > 0
						aVldBlock[15] := {||A103NFe('CREDNFE',aNFeAut) .And. CheckSX3('F1_CREDNFE',aNFeAut[05])}
						Aadd(aValidGet,{"aNFeAut[05]",aAutoCab[ProcH("F1_CREDNFE"),2],"Eval(aVldBlock[15])",.F.}) 		
						aNFEletr[05] := aAutoCab[ProcH("F1_CREDNFE"),2]
					Endif
					If ProcH("F1_NUMRPS") > 0
						aVldBlock[16] := {||CheckSX3('F1_NUMRPS',aNFeAut[06])}
						Aadd(aValidGet,{"aNFeAut[06]",aAutoCab[ProcH("F1_NUMRPS"),2],"Eval(aVldBlock[16])",.F.}) 		
						aNFEletr[06] := aAutoCab[ProcH("F1_NUMRPS"),2]
					Endif
					If ProcH("F1_MENNOTA") > 0
						aVldBlock[29] := {||CheckSX3('F1_MENNOTA',aNFeAut[07])}
						Aadd(aValidGet,{"aNFeAut[07]",aAutoCab[ProcH("F1_MENNOTA"),2],"Eval(aVldBlock[29])",.F.}) 		
						aNFEletr[07] := aAutoCab[ProcH("F1_MENNOTA"),2]
					Endif
					If ProcH("F1_MENPAD") > 0
						aVldBlock[30] := {||CheckSX3('F1_MENPAD',aNFeAut[08])}
						Aadd(aValidGet,{"aNFeAut[08]",aAutoCab[ProcH("F1_MENPAD"),2],"Eval(aVldBlock[30])",.F.}) 		
						aNFEletr[08] := aAutoCab[ProcH("F1_MENPAD"),2]
					Endif    
					
					//Danfe
					If lNfeDanfe
						If ProcH("F1_TRANSP") > 0
							aVldBlock[17] := {|| ExistCpo("SA4",aDanfe[01],1,NIL,.T.)}
							Aadd(aValidGet,{"aDanfe[01]",aAutoCab[ProcH("F1_TRANSP"),2],"Eval(aVldBlock[17])",.F.}) 		
							aNfeDanfe[01] := aAutoCab[ProcH("F1_TRANSP"),2]
						Endif
					
						If ProcH("F1_PLIQUI") > 0
							aVldBlock[18] := {||CheckSX3('F1_PLIQUI',aDanfe[02])}
							Aadd(aValidGet,{"aDanfe[02]",aAutoCab[ProcH("F1_PLIQUI"),2],"Eval(aVldBlock[18])",.F.}) 		
							aNfeDanfe[02] := aAutoCab[ProcH("F1_PLIQUI"),2]
						Endif
					
						If ProcH("F1_PBRUTO") > 0
							aVldBlock[19] := {||CheckSX3('F1_PBRUTO',aDanfe[03])}
							Aadd(aValidGet,{"aDanfe[03]",aAutoCab[ProcH("F1_PBRUTO"),2],"Eval(aVldBlock[19])",.F.}) 		
							aNfeDanfe[03] := aAutoCab[ProcH("F1_PBRUTO"),2]
						Endif
					
						If ProcH("F1_ESPECI1") > 0
							aVldBlock[20] := {||CheckSX3('F1_ESPECI1',aDanfe[04])}
							Aadd(aValidGet,{"aDanfe[04]",aAutoCab[ProcH("F1_ESPECI1"),2],"Eval(aVldBlock[20])",.F.}) 		
							aNfeDanfe[04] := aAutoCab[ProcH("F1_ESPECI1"),2]
						Endif
					
						If ProcH("F1_VOLUME1") > 0
							aVldBlock[21] := {||CheckSX3('F1_VOLUME1',aDanfe[05])}
							Aadd(aValidGet,{"aDanfe[05]",aAutoCab[ProcH("F1_VOLUME1"),2],"Eval(aVldBlock[21])",.F.}) 		
							aNfeDanfe[05] := aAutoCab[ProcH("F1_VOLUME1"),2]
						Endif
						
						If ProcH("F1_ESPECI2") > 0
							aVldBlock[22] := {||CheckSX3('F1_ESPECI2',aDanfe[06])}
							Aadd(aValidGet,{"aDanfe[06]",aAutoCab[ProcH("F1_ESPECI2"),2],"Eval(aVldBlock[22])",.F.}) 		
							aNfeDanfe[06] := aAutoCab[ProcH("F1_ESPECI2"),2]
						Endif
					
						If ProcH("F1_VOLUME2") > 0
							aVldBlock[23] := {||CheckSX3('F1_VOLUME2',aDanfe[07])}
							Aadd(aValidGet,{"aDanfe[07]",aAutoCab[ProcH("F1_VOLUME2"),2],"Eval(aVldBlock[23])",.F.}) 		
							aNfeDanfe[07] := aAutoCab[ProcH("F1_VOLUME2"),2]
						Endif
						
						If ProcH("F1_ESPECI3") > 0
							aVldBlock[24] := {||CheckSX3('F1_ESPECI3',aDanfe[08])}
							Aadd(aValidGet,{"aDanfe[08]",aAutoCab[ProcH("F1_ESPECI3"),2],"Eval(aVldBlock[24])",.F.}) 		
							aNfeDanfe[08] := aAutoCab[ProcH("F1_ESPECI3"),2]
						Endif
					
						If ProcH("F1_VOLUME3") > 0
							aVldBlock[25] := {||CheckSX3('F1_VOLUME3',aDanfe[09])}
							Aadd(aValidGet,{"aDanfe[09]",aAutoCab[ProcH("F1_VOLUME3"),2],"Eval(aVldBlock[25])",.F.}) 		
							aNfeDanfe[09] := aAutoCab[ProcH("F1_VOLUME3"),2]
						Endif
					
						If ProcH("F1_ESPECI4") > 0
							aVldBlock[26] := {||CheckSX3('F1_ESPECI4',aDanfe[10])}
							Aadd(aValidGet,{"aDanfe[10]",aAutoCab[ProcH("F1_ESPECI4"),2],"Eval(aVldBlock[26])",.F.}) 		
							aNfeDanfe[10] := aAutoCab[ProcH("F1_ESPECI4"),2]
						Endif
					
						If ProcH("F1_VOLUME4") > 0
							aVldBlock[27] :=  {||CheckSX3('F1_VOLUME4',aDanfe[11])}
							Aadd(aValidGet,{"aDanfe[11]",aAutoCab[ProcH("F1_VOLUME4"),2],"Eval(aVldBlock[27])",.F.}) 		
							aNfeDanfe[11] := aAutoCab[ProcH("F1_VOLUME4"),2]
						Endif
					
						If ProcH("F1_PLACA") > 0
							aVldBlock[28] := {||CheckSX3('F1_PLACA',aDanfe[12])}
							Aadd(aValidGet,{"aDanfe[12]",aAutoCab[ProcH("F1_PLACA"),2],"Eval(aVldBlock[28])",.F.}) 		
							aNfeDanfe[12] := aAutoCab[ProcH("F1_PLACA"),2]
						Endif
					
						If ProcH("F1_CHVNFE") > 0
							aVldBlock[29] := {||CheckSX3('F1_CHVNFE',aDanfe[13]),A103ConsNfeSef()}
							Aadd(aValidGet,{"aDanfe[13]",aAutoCab[ProcH("F1_CHVNFE"),2],"Eval(aVldBlock[29])",.F.}) 		
							aNfeDanfe[13] := aAutoCab[ProcH("F1_CHVNFE"),2]
						Endif
						
						If ProcH("F1_TPFRETE") > 0
							aVldBlock[30] := {||CheckSX3('F1_TPFRETE',aDanfe[14])}
							Aadd(aValidGet,{"aDanfe[14]",aAutoCab[ProcH("F1_TPFRETE"),2],"Eval(aVldBlock[30])",.F.}) 		
							aNfeDanfe[14] := aAutoCab[ProcH("F1_TPFRETE"),2]
						Endif
						
						If ProcH("F1_VALPEDG") > 0
							aVldBlock[31] := {||CheckSX3('F1_VALPEDG',aDanfe[15])}
							Aadd(aValidGet,{"aDanfe[15]",aAutoCab[ProcH("F1_VALPEDG"),2],"Eval(aVldBlock[31])",.F.}) 		
							aNfeDanfe[15] := aAutoCab[ProcH("F1_VALPEDG"),2]
						Endif  
						
						If ProcH("F1_FORRET") > 0
							aVldBlock[32] := {||CheckSX3('F1_FORRET',aDanfe[16])}
							Aadd(aValidGet,{"aDanfe[16]",aAutoCab[ProcH("F1_FORRET"),2],"Eval(aVldBlock[32])",.F.}) 		
							aNfeDanfe[16] := aAutoCab[ProcH("F1_FORRET"),2]
						Endif  
						
						If ProcH("F1_LOJARET") > 0
							aVldBlock[33] := {||CheckSX3('F1_LOJARET',aDanfe[17])}
							Aadd(aValidGet,{"aDanfe[17]",aAutoCab[ProcH("F1_LOJARET"),2],"Eval(aVldBlock[33])",.F.}) 		
							aNfeDanfe[17] := aAutoCab[ProcH("F1_LOJARET"),2]
						Endif
						
						If ProcH("F1_TPCTE") > 0
							aVldBlock[34] := {||CheckSX3('F1_TPCTE',aDanfe[18])}
							Aadd(aValidGet,{"aDanfe[18]",aAutoCab[ProcH("F1_TPCTE"),2],"Eval(aVldBlock[34])",.F.}) 		
							aNfeDanfe[18] := aAutoCab[ProcH("F1_TPCTE"),2]
						Endif  
						
						If ProcH("F1_FORENT") > 0
							aVldBlock[35] := {||CheckSX3('F1_FORENT',aDanfe[19])}
							Aadd(aValidGet,{"aDanfe[19]",aAutoCab[ProcH("F1_FORENT"),2],"Eval(aVldBlock[35])",.F.}) 		
							aNfeDanfe[19] := aAutoCab[ProcH("F1_FORENT"),2]
						Endif 
						
						If ProcH("F1_LOJAENT") > 0
							aVldBlock[36] := {||CheckSX3('F1_LOJAENT',aDanfe[20])}
							Aadd(aValidGet,{"aDanfe[20]",aAutoCab[ProcH("F1_LOJAENT"),2],"Eval(aVldBlock[36])",.F.}) 		
							aNfeDanfe[20] := aAutoCab[ProcH("F1_LOJAENT"),2]
						Endif 
						
						If ProcH("F1_NUMAIDF") > 0
							aVldBlock[37] := {||CheckSX3('F1_NUMAIDF',aDanfe[21])}
							Aadd(aValidGet,{"aDanfe[21]",aAutoCab[ProcH("F1_NUMAIDF"),2],"Eval(aVldBlock[37])",.F.}) 		
							aNfeDanfe[21] := aAutoCab[ProcH("F1_NUMAIDF"),2]
						Endif 
						
						If ProcH("F1_ANOAIDF") > 0
							aVldBlock[38] := {||CheckSX3('F1_ANOAIDF',aDanfe[22])}
							Aadd(aValidGet,{"aDanfe[22]",aAutoCab[ProcH("F1_ANOAIDF"),2],"Eval(aVldBlock[38])",.F.}) 		
							aNfeDanfe[22] := aAutoCab[ProcH("F1_ANOAIDF"),2]
						Endif 
						If ProcH("F1_MODAL") > 0
							aVldBlock[39] := {||CheckSX3('F1_MODAL',aDanfe[23])}
							Aadd(aValidGet,{"aDanfe[23]",aAutoCab[ProcH("F1_MODAL"),2],"Eval(aVldBlock[39])",.F.}) 		
							aNfeDanfe[23] := aAutoCab[ProcH("F1_MODAL"),2]
						Endif
					EndIf

					// Informacoes adicionais
					If ProcH("F1_INCISS") > 0
						aVldBlock[56] := {||CheckSX3('F1_INCISS',aInfAdic[01])}
						Aadd(aValidGet,{"aInfAdic[01]",aAutoCab[ProcH("F1_INCISS"),2],"Eval(aVldBlock[56])",.F.}) 		
						aInfAdic[01] := aAutoCab[ProcH("F1_INCISS"),2]
					EndIf

					If ProcH("F1_VEICUL1") > 0
						aVldBlock[57] := {||CheckSX3('F1_VEICUL1',aInfAdic[02])}
						Aadd(aValidGet,{"aInfAdic[02]",aAutoCab[ProcH("F1_VEICUL1"),2],"Eval(aVldBlock[57])",.F.}) 		
						aInfAdic[02] := aAutoCab[ProcH("F1_VEICUL1"),2]
					EndIf

					If ProcH("F1_VEICUL2") > 0
						aVldBlock[58] := {||CheckSX3('F1_VEICUL2',aInfAdic[03])}
						Aadd(aValidGet,{"aInfAdic[03]",aAutoCab[ProcH("F1_VEICUL2"),2],"Eval(aVldBlock[58])",.F.}) 		
						aInfAdic[03] := aAutoCab[ProcH("F1_VEICUL2"),2]
					EndIf

					If ProcH("F1_VEICUL3") > 0
						aVldBlock[59] := {||CheckSX3('F1_VEICUL3',aInfAdic[04])}
						Aadd(aValidGet,{"aInfAdic[04]",aAutoCab[ProcH("F1_VEICUL3"),2],"Eval(aVldBlock[59])",.F.}) 		
						aInfAdic[04] := aAutoCab[ProcH("F1_VEICUL3"),2]
					EndIf

					If cPaisLoc = "BRA" .And. lISSxMun .And. Ascan(aAutoCab,{|x| x[1] == 'A2_COD_MUN'}) > 0
						//DADOS DO MUNICIPIO
						aVldBlock[39] := {||CheckSX3('A2_COD_MUN',aIISS[1][1])}
						Aadd(aValidGet,{"aIISS[1][1]",aAutoCab[ProcH("A2_COD_MUN"),2],"Eval(aVldBlock[39])",.F.})
						aInfISS[1][1] := aAutoCab[ProcH("A2_COD_MUN"),2]
						
						aVldBlock[40] := {||CheckSX3('CC2_MUN',aIISS[1][2])}
						Aadd(aValidGet,{"aIISS[1][2]",aAutoCab[ProcH("CC2_MUN"),2],"Eval(aVldBlock[40])",.F.})
						aInfISS[1][2] := aAutoCab[ProcH("CC2_MUN"),2]
								
						aVldBlock[41] := {||CheckSX3('CC2_EST',aIISS[1][3])}
						Aadd(aValidGet,{"aIISS[1][3]",aAutoCab[ProcH("CC2_EST"),2],"Eval(aVldBlock[41])",.F.})
						aInfISS[1][3] := aAutoCab[ProcH("CC2_EST"),2]

						aVldBlock[42] := {||CheckSX3('CC2_MDEDMA',aIISS[1][4])}
						Aadd(aValidGet,{"aIISS[1][4]",aAutoCab[ProcH("CC2_MDEDMA"),2],"Eval(aVldBlock[42])",.F.})
						aInfISS[1][4] := aAutoCab[ProcH("CC2_MDEDMA"),2]						
						
						aVldBlock[43] := {||CheckSX3('CC2_MDEDSR',aIISS[1][5])}
						Aadd(aValidGet,{"aIISS[1][5]",aAutoCab[ProcH("CC2_MDEDSR"),2],"Eval(aVldBlock[43])",.F.})
						aInfISS[1][5] := aAutoCab[ProcH("CC2_MDEDSR"),2]
						
						aVldBlock[44] := {||CheckSX3('CC2_PERMAT',aIISS[1][6])}
						Aadd(aValidGet,{"aIISS[1][6]",aAutoCab[ProcH("CC2_PERMAT"),2],"Eval(aVldBlock[44])",.F.})
						aInfISS[1][6] := aAutoCab[ProcH("CC2_PERMAT"),2]
						
						aVldBlock[45] := {||CheckSX3('CC2_PERSER',aIISS[1][7])}
						Aadd(aValidGet,{"aIISS[1][7]",aAutoCab[ProcH("CC2_PERSER"),2],"Eval(aVldBlock[45])",.F.})
						aInfISS[1][7] := aAutoCab[ProcH("CC2_PERSER"),2]
												
						//ISS APURADO						
						aVldBlock[46] := {||CheckSX3('D1_TOTAL',aIISS[2][1])}
						Aadd(aValidGet,{"aIISS[2][1]",aAutoCab[ProcH("D1_TOTAL"),2],"Eval(aVldBlock[46])",.F.})
						aInfISS[2][1] := aAutoCab[ProcH("D1_TOTAL"),2]
						
						aVldBlock[47] := {||CheckSX3('D1_ABATISS',aIISS[2][2])}
						Aadd(aValidGet,{"aIISS[2][2]",aAutoCab[ProcH("D1_ABATISS"),2],"Eval(aVldBlock[47])",.F.})
						aInfISS[2][2] := aAutoCab[ProcH("D1_ABATISS"),2]
						
						aVldBlock[48] := {||CheckSX3('D1_ABATMAT',aIISS[2][3])}
						Aadd(aValidGet,{"aIISS[2][3]",aAutoCab[ProcH("D1_ABATMAT"),2],"Eval(aVldBlock[48])",.F.})
						aInfISS[2][3] := aAutoCab[ProcH("D1_ABATMAT"),2]
						
						aVldBlock[49] := {||CheckSX3('D1_BASEISS',aIISS[2][4])}
						Aadd(aValidGet,{"aIISS[2][4]",aAutoCab[ProcH("D1_BASEISS"),2],"Eval(aVldBlock[49])",.F.})
						aInfISS[2][4] := aAutoCab[ProcH("D1_BASEISS"),2]
						
						aVldBlock[50] := {||CheckSX3('D1_VALISS',aIISS[2][5])}
						Aadd(aValidGet,{"aIISS[2][5]",aAutoCab[ProcH("D1_VALISS"),2],"Eval(aVldBlock[50])",.F.})
						aInfISS[2][5] := aAutoCab[ProcH("D1_VALISS"),2]
						
						//INSS APURADO
						aVldBlock[51] := {||CheckSX3('D1_TOTAL',aIISS[3][1])}
						Aadd(aValidGet,{"aIISS[3][1]",aAutoCab[ProcH("D1_TOTAL"),2],"Eval(aVldBlock[51])",.F.})
						aInfISS[3][1] := aAutoCab[ProcH("D1_TOTAL"),2]
						
						aVldBlock[52] := {||CheckSX3('D1_ABATINS',aIISS[3][2])}
						Aadd(aValidGet,{"aIISS[3][2]",aAutoCab[ProcH("D1_ABATINS"),2],"Eval(aVldBlock[52])",.F.})
						aInfISS[3][2] := aAutoCab[ProcH("D1_ABATINS"),2]
																						 
						aVldBlock[53] := {||CheckSX3('D1_AVLINSS',aIISS[3][3])}
						Aadd(aValidGet,{"aIISS[3][3]",aAutoCab[ProcH("D1_AVLINSS"),2],"Eval(aVldBlock[53])",.F.})
						aInfISS[3][3] := aAutoCab[ProcH("D1_AVLINSS"),2]
						
						aVldBlock[54] := {||CheckSX3('D1_BASEINS',aIISS[3][4])}
						Aadd(aValidGet,{"aIISS[3][4]",aAutoCab[ProcH("D1_BASEINS"),2],"Eval(aVldBlock[54])",.F.})
						aInfISS[3][4] := aAutoCab[ProcH("D1_BASEINS"),2]
						
						aVldBlock[55] := {||CheckSX3('D1_VALINS',aIISS[3][5])}
						Aadd(aValidGet,{"aIISS[3][5]",aAutoCab[ProcH("D1_VALINS"),2],"Eval(aVldBlock[55])",.F.})
						aInfISS[3][5] := aAutoCab[ProcH("D1_VALINS"),2]					
					EndIf
				Endif

				If !lWhenGet
					nOpc := 1  	
				EndIf
				If !SF1->(MsVldGAuto(aValidGet))
					nOpc := 0
				EndIf
				If ProcH("F1_COND") > 0
					cCondicao := aAutoCab[ProcH("F1_COND"),2]
				EndIf

				If ProcH("F1_RECISS") > 0
					cRecIss := aAutoCab[ProcH("F1_RECISS"),2]
				EndIf
				If ( nOpc == 1 .Or. lWhenGet ) .And. l103Inclui
					MaFisIni(cA100For,cLoja,IIf(cTipo$'DB',"C","F"),cTipo,Nil,MaFisRelImp("MT100",{"SF1","SD1"}),,.F.,,,,,,,,,,,,,,,,,dDEmissao)
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Atualiza UF de Origem apos a inicializacao das rotinas fiscais ³			
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					MaFisAlt("NF_UFORIGEM",cUfOrig)
				EndIf
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Atualiza Especie do documento apos a inicializacao das rotinas fiscais ³			
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If(Type("cEspecie")<>"U" .And. cEspecie<>Nil)
					MaFisAlt("NF_ESPECIE",cEspecie)			
				EndIf
			Else
				If ALTERA .and. (cPaisLoc == "BRA") .and. lNfeDanfe .and. (ProcH("F1_CHVNFE") > 0)
					aVldBlock[29] := {||CheckSX3('F1_CHVNFE',aDanfe[13])}
					Aadd(aValidGet,{"aDanfe[13]",aAutoCab[ProcH("F1_CHVNFE"),2],"Eval(aVldBlock[29])",.F.}) 		
					aNfeDanfe[13] := aAutoCab[ProcH("F1_CHVNFE"),2]
				Endif
				nOpc := 1	
			EndIf
			If nOpc == 1 .Or. lWhenGet
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Verifica o preenchimento do campo D1_ITEM                  ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				cItem := StrZero(1,Len(SD1->D1_ITEM))
				For nX := 1 To Len(aAutoItens)
					nY := aScan(aAutoItens[nX],{|x| AllTrim(x[1])=="D1_ITEM"})
					If nY == 0
						aSize(aAutoItens[nX],Len(aAutoItens[nX])+1)
						For nLoop := Len(aAutoItens[nX]) To 2 STEP -1
							aAutoItens[nX][nLoop]	:=	aAutoItens[nX][nLoop-1]
						Next nLoop
						aAutoItens[nX][1] := {"D1_ITEM", cItem, Nil}
					EndIf
					cItem := Soma1(cItem)
				Next nX
				If ProcH("F1_COND") > 0
					cCondicao := aAutoCab[ProcH("F1_COND"),2]
				EndIf
				If !Empty( ProcH( "E2_NATUREZ" ))
					cNatureza := aAutoCab[ProcH("E2_NATUREZ"),2]
					Eval(aVldBlock[10])
				EndIf
				If GetMV("MV_INTPMS",,"N") == "S"
					If GetMV("MV_PMSIPC",,2) == 1 //Se utiliza amarracao automatica dos itens da NFE com o Projeto
						For nX := 1 To Len(aAutoItens)				
							PMS103IPC(Val(aAutoItens[nX][aScan(aAutoItens[nX],{|x| AllTrim(x[1])=="D1_ITEM"})][2]))					
						Next nX
					Else
						If Empty(aAutoAFN)
							lRatAFN := .F.
						EndIf
						For nX := 1 To Len(aAutoAFN)
							If lRatAFN
								lRatAFN := !Empty(aAutoAFN[nX]) 
							EndIf
						Next nX
						If lRatAFN
							For nX := 1 To Len(aAutoItens)
								aRatAFN := aClone(aAutoAFN)
								If !PmsVldAFN(Val(aAutoItens[nX][aScan(aAutoItens[nX],{|x| AllTrim(x[1])=="D1_ITEM"})][2]))//Se as validacoes estiverem ok, continua o processo de amarracao
									aRatAFN := {}
									Exit
								EndIf
							Next nX
						EndIf							
					EndIf
				EndIf
				If !MsGetDAuto(aAutoItens,"A103LinOk",{|| A103TudOk()},aAutoCab,aRotina[nOpcx][4])
					If lWhenGet	 
						IF !IsBlind()
							MostraErro()
								Else
							Aviso("Atenção","Houveram inconsistencias nas validações da rotina automatica. Favor verificar arquivo SC*.LOG no diretorio startPath do protheus.",{"Item Ped"}, 2)
						EndIf
						lProcGet := .F.
					Endif	
					nOpc := 0
				EndIf
				
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ-¿
				//³ Se o item estiver amarrado a um PC com rateio, copia rateio.³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ-Ù
				If l103Auto
					nPosPC		:= aScan(aHeader,{|x| AllTrim(x[2])=="D1_PEDIDO"})
					nPosItPC  	:= aScan(aHeader,{|x| AllTrim(x[2])=="D1_ITEMPC"})
					nPosRat  	:= aScan(aHeader,{|x| AllTrim(x[2])=="D1_RATEIO"})
					nPosItNF	:= aScan(aHeader,{|x| AllTrim(x[2])=="D1_ITEM"})
					If nPosPC > 0 .And. nPosItPc > 0 .And. nPosRat > 0
						If Empty(aHeadSDE)
							dbSelectArea("SX3")
							dbSetOrder(1)
							MsSeek("SDE")
							While !EOF() .And. (SX3->X3_ARQUIVO == "SDE")
								IF X3USO(SX3->X3_USADO) .AND. cNivel >= SX3->X3_NIVEL .And. !"DE_CUSTO"$SX3->X3_CAMPO
									AADD(aHeadSDE,{ TRIM(x3Titulo()),SX3->X3_CAMPO,SX3->X3_PICTURE,SX3->X3_TAMANHO,SX3->X3_DECIMAL,SX3->X3_VALID,SX3->X3_USADO,SX3->X3_TIPO,SX3->X3_F3,SX3->X3_CONTEXT } )
								EndIf
								dbSelectArea("SX3")
								dbSkip()
							EndDo
						EndIf
						dbSelectArea("SC7")
						SC7->(dbSetOrder(1))
						For nX := 1 To Len(aCols)
							If !Empty(aCols[nX][nPosPC]) .And. !Empty(aCols[nX][nPosItPC]) .And. aCols[nX][nPosRat] == "1"
								If SC7->(MsSeek(xFilial("SC7")+aCols[nX][nPosPC]+aCols[nX][nPosItPC]))	
									RatPed2NF(aHeadSDE,@aColsSDE,aCols[nX][nPosItNF],SC7->(RecNo()))	
								EndIf
							ElseIf !Empty(aRateioCC) .And. aCols[nX][nPosRat] == "1"
								RatPed2NF(aHeadSDE,@aColsSDE,aCols[nX][nPosItNF],0,aRateioCC)										
							EndIf
						Next nX
					EndIf
				EndIf
				
				For nX := 1 to Len(aAutoImp)
					MaFisAlt(aAutoImp[nX][1],aAutoImp[nX][2])
				Next nX
				If ProcH("F1_DESCONT") > 0 .And. !cTipo$"PI"
					MaFisAlt("NF_DESCONTO",aAutoCab[ProcH("F1_DESCONT"),2])
				EndIf
				If ProcH("F1_DESPESA") > 0
					MaFisAlt("NF_DESPESA",aAutoCab[ProcH("F1_DESPESA"),2])
				EndIf
				If ProcH("F1_SEGURO") > 0
					MaFisAlt("NF_SEGURO",aAutoCab[ProcH("F1_SEGURO"),2])
				EndIf
				If ProcH("F1_FRETE") > 0
					MaFisAlt("NF_FRETE",aAutoCab[ProcH("F1_FRETE"),2])
				EndIf
				If ProcH("F1_BASEICM") > 0
					MaFisAlt("NF_BASEICM",aAutoCab[ProcH("F1_BASEICM"),2])
				EndIf
				If ProcH("F1_VALICM") > 0
					MaFisAlt("NF_VALICM",aAutoCab[ProcH("F1_VALICM"),2])
				EndIf
				If ProcH("F1_BASEIPI") > 0
					MaFisAlt("NF_BASEIPI",aAutoCab[ProcH("F1_BASEIPI"),2])
				EndIf
				If ProcH("F1_VALIPI") > 0
					MaFisAlt("NF_VALIPI",aAutoCab[ProcH("F1_VALIPI"),2])
				EndIf
				If ProcH("F1_BRICMS") > 0
					MaFisAlt("NF_BASESOL",aAutoCab[ProcH("F1_BRICMS"),2])
				EndIf
				If ProcH("F1_ICMSRET") > 0
					MaFisAlt("NF_VALSOL",aAutoCab[ProcH("F1_ICMSRET"),2])
				EndIf
				If ProcH("F1_RECISS") > 0
					MaFisAlt("NF_RECISS",aAutoCab[ProcH("F1_RECISS"),2])
				EndIf

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Ajusta os dados de acordo com a nota fiscal original         ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If lWhenGet
					Ascan(aAutoItens,{|X| !Empty( nPosRec := Ascan(  x, { |Y| Alltrim( y[1] ) == "D1RECNO"}))} )
					If nPosRec > 0
						For nX := 1 to Len(aAutoItens)
							nPosRec := Ascan(aAutoItens[nX], { |y| Alltrim( y[1] ) == "D1RECNO"})						
							MaFisAlt("IT_RECORI",aAutoItens[nX,nPosRec,2],nX)
							MaFisAlt("NF_UFORIGEM",SF2->F2_EST)						
						Next
						MaFisToCols(aHeader,aCols,Len(aCols),'MT100')						
					Endif	
				Endif	

				If nOpc == 1 .Or. lWhenGet
					NfeFldFin(,l103Visual,aRecSE2,0,aRecSE1,@aHeadSE2,@aColsSE2,@aHeadSEV,@aColsSEV,@aFldCbAtu[6],NIL,@cModRetPIS,lPccBaixa,@lTxNeg,@cNatureza,@nTaxaMoeda)
					Eval(aFldCbAtu[6])
					Eval(bRefresh,6,6)
				EndIf
			EndIf
				
			//Se for Rotina Troca do modulo SIGALOJA, a funcao MaFisAjIt nao retorna um array preenchido
			If  nOpc == 1 .And. !( nModulo==12 .AND. FunName()=="LOJA720" ) .And. SuperGetMV("MV_EASY",.F.,"N") == "N" 
				//Gerando informacoes dos lanctos da apuracao de ICMS.
				For nX := 1 To Len(aAutoItens)
					If nModulo==12 .AND. lFrtPgIt
						//Somente realiza o tratamento para rotinas do controle de lojas
						aRetMaFisAjIt := MaFisAjIt( FRTPegaIT( aAutoItens[nX][ aScan( aAutoItens[nX],{|x| AllTrim(x[1])=="D1_ITEM"} ) ][2] ) )
					Else
						aRetMaFisAjIt := MaFisAjIt( Val( aAutoItens[nX][ aScan( aAutoItens[nX],{|x| AllTrim(x[1])=="D1_ITEM"} ) ][2] ) )
					EndIf
					If !Empty(aRetMaFisAjIt)
						aAdd(aInfApurICMS, aRetMaFisAjIt)
					EndIf
				Next nX
			EndIf

			If lWhenGet
				l103Auto := .F.
			EndIf		
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Inicializa a gravacao dos lancamentos do SIGAPCO³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		PcoIniLan("000054")

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Montagem da Tela da Nota fiscal de entrada                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If (!l103Auto .Or. lWhenGet) .And. lProcGet		
			aObjects 	:= {}
			aSizeAut	:= MsAdvSize(,.F.,400)
			AAdd( aObjects, { 0,    41, .T., .F. } )
			AAdd( aObjects, { 100, 100, .T., .T. } )
			AAdd( aObjects, { 0,    75, .T., .F. } )

			aInfo := { aSizeAut[ 1 ], aSizeAut[ 2 ], aSizeAut[ 3 ], aSizeAut[ 4 ], 3, 3 }

			aPosObj := MsObjSize( aInfo, aObjects )
			//Rafael Karczevski - 17/07/2019 - Alterado devido a nova versão MATA103X.prx
			aPosGet := MsObjGetPos(aSizeAut[3]-aSizeAut[1],310,;
				{If(cPaisLoc<>"PTG",If(lSubSerie,{8,30,72,92,130,150,180,200,235,250,275,295},{8,35,75,100,140,165,194,220,260,280}),{8,35,78,100,140,160,200,230,250,270}),;
				If( l103Visual .Or. l103Class .Or. !lConsMedic,{8,35,75,100,nPosGetLoja,194,220,260,280},{8,35,75,108,135,160,190,220,244,265} ) ,;
				{5,70,160,205,295},;
				{6,34,200,215},;
				{6,34,75,103,148,164,230,253},;
				{6,34,200,218,280},;
				{11,50,150,190},;
				{273,130,190,293,205},;
				{005,025,065,085,125,145,185,205,250,275},;
				{11,35,80,110,165,190},;
				{3,35,95,150,205,255,170,230,265,;
				55,115,155,217,185,245,280,167,222,272},;
				{3, 4}}) // 12 - Folder Informações Adicionais

			DEFINE MSDIALOG oDlg FROM aSizeAut[7],0 TO aSizeAut[6],aSizeAut[5] TITLE cTituloDlg Of oMainWnd PIXEL //"Documento de Entrada"

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Objeto criado para receber o foco quando pressionado o botao confirma ³
			//³ da dialog. Usado para identificar quando foi pressionado o botao      ³
			//³ confirma, atraves do parametro passado ao lostfocus                   ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			@ 100000,100000 MSGET oFoco103 VAR cVarFoco SIZE 12,09 PIXEL OF oDlg
			oFoco103:Cargo := {.T.,.T.}
			oFoco103:Disable()			
			If (lFimp .And. SF1->F1_FIMP$'ST'.And. SF1->F1_STATUS='C')
				NfeCabDoc(oDlg,{aPosGet[1],aPosGet[2],aPosObj[1]},@bCabOk,l103Class.Or.l103Visual,NIL,@cUfOrig,.F.,,@nCombo,@oCombo,@cCodRet,@oCodRet,@lNfMedic,@aCodR,@cRecIss,@cNatureza)
				Else
				NfeCabDoc(oDlg,{aPosGet[1],aPosGet[2],aPosObj[1]},@bCabOk,l103Class.Or.l103Visual,NIL,@cUfOrig,l103Class,,@nCombo,@oCombo,@cCodRet,@oCodRet,@lNfMedic,@aCodR,@cRecIss,@cNatureza)           
			 EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Integracao com SIGAMNT - NG Informatica             ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			nPORDEM := GDFieldPos("D1_ORDEM")
			If SuperGetMV("MV_NGMNTNO",.F.,"2") == "1" .And. !Empty(nPORDEM)
				STJ->(dbSetOrder(1))
				SC7->(dbSetOrder(19))
				SC1->(dbSetOrder(1))
				
				For nG := 1 To Len(aCols)
					//Se a Ordem de Servico nao estiver definida e a Ordem de Producao estiver preenchida, recebe a O.S. dela caso seja valida
					If Empty(aCols[nG,nPORDEM])
						If STJ->(dbSeek(xFilial("STJ")+SubStr(aCols[nG,GDFieldPos("D1_OP")],1,nTamTjOrd)))
							aCols[nG,nPORDEM] := STJ->TJ_ORDEM
						ElseIf 	SC7->(dbSeek(xFilial("SC7")+aCols[nG,GDFieldPos("D1_COD")]+aCols[nG,GDFieldPos("D1_PEDIDO")]+aCols[nG,GDFieldPos("D1_ITEMPC")])) .And. ;
								SC1->(dbSeek(xFilial("SC1")+SC7->C7_NUMSC)) .And. ;
								STJ->(dbSeek(xFilial("STJ")+SubStr(SC1->C1_OP,1,At("OS",SC1->C1_OP)-1)))
							aCols[nG,nPORDEM] := SubStr(SC1->C1_OP,1,At("OS",SC1->C1_OP)-1)
						EndIf
					EndIf
				Next nG
			EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Ponto de entrada para bloquear os campos do aCols na Classificacao e definir quais poderao ser alterados	³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If l103Class .And. lMT103BCLA
				aMT103BCLA := ExecBlock("MT103BCLA",.F.,.F.)
				If ValType(aMT103BCLA) == "A"
					lRetBCla := .T.
				EndIf
			EndIf

			oGetDados := MSGetDados():New(aPosObj[2,1],aPosObj[2,2],aPosObj[2,3],aPosObj[2,4],nOpcx,'A103LinOk','A103TudOk','+D1_ITEM',!l103Visual,If(lRetBCla,aMT103BCLA,),,,IIf(l103Class,Len(aCols),9999),,,,IIf(l103Class,'AllwaysFalse()',"NfeDelItem"))
			oGetDados:oBrowse:bGotFocus	:= bCabOk     
			
			
			If l103Class
				
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Valida TES de Entrada Padrao do Produto na Classificacao de NF			  ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				nPosTes := aScan(aHeader, {|x| AllTrim(Upper(X[2])) == "D1_TES" })
				If !Empty(aCols[n][nPosTes])
					SF4->(dbSetOrder(1))
					If SF4->(MsSeek(xFilial("SF4")+RetFldProd(SB1->B1_COD,"B1_TE")))
						If !RegistroOk("SF4",.F.)
							Aviso("A103NTES"," "+CHR(10)+" "+RetFldProd(SB1->B1_COD,"B1_TE"),{"OK"})
							aCols[n][nPosTes] := ""
							Endif              
					EndIf
				Endif
				
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Valida itens da nota original na classificação da nota de devolução		  ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If cTipo $ "D" .And. FindFunction("A103VLDITO")
					A103VLDITO()
				EndIf
			Endif
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Verifica se o pedido foi gerado pelo SIGAPLS								  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lCmpPLS .And. !lUsouLtPLS
				nPosPed := aScan(aHeader, {|x| AllTrim(Upper(X[2])) == "D1_PEDIDO" })
				If !Empty(aCols[n][nPosPed])
					dbSelectArea("SC7")
					SC7->(dbSetOrder(1))
					// Grava Lote do PLS e o codigo de RDA
					If SC7->(MsSeek(xFilial("SC7")+aCols[n][nPosPed])) .And. !Empty(SC7->C7_LOTPLS) .And. !Empty(SC7->C7_CODRDA)
						lUsouLtPLS 	:= .T.
						cLotPLS		:= SC7->C7_LOTPLS
						cCodRDA		:= SC7->C7_CODRDA
						cOpeLt      := Iif(SC7->(Fieldpos("C7_PLOPELT")) > 0,SC7->C7_PLOPELT,PLSINTPAD())
					Endif
				Endif
			Endif	
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Apenas ira montar o folder de Nota Fiscal Eletronica se os campos existirem³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If cPaisLoc == "BRA"
				Aadd(aTitles,"Nota Fiscal Eletrônica") // "Nota Fiscal Eletrônica"
				nNFe 	:= 	Len(aTitles)
				If AliasInDic("CDA")
					aAdd(aTitles,"Lançamentos da Apuração de ICMS")	//"Lançamentos da Apuração de ICMS"
					nLancAp	:=	Len(aTitles)
				EndIf
			EndIf
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Habilita o folder de conferencia fisica se necessario        ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If l103Visual .AND. !l103Exclui .AND. !Empty(SF1->F1_STATUS) .And. (lCpConfFis .And. ;
				SA2->A2_CONFFIS <> "3" .And. ;// Diferente de '3 - nao utiliza'
				(((SA2->A2_CONFFIS == "0" .And. cMVTPCONFF == "2") .Or. SA2->A2_CONFFIS == "2")	.And. cMVCONFFIS == "S") .Or. ;
				(cTipo == "B" .And. cMVCONFFIS == "S" .And. cMVTPCONFF == "2"))
				aadd(aTitles,"Conferencia Fisica") // "Conferencia Fisica"
				nConfNF := Len(aTitles)
			EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Apenas ira montar o folder de Informacoes Diversas se os campos existirem  |
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lNfeDanfe .And. cPaisLoc == "BRA"
				Aadd(aTitles,"Informações DANFE") // "Informações DANFE"
				nInfDiv := 	Len(aTitles)
			EndIf	

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Apenas ira montar o folder de Informacoes Diversas se os campos existirem  |
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If cPaisLoc = "BRA" .And. lISSxMun
				Aadd(aTitles,"Apuração ISS/INSS") // "Apuração ISS/INSS"
				aFldCBAtu	:= Array(Len(aTitles))
				nInfISS := 	Len(aTitles)
			EndIf				
			
			If Len(aInfAdic) > 0
				aAdd(aTitles, "Informações Adicionais") //"Informações Adicionais"
				nInfAdic := 	Len(aTitles)
			EndIf
					
			oFolder := TFolder():New(aPosObj[3,1],aPosObj[3,2],aTitles,aPages,oDlg,,,, .T., .F.,aPosObj[3,4]-aPosObj[3,2],aPosObj[3,3]-aPosObj[3,1],)
			oFolder:bSetOption := {|nDst| NfeFldChg(nDst,oFolder:nOption,oFolder,aFldCBAtu)}
			bRefresh := {|nX| NfeFldChg(nX,oFolder:nOption,oFolder,aFldCBAtu)}
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Folder dos Totalizadores                                     ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			oFolder:aDialogs[1]:oFont := oDlg:oFont
			NfeFldTot(oFolder:aDialogs[1],a103Var,aPosGet[3],@aFldCBAtu[1])

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Folder dos Fornecedores                                      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			oFolder:aDialogs[2]:oFont := oDlg:oFont
			NfeFldFor(oFolder:aDialogs[2],aInfForn,{aPosGet[4],aPosGet[5],aPosGet[6]},@aFldCBAtu[2])

			If !lGspInUseM
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Folder das Despesas acessorias e descontos                   ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				oFolder:aDialogs[3]:oFont := oDlg:oFont			
				If(lFimp .And. SF1->F1_FIMP$'ST'.And. SF1->F1_STATUS='C' .And. l103Class) //Tratamento para bloqueio de alteracoes na classificacao de uma nota bloqueada e ja transmitida.
					l103Visual := .T.
					NfeFldDsp(oFolder:aDialogs[3],a103Var,{aPosGet[7],aPosGet[8]},@aFldCBAtu[3])
					l103Visual := .F.
				Else
					NfeFldDsp(oFolder:aDialogs[3],a103Var,{aPosGet[7],aPosGet[8]},@aFldCBAtu[3])
				EndIf
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Folder dos Livros Fiscais                                    ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				oFolder:aDialogs[4]:oFont := oDlg:oFont	
				oLivro := MaFisBrwLivro(oFolder:aDialogs[4],{5,4,( aPosObj[3,4]-aPosObj[3,2] ) - 10,53},.T.,IIf(!l103Class,aRecSF3,Nil), IIf(!lWhenGet , IIf( l103Class , .T. , l103Visual ) , .T. ) )
				aFldCBAtu[4] := {|| oLivro:Refresh()}         
			Endif

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Folder dos Impostos                                          ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			oFolder:aDialogs[5]:oFont := oDlg:oFont

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Folder do Financeiro                                         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ			
			oFolder:aDialogs[6]:oFont := oDlg:oFont
			NfeFldFin(oFolder:aDialogs[6],l103Visual,aRecSE2,( aPosObj[3,4]-aPosObj[3,2] ) - 101,aRecSe1,@aHeadSE2,@aColsSE2,@aHeadSEV,@aColsSEV,@aFldCbAtu[6],NIL,@cModRetPIS,lPccBaixa,@lTxNeg,@cNatureza,@nTaxaMoeda)

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ As Notas incluidas pelo MATA100 nao terao o rodape da MATXFIS ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If l103Visual .And. Empty(SF1->F1_RECBMTO) 
				oFisRod	:=	A103Rodape(oFolder:aDialogs[5])
			ElseIf (lFimp .And. SF1->F1_FIMP$'ST'.And. SF1->F1_STATUS='C' .And. l103Class) 				//Tratamento para bloqueio de alteracoes na classificacao de uma nota bloqueada e ja transmitida.
				l103Visual := .T.
				oFisRod	:=	MaFisRodape(nTpRodape,oFolder:aDialogs[5],,{5,4,( aPosObj[3,4]-aPosObj[3,2] )-10,53},@bIPRefresh,l103Visual,@cFornIss,@cLojaIss,aRecSE2,@cDirf,@cCodRet,@oCodRet,@nCombo,@oCombo,@dVencIss,@aCodR,@cRecIss,@oRecIss,,@cDescri)
			Else
				oFisRod	:=	MaFisRodape(nTpRodape,oFolder:aDialogs[5],,{5,4,( aPosObj[3,4]-aPosObj[3,2] )-10,53},@bIPRefresh,l103Visual,@cFornIss,@cLojaIss,aRecSE2,@cDirf,@cCodRet,@oCodRet,@nCombo,@oCombo,@dVencIss,@aCodR,@cRecIss,@oRecIss,,@cDescri)
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Folder dos historicos do Documento de entrada                  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			/*If l103Visual .Or. l103Class
				oFolder:aDialogs[7]:oFont := oDlg:oFont
				@ 05,04 LISTBOX oHistor VAR cHistor ITEMS aHistor PIXEL SIZE ( aPosObj[3,4]-aPosObj[3,2] )-10,53 Of oFolder:aDialogs[7]
				Eval(bRefresh,oFolder:nOption)
			EndIf*/

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Ponto de Entrada utilizado na classificação da nota para alterar Combobox ³
			//³ da aba Impostos que informa se gera DIRF e os códigos de retencao         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If l103Class .And. ExistBlock("MT103DRF")
				aDirfRt := ExecBlock("MT103DRF",.F.,.F.,{nCombo,cCodRet,@oCombo,@oCodRet})		
				if len(aDirfRt) > 1
					for a:=1 to len(aDirfRt)
						nCombo  := aDirfRt[a][2]
						cCodRet := ""
						if nCombo = 1 
							cCodRet := aDirfRt[a][3]
						endif   
						If !Empty(cCodRet) 
							If aScan(aCodR,{|aX| aX[4]==aDirfRt[a][1]})==0
								aAdd( aCodR,{99, cCodRet,1,aDirfRt[a][1]})
							Else
								aCodR[aScan(aCodR, {|aX| aX[4]==aDirfRt[a][1]})][2] := cCodRet
							EndIf
						EndIf
					next
				else
					nCombo  := Iif(aDirfRt[1][2] > 2, 2, aDirfRt[1][2])
					cCodRet := aDirfRt[1][3]
					If !Empty( cCodRet ) 
						If aScan( aCodR, {|aX| aX[4]=="IRR"})==0
							aAdd( aCodR, {99, cCodRet, 1, "IRR"} )
						Else
							aCodR[aScan( aCodR, {|aX| aX[4]=="IRR"})][2] :=	cCodRet
						EndIf
					EndIf
				Endif
				If ValType( oCombo ) == "O"
					oCombo:Refresh()
				Endif	
				If ValType( oCodRet ) == "O"
					oCodRet:Refresh()
				Endif
			Endif

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Folder com os dados da Nota Fiscal Eletronica³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If cPaisLoc == "BRA"
				oFolder:aDialogs[nNFe]:oFont := oDlg:oFont
				NfeFldNfe(oFolder:aDialogs[nNFe],@aNFEletr,{aPosGet[10],aPosGet[8]},@aFldCBAtu[3])
				
				If AliasIndic("CDA") .And. nLancAp>0
					oFolder:aDialogs[nLancAp]:oFont := oDlg:oFont
					oLancApICMS := a103xLAICMS(oFolder:aDialogs[nLancAp],{5,4,( aPosObj[3,4]-aPosObj[3,2] )-10,53},@aHeadCDA,@aColsCDA,l103Visual,(l103Inclui.Or.l103Class))
					If lWhenGet
						Eval({||GetLanc()})
					EndIf
					If l103Class
						a103AjuICM()
					EndIf
				EndIf
			EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Folder de conferencia para os coletores                      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If nConfNF > 0  .And. SF1->(FieldPos("F1_STATCON")) > 0
				oFolder:aDialogs[nConfNF]:oFont := oDlg:oFont
				Do Case
				Case SF1->F1_STATCON $ "1 "
					cStatCon := "NF conferida" // "NF conferida"
				Case SF1->F1_STATCON == "0"
					cStatCon := "NF nao conferida" //"NF nao conferida"
				Case SF1->F1_STATCON == "2"
					cStatCon := "NF com divergencia" // "NF com divergencia"
				Case SF1->F1_STATCON == "3"
					cStatCon := "NF em conferencia" // "NF em conferencia"
				Case SF1->F1_STATCON == "4"
					cStatCon := "NF Clas. C/ Diver."
				EndCase
				nQtdConf := SF1->F1_QTDCONF
				@ 06 ,aPosGet[6,1] SAY "Status" OF oFolder:aDialogs[nConfNF] PIXEL SIZE 49,09 // "Status"
				@ 05 ,aPosGet[6,2] MSGET oStatCon VAR Upper(cStatCon) COLOR CLR_RED OF oFolder:aDialogs[nConfNF] PIXEL SIZE 70,9 When .F.
				@ 25 ,aPosGet[6,1] SAY "Conferentes" OF oFolder:aDialogs[nConfNF] PIXEL SIZE 49,09 // "Conferentes"
				@ 24 ,aPosGet[6,2] MSGET oConf Var nQtdConf OF oFolder:aDialogs[nConfNF] PIXEL SIZE 70,09 When .F.
				@ 05 ,aPosGet[5,3] LISTBOX oList Fields HEADER "  ","Codigo","Quantidade Conferida" SIZE 170, 48 OF oFolder:aDialogs[nConfNF] PIXEL // "Codigo","Quantidade Conferida"
				oList:BLDblclick := {||A103DetCon(oList,aListBox)}

				DEFINE TIMER oTimer INTERVAL 3000 ACTION (A103AtuCon(oList,aListBox,oEnable,oDisable,oConf,@nQtdConf,oStatCon,@cStatCon,,oTimer)) OF oDlg
				oTimer:Activate()

				@ 30 ,aPosGet[5,3]+180 BUTTON "Recontagem"SIZE 40 ,11  FONT oDlg:oFont ACTION (A103AtuCon(oList,aListBox,oEnable,oDisable,oConf,@nQtdConf,oStatCon,@cStatCon,.T.,oTimer)) OF oFolder:aDialogs[nConfNF] PIXEL When SF1->F1_STATCON == '2' .And. !lClaNfCfDv // "Recontagem"
				@ 42 ,aPosGet[5,3]+180 BUTTON "Detalhes" SIZE 40 ,11  FONT oDlg:oFont ACTION (A103DetCon(oList,aListBox)) OF oFolder:aDialogs[nConfNF] PIXEL // "Detalhes"

				A103AtuCon(oList,aListBox,oEnable,oDisable)
			Endif

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Folder com Informacoes Diversas              ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lNfeDanfe .And. cPaisLoc == "BRA"
				oFolder:aDialogs[nInfDiv]:oFont := oDlg:oFont
				NfeFldDiv(oFolder:aDialogs[nInfDiv],{aPosGet[9]})
			EndIf
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Folder com Informacoes ISS    ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If cPaisLoc == "BRA" .And. lISSxMun
				oFolder:aDialogs[nInfISS]:oFont := oDlg:oFont
				ISSFldDiv(oFolder:aDialogs[nInfISS],{aPosGet[11]},@aObjetos,@aInfISS,@aFldCBAtu,nInfISS)
				If l103Visual
					Eval(bRefresh)
				EndIf 
			EndIf
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Folder Informacoes Adicionais do Documeno    ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lFldInfAdic
				oFolder:aDialogs[nInfAdic]:oFont := oDlg:oFont
				NfeFldAdic(oFolder:aDialogs[nInfAdic],{aPosGet[12]}, @aInfAdic, @oDescMun, @cDescMun)
			EndIf
			
			If lWhenGet .Or. l103Class
				Eval(bRefresh,oFolder:nOption)
			Endif

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Transfere o foco para a getdados - nao retirar                 ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ           
			oFoco103:bGotFocus := { || oGetDados:oBrowse:SetFocus() }			

			aButControl := {{ |x,y| aColsSEV := aClone( x ), aHeadSEV := aClone( y ) }, aColsSev,aHeadSEV }
			
				// Atenção: Conserve a ordem de execução dos ExecBlocks abaixo a fim de facilitar a compreenção
				// e manutenções futuras....!          
				ACTIVATE MSDIALOG oDlg ON INIT (IIf(lWhenGet,oGetDados:oBrowse:Refresh(),Nil),;
				XA103Bar(oDlg,{|| oFoco103:Enable(),oFoco103:SetFocus(),oFoco103:Disable(),;
				IIf(((!l103Inclui.And.!l103Class).Or.( Eval(bRefresh,6)            .And. ;
				If(l103Inclui.Or.l103Class,NfeTotFin(aHeadSE2,aColsSE2,.F.),.T.)   .And. ;
				oGetDados:TudoOk()))											   .And. ;
				(IIf (l103Class .Or. l103Inclui, NfeCabOk(l103Visual,,,,,,,,,,,.T.),.T.)) .And.;
				XA103VldEXC(l103Exclui,cPrefixo)								   .And. ;  
				A103VldDanfe(aNFEDanfe)											   .And. ;
				a103xLOk() .And. oFoco103:Cargo[1]    							   .And. ;
				NfeVldSEV(oFoco103:Cargo[2],aHeader,aCols,aHeadSEV,aColsSEV)  	   .And. ;
				EVAL(bBlockSev2)												   .And. ;
					IIf(FindFunction("A103ChamaHelp") .And. ( l103Inclui .or. l103Class ),A103ChamaHelp(),.T.)	.And. ;
				NfeNextDoc(@cNFiscal,@cSerie,l103Inclui)   					  	   .And. ;
				XA103TmsVld(l103Exclui) 					  					   .And. ;
				XA103MultOk( aMultas, aColsSE2, aHeadSE2 )  					   .And. ; 
				A103VldGer( aNFEletr )                                             .And. ;
				A103VlIGfe( l103Inclui,l103Class, .F. ),;
				(nOpc:=1,oDlg:End()),Eval({||nOpc:=0,oFoco103:Cargo[1] :=.T.}))},;
				{||nOpc:=0,oDlg:End()},IIf(l103Inclui.Or.l103Class,aButtons,aButVisual),aButControl))
		EndIf
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Copia aHeader e aCols para uso externo  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !l103GAuto
			If (xHeadImp<>NIL .And. xColsImp<>NIL)
				xHeadImp := aHeader
				xColsImp := aCols
			Endif
		EndIf
		If nOpc == 1 .And. (l103Inclui.Or.l103Class.Or.l103Exclui).And. l103GAuto

			If (ExistBlock("MT100AG"))
				ExecBlock("MT100AG",.F.,.F.)
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Inicializa a gravacao atraves nas funcoes MATXFIS         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			MaFisWrite(1)

			If A103Trava() .And. IIf(lIntegGFE .And. l103Exclui,ExclDocGFE(),.T.)

				#IFNDEF TOP
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Indregua para o PIS / COFINS / CSLL                          ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

							aFil10925 := {}
							aAreaSM0  := SM0->(GetArea())
							cEmpAtu   := SM0->M0_CODIGO
							cCGCSM0   := SM0->M0_CGC
							SM0->(DbSetOrder(1))
							SM0->(MsSeek(cEmpAnt))

						//Se parametro "MV_PCCAGFR" existe com conteudo diferente de 1
						If cAglutFil == "2" .Or. cAglutFil == "3"
							Do While !SM0->(Eof()) .And. SM0->M0_CODIGO == cEmpAtu
								//Verifica se a filial tem o mesmo CGC/Raiz de CGC
								AAdd(aFil10925,IIf( lFWCodFil, FWGETCODFILIAL, SM0->M0_CODFIL ))
								SM0->(DbSkip())
							EndDo

						ElseIf ExistBlock( "MT103FRT" )
							aFil10925 := ExecBlock( "MT103FRT", .F., .F. )
						Else
							aFil10925 := { xFilial( "SE2" ) }  				
						EndIf				
						SM0->(RestArea(aAreaSM0))

						cIndex := CriaTrab(,.f.)
	
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Carrega as filiais no filtro                                 ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
						cCond := "("
						For nLoop := 1 to Len( aFil10925 )
							cCond  += "E2_FILIAL='" + aFil10925[ nLoop ] + "' .OR. "
						Next nLoop 						
	
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Retira o .OR. do final                                       ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						cCond  := Left( cCond, Len( cCond ) - 5 )
	
						cCond  += ") .AND. "                       				
						cCond  += "E2_FORNECE='"     + cA100For           + "'" 	
						If lLojaAtu
							cCond  += " .AND. E2_LOJA='"        + cLoja              + "'"
						Endif
	
						IndRegua("SE2",cIndex,"DTOS(E2_VENCREA)",, cCond,OemToAnsi(""))	
						nIndexSE2 := RetIndex("SE2")+1
	
						dbSetIndex(cIndex+OrdBagExt())
	
					#ENDIF			
	
					If lEstNfClass .And. cDelSDE == "3"  .And. (Len(aRecSDE) > 0)
						cDelSDE:=Str(Aviso(OemToAnsi("Atenção !"),"Os rateios de centro de custos digitados devem ser:",{"Apagados","Mantidos"},2),1,0)
					EndIf
	
					// Valida retorno valido
					If !(cDelSDE $ "123")
						cDelSDE:="1"					
					EndIf
					If !l103Auto
						SetKey(VK_F4,Nil)
						SetKey(VK_F5,Nil)
						SetKey(VK_F6,Nil)
						SetKey(VK_F7,Nil)
						SetKey(VK_F8,Nil)
						SetKey(VK_F9,Nil)
						SetKey(VK_F10,Nil)
						SetKey(VK_F11,Nil)	
						SetKey(VK_F12,bKeyF12)
					EndIf
					Begin Transaction
					
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Chama a integracao via Mensagem unica TOTVS ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						// Chama o adapter na Inclusao, Alteracao (Classificacao) e Exclusao
						If l103Exclui
							fwIntegDef("MATA103")
						EndIf
						
						a103Grava(l103Exclui,lGeraLanc,lDigita,lAglutina,aHeadSE2,aColsSE2,aHeadSEV,aColsSEV,nRecSF1,aRecSD1,aRecSE2,aRecSF3,aRecSC5,aHeadSDE,aColsSDE,aRecSDE,.F.,.F.,,aRatVei,aRatFro,cFornIss,cLojaIss,A103TemBlq(l103Class), l103Class,cDirf,cCodRet,cModRetPIS,nIndexSE2,lEstNfClass,dVencIss,lTxNeg,aMultas,lRatLiq,lRatImp,aNFEletr,cDelSDE,aCodR,cRecIss,cAliasTPZ,aCtbInf,aNfeDanfe,@lExcCmpAdt, @aDigEnd,@lCompAdt,aPedAdt,aRecGerSE2,aInfAdic,a103Var)
						If !lContDCL // Da Rollback na transacao caso ocorra algum erro quando existir o Template DCL
							DisarmTransaction()
						EndIf
						If !(l103Exclui .and. !lExcCmpAdt) .And. lContDCL
							a103GrvCDA(l103Exclui,"E",cEspecie,cFormul,cNFiscal,cSerie,cA100For,cLoja, aInfApurICMS)
	
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Atualiza dados dos complementos SPED automaticamente ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							If lMvAtuComp .And. l103Inclui
								AtuComp(cNFiscal,cSerie,cEspecie,cA100For,cLoja,"E",cTipo)
							EndIf
		
						Endif	
												
						If lIntegGFE .And. ( l103Inclui .Or. l103Class ) .And. (!l103Auto .Or. lWhenGet) .And. lProcGet .And. lContDCL
							A103VlIGfe( l103Inclui,l103Class, .T. )
						EndIf
						lContDCL := .T.
						// ----------------------------------------------------
						//  Atualiza os dados do movimento na locação de equipamentos
						If lHasLocEquip .And. SF1->F1_TIPO == 'D'
							At800AtNFEnt( l103Exclui )
						EndIf
						
						If l103Inclui .Or. l103Class
							fwIntegDef("MATA103")
						EndIf
						
					End Transaction
						 
					//Verifica se está na versao 11.6 e se o endereçamento na produção está ativo.
					IF lVer116 .And. lDistMov .And. Len(aDigEnd) > 0
						//Chama a rotina de endereçamento no recebimento / produção
						A103DigEnd(aDigEnd)
					endif
	
					//Função que excluirá fisicamente as temporárias do banco de dados.
					If UPPER(Alltrim(TCGetDb()))=="POSTGRES"
						Fa050Drop()
					Endif
	
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Executa gravacao da contabilidade     ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If !(l103Exclui .and. !lExcCmpAdt)
						If Len(aCtbInf) != 0      
						
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Ponto de entrada para tratamentos especificos     ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ                                         
							If ( ExistBlock("MT103CTB") )			
								aMT103CTB := ExecBlock("MT103CTB",.F.,.F.,{aCtbInf,l103Exclui,lExcCmpAdt})
								If ( ValType(aMT103CTB) == "A" )
									aCtbInf := aClone(aMT103CTB)
								EndIf
							EndIf    
							
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Retirado controle de transação deste ponto , este controle
							//  é já está dentro da função cA100Incl. 
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							cA100Incl(aCtbInf[1],aCtbInf[2],3,aCtbInf[3],aCtbInf[4],aCtbInf[5],,,,aCtbInf[7],,aCtbInf[6])	
						EndIf
						If lCompAdt	// Compensacao do Titulo a Pagar quando trata-se de pedido com Adiantamento
							A103CompAdR(aPedAdt,aRecGerSE2)
						EndIf
					Endif	
	
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Apaga o arquivo da Indregua                                  ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					#IFNDEF TOP				
						RetIndex( "SE2" )
						FErase( cIndex+OrdBagExt() )
					#ENDIF		
	
				EndIf
	
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Para a localizacao Mexico, sera processada a funcao do ponto de entrada MT100AGR no padrao³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If cPaisLoc == "MEX"
					PgComMex()
				Endif
				
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Integracao o modulo ACD - Realiza o enderecamento automatico p/ o CQ 		³
				//³ na classificacao da nota						  							³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If !(l103Exclui .and. !lExcCmpAdt)
	
					If lIntACD .And. FindFunction("CBMT100AGR")
						CBMT100AGR()
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Template acionando ponto de entrada                      ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf ExistTemplate("MT100AGR")
						ExecTemplate("MT100AGR",.F.,.F.)
					EndIf			
					If ExistBlock("MT100AGR",.T.,.T.)
						ExecBlock("MT100AGR",.F.,.F.)
					EndIf			
				Endif	
			 
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Agroindustria  									                 ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If FindFunction("OGXUtlOrig") //Encontra a função
					If OGXUtlOrig()
					  If FindFunction("OGX140")
					     OGX140()
					  EndIf
					EndIf  
				Endif	
												 
				 
				 
					//Trade-Easy
				//RRC - 18/07/2013 - Integração SIGACOM x SIGAESS: Geração automática das invoices e parcelas de câmbio a partir do documento de entrada
				If GetMv("MV_COMSEIC",,.F.) .And. SF1->F1_TIPO == "N" .And. GetMv("MV_ESS0012",,.F.)
					PS400BuscFat("A","SIGACOM",,SF1->F1_DOC,SF1->F1_SERIE,.T.)
				EndIf	
			Else
				//Libera Lock de Pedidos Bloqueados//
				If Type("aRegsLock")<>"U"
					If Len(aRegsLock)>0
						A103UnlkPC()
					EndIf
				EndIf
	
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Ponto de Entrada para verificar se o usuário clicou no botão Cancelar no Documento de Entrada   		³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If (ExistBlock("MT103CAN"))
					ExecBlock("MT103CAN",.F.,.F.)   
				EndIf
			EndIf
	
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Finaliza a gravacao dos lancamentos do SIGAPCO e apaga lancamentos de bloqueio nao utilizados ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !(l103Exclui .and. !lExcCmpAdt)
				PcoFinLan("000054")
				PcoFreeBlq("000054")
			Endif	
		EndIf
	EndIf
	MaFisEnd()
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Destrava os registros na alteracao e exclusao          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If l103Class .Or. l103Exclui
		MsUnlockAll()
	EndIf
	If !l103Auto
		SetKey(VK_F4,Nil)
		SetKey(VK_F5,Nil)
		SetKey(VK_F6,Nil)
		SetKey(VK_F7,Nil)
		SetKey(VK_F8,Nil)
		SetKey(VK_F9,Nil)
		SetKey(VK_F10,Nil)
		SetKey(VK_F11,Nil)	
		SetKey(VK_F12,bKeyF12)
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Protecao para evitar ERRORLOG devido ao fato do objeto oLancApICMS   ³
	//³ nao ser destruido corretamente ao termino da rotina. Todos os demais ³
	//³ objetos sao destruidos corretamente.                                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If Type("oLancApICMS") == 'O'
		FreeObj(oLancApICMS)
	EndIf 
	
	If lPrjCni
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Limpa array Divergencias                  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If  Type("_aDivPNF") != "U"
			_aDivPNF := {}
		Endif                                                             
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ponto no final da rotina, para o usuario completar algum processo ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !(l103Exclui .and. !lExcCmpAdt)
		If ExistTemplate("MT103FIM")                          
			ExecTemplate("MT103FIM",.F.,.F.,{aRotina[nOpcX,4],nOpc})
		EndIf
		If ExistBlock("MT103FIM")                          
			Execblock("MT103FIM",.F.,.F.,{aRotina[nOpcX,4],nOpc})
		EndIf
	Endif	
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Retorna ao valor original de maxcodes ( utilizado por MayiUseCode() ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	SetMaxCodes( nMaxCodes )
	
	dbSelectArea(cAliasTPZ)
	dbCloseArea()  
	FErase(cArqTPZ + GetDbExtension())
	FErase(cIndTrbTPZ + OrdBagExt())
EndIf
	
Return lRet

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³MaCanDelF1³ Autor ³ Edson Maricate        ³ Data ³11.10.2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de validacao da exclusao de uma nota fiscal de entrada³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: Numero do Registro do SF1.                       (OPC)³±±
±±³          ³ExpA2: Array com os pedidos de venda gerados a partir da nota³±±
±±³          ³       fiscal de entrada.                               (OPC)³±±
±±³          ³ExpA3: Array com os titulos financeiro gerados          (OPC)³±±
±±³          ³ExpL4: Indica se pode apagar notas de conhec de frete   (OPC)³±±
±±³          ³ExpL5: Indica se pode apagar notas de despesas de import(OPC)³±±
±±³          ³ExpL6: Indica se estou apagando um remito (localizacoes)(OPC)³±±
±±³          ³ExpL7: Indica se se trata de un retorno simbolico automatico,³±±
±±³          ³       no caso de ser, o retorno pode ser apagado.           ³±±
±±³          ³ExpA8: Array contendo os recnos dos titulos no SE1(devolucao)³±±
±±³          ³ExpL9: Indica se a exclusao esta sendo feita pelo SIGAEIC    ³±±
±±³          ³ExpL10:Indica se a exclusao esta sendo feita pelo SIGATMS    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica se a nota pode ser excluida                    ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo validar a exclusao de uma Nota ³±±
±±³          ³fiscal de entrada/Documento de entrada.                      ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Static Function XMaCanDelF1(nRecSF1,aRecSC5,aRecSE2,lCanDelFr,lCanDelDp,lRemito,lRSAuto,aRecSe1,lExcViaEIC,lExcViaTMS)
Local lEofSD3   := .T.
Local aArea		:= GetArea()
Local aAreaSD1	:= SD1->(GetArea())
Local aAreaSF8	:= SF8->(GetArea())
Local aStruSD1  := {}
Local aStruSE2  := {}

Local lQuery    := .F.
Local lRetorno	:= .F.
Local lRetAPO   := .T.
Local l100Del	:= ExistBlock("A100DEL")  
Local lM103APO  := ExistBlock("M103APO")
Local lIntACD	:= SuperGetMV("MV_INTACD",.F.,"0") == "1"
Local lEstNeg   := (SuperGetMv("MV_ESTNEG")=="S")
Local lEECFAT	:= SuperGetMv("MV_EECFAT",.F.,.F.)
Local lR103ENEG := .F.
Local dDataFec	:= If(FindFunction("MVUlmes"),MVUlmes(),GetMV("MV_ULMES"))
Local dDataVenc
Local dDataIni
Local dDataFim
Local lShowAviso:= (SuperGetMv("MV_AV10925",.T.,"2") == "1")
Local cLocTran  := SuperGetMV("MV_LOCTRAN",.F.,"95")
Local lAviso    := .F.
Local lAvisoISS := .F.
Local lVldRetISS:= .F.
Local lContrRet := 	!Empty( SE2->( FieldPos( "E2_VRETPIS" ) ) ) .And. !Empty( SE2->( FieldPos( "E2_VRETCOF" ) ) ) .And. ; 
					!Empty( SE2->( FieldPos( "E2_VRETCSL" ) ) ) .And. !Empty( SE2->( FieldPos( "E2_PRETPIS" ) ) ) .And. ;
					!Empty( SE2->( FieldPos( "E2_PRETCOF" ) ) ) .And. !Empty( SE2->( FieldPos( "E2_PRETCSL" ) ) )
Local lRetISSMes:= 	!Empty( SE2->( FieldPos( "E2_VRETCSL" ) ) ) .And. GetNewPar("MV_MODRISS","1") == "2"

Local nPosLote	:= 0
Local nX		:= 0
Local nSldTran  := 0
Local nSldLote  := 0
Local aLotes	:= {}
Local cMensagem := ""
Local cPrefixo  := ""
Local cQuery    := ""
Local cAliasSD1 := "SD1"
Local cAliasSE2 := "SE2"
Local nRecSD1
Local nAcICMSAPR:= 0	
Local aAreaSN1  := {}
Local aRetXFin  := {}
Local cTesDR    := GetMV("MV_TESDR",,"")
Local lNumTrib	:= .T.
Local cNumTit	:= ""
Local aAreaSE2IR
Local nRecE2in

#IFDEF TOP
	Local cSepNeg   := If("|"$MV_CPNEG,"|",",")
	Local cSepProv  := If("|"$MVPROVIS,"|",",")
	Local cSepRec   := If("|"$MVPAGANT,"|",",")
#ELSE
	Local cIndexSE1 := ""
	Local nIndexSE1 := 0
	Local cIndexSE2 := ""
	Local nIndexSE2 := 0
#ENDIF 

Local nCountSE2 := 0
Local lPriParAdtBx := .F.
Local nValorAdtFR3 := 0
Local lVer116 := (VAL(GetVersao(.F.)) == 11 .And. GetRpoRelease() >= "R6"  .Or.  VAL(GetVersao(.F.))  > 11)
Local lAvMovDiv	:= FindFunction("AvalMovDiv")
Local lPmsExAFN	:= FindFunction("PmsExAFN")
Local lD1Transit	:= SD1->(FieldPos("D1_TRANSIT")) > 0

Local nContDoc := 0
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Analisa os parametros da Rotina                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
DEFAULT aRecSC5    := {}
DEFAULT aRecSE1    := {}
DEFAULT aRecSE2    := {}
DEFAULT lCanDelFr  := .F.
DEFAULT lCanDelDp  := .F.
DEFAULT lRemito    := .F.          
DEFAULT lExcViaEIC := .F. 
DEFAULT lExcViaTMS := .F.                          

If nRecSF1 <> Nil
	dbSelectArea("SF1")
	MsGoto(nRecSF1)
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ajusta a Pesquisa das Notas de Conhecimento de Frete e D.I.  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
SF8->(dbSetOrder(2))
Do Case
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se a NF possui NF de Conhec. e Desp. de Import.     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case !lCanDelFr .And. SF8->(MsSeek(xFilial("SF8")+SF1->F1_DOC+SF1->F1_SERIE+SF1->F1_FORNECE+SF1->F1_LOJA))
	Help(" ", 1, "A103CAGREG")
	lRetorno := .F.
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Nao excluir NF incluida pelo MATA910                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case SF1->F1_ORIGLAN == "LF"
	Help("  ",1,"NAOCOM")
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Nao excluir NF nao classificada                              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case Empty(SF1->F1_STATUS)
	Help(" ",1,"A100NOCLAS")
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verificar data do ultimo fechamento em SX6                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case dDataFec>=dDataBase .Or. dDataFec>=SF1->F1_DTDIGIT 
	Help( " ", 1, "FECHTO" )
	lRetorno := .F.
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica ultima data para operacoes fiscais                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case !FisChkExc(SF1->F1_SERIE,SF1->F1_DOC,SF1->F1_FORNECE,SF1->F1_LOJA,,"E")
	lRetorno := .F.
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Integracao com o ACD		  				  	  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case lIntACD .And. FindFunction("CBA100DEL") .And. !(CBA100DEL())
	lRetorno := .F.
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Template acionando ponto de entrada                      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case ExistTemplate("A100DEL") .And. !(ExecTemplate("A100DEL",.F.,.F.))				
	lRetorno := .F.
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ponto de entrada para permitir ou nao a exclusao             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case l100Del .And. !(Execblock("A100DEL",.F.,.F.))
	lRetorno := .F.
/*Case SF1->F1_TIPO == "C" .And. SF1->F1_ORIGLAN == "F "  .And. !lCanDelFr
	Help(" ",1,"A100NDELFR")
	lRetorno := .F.*/
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Nao excluir nota de Despesas de Importacao                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case SF1->F1_TIPO == "C" .And. SF1->F1_ORIGLAN == " D"	.And. !lCanDelDp
	Help(" ",1,"A100NDELDP")
	lRetorno := .F.
	//ÚLocalizacoesÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Nao excluir NF (de devolucao ou retorno) que gerou PV se este³
	//³ ainda existe.                                                ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case !lRsAuto .And. !Empty(SF1->F1_PEDVEND) .And. (SF1->F1_PEDVEND == "AUTO  " .Or. Eval( {|| SC5->(DbSetORder(1)),SC5->(MsSeek(xFilial("SC5")+SF1->F1_PEDVEND) ) }) )
	If SF1->F1_PEDVEND <> "AUTO  "
		Help(" ",1,"A103PV" ,,RetTitle("C9_PEDIDO") + "  " + SF1->F1_PEDVEND,04,02)
	Else
		Help(" ",1,"A103CONS" )
	Endif
	lRetorno	:=	.F.
OtherWise
	lRetorno := .T.
EndCase   

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se Documento de Entrada Original está vinculado aos outros Documentos ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

#IFDEF TOP        
	If TcSrvType()<>"AS/400"
		lQuery    := .T.
		cAliasSD1 := GetNextAlias()
		
	   If Select(cAliasSD1) > 0 
           dbSelectArea(cAliasSD1)
           dbCloseArea()
        EndIf
        
		cQuery    := "SELECT COUNT(*) NOTAORI  "
		cQuery    += "  FROM "+RetSqlName("SD1")+" SD1 "
		cQuery    += " WHERE SD1.D1_FILIAL  = '"+xFilial("SD1")+"'"
		cQuery    += "   AND SD1.D1_NFORI   = '"+SF1->F1_DOC+"'"
		cQuery    += "   AND SD1.D1_SERIORI = '"+SF1->F1_SERIE+"'"
		cQuery    += "   AND SD1.D1_FORNECE = '"+SF1->F1_FORNECE+"'"
		cQuery    += "   AND SD1.D1_LOJA    = '"+SF1->F1_LOJA+"'"
		cQuery    += "   AND SD1.D1_DOC||SD1.D1_SERIE||SD1.D1_FORNECE||SD1.D1_LOJA <>'"
		cQuery    += SF1->F1_DOC+SF1->F1_SERIE+SF1->F1_FORNECE+SF1->F1_LOJA+"'"
		cQuery    += "   AND SD1.D1_TIPO IN ('P','I','C') "
		cQuery    += "   AND SD1.D_E_L_E_T_=' ' "

		cQuery := ChangeQuery( cQuery )
		dbUseArea( .T., "TOPCONN", TcGenQry(,,cQuery), cAliasSD1, .T., .T. )      
		
		If (cAliasSD1)->NOTAORI > 0 
	  		Help(' ',1,'A103NEXCOR') 
	  		lRetorno := .F.
		EndIf
	
		(cAliasSD1)->(dbCloseArea())
	Else
#ENDIF
		cIndexSD1 := CriaTrab(,.f.)  
	
		cQuery    := "D1_FILIAL=='"     +xFilial("SD1")+  "' .AND. "
		cQuery    += "D1_NFORI=='"      +SF1->F1_DOC+     "' .AND. "
		cQuery    += "D1_SERIORI=='"    +SF1->F1_SERIE+   "' .AND. "  
		cQuery    += "D1_FORNECE=='"    +SF1->F1_FORNECE+ "' .AND. "  
		cQuery    += "D1_LOJA=='"       +SF1->F1_LOJA+    "' .AND. "  
		cQuery    += "D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA<>'"  
		cQuery    += SF1->F1_DOC+SF1->F1_SERIE+SF1->F1_FORNECE+SF1->F1_LOJA+"'"
	
		IndRegua("SD1",cIndexSD1,"D1_FILIAL+D1_NFORI+D1_SERIORI",, cQuery ,"")
		nIndexSD1 :=RetIndex("SD1")+1  
		
		#IFNDEF TOP
			dbSetIndex(cIndexSD1+OrdBagExt())
   		#ENDIF	
		dbSetorder(nIndexSD1)  
		dbGoTop()     

		If (SD1->(!Eof()))
			Help(' ',1,'A103NEXCOR')
		  	lRetorno := .F.
		EndIf

		FErase(cIndexSD1 + OrdBagExt())
		DbClearFilter()

#IFDEF TOP
	EndIf
#ENDIF 

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Analisa os itens da Nota fiscal de Entrada                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea("SD1")
dbSetOrder(1)
#IFDEF TOP
	If TcSrvType()<>"AS/400"
		lQuery    := .T.
		cAliasSD1 := "MACANDELF1"
		aStruSD1  := SD1->(dbStruct())
		cQuery    := "SELECT SD1.*,SD1.R_E_C_N_O_ SD1RECNO "
		cQuery    += "  FROM "+RetSqlName("SD1")+" SD1 "
		cQuery    += " WHERE SD1.D1_FILIAL   = '"+xFilial("SD1")+"'"
		cQuery    += "   AND SD1.D1_DOC	     = '"+SF1->F1_DOC+"'"
		cQuery    += "   AND SD1.D1_SERIE    = '"+SF1->F1_SERIE+"'"
		cQuery    += "   AND SD1.D1_FORNECE  = '"+SF1->F1_FORNECE+"'"
		cQuery    += "   AND SD1.D1_LOJA	 = '"+SF1->F1_LOJA+"'"
		cQuery    += "   AND SD1.D1_TIPO	 = '"+SF1->F1_TIPO+"'"
		cQuery    += "   AND SD1.D_E_L_E_T_	 = ' ' "
		cQuery    += "ORDER BY "+SqlOrder(SD1->(IndexKey()))

		cQuery := ChangeQuery(cQuery)
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSD1,.T.,.T.)

		For nX := 1 To Len(aStruSD1)
			If aStruSD1[nX][2]<>"C"
				TcSetField(cAliasSD1,aStruSD1[nX][1],aStruSD1[nX][2],aStruSD1[nX][3],aStruSD1[nX][4])
			EndIf
		Next nX
	Else
#ENDIF
	MsSeek(xFilial("SD1")+SF1->F1_DOC+SF1->F1_SERIE+SF1->F1_FORNECE+SF1->F1_LOJA)
	#IFDEF TOP
	EndIf
	#ENDIF
While !Eof().And. (cAliasSD1)->D1_FILIAL == xFilial('SD1') .And.;
		(cAliasSD1)->D1_DOC == SF1->F1_DOC .And.;
		(cAliasSD1)->D1_SERIE == SF1->F1_SERIE .And.;
		(cAliasSD1)->D1_FORNECE == SF1->F1_FORNECE .And.;
		(cAliasSD1)->D1_LOJA == SF1->F1_LOJA .And. lRetorno

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se a O.P. vinculada a uma N.F. esta encerrada     ³
	//³ ou se ja possui quantidade apontada.                       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If !lVer116 .Or. !(SuperGetMV("MV_PRNFBEN",.F.,.F.))
		dbSelectArea("SC2")
		dbSetOrder(1)
		If MsSeek(xFilial("SC2")+(cAliasSD1)->D1_OP) .And. !lCanDelFr
			If !Empty(SC2->C2_DATRF)
				Help("",1,"A103ENCERR")
				lRetorno := .F.
			ElseIf QtdComp(SC2->C2_QUJE,.T.) > QtdComp(0,.T.)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ`¿
				//³Ponto de entrada que permite ou não a validação da exclusão da NF vinculada a uma OP³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ`Ù
				If lM103APO
					lRetAPO := ExecBlock("M103APO",.F.,.F.)										
					If ValType(lRetAPO)<> "L"
						lRetAPO := .T.
					Endif
				EndIf
				If lRetApo .And.(Type('l103Auto') <> 'U' .And. l103Auto) .Or. Aviso(OemToAnsi(STR0018),OemToAnsi(STR0048)+(cAliasSD1)->D1_OP+OemToAnsi(STR0049),{OemToAnsi(STR0016),OemToAnsi(STR0017)},nil,nil,1) == 2
					lRetorno := .F.
				EndIf
			EndIf
		EndIf		
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ AvalMovDiv - Funcao utilizada para avaliar possiveis divergencias de     |
	//|              saldo no estorno do movimento selecionado.                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !(SF1->F1_TIPO$"PIC") .And. lAvMovDiv .And. AvalMovDiv((cAliasSD1)->D1_COD,(cAliasSD1)->D1_LOCAL,(cAliasSD1)->D1_LOTECTL,(cAliasSD1)->D1_NUMLOTE,(cAliasSD1)->D1_NUMSEQ,(cAliasSD1)->D1_TES)
		lRetorno := .F.
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Posiciona o Arquivo SF4.                                     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea('SF4')
	dbSetOrder(1)
	MsSeek(xFilial("SF4")+(cAliasSD1)->D1_TES)
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica a posicao do Pedido de Vendas  (Devolucao)          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRetorno .And. !Empty((cAliasSD1)->D1_NUMPV)
		dbSelectArea('SC5')
		If MsSeek(xFilial("SC5")+(cAliasSD1)->D1_NUMPV)
			aAdd(aRecSC5,SC5->(RecNo()))
		EndIf
		dbSelectArea('SC6')
		dbSetOrder(1)
		If MsSeek(xFilial("SC6")+(cAliasSD1)->D1_NUMPV+(cAliasSD1)->D1_ITEMPV)
			If SC6->C6_QTDLIB+SC6->C6_QTDENT <> 0
				If (Type('l103Auto') <> 'U' .And. l103Auto) .Or. Aviso(OemToAnsi(STR0018),OemToAnsi(STR0015),{OemToAnsi(STR0016),OemToAnsi(STR0017)}) == 2 //"O pedido de vendas gerado pelo Docto. de devolucao ja foi liberado ou atendido e nao sera excluido. Deseja continuar ?"###"Continua"###"Abandona"
					lRetorno := .F.
					Exit
				EndIf
			EndIf
		EndIf
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Trava os registros do SC7.                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRetorno .And. !Empty((cAliasSD1)->D1_PEDIDO)
		dbSelectArea('SC7')
		dbSetOrder(19)
		If MsSeek(xFilial('SC7')+(cAliasSD1)->D1_COD+(cAliasSD1)->D1_PEDIDO+(cAliasSD1)->D1_ITEMPC)
			If !SoftLock('SC7')
				lRetorno := .F.
			EndIf
		EndIf
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Trava os registros do SD7 e SD3                              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRetorno .And. !Empty((cAliasSD1)->D1_NUMCQ)
		dbSelectArea("SD7")
		dbSetOrder(1)
		If MsSeek(xFilial("SD7")+(cAliasSD1)->D1_NUMCQ+(cAliasSD1)->D1_COD+(cAliasSD1)->D1_LOCAL)
			While !Eof() .And.lRetorno .And. xFilial("SD7") == SD7->D7_FILIAL .And.;
					(cAliasSD1)->D1_NUMCQ == SD7->D7_NUMERO .And.;
					(cAliasSD1)->D1_COD == SD7->D7_PRODUTO .And.;
					(cAliasSD1)->D1_LOCAL == SD7->D7_LOCAL

				If (cAliasSD1)->D1_TIPO == 'N' .And. (SD7->D7_TIPO==1 .Or. SD7->D7_TIPO==2 ) .And. Empty(SD7->D7_ESTORNO)				
					Help(' ',1,'A100CQ')
					lRetorno := .F.
					Exit
				ElseIf !SoftLock("SD7")
					lRetorno := .F.
					Exit
				Else
					dbSelectArea("SD3")
					dbSetOrder(4)
					If lRetorno .And. MsSeek(xFilial("SD3")+SD7->D7_NUMSEQ)
						While !Eof() .And. lRetorno .And. SD3->D3_FILIAL == xFilial("SD3") .And.;
								SD3->D3_NUMSEQ == SD7->D7_NUMSEQ
							If !SoftLock("SD3")
								lRetorno := .F.
								Exit
							EndIf
							dbSelectArea("SD3")
							dbSkip()
						EndDo
					EndIf
				EndIf
				dbSelectArea("SD7")
				dbSkip()
			EndDo
		EndIf
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica a existencia de Poder de Terceiros                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRetorno .And. SF4->F4_PODER3=="R"
		dbSelectArea("SB6")
		dbSetOrder(3)
		MsSeek(xFilial("SB6")+(cAliasSD1)->D1_NUMSEQ+(cAliasSD1)->D1_COD+'R')
		While ( !Eof() .And. lRetorno .And. xFilial("SB6") == SB6->B6_FILIAL .And.;
				(cAliasSD1)->D1_NUMSEQ==SB6->B6_IDENT .And.;
				(cAliasSD1)->D1_COD==SB6->B6_PRODUTO .And.;
				"R"==SB6->B6_PODER3 )
			If SB6->B6_QUANT<>SB6->B6_SALDO .And. SB6->B6_TIPO=="D"
				Help(' ',1,'A520NPODER')
				lRetorno := .F.
			EndIf
			dbSelectArea("SB6")			
			dbSkip()
		EndDo
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Integracao do Ativo Fixo - Travamento                        ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRetorno .And. (ExistBlock ("M103XATF"))
		lRetorno	:=	ExecBlock ("M103XATF", .F., .F., {cAliasSD1})
	Else
		If lRetorno .And. !Empty((cAliasSD1)->D1_CBASEAF)
			dbSelectArea('SN1')
			dbSetOrder(1)
			If MsSeek(xFilial("SN1")+ Iif(SF4->F4_BENSATF == "1" , AllTrim (Substr((cAliasSD1)->D1_CBASEAF,1,10)),  AllTrim ((cAliasSD1)->D1_CBASEAF) )  )
				If Af010VldDel("SN3",.T.)
					If !SoftLock('SN1')
						lRetorno := .F.
					EndIf
				Else
					lRetorno := .F.
				EndIf
			EndIf
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica a existencia do CIAP                                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lRetorno .And. !Empty((cAliasSD1)->D1_CODCIAP)
			dbSelectArea('SF9')
			dbSetOrder(1)
			If MsSeek(xFilial("SF9")+(cAliasSD1)->D1_CODCIAP)
				If !Empty( SN1->N1_CODCIAP ) .Or. !Empty((cAliasSD1)->D1_CODCIAP)
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Este WHILE se deve ao desmabrento no ativo fixo(SN1) pela quantidade.³
					//³A tabela SN1 eh posicionada logo acima                               ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					nAcICMSAPR	:=	0
					aAreaSN1	:=	SN1->(GetArea ())
					Do While !SN1->(Eof ()) .And.;
						(cAliasSD1)->D1_CODCIAP==SN1->N1_CODCIAP
						nAcICMSAPR	+=	SN1->N1_ICMSAPR
						
						SN1->(DbSkip ())
					EndDo
					RestArea (aAreaSN1)
					If  (((!Empty((cAliasSD1)->D1_CBASEAF) .And. SF9->F9_ICMIMOB <> nAcICMSAPR).Or.(Empty((cAliasSD1)->D1_CBASEAF) .And.SF9->F9_ICMIMOB <> 0)).Or.;
							SF9->F9_BXICMS <> 0 .Or. SF9->F9_MOTIVO <> " " .Or. SF9->F9_VLESTOR <> 0)
						Help("  ",1,"A100CIAPDE")
						lRetorno := .F.
					EndIf
				EndIf				
			EndIf
		EndIf
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se algum produto esta sendo inventariado.           ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRetorno .And. BlqInvent((cAliasSD1)->D1_COD,(cAliasSD1)->D1_LOCAL)
		Help("  ",1,"BLQINVENT",,(cAliasSD1)->D1_COD+STR0022+(cAliasSD1)->D1_LOCAL,1,11) //"Armazem: "
		lRetorno := .F.
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se algum produto ja foi distribuido                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If Localiza((cAliasSD1)->D1_COD)
		dbSelectArea('SDA')
		dbSetOrder(1)
		If lRetorno .And. MsSeek(xFilial("SDA")+(cAliasSD1)->D1_COD+(cAliasSD1)->D1_LOCAL+(cAliasSD1)->D1_NUMSEQ+(cAliasSD1)->D1_DOC+(cAliasSD1)->D1_SERIE+(cAliasSD1)->D1_FORNECE+(cAliasSD1)->D1_LOJA)
			If !(SDA->DA_QTDORI == SDA->DA_SALDO)
				Help(" ",1,"SDAJADISTR")
				lRetorno := .F.
			EndIf
		EndIf
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica a quantidade devolvida.                             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRetorno .And. ((cAliasSD1)->D1_QTDEDEV <> 0 .Or. (cAliasSD1)->D1_VALDEV <> 0)
		Help(' ',1,'NAOEXCL')
		lRetorno := .F.
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica a quantidade clasificada (remitos de localizacoes)  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRetorno .And. lRemito .And. (cAliasSD1)->D1_QTDACLA <> (cAliasSD1)->D1_QUANT
		Help(' ',1,'NAOEXCLREM')
		lRetorno := .F.
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se o remito esta amarrada a alguma nota de Credito  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRetorno .And. lRemito
		#IFNDEF TOP
			nRecSD1	:=	(cAliasSD1)->(Recno())
		#ENDIF
		SD1->(DbSetOrder(10))
		If SD1->(MsSeek(xFilial("SD1")+(cAliasSD1)->D1_FORNECE+(cAliasSD1)->D1_LOJA+(cAliasSD1)->D1_SERIE+(cAliasSD1)->D1_DOC))
			Help(' ',1,'NAOEXCLREM',,SD1->D1_ESPECIE+" "+SD1->D1_SERIE+"/"+SD1->D1_DOC,1,11)
			lRetorno := .F.
		Endif
		#IFNDEF TOP
			(cAliasSD1)->(MsGoTo(nRecSD1))
		#ENDIF
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica o Servico do WMS.                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRetorno .And. !Empty((cAliasSD1)->D1_SERVIC) .And. IntDL() .And. FindFunction("WmsAvalSD1")
		lRetorno := WmsAvalSD1("7",cAliasSD1)
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Totaliza no array aLotes para validar a exclusao.            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRetorno .And. Rastro((cAliasSD1)->D1_COD).And. SF4->F4_ESTOQUE=='S'
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ aLotes[nx][1] : Codigo do Produto        ³
		//³ aLotes[nx][2] : Almoxarifado             ³
		//³ aLotes[nx][3] : Lote                     ³
		//³ aLotes[nx][4] : SubLote                  ³
		//³ aLotes[nx][5] : OP                       ³
		//³ aLotes[nx][6] : Numero Sequencial        ³
		//³ aLotes[nx][7] : Quantidade               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nPosLote :=Ascan(aLotes,{|x| x[1]+x[2]+x[3]+x[4]==(cAliasSD1)->D1_COD+(cAliasSD1)->D1_LOCAL+(cAliasSD1)->D1_LOTECTL+(cAliasSD1)->D1_NUMLOTE+(cAliasSD1)->D1_OP+(cAliasSD1)->D1_NUMSEQ})
		If nPosLote > 0
			aLotes[nPosLote][7] += (cAliasSD1)->D1_QUANT
		Else
			aADD(aLotes,{(cAliasSD1)->D1_COD,(cAliasSD1)->D1_LOCAL,(cAliasSD1)->D1_LOTECTL,(cAliasSD1)->D1_NUMLOTE,(cAliasSD1)->D1_OP,(cAliasSD1)->D1_NUMSEQ,(cAliasSD1)->D1_QUANT})
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se Sld no B2 ficar  Neg. ou Menor que Sld em Reserva³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRetorno .And. SF4->F4_ESTOQUE == "S" .And. (cAliasSD1)->D1_QUANT > 0
		SB2->(dbSetOrder(1))
		If SB2->(MsSeek(xFilial('SB2')+(cAliasSD1)->D1_COD+(cAliasSD1)->D1_LOCAL, .F.))
			nSaldoB2 := (SB2->B2_QATU-(cAliasSD1)->D1_QUANT)
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Verifica se existe movimento de requisicao do material para a OP³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !Empty((cAliasSD1)->D1_OP) .OR. (IntePms() .and. lPmsExAFN .and. PmsExAFN(cAliasSD1))
				SD3->(dbSetOrder(4))
				If SD3->(dbSeek(xFilial("SD3")+(cAliasSD1)->D1_NUMSEQ))
					nSaldoB2 += SD3->D3_QUANT
				EndIf
			EndIf                                                        
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Verifica se existe movimento de material em Transito            ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lD1Transit .And. (cAliasSD1)->D1_TRANSIT == 'S'
				SD3->(dbSetOrder(4))
				If SD3->(dbSeek(xFilial("SD3")+(cAliasSD1)->D1_NUMSEQ))
					nSaldoB2 += SD3->D3_QUANT
				EndIf
			EndIf                                        
			If QtdComp(nSaldoB2)<QtdComp(0)
			   If lEstNeg  //Permite Estoque Negativo
			       If (Rastro((cAliasSD1)->D1_COD) .Or. Localiza((cAliasSD1)->D1_COD))  // MV_ESTNEG = S e Produto com Rastro / Localização, não permite estoque negativo
						If !(Type('l103Auto') <> 'U' .And. l103Auto)
							Aviso(STR0018,STR0019 + AllTrim((cAliasSD1)->D1_COD)+"/"+(cAliasSD1)->D1_LOCAL + STR0023 + AllTrim(Str(nSaldoB2))+") ",{STR0025}) //"Atencao" //"O Saldo do Prod/Loc "###" ficara negativo apos a Exclusao ("###"Aborta"
						EndIf	
						lRetorno := .F.
			   	Else
						If !(Type('l103Auto') <> 'U' .And. l103Auto)
					   	If !(Rastro((cAliasSD1)->D1_COD) .And. Localiza((cAliasSD1)->D1_COD)) .And. !(FunName() $ 'EICDI154')  // MV_ESTNEG = S e Produto sem Rastro / Localização, avisa que o estoque ficara negativo  e nao originado do Recebimento de Importacao
						   	lRetorno := (Aviso(STR0018,STR0019 + AllTrim((cAliasSD1)->D1_COD)+'/'+(cAliasSD1)->D1_LOCAL + STR0023 + AllTrim(Str(nSaldoB2)) + STR0024,{STR0025,STR0016}) == 2) //"Atencao"###"O Saldo do Prod/Loc "###"Continua" //" ficara negativo apos a Exclusao ("###"). Continua?"###"Aborta"
						   EndIf
						EndIf
					EndIf
				Else  // Não Permite Estoque Negativo
					If !(Type('l103Auto') <> 'U' .And. l103Auto)  
					   lR103ENEG:=A103ValEstNeg((cAliasSD1)->D1_COD,cAliasSD1)
					EndIf	
					lRetorno := lR103ENEG	
			   EndIf
			ElseIf QtdComp(nSaldoB2)<QtdComp(SB2->B2_RESERVA)
				If lEstNeg   //Permite Estoque Negativo
				   If (Rastro((cAliasSD1)->D1_COD) .Or. Localiza((cAliasSD1)->D1_COD))  // MV_ESTNEG = S e Produto com Rastro / Localização, não permite estoque negativo
						If !(Type('l103Auto') <> 'U' .And. l103Auto)
							Aviso(STR0018,STR0019 + AllTrim((cAliasSD1)->D1_COD)+"/"+(cAliasSD1)->D1_LOCAL + STR0026 + AllTrim(Str(nSaldoB2))+")",{STR0025}) //"Atencao"###"O Saldo do Prod/Loc " //" ficara Menor que o Saldo em Reserva apos a Exclusao ("###"Aborta"
						EndIf	
						lRetorno := .F.
					Else
						If !(Type('l103Auto') <> 'U' .And. l103Auto)
						   If !(Rastro((cAliasSD1)->D1_COD) .And. Localiza((cAliasSD1)->D1_COD))  .And. !(FunName() $ 'EICDI154')   // MV_ESTNEG = S e Produto sem Rastro / Localização, avisa que o estoque ficara negativo
						   	lRetorno := (Aviso(STR0018,STR0019 + AllTrim((cAliasSD1)->D1_COD)+'/'+(cAliasSD1)->D1_LOCAL + STR0023 + AllTrim(Str(nSaldoB2)) + STR0024,{STR0025,STR0016}) == 2) //"Atencao"###"O Saldo do Prod/Loc "###"Continua" //" ficara negativo apos a Exclusao ("###"). Continua?"###"Aborta"
					   	EndIf
				   	EndIf
			   	EndIf
			 	Else  // Não Permite Estoque Negativo   
				 	If !(Type('l103Auto') <> 'U' .And. l103Auto)
					   lR103ENEG:=A103ValEstNeg((cAliasSD1)->D1_COD,cAliasSD1)
					EndIf	
					lRetorno := lR103ENEG
				EndIf
			EndIf
		EndIf	
	EndIf				
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se o item de nota originou-se do SIGAEIC                            ³
	//³ Permite a exclusao apenas quando a chamada da exclusao for feita pelo EIC    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRetorno .And. !lExcViaEIC .And. !Empty( ( cAliasSD1 )->D1_TIPO_NF ) 
		Help( "", 1, "A103EXCIMP" )  // "Este documento nao pode ser excluido pois foi criado pelo SIGAEIC. A exclusao devera ser efetuada pelo SIGAEIC."
		lRetorno := .F. 
	EndIf 	

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se o item de nota originou-se do SIGATMS                            ³
	//³ Permite a exclusao apenas quando a chamada da exclusao for feita pelo TMS    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If AliasInDic("DTC") .And. lRetorno .And. !lExcViaTMS
		SF4->(DbSetOrder(1))
		If SF4->(DbSeek(xFilial('SF4')+cTesDR)) .And. SF4->F4_ESTOQUE == 'S'
			dbSelectArea('DTC')
			dbSetOrder(2) //-- DTC_FILIAL+DTC_NUMNFC+DTC_SERNFC+DTC_CLIREM+DTC_LOJREM
			IF MsSeek(xFilial('DTC') + SF1->F1_DOC + SF1->F1_SERIE + SF1->F1_FORNECE + SF1->F1_LOJA, .F.)
				Help('', 1, 'A103EXCTMS') //-- 'Este documento nao pode ser excluido pois foi criado pelo SIGATMS. A exclusao devera ser efetuada pelo SIGATMS.'
				lRetorno := .F.
			EndIf
		EndIf
	EndIf

	dbSelectArea(cAliasSD1)
	dbSkip()

EndDo
If lQuery
	dbSelectArea(cAliasSD1)
	dbCloseArea()
	dbSelectArea("SD1")
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se os Lotes podem ser excluidos                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRetorno
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ aLotes[nx][1] : Codigo do Produto        ³
	//³ aLotes[nx][2] : Almoxarifado             ³
	//³ aLotes[nx][3] : Lote                     ³
	//³ aLotes[nx][4] : SubLote                  ³
	//³ aLotes[nx][5] : OP                       ³
	//³ aLotes[nx][6] : Numero Sequencial        ³
	//³ aLotes[nx][7] : Quantidade               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	For nX := 1 to Len(aLotes)

		nSldLote := SaldoLote(aLotes[nX][1],aLotes[nX][2],aLotes[nX][3],aLotes[nX][4],,,.T.)
		// Verifica o saldo em transito disponivel
		If lD1Transit
			nSldTran := SaldoLote(aLotes[nX][1],cLocTran,aLotes[nX][3],aLotes[nX][4],,,.T.)
		Else
			nSldTran := 0
		EndIf
		If (nSldLote+nSldTran) < aLotes[nX][7]
			If !Empty(aLotes[nx,5])
				dbSelectArea("SD3")
				dbSetOrder(4)
				MsSeek(xFilial("SD3")+aLotes[nx,6])
				While !Eof() .And. SD3->D3_CF # "RE5" .And. SD3->D3_NUMSEQ == aLotes[nx,6]
					dbSkip()
				End
				lEofSD3 := IIF(SD3->D3_NUMSEQ # aLotes[nx,6],.T.,.F.)
				If lEofSD3
					Help(" ",1,"A100NOLOTE",,aLotes[nX,1]+"  "+aLotes[nX,2]+"    "+aLotes[nX,3],5,4)
					lRetorno := .F.
					Exit
				EndIf
			Else
				Help(" ",1,"A100NOLOTE",,aLotes[nX,1]+"  "+aLotes[nX,2]+"    "+aLotes[nX,3],5,4)
				lRetorno := .F.
				Exit
			EndIf
		EndIf
	Next
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se as duplicatas podem ser excluidas  SE2           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRetorno .And. (ExistBlock ("M103XFIN"))
	aRetXFin	:= ExecBlock ("M103XFIN", .F., .F. , {lAviso,lAvisoISS})
	If ValType(aRetXFin) == "A" .And. Len(aRetXFin) <= 3 
		lRetorno	:= IIF(ValType(aRetXFin[1]) == "L",aRetXFin[1],lRetorno)
		lAviso		:= IIF(ValType(aRetXFin[2]) == "L",aRetXFin[2],lAviso)
		lAvisoISS	:= IIF(ValType(aRetXFin[3]) == "L",aRetXFin[3],lAvisoISS)
	EndIf	
EndIf

If lRetorno
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica o Prefixo correto da Nota fiscal de Entrada         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cPrefixo	:= IIf(Empty(SF1->F1_PREFIXO),&(SuperGetMV("MV_2DUPREF")),SF1->F1_PREFIXO)	
	dbSelectArea("SE2")
	dbSetOrder(6)
	#IFDEF TOP
		If TcSrvType()<>"AS/400"
			lQuery    := .T.
			aStruSE2  := SE2->(dbStruct())
			cAliasSE2 := "MACANDELF1"
			cQuery    := "SELECT SE2.*,SE2.R_E_C_N_O_ SE2RECNO "
			cQuery    += "  FROM "+RetSqlName("SE2")+" SE2 "
			cQuery    += " WHERE SE2.E2_FILIAL   = '"+xFilial("SE2")+"'"
			cQuery    += "   AND SE2.E2_FORNECE  = '"+SF1->F1_FORNECE+"'"
			cQuery    += "   AND SE2.E2_LOJA	 = '"+SF1->F1_LOJA+"'"
			cQuery    += "   AND SE2.E2_PREFIXO  = '"+cPrefixo+"'"
			cQuery    += "   AND SE2.E2_NUM		 = '"+SF1->F1_DUPL+"'"
			cQuery    += "   AND SE2.D_E_L_E_T_  = ' ' "
			cQuery    += "ORDER BY "+SqlOrder(SE2->(IndexKey()))

			cQuery := ChangeQuery(cQuery)
			dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSE2,.T.,.T.)
			
			For nX := 1 To Len(aStruSE2)
				If aStruSE2[nX][2]<>"C"
					TcSetField(cAliasSE2,aStruSE2[nX][1],aStruSE2[nX][2],aStruSE2[nX][3],aStruSE2[nX][4])
				EndIf
			Next nX
		Else
	#ENDIF
		MsSeek(xFilial()+SF1->F1_FORNECE+SF1->F1_LOJA+cPrefixo+SF1->F1_DUPL)
		#IFDEF TOP
		EndIf
		#ENDIF
		
	#IFDEF TOP
		If cPaisLoc $ "BRA|MEX" .and. SF1->F1_TIPO != "D" .and. (cAliasSE2)->(!Eof())
			If lRetorno .and. A120UsaAdi(SF1->F1_COND) .and. AliasInDic("FR3") .and. AliasInDic("FIE")
				If !Empty((cAliasSE2)->E2_BAIXA) .and. (cAliasSE2)->E2_VALOR != (cAliasSE2)->E2_SALDO
					cQ := "SELECT SUM(FR3_VALOR) AS FR3_VALOR "
					cQ += "  FROM "+RetSqlName("FR3")
					cQ += " WHERE FR3_FILIAL = '"+xFilial("FR3")+"' "
					cQ += "   AND FR3_CART   = 'P' "
					cQ += "   AND FR3_TIPO   IN "+FormatIn(MVPAGANT,"/")+" "
					cQ += "   AND FR3_FORNEC = '"+SF1->F1_FORNECE+"' "
					cQ += "   AND FR3_LOJA   = '"+SF1->F1_LOJA+"' "
					cQ += "   AND FR3_DOC    = '"+SF1->F1_DOC+"' "
					cQ += "   AND FR3_SERIE  = '"+SF1->F1_SERIE+"' "
					cQ += "   AND D_E_L_E_T_ = ' ' "
            	
					cQ := ChangeQuery(cQ)
					dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQ),"TRBFR3",.T.,.T.)
						
					TcSetField("TRBFR3","FR3_VALOR","N",TamSX3("FR3_VALOR")[1],TamSX3("FR3_VALOR")[2])						
					  
				  nValorAdtFR3 := TRBFR3->FR3_VALOR           
					  
				  TRBFR3->(dbCloseArea())
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ compara o valor baixado para o titulo ( E2_VALOR - E2_SALDO ), com o valor dos adiantamentos. Se o valor for igual, continua a exclusao   ³
					//³ do documento, se o valor for diferente eh porque houveram outras baixas para o titulo, neste caso, nao eh possivel excluir o documento,   ³
					//³ primeiro deve-se excluir estas outras baixas no Financeiro.  												                                           ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÀÄÄÄÄÄÄÄÄÄÄÙ
					If (cAliasSE2)->(E2_VALOR-E2_SALDO) = nValorAdtFR3
						If !ApMsgYesNo("Por tratar-se de condição de pagamento com Adiantamento, a exclusão do Documento de Entrada também irá excluir a compensação do(s) título(s) de adiantamento associado(s) a este Documento de Entrada no momento da sua geração." + CRLF+ "Deseja continuar?") //"Por tratar-se de condição de pagamento com Adiantamento, a exclusão do Documento de Entrada também irá excluir a compensação do(s) título(s) de adiantamento associado(s) a este Documento de Entrada no momento da sua geração."#CRLF#"Deseja continuar?"
							lRetorno := .F.  
				  	Endif
			  	Else
				  	lRetorno := .F.
				  	Help(" ",1,"FA050BAIXA")
					Endif					   
				Endif 
			Endif	
		Endif	
		
		dbSelectArea(cAliasSE2)
	#ENDIF	
		
	While ( !Eof() .And. lRetorno .And.;
			xFilial("SE2")  == (cAliasSE2)->E2_FILIAL  .And.;
			SF1->F1_FORNECE == (cAliasSE2)->E2_FORNECE .And.;
			SF1->F1_LOJA    == (cAliasSE2)->E2_LOJA    .And.;
			cPrefixo	    == (cAliasSE2)->E2_PREFIXO .And.;
			SF1->F1_DUPL	== (cAliasSE2)->E2_NUM )
		If (cAliasSE2)->E2_TIPO == MVNOTAFIS
			aadd(aRecSE2,If(lQuery,(cAliasSE2)->SE2RECNO,(cAliasSE2)->(RecNo())))

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ se for nota fiscal com adiantamento compensado, valida se a nota fiscal tem somente uma parcela no contas a pagar                                        ³
			//³ se for somente 1 parcela, segue o cancelamento e nao valida se o titulo estah baixado, pois a compensacao desta parcela vai ser desfeita na rotina       ³
			//³ A103Grava                                                                                                                                                ³
			//³ se for mais de uma parcela, valida as parcelas a partir da segunda, para checar se hah alguma parcela baixada                                            ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			#IFDEF TOP
				If cPaisLoc $ "BRA|MEX"
					If SF1->F1_TIPO != "D"	
						If nCountSE2 = 0
							If A120UsaAdi(SF1->F1_COND) .and. AliasInDic("FR3") .and. AliasInDic("FIE")
			  					If !Empty((cAliasSE2)->E2_BAIXA) .and. (cAliasSE2)->E2_VALOR != (cAliasSE2)->E2_SALDO  //tem baixa para o adiantamento
			  						lPriParAdtBx := .T.
			  					Endif
					  		Endif
					  	Endif
				  	Endif
			  	Endif	
			#ENDIF			   		
			
			If IIf((cPaisLoc == "BRA" .and. lPriParAdtBx),.F.,!XFaCanDelCP(cAliasSE2,"MATA100"))
				lRetorno := .F.
				Exit
			EndIf         
			
			If lRetISSMes
				dDataVenc := (cAliasSE2)->E2_VENCREA
			EndIf
			
			If lContrRet
				If ((cAliasSE2)->E2_PRETPIS == "2" .Or. (cAliasSE2)->E2_PRETCOF == "2" .Or. (cAliasSE2)->E2_PRETCSL == "2") .And.;
					((cAliasSE2)->E2_VRETPIS == 0 .Or. (cAliasSE2)->E2_VRETCOF == 0 .Or. (cAliasSE2)->E2_VRETCSL == 0)
					lAviso   := .T.
				Endif	
			Endif

			If (cAliasSE2)->E2_ISS > 0 .Or. (cAliasSE2)->E2_VRETISS > 0
				lVldRetISS := .T.
		EndIf
		lPriParAdtBx := .F.
		nCountSE2++
		
		EndIf
		dbSelectArea(cAliasSE2)
		dbSkip()
	EndDo
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Apaga tambem os registro de impostos	   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aAreaSE2IR := GetArea()
	dbSelectArea("SE2")
	dbSetOrder(6)
	dbSeek(xFilial("SE2")+SF1->F1_FORNECE+SF1->F1_LOJA+cPrefixo+SF1->F1_DUPL) //xFilial("SE2")+cPrefixo+SF1->F1_DUPL )

    If (SE2->E2_FILIAL+SE2->E2_FORNECE+SE2->E2_LOJA+SE2->E2_PREFIXO+SE2->E2_NUM == ;
		(xFilial("SE2")+SF1->F1_FORNECE+SF1->F1_LOJA+cPrefixo+SF1->F1_DUPL))
		nRecE2in:=SE2->(RecNo())
		dbSetOrder(0)
		SE2->(MsGoto(nRecE2in))
		While (!EOF() .And. SE2->E2_FILIAL+SE2->E2_PREFIXO+SE2->E2_NUM == ;
				(xFilial("SE2")+cPrefixo+SF1->F1_DUPL))
			If E2_NATUREZA = &(GetMv("MV_IRF")) .And. SE2->E2_SALDO != 0 .And. aScan(aRecSE2,SE2->(RecNo())) == 0
				aadd(aRecSE2,SE2->(RecNo()))
			ElseIf (SE2->E2_FORNECE+SE2->E2_LOJA  <> SF1->F1_FORNECE+SF1->F1_LOJA)
				Exit
			EndIf
			dbSkip()
		EndDo
  	EndIf
	RestArea(aAreaSE2IR)
	If lQuery
		dbSelectArea(cAliasSE2)
		dbCloseArea()
		dbSelectArea("SE2")
	EndIf
EndIf

If lRetorno .And. lRetISSMes .And. !Empty(dDataVenc) .And. lVldRetISS
	dDataIni:= FirstDay(dDataVenc)
	dDataFim:= LastDay(dDataVenc)
	
	#IFDEF TOP                                         
		lQuery    := .T.
		cAliasSE2 := GetNextAlias()
	
		cQuery := "SELECT E2_PREFIXO, E2_NUM, E2_ISS, E2_VRETISS, SE2.R_E_C_N_O_ SE2RECNO "
		cQuery += "  FROM "+RetSqlName( "SE2" ) + " SE2 "
		cQuery += " WHERE E2_FILIAL   = '"+xFilial("SE2")+"'"
		cQuery += "   AND E2_FORNECE  = '"+SF1->F1_FORNECE	+ "'"
		cQuery += "   AND E2_LOJA     = '"+SF1->F1_LOJA+"'"
		cQuery += "   AND E2_VENCREA  >= '"+DToS(dDataIni)+"'"
		cQuery += "   AND E2_VENCREA  <= '"+DToS(dDataFim)+"'"
		cQuery += "   AND (E2_ISS > 0 OR E2_VRETISS > 0)"
		cQuery += "   AND E2_TIPO NOT IN " + FormatIn(MVABATIM,"|")
		cQuery += "   AND E2_TIPO NOT IN " + FormatIn(MV_CPNEG,cSepNeg)
		cQuery += "   AND E2_TIPO NOT IN " + FormatIn(MVPROVIS,cSepProv)
		cQuery += "   AND E2_TIPO NOT IN " + FormatIn(MVPAGANT,cSepRec)
		cQuery += "   AND D_E_L_E_T_=' '"
	
		cQuery := ChangeQuery( cQuery )
		dbUseArea( .T., "TOPCONN", TcGenQry(,,cQuery), cAliasSE2, .F., .T. )
		
	   TcSetField(cAliasSE2,"E2_ISS","N",TamSX3("E2_ISS")[1],TamSX3("E2_ISS")[2])
	   TcSetField(cAliasSE2,"E2_VRETISS","N",TamSX3("E2_VRETISS")[1],TamSX3("E2_VRETISS")[2])
	#ELSE
		cIndexSE2 := CriaTrab(,.f.)
			
		cQuery := "E2_FILIAL='"      + xFilial( "SE2" )		+ "' .AND. "
		cQuery += "E2_FORNECE='"     + SF1->F1_FORNECE		+ "' .AND. "
		cQuery += "E2_LOJA='"        + SF1->F1_LOJA			+ "' .AND. "
		cQuery += "DTOS(E2_VENCREA)>='" + DToS( dDataIni )	+ "' .AND. "
		cQuery += "DTOS(E2_VENCREA)<='" + DToS( dDataFim )	+ "' .AND. "
		cQuery += "(E2_ISS>0 .OR. E2_VRETISS>0) .AND. "
		cQuery += "!(E2_TIPO $ '"+MVABATIM + "/" + MV_CPNEG + "/" + MVPROVIS + "/" + MVPAGANT+"')"
		
		IndRegua("SE2",cIndexSE2,"DTOS(E2_VENCREA)",, cQuery ,"")
		nIndexSE2 :=RetIndex("SE2")+1
		dbSetIndex(cIndexSE2+OrdBagExt())
		dbSetorder(nIndexSE2)
		dbGoTop()
	#ENDIF
	
	While !(cAliasSE2)->(Eof())
		If cPrefixo == (cAliasSE2)->E2_PREFIXO .And.;
	      SF1->F1_DUPL == (cAliasSE2)->E2_NUM
			(cAliasSE2)->(dbSkip())
			If (cAliasSE2)->(Eof())
				lAvisoISS:= .F.			
				lRetorno := .T.
			ElseIf (cAliasSE2)->E2_ISS > 0
				lAvisoISS:= .T.
				lRetorno := .F.
				Exit
			EndIf
		Else
			If (cAliasSE2)->E2_ISS > 0
				lAvisoISS:= .T.
				lRetorno := .F.
			End
			(cAliasSE2)->(dbSkip())
		EndIf
	EndDo
	If lQuery
		dbSelectArea(cAliasSE2)
		dbCloseArea()
		dbSelectArea("SE2")
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se as duplicatas podem ser excluidas  SE1           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRetorno .And. SF1->F1_TIPO == 'D'
	dbSelectArea('SE1')
	dbSetOrder(2)
	If MsSeek(xFilial("SE1")+SF1->F1_FORNECE+SF1->F1_LOJA+cPrefixo+SF1->F1_DOC)
		While !Eof().And. lRetorno .And. xFilial()+SF1->F1_FORNECE+SF1->F1_LOJA+cPrefixo+SF1->F1_DOC==;
				E1_FILIAL+E1_CLIENTE+E1_LOJA+E1_PREFIXO+E1_NUM
			If !(SE1->E1_TIPO$ MV_CRNEG)
				dbSelectArea('SE1')
				dbSkip()
				Loop
			EndIf
			aadd(aRecSE1,SE1->(RecNo()))
			If SE1->E1_SALDO <> SE1->E1_VALOR
				Help(' ',1,'A100FINBX')
				lRetorno := .F.
			ElseIf !SoftLock('SE1')
				lRetorno := .F.
			EndIf
			dbSelectArea('SE1')
			dbSkip()
		EndDo
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿                  
//³ Verifica se a NFE gerou Imposto ICMS ANTECIPACAO no SE2 CAPag³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If SF1->(FieldPos("F1_NUMTRIB")) > 0
	If !Empty(SF1->F1_NUMTRIB)
		If AllTrim(SF1->F1_NUMTRIB) == "N"
			lNumTrib := .F.
		EndIf
		cNumTit := SF1->F1_NUMTRIB
	Else
		cNumTit := SF1->F1_DOC
	EndIf
Else
	cNumTit := SF1->F1_DOC
EndIf

If lRetorno .And. cPaisloc=="BRA" .And. lNumTrib
	dbSelectArea("SE2")
	SE2->(dbsetOrder(1))
	If dbSeek(xFilial("SE2") + "ICM" + cNumTit)
		Do While SE2->(!Eof()) .And. SE2->E2_PREFIXO+SE2->E2_NUM == "ICM" + cNumTit
			//Se o titulo sofreu pagamento nao permitir excluir a NFE
			If !Empty(SE2->E2_BAIXA).And. SE2->E2_SALDO<>SE2->E2_VALOR .And. ;
				ALLTRIM(SE2->E2_TIPO)=="TX" .And. ALLTRIM(SE2->E2_ORIGEM) == "MATA103"

				cMensagem:=" Não é possível excluir esse documento por "+CHR(10)
				cMensagem+="estar vinculado a um título a pagar de imposto "+CHR(10)
				cMensagem+="( "+SE2->E2_NUM+"/"+SE2->E2_PREFIXO+") baixado total ou parcialmente."+CHR(10)
				cMensagem+="Para excluir esse documento, será necessário "+CHR(10)
				cMensagem+="primeiramente estornar esse título através "+CHR(10)
				cMensagem+="do módulo financeiro."

				Help(" ",1,"NAOEXCNFS","NAOEXCNFS",cMensagem,1,0)
				lRetorno := .F.
			Endif
			SE2->(DbSkip())
		EndDo
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Integracao com o EEC     											|
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ( lRetorno .And. FindFunction("EECFAT3") .And. lEECFAT )
	lRetorno := EECFAT3("VLD",.T.)
EndIf

If lAviso .And. lShowAviso
	If !(Type('l103Auto') <> 'U' .And. l103Auto)
		Aviso(OemToAnsi("Atenção"),OemToAnsi(STR0039),{OemToAnsi("OK")},2)
	EndIf	
ElseIf lAvisoISS
	If !(Type('l103Auto') <> 'U' .And. l103Auto)
		Aviso(OemToAnsi("Atenção"),OemToAnsi(STR0041),{OemToAnsi("OK")},2)
	EndIf	
Endif

If !lRetorno .And. lExcViaEIC
	lMsErroAuto := .T.
EndIf

RestArea(aAreaSD1)
RestArea(aAreaSF8)
RestArea(aArea)

Return lRetorno

Static Function XFaCanDelCP(cAliasSE2,cOrigem,lHelp,cMsg)

Local aArea       := GetArea()
Local aAreaSE1    := SE1->(GetArea())
Local aAreaSE2    := SE2->(GetArea())
Local aParcela    := {}
Local aRecSE2     := {}
Local nX          := 0
Local nY          := 0
Local cMunic      := PadR(SuperGetMv("MV_MUNIC"),Len(SE2->E2_FORNECE))
Local cPrefixo    := (cAliasSE2)->E2_PREFIXO
Local cNumero     := (cAliasSE2)->E2_NUM
Local cParcela    := (cAliasSE2)->E2_PARCELA
Local cTipo       := (cAliasSE2)->E2_TIPO
Local cFornece    := (cAliasSE2)->E2_FORNECE
Local cLoja       := (cAliasSE2)->E2_LOJA
Local cCursor     := ""
Local lQuery      := .F.
Local lRetorno    := .T.
Local lIntegracao := SuperGetMv("MV_EASY")=="S"
Local lContrRet   := !Empty( SE2->( FieldPos( "E2_VRETPIS" ) ) ) .And. !Empty( SE2->( FieldPos( "E2_VRETCOF" ) ) ) .And. ; 
				!Empty( SE2->( FieldPos( "E2_VRETCSL" ) ) ) .And. !Empty( SE2->( FieldPos( "E2_PRETPIS" ) ) ) .And. ;
				!Empty( SE2->( FieldPos( "E2_PRETCOF" ) ) ) .And. !Empty( SE2->( FieldPos( "E2_PRETCSL" ) ) )

Local lContrato   := FindFunction( "A103GCDisp" ) .And. A103GCDisp()
Local cAliasQry   := ""
Local nContraBx   := 0
Local cLojaZero   := PadR("00",Len( SE2->E2_LOJA ) , "0" )
Local aSoluPor := {}
Local aHelpPor := {}

#IFDEF TOP
	Local cQuery      := ""
	Local aStru       := {}
#ENDIF

//????????????????????????????????
//?Verifica os parametros da rotina                             ?
//????????????????????????????????
DEFAULT cAliasSE2 := "SE2"
DEFAULT cOrigem   := "FINA050"
DEFAULT lHelp     := .T.

Default cMsg		 := ""

If SA2->(FieldPos("A2_MUNIC")) > 0
	dbSelectArea("SA2")
	dbSetOrder(1)
	DbSeek(xFilial("SA2")+cFornece+cLoja)
	If !Empty(SA2->A2_MUNIC)
		cMunic := PadR(SA2->A2_MUNIC,Len(SE2->E2_FORNECE))
	EndIf
EndIf                                      
dbSelectArea(cAliasSE2)
aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVISS           ,"E2_PARCISS" ,"E2_ISS" ,MVISS ,E2_PARCISS,cMunic,PadR(IIf(SubStr(cMunic,Len(SE2->E2_FORNECE)+1)<>"",SubStr(cMunic,Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVINSS+"/"+"INA","E2_PARCINS" ,"E2_INSS",MVINSS,E2_PARCINS,PadR(SuperGetMv('MV_FORINSS'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_FORINSS'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_FORINSS'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCISS","E2_ISS" ,MVTAXA,E2_PARCISS,cMunic,PadR(IIf(SubStr(cMunic,Len(SE2->E2_FORNECE)+1)<>"",SubStr(cMunic,Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCIR" ,"E2_IRRF",MVTAXA,E2_PARCIR,PadR(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCPIS" ,"E2_PIS",MVTAXA,E2_PARCPIS,PadR(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCCOF" ,"E2_COFINS",MVTAXA,E2_PARCCOF,PadR(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCSLL" ,"E2_CSLL",MVTAXA,E2_PARCSLL,PadR(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
If SE2->(FieldPos("E2_FETHAB"))<>0
	aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCFET" ,"E2_FETHAB",MVTAXA,E2_PARCFET,PadR(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
EndIf
If SE2->(FieldPos("E2_FABOV"))<>0         
	aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCFAB" ,"E2_FABOV",MVTAXA,E2_PARCFAB,PadR(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
EndIf
If SE2->(FieldPos("E2_FACS"))<>0
	aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCFAC" ,"E2_FACS",MVTAXA,E2_PARCFAC,PadR(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
EndIf
If SE2->(FieldPos("E2_FAMAD"))<>0
	aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCFAM" ,"E2_FAMAD",MVTAXA,E2_PARCFAM,PadR(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
EndIf
If SE2->(FieldPos("E2_FMPEQ"))<>0
	aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCFMP" ,"E2_FMPEQ",MVTAXA,E2_PARCFMP,cMunic,PadR(IIf(SubStr(cMunic,Len(SE2->E2_FORNECE)+1)<>"",SubStr(cMunic,Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
EndIf
//????????????????????????????????
//?Verifica se o titulo foi gerado pelo SIGAEIC                 ?
//????????????????????????????????
If lIntegracao .And. cPaisLoc <> "ARG" .And. (cAliasSE2)->E2_TIPO = "INV" .And.;
		UPPER(AllTrim((cAliasSE2)->E2_ORIGEM)) == "SIGAEIC" .And. lRetorno
	If lHelp
		HELP(" ",1,"FAORIEIC")
		cMsg := "FAORIEIC"
	EndIf
	lRetorno := .F.
EndIf
//????????????????????????????????
//?Verifica se o titulo foi gerado pelo SIGAEIC                 ?
//????????????????????????????????
If lIntegracao .And. (cAliasSE2)->E2_TIPO == MVPROVIS .And.;
		UPPER(AllTrim((cAliasSE2)->E2_ORIGEM)) == "SIGAEIC" .And. lRetorno
	If lHelp
		HELP(" ",1,"FAORIEIC")
		cMsg := "FAORIEIC"
	EndIf
	lRetorno := .F.
EndIf
//????????????????????????????????
//?PA ou cheque gerado por PA devera cancelar a Ordem de Pagto. ?
//????????????????????????????????
If cPaisLoc $ "ARG" .And. lRetorno
	If ((cAliasSE2)->E2_TIPO==MVPAGANT).Or.((cAliasSE2)->E2_TIPO == MVCHEQUE .And. !Empty((cAliasSE2)->E2_ORDPAGO))
		If lHelp
			Help(" ",1,"ORDPAGO")
			cMsg := "ORDPAGO"
		EndIf
		lRetorno := .F.
	EndIf
EndIf
//????????????????????????????????????????
//?Verifica se os dados nao foram gravados por outro modulo		            ?
//????????????????????????????????????????
If !Empty((cAliasSE2)->E2_ORIGEM) .And.;
		!Upper(AllTrim((cAliasSE2)->E2_ORIGEM))$cOrigem .And. lRetorno
	If lHelp
		If AllTrim(cOrigem) == "MATA100"
			Help(" ",1,"NO_DELDUPL")
		Else
			Help(" ",1,"NO_DELETE2")
			cMsg := "NO_DELETE2"
		Endif
	EndIf
	lRetorno := .F.
EndIf
//????????????????????????????????????????
//?Verifica se o titulo nao esta em bordero                                    ?
//????????????????????????????????????????
If !Empty((cAliasSE2)->E2_NUMBOR) .And. lRetorno
	If lHelp
		Help("",1,"FA050BORD")
		cMsg := "FA050BORD"
	EndIf
	lRetorno := .F.
EndIf     

If lContrato .And. cOrigem == "MATA100"

	//????????????????????????????????????????
	//?Caso o modulo de gestao de contratos esteja presente                        ?
	//????????????????????????????????????????
         
	//????????????????????????????????????????
	//?Verifica se e uma baixa do modulo gestao de contratos                       ?
	//????????????????????????????????????????

	//????????????????????????????????????????
	//?Verifica se titulo possui baixas nao originadas de contratos                ?
	//????????????????????????????????????????
	
	cAliasQry := GetNextAlias() 	
	                           
	cQuery := ""
	cQuery += "SELECT SE5.E5_VALOR,SE5.E5_TIPODOC  FROM " + RetSqlName( "SE5" ) + " SE5 "
	cQuery += "WHERE " 
	                
	cQuery += "E5_FILIAL='"  + xFilial( "SE5" )+ "' AND " 
	cQuery += "E5_PREFIXO='" + (cAliasSE2)->E2_PREFIXO + "' AND " 
	cQuery += "E5_NUMERO='"  + (cAliasSE2)->E2_NUM     + "' AND " 	
	cQuery += "E5_PARCELA='" + (cAliasSE2)->E2_PARCELA + "' AND " 	
	cQuery += "E5_TIPO='"    + (cAliasSE2)->E2_TIPO    + "' AND " 	
	cQuery += "E5_CLIFOR='"  + (cAliasSE2)->E2_FORNECE + "' AND "
	cQuery += "E5_LOJA='"    + (cAliasSE2)->E2_LOJA    + "' AND "
	cQuery += "E5_SITUACA<>'C' AND " 
	cQuery += "SUBSTRING(E5_HISTOR,1,12)<>'//CMP--CTR..' AND "
	cQuery += "D_E_L_E_T_=' '"     
	
	cQuery := ChangeQuery( cQuery ) 
	
	dbUseArea( .T., "TOPCONN", TcGenQry( ,,cQuery ), cAliasQry, .F., .T. ) 
	
	TcSetField(cAliasQry, "E5_VALOR", "N", TamSX3("E5_VALOR")[1], TamSX3("E5_VALOR")[2] )

	//?????????????????????
	//?Soma o valor das baixas               ?
	//?????????????????????
	While !( cAliasQry )->( Eof() )
		If E5_TIPODOC == "ES"//Baixa de estorno
			nContraBx -= (cAliasQry)->E5_VALOR
		Else
			nContraBx += (cAliasQry)->E5_VALOR
		EndIf
		
		( cAliasQry )->( dbSkip() )
	EndDo

	( cAliasQry )->( dbCloseArea() )
	
	//If lRetorno .And. nContraBx == (cAliasSE2)->E2_VALOR   
	//	If lHelp
	//		Help(" ",1,"FA050BAIXA")
	//		cMsg := "FA050BAIXA"
	//	EndIf
	//	lRetorno := .F.
	//EndIf
	//If lRetorno .And. !Empty(nContraBx)
				
	//	If lHelp
	//		Help(" ",1,"BAIXAPARC")
	//		cMsg := "BAIXAPARC"
	//	EndIf
	//	lRetorno := .F.
	//EndIf
Else

	//????????????????????????????????????????
	//?Verifica se titulo ja foi baixado total ou parcialmente                     ?
	//????????????????????????????????????????
	If lRetorno .And. cOrigem == "MATA100" .And. !Empty((cAliasSE2)->E2_BAIXA) 
		If lHelp
			Help(" ",1,"FA050BAIXA")
			cMsg := "FA050BAIXA"
		EndIf
		lRetorno := .F.
	EndIf
	If (cAliasSE2)->E2_VALOR <> (cAliasSE2)->E2_SALDO .And. lRetorno
		If lHelp
			Help(" ",1,"BAIXAPARC")
			cMsg := "BAIXAPARC"
		EndIf
		lRetorno := .F.
	EndIf
	
EndIf 

//????????????????????????????????????????
//?Verifica se a data de movimentacao eh valida                                ?
//????????????????????????????????????????
If !DtMovFin() .And. lRetorno
	lRetorno := .F.
EndIf
//????????????????????????????????????????
//?Verifica se foi emitido cheque para este titulo                             ?
//????????????????????????????????????????
If (cAliasSE2)->E2_IMPCHEQ == "S" .And. lRetorno
	If lHelp
		Help( " ", 1, "EXISTCHEQ" )
		cMsg := "EXISTCHEQ"
	EndIf
	lRetorno := .F.
EndIf
//????????????????????????????
//?erificar se o documento foi ajustado por diferencia ?
//?e cambio com data posterio a OP                     ?
//????????????????????????????
If cPaisLoc == "ARG"
	SIX->(DbSetOrder(1))
	If SIX->(DbSeek('SFR')) //PARA GARANTIR QUE A TABELA SFR EXISTA
 		DbSelectArea('SFR')
		DbSetOrder(1)
		If DbSeek(xFilial()+"2"+(cAliasSE2)->E2_PREFIXO+(cAliasSE2)->E2_NUM+(cAliasSE2)->E2_PARCELA+(cAliasSE2)->E2_TIPO+(cAliasSE2)->E2_FORNECE+(cAliasSE2)->E2_LOJA)
			If lHelp
				Help( " ", 1, "FA084010",,Left(SFR->FR_CHAVDE,Len(SE2->E2_PREFIXO+SE2->E2_NUM+SE2->E2_PARCELA+SE2->E2_TIPO)),5)
			EndIf
			lRetorno := .F.
		Endif			
	Endif
Endif
//????????????????????????????????????????
//?Verifica se foi emitido cheque para os titulos vinculados                   ?
//????????????????????????????????????????
If lRetorno
	For nX := 1 To Len(aParcela)
		If (cAliasSE2)->(FieldGet(FieldPos(aParcela[nX,3]))) > 0
			dbSelectArea("SE2")
			dbSetOrder(1)
			If DbSeek(xFilial("SE2")+cPrefixo+cNumero+aParcela[nX][5]+aParcela[nX][4]+aParcela[nX][6]+aParcela[nX][7])

				If Alltrim(SE2->E2_ORIGEM) == AllTrim(cOrigem)
					If (SE2->(FieldPos("E2_TITPAI"))>0) .And. !Empty(SE2->E2_TITPAI) .And. (SE2->E2_TITPAI <> cPrefixo+cNumero+cParcela+cTipo+cFornece+cLoja)
						Loop
					EndIf
					If SE2->E2_IMPCHEQ=="S"
						If lHelp
							Help( " ", 1, "EXISTCHEQ" )
							cMsg := "EXISTCHEQ"
						EndIf
						lRetorno := .F.
					EndIf
					If SE2->E2_SALDO <> SE2->E2_VALOR
						If lHelp
							Help(" ",1,"BAIXAPARC")
							cMsg := "BAIXAPARC"
						EndIf
						lRetorno := .F.
					EndIf
					If !Empty(SE2->E2_NUMBOR)
						If lHelp
							Help("",1,"FA050BORD")
							cMsg := "FA050BORD"
						EndIf
						lRetorno := .F.
					EndIf
				EndIf
				
			EndIf
		EndIf
		If !lRetorno
			Exit
		EndIf
	Next nX
	RestArea(aAreaSE2)
EndIf
//????????????????????????????????????????
//?Verifica se eh um titulo de imposto                                         ?
//????????????????????????????????????????
If (cAliasSE2)->E2_TIPO $ MVISS+"/"+MVTAXA+"/"+MVTXA+"/"+MVINSS+"/"+"INA" .And. lRetorno .And. !"MATA460"$cOrigem
	//????????????????????????????????
	//?Se este titulo possuir um pai nao permitir a exclusao       ?
	//????????????????????????????????
	For nX := 1 To Len(aParcela)
		If aParcela[nX,1]
			nY := nX
			Exit
		EndIf
	Next nX
	dbSelectArea("SE2")
	dbSetOrder(1)	
	#IFDEF TOP
		SE2->(dbCommit())
		aStru  := SE2->(dbStruct())
		cCursor:= "FACANDELCP"
		lQuery := .T.
		cQuery := "SELECT * "
		cQuery += "FROM "+RetSqlName("SE2")+" SE2 "
		cQuery += "WHERE SE2.E2_FILIAL='"+xFilial("SE2")+"' AND "
		cQuery += "SE2.E2_PREFIXO='"+cPrefixo+"' AND "
		cQuery += "SE2.E2_NUM='"+cNumero+"' AND "
		cQuery += "SE2."+aParcela[nX][2]+"='"+cParcela+"' AND "
		cQuery += "SE2.D_E_L_E_T_=' ' "
		cQuery += "ORDER BY "+SqlOrder(SE2->(IndexKey()))

		cQuery := ChangeQuery(cQuery)

		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cCursor,.T.,.T.)

		For nX := 1 To Len(aStru)
			If aStru[nX][2]<>"C"
				TcSetField(cCursor,aStru[nX][1],aStru[nX][2],aStru[nX][3],aStru[nX][4])
			EndIf
		Next nX
	#ELSE
		cCursor := "SE2"
		DbSeek(xFilial("SE2")+cPrefixo+cNumero)
	#ENDIF
	While !Eof() .And. (cCursor)->E2_FILIAL == xFilial("SE2") .And.;
			(cCursor)->E2_PREFIXO == cPrefixo .And.;
			(cCursor)->E2_NUM == cNumero
		If (cCursor)->(FieldGet(FieldPos(aParcela[nY][2]))) == cParcela
			If ( cTipo $ MVTXA+"/"+"INA" .And. (cCursor)->E2_TIPO $ MVPAGANT+"/"+MV_CPNEG ) .Or. !cTipo $ MVTXA+"/"+"INA"
				If (cCursor)->(FieldGet(FieldPos(aParcela[nY,3]))) <> 0
					If lHelp
						Help(" ",1,"NOVALORIR")
						cMsg := "NOVALORIR"
					EndIf
					lRetorno := .F.
				EndIf
			EndIf
		EndIf
		dbSelectArea(cCursor)
		DbSkip()
	EndDo
	If lQuery
		dbSelectArea(cCursor)
		dbCloseArea()
		dbSelectArea("SE2")
	EndIf
	RestArea(aAreaSE2)
	If lRetorno
		dbSelectArea("SE1")
		dbSetOrder(1)	
		#IFDEF TOP
			SE1->(dbCommit())
			aStru  := SE1->(dbStruct())
			cCursor:= "FACANDELCP"
			lQuery := .T.
			cQuery := "SELECT * "
			cQuery += "FROM "+RetSqlName("SE1")+" SE1 "
			cQuery += "WHERE SE1.E1_FILIAL='"+xFilial("SE1")+"' AND "
			cQuery += "SE1.E1_PREFIXO='"+cPrefixo+"' AND "
			cQuery += "SE1.E1_NUM='"+cNumero+"' AND "
			cQuery += "SE1.D_E_L_E_T_=' ' "
			cQuery += "ORDER BY "+SqlOrder(SE1->(IndexKey()))

			cQuery := ChangeQuery(cQuery)

			dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cCursor,.T.,.T.)

			For nX := 1 To Len(aStru)
				If aStru[nX][2]<>"C"
					TcSetField(cCursor,aStru[nX][1],aStru[nX][2],aStru[nX][3],aStru[nX][4])
				EndIf
			Next nX		
		#ELSE
			cCursor := "SE1"
			DbSeek(xFilial("SE1")+cPrefixo+cNumero)
		#ENDIF
		While !Eof() .And. (cCursor)->E1_FILIAL == xFilial("SE1") .And.;
				(cCursor)->E1_PREFIXO == cPrefixo .And.;
				(cCursor)->E1_NUM == cNumero
			If (cCursor)->E1_ISS <> 0 .And. (cCursor)->E1_PARCELA == cParcela
				If lHelp
					Help(" ",1,"NOVALORIR")
					cMsg := "NOVALORIR"
				EndIf
				lRetorno := .F.
			EndIf
			dbSelectArea(cCursor)
			dbSkip()
		EndDo
		If lQuery
			dbSelectArea(cCursor)
			dbCloseArea()
			dbSelectArea("SE1")		
		EndIf
		RestArea(aAreaSE1)
	EndIf
EndIf
//????????????????????????????????????????
//?Verifica se ha um titulo de abatimento vinculado a este titulo              ?
//????????????????????????????????????????
If lRetorno .And. !(cAliasSE2)->E2_TIPO $ MVABATIM .And. !"FINA050"$cOrigem
	If FaAbatCP(cPrefixo,cNumero,cParcela,cFornece,cLoja) > 0
		If lHelp
			If Empty(GetHelp("FINABATTIT"))
				Aadd(aHelpPor,"Nota n? poder?ser exclu?a pois pos- ")
				Aadd(aHelpPor,"sui abatimentos amarrados ao t?ulo   ")
				Aadd(aHelpPor,"gerado.")
				//?OLUCAO?
				Aadd(aSoluPor,"Exclua primeiramente os t?ulos de ")
				Aadd(aSoluPor,"abatimento no m?ulo Financeiro pa-")
				Aadd(aSoluPor,"ra depois excluir esta nota fiscal.")
				PutHelp("PFINABATTIT",aHelpPor,,,.T.)
				PutHelp("SFINABATTIT",aSoluPor,,,.T.)
			Endif
			
			Help(" ",1,"FINABATTIT")
			cMsg := "FINABATTIT"
		EndIf
		lRetorno := .F.
	EndIf
EndIf             
//????????????????????????????????????????
//?Verifica se o titulo possui NCC e estas ja foram compensadas                ?
//????????????????????????????????????????
If lRetorno
	If lContrRet
		aRecSE2 := FImpExcTit("SE2",(cAliasSE2)->E2_PREFIXO,(cAliasSE2)->E2_NUM,(cAliasSE2)->E2_PARCELA,(cAliasSE2)->E2_TIPO,(cAliasSE2)->E2_FORNECE,(cAliasSE2)->E2_LOJA)		
		
		For nX := 1 to Len(aRecSE2)
			SE2->(MSGoto(aRecSE2[nX]))	
			If SE2->E2_TIPO $ MV_CPNEG
				If SE2->E2_SALDO <> SE2->E2_VALOR
					Help(" ",1,"NODELETA")
					cMsg := "NODELETA"
					lRetorno := .F.
				Endif
			Endif	
		Next

	Endif     
Endif	

RestArea(aAreaSE1)
RestArea(aAreaSE2)
RestArea(aArea)
Return(lRetorno)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ A103Bar  ³ Prog. ³ Sergio Silveira       ³Data  ³23/02/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Cria a enchoicebar.                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ A103Bar( ExpO1, ExpB1, ExpB2, ExpA1 )                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpO1 = Objeto dialog                                      ³±±
±±³          ³ ExpB1 = Code block de confirma                             ³±±
±±³          ³ ExpB2 = Code block de cancela                              ³±±
±±³          ³ ExpA1 = Array com botoes ja incluidos.                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Retorna o retorno da enchoicebar                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ MATA103                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function XA103Bar(oDlg,bOk,bCancel,aButtonsAtu, aInfo  )

Local aUsButtons := {}
Local lPrjCni := FindFunction("ValidaCNI") .And. ValidaCNI()

If lPrjCni	
	aadd(aButtonsAtu,{"BUDGET",   {|| _MA103Div1()},"Cadastro de divergencias","Divergencias" })
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Adiciona botoes do usuario na EnchoiceBar                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

If ExistTemplate( "MA103BUT" )
	If ValType( aUsButtons := ExecTemplate( "MA103BUT", .F., .F.,{aInfo} ) ) == "A"
		AEval( aUsButtons, { |x| AAdd( aButtonsAtu, x ) } )
	EndIf
EndIf
If ExistBlock( "MA103BUT" )
	If ValType( aUsButtons := ExecBlock( "MA103BUT", .F., .F.,{aInfo} ) ) == "A"
		AEval( aUsButtons, { |x| AAdd( aButtonsAtu, x ) } )
	EndIf
EndIf

Return (EnchoiceBar(oDlg,bOK,bcancel,,aButtonsAtu))

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³A103TmsVld³ Autor ³Eduardo de Souza       ³ Data ³ 30/08/04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Valida exclusao do movimentos de custos de transporte.      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ExpL1 := A103TmsVld( ExpL1 )                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpD1 - Verifica se eh exclusao                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³SigaTMS                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function XA103TmsVld(l103Exclui)

Local lRet     := .T.
Local nCnt     := 0                                                                                  
Local aAreaSD1 := SD1->(GetArea())                                                                  

Local aHlpPor     := {"Existe movimento de custo de","trasporte baixado para o documento,","a exclusão não será permitida."}		   
Local aHlpEng     := {"There is a cost of trasport ","movement posted for the document,","the deletion will not e allowed."}
Local aHlpSpa	  := {"Existe movimiento de costos","de trasporte dado de baja en","el documento,","la exclusion no sera permitida."}

PutHelp("PA103NODEL" , aHlpPor , aHlpEng , aHlpSpa , .F. )

If l103Exclui .And. IntTMS() // Integracao TMS
	SD1->(DbSetOrder(1))
	For nCnt := 1 To Len(aCols)	
		If SD1->(MsSeek(xFilial("SD1")+cNFiscal+cSerie+cA100For+cLoja+GDFieldGet("D1_COD",nCnt)+GDFieldGet("D1_ITEM",nCnt)))
			SDG->(DbSetOrder(7))
			If SDG->(MsSeek(xFilial("SDG")+"SD1"+SD1->D1_NUMSEQ))
				While SDG->(!Eof()) .And. SDG->DG_FILIAL + SDG->DG_ORIGEM + SDG->DG_SEQMOV == xFilial("SDG") + "SD1" + SD1->D1_NUMSEQ
					If SDG->DG_STATUS <> StrZero(1,Len(SDG->DG_STATUS)) //-- Em Aberto
						//-- Caso somente a viagem esteja informada ou Frota, estorna o movimento de custo de transporte.
						If !( Empty(SDG->DG_CODVEI) .And. Empty(SDG->DG_FILORI) .And. Empty(SDG->DG_VIAGEM) ) .And. ;
								!( Empty(SDG->DG_CODVEI) .And. !Empty(SDG->DG_FILORI) .And. !Empty(SDG->DG_VIAGEM) )
							//-- Caso a veiculo seja proprio estorna o movimento de custo de transporte.
							If !Empty(SDG->DG_CODVEI) .And. Empty(SDG->DG_FILORI) .And. Empty(SDG->DG_VIAGEM)								
								DA3->(DbSetOrder(1))
								If DA3->(MsSeek(xFilial("DA3")+SDG->DG_CODVEI))
									If DA3->DA3_FROVEI <> "1"
										lRet := .F.
										Exit
									EndIf
								EndIf
							Else                                                        
								//-- Origem MATA103, nao há validação na inclusão pelo TMSA070
								If SDG->DG_ORIGEM <> 'SD1' .And. SDG->DG_ORIGEM <> 'SD3'
									lRet := .F.
									Exit
								EndIf	
							EndIf
						EndIf
					EndIf
					SDG->(DbSkip())
				EndDo
			EndIf
		EndIf
	Next nCnt
	RestArea( aAreaSD1 )
EndIf

If !lRet
	Help(" ",1,"A103NODEL") //-- Existe movimento de custo de transporte baixado, nao sera permitida a exclusao.
EndIf

Return lRet

/*
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
03MultOk ³ Autor ³ Sergio Silveira      ³ Data ³11/04/2006 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Efetua a validacao das multas de contratos                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ ExpL1 := A103MultOk( ExpA1, ExpA2, ExpA3 )                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpA1 -> Array contendo as multas                           ³±±
±±³          ³ ExpA2 -> Acols do SE2 ( titulos )                           ³±±
±±³          ³ ExpA3 -> aHeader do SE2                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ ExpL1 -> Indica validacao                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function XA103MultOk( aMultas, aColsSE2, aHeadSE2 )

Local aContratos := {}

Local lRet       := .T.

Local nPosPedido := GDFieldPos( "D1_PEDIDO" )
Local nPosItem   := GDFieldPos( "D1_ITEMPC" )
Local nPValor    := GDFieldPos( "E2_VALOR", aHeadSE2 )
Local nLoop      := 0
Local nValDup    := 0
Local nValMult   := 0
Local nValBoni   := 0

If !Empty( aMultas )

	SC7->( DbSetOrder( 1 ) ) 		
	For nLoop := 1 to Len( aCols )

		If !ATail( aCols[ nLoop ] ) 	

			If SC7->( MsSeek( xFilial( "SC7" ) + aCols[ nLoop, nPosPedido ] + aCols[ nLoop, nPosItem ] ) )

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Alimenta o array de medicoes / item desta NF                           ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If !Empty( SC7->C7_CONTRA ) .And. !Empty( SC7->C7_PLANILH )

					If Empty( AScan( aContratos, SC7->C7_CONTRA ) )
						AAdd( aContratos, SC7->C7_CONTRA )
					EndIf		

				EndIf

			EndIf

		EndIf 	

	Next nLoop

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se existe alguma multa para um contrato que nao esta na NF    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	For nLoop := 1 to Len( aMultas )

		If Empty( AScan( aContratos, aMultas[ nLoop, 1 ] ) )  	
			Aviso( "Atenção !", "Nao e possivel inserir multas para um contrato que nao esta nos itens do documento de entrada.", { "OK" }, 2 ) // "Atencao !", "Nao e possivel inserir multas para um contrato que nao esta nos itens do documento de entrada.","Ok"
			lRet := .F.
			Exit 				

		EndIf

	Next nLoop	

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se eh possivel aplicar as multas para o valor de titulos existente ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRet

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Calcula o total de multas e / ou bonificacoes de contrato         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		AEval( aMultas, { |x| If( x[5] == "1", nValMult += x[3], nValBoni += x[3] ) } )

		If nValMult > nValBoni

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Calcula a diferenca entre multas e bonificacoes                   ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			nValMult := nValMult - nValBoni

			nValDup := 0

			For nLoop := 1 to Len( aColsSE2 )
				nValDup += aColsSE2[ nLoop, nPValor ]
			Next nLoop

			If nValMult > nValDup
				lRet := .F.
				Aviso( "Atencao !", "O valor de multas nao pode ser superior ao valor de duplicatas do documento.", { "OK" }, 2 ) // "Atencao !", "O valor de multas nao pode ser superior ao valor de duplicatas do documento.", { "Ok" }
			EndIf 		

		EndIf 			

	EndIf 	

EndIf

Return( lRet )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa  ³A103VLDEXC  ³ Autor ³ Julio C.Guerato     ³ Data ³04/02/2010³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Função para Validar se existem vinculos da NFe em outras    ³±±
±±³			 ³tabelas													  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³.T. = Não existem vinculos   				                  ³±±
±±³			 ³.F. = Existe vinculos 	  				                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±³Parametros³[01]: Indica se está em exclusão 	                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Static Function XA103VldEXC(lExclui,cPrefixo)

Local lRet      := .T.
Local lContinua := .T.
Local nx        := 0        
Local nPosCod   := aScan(aHeader,{|x| AllTrim(x[2])=="D1_COD"}) 
Local nItem     := aScan(aHeader,{|x| AllTrim(x[2])=="D1_ITEM"}) 
Local cDesc     := ""            
Local aAreaSD1  := SD1->(GetArea())
Local lVldExc	:= .T.          
Local lCpRet	:= .F.

Default cPrefixo := ""

If lExclui
	
	If ExistBlock("A103VLEX")
		lContinua := ExecBlock("A103VLEX",.F.,.F.)
		If ValType(lContinua) != "L"
			lContinua := .T.
		EndIf
	EndIf    
	
	If lContinua

		//Verifica vinculo com Pedidos de Venda //
		For nX = 1 to len(aCols)
			  DbSelectArea("SC6") 
			  DbSetOrder(5) 
			  MsSeek(xFilial("SC6")+CA100FOR+CLOJA+aCols[nX][nPosCod]+CNFISCAL+CSERIE+aCols[nX][nItem])
			  If !EOF()
					lRet:=.F.  
					//cDesc:= STR0331+CHR(13)+STR0332+CHR(13)+STR0333+C6_FILIAL+" "+C6_NUM+" "+C6_ITEM+" "+C6_PRODUTO
				  AVISO("A103ValExc",cDesc,{"Ok"})
					Exit
			  EndIf   
		Next nX    
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Valida se Existe baixa no Contas a Pagar                    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ  
		If lRet .And. !A120UsaAdi(cCondicao)
			dbSelectArea("SE2")
			SE2->(dbSetOrder(6))
			SE2->(DbGotop())     
			
			MsSeek(xFilial("SE2")+cA100For+cLoja+cPrefixo+SF1->F1_DUPL) 
			
			While ( !Eof() .And.;
				xFilial("SE2")  == SE2->E2_FILIAL  .And.;
				cA100For        == SE2->E2_FORNECE .And.;
				cLoja           == SE2->E2_LOJA    .And.;
				cPrefixo	    == SE2->E2_PREFIXO .And.;
				SF1->F1_DUPL	== SE2->E2_NUM )
				If SE2->E2_TIPO == MVNOTAFIS	
					If !XFaCanDelCP("SE2","MATA100")
						lRet := .F.
						Exit
					EndIf    
				EndIf 
			
				dbSelectArea("SE2")
					dbSkip()
			EndDo 
		EndIf		

		//... Inserir outros Vinculos daqui para baixo .. //

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Valida se a nota gerou um titulo com PCC que compos o saldo ³
		//³ da cumulatividade de outro titulo que ja foi retido         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lRet
			dbSelectArea("SE2")
			SE2->(dbSetOrder(6))

			If MsSeek(xFilial("SE2")+cA100For+cLoja+cPrefixo+SF1->F1_DUPL)
				lCpRet := SLDRMSG(SE2->E2_EMISSAO,SE2->E2_VALOR,SE2->E2_NATUREZ,"P",SE2->E2_FORNECE,SE2->E2_LOJA,SE2->E2_TIPO)
				If lCpRet
					If !MSGNoYes("Essa nota possui impostos retidos em outro título, deseja continuar ?")
						lRet := .F.
					Endif
				Endif
			EndIf

		EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se algum produto ja foi distribuido                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lRet
			If Localiza(SD1->D1_COD)
				dbSelectArea('SDA')
				dbSetOrder(1)
				DbSeek(xFilial()+SD1->D1_COD+SD1->D1_LOCAL+SD1->D1_NUMSEQ+SD1->D1_DOC+SD1->D1_SERIE+SD1->D1_FORNECE+SD1->D1_LOJA)
				If !(SDA->DA_QTDORI == SDA->DA_SALDO)
					Help(" ",1,"SDAJADISTR")
					lRet := .F.
				EndIf
			EndIf

		EndIf
	EndIf
	
	//Ponto de entrada para validação da exclusão do documento
	If lRet .And. ExistBlock("MT103EXC")
		lVldExc := ExecBlock("MT103EXC",.F.,.F.)
		If ValType(lVldExc) == "L"
			lRet := lVldExc
		EndIf
	EndIf 
EndIf

RestArea(aAreaSD1)

Return lRet