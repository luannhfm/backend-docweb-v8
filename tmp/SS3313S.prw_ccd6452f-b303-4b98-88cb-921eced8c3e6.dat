#include 'protheus.ch'
#include 'parmtype.ch'
#Include 'fwmvcdef.ch'
#Include 'Topconn.ch'

/*/{Protheus.doc} SS3313S
//Rotina para lançamento de Guia de atendimento em Lote.
@author sergio.salustiano
@since 07/03/2016
@version 6
@return return, return_description
@example
(examples)
@see (links_or_references)
/*/

user function SS3313S()
	Local oBrowse
	
	Private aRotina := MenuDef()
	
	//Instancio a classe FWMBrowse
	oBrowse := FWMBrowse():New()
	
	//Setando o Alias a ser utilizado
	oBrowse:SetAlias( 'ZZ3' )
	
	//Descrição do Cabeçalho
	oBrowse:SetDescription('Atendimento em Lote')
	oBrowse:SetFilterDefault("ZZ3_TPATEN <> 'I'")
	
	//Ativando
	oBrowse:Activate()
	
Return( Nil )

Static Function MenuDef()
	
	Local aRotina := {}

	ADD OPTION aRotina Title 'Visualizar'      Action 'VIEWDEF.SS3313S' OPERATION 2 ACCESS 0
	ADD OPTION aRotina Title 'Incluir'         Action 'VIEWDEF.SS3313S' OPERATION 3 ACCESS 0
	ADD OPTION aRotina Title 'Alterar'         Action 'VIEWDEF.SS3313S' OPERATION 4 ACCESS 0
	ADD OPTION aRotina Title 'Excluir'         Action 'VIEWDEF.SS3313S' OPERATION 5 ACCESS 0
	ADD OPTION aRotina Title 'Gerar Lancmnto'  Action 'U_GerLanc'       OPERATION 3 ACCESS 0
	ADD OPTION aRotina Title 'Copiar'          Action 'VIEWDEF.SS3313S' OPERATION 9 ACCESS 0
	
Return( aRotina )

Static Function ModelDef()
	Local oStruZZ3	:= FWFormStruct(1, 'ZZ3')
	Local oStruZZ6	:= FWFormStruct(1, 'ZZ6')
	Local oModel 	
	
	//oStruZZN:AddTrigger( "ZZN_CODCRE", "ZZN_VUNIT"    , { || .t. }, { | x |TABPRE( x ) } )
	//oStruZZN:AddTrigger( "ZZN_PROCED", "ZZN_CODCRE"   , { || .t. }, { | x |LIMPRO( x ) } )
	
		
	//-------------------------------------------------------------------------------------------------------------------------------------
	//Alterado dia 07/08/2014
	//oStruZZ3:AddTrigger( "ZZ3_CNPJ", "ZZ3_CEI"   , { || .t. }, { | x |VERCEI( x ) } )
	//-------------------------------------------------------------------------------------------------------------------------------------	
		
	oModel:= MPFormModel():New('SS3313SS')
	oModel:AddFields('ZZ3MASTER',/*cOwner*/, oStruZZ3)
	oModel:AddGrid('ZZ6DETAIL','ZZ3MASTER',oStruZZ6)
	oModel:SetRelation('ZZ6DETAIL',{{'ZZ6_FILIAL','xFilial("ZZ6")'}, {'ZZ6_CODIGO','ZZ3_CODIGO'}},ZZ6->(IndexKey(1)))
	oModel:SetPrimaryKey({"ZZ3_FILIAL","ZZ3_CODIGO"})
	oModel:GetModel( 'ZZ6DETAIL' ):SetUniqueLine( { 'ZZ6_TRABAL' } )
	oModel:SetDescription('Atendimentos')
	oModel:GetModel('ZZ3MASTER'):SetDescription('Atendimentos')
	oModel:GetModel('ZZ6DETAIL'):SetDescription('Trabalhadores')
	oModel:SetPrimaryKey( { "ZZ3_FILIAL", "ZZ3_CODIGO" } )
	
	oStruZZ3:SetProperty( 'ZZ3_CATATE' , MODEL_FIELD_OBRIGAT, .F. )
	oStruZZ3:SetProperty( 'ZZ3_FILCTR' , MODEL_FIELD_OBRIGAT, .F. )
	oStruZZ3:SetProperty( 'ZZ3_CONTRA' , MODEL_FIELD_OBRIGAT, .F. )
	
	
Return( oModel )

Static Function ViewDef()
	
	Local oView
	Local oModel  := FWLoadModel( 'SS3313S' )
	Local oStruZZ3 := FWFormStruct(2, 'ZZ3')
	Local oStruZZ6 := FWFormStruct(2, 'ZZ6')
	Local oView

	//oStruZZ3:RemoveField('ZZ3_ENF01')
	
	oView:=FWFormView():New()
	oView:SetModel(oModel)
	oView:AddField('VIEW_ZZ3', oStruZZ3, 'ZZ3MASTER')
	oView:AddGrid ('VIEW_ZZ6', oStruZZ6, 'ZZ6DETAIL')
		
	// Cria o objeto de Estrutura
	//oCalc1 := FWCalcStruct( oModel:GetModel( 'COMP015CALC1') )

	oView:AddIncrementField( 'VIEW_ZZ6', 'ZZ6_ITEM' )
	oView:EnableTitleView('VIEW_ZZ6','TRABALHADORES')
	oView:CreateHorizontalBox ('SUPERIOR', 40)
	oView:CreateHorizontalBox ('INFERIOR', 60)
	//oView:CreateHorizontalBox ('CALCULO' , 12)
	oView:SetOwnerView ('VIEW_ZZ3', 'SUPERIOR')
	oView:SetOwnerView ('VIEW_ZZ6', 'INFERIOR')
	//oView:SetOwnerView ('VIEW_CALC','CALCULO')
	
	oStruZZ3:RemoveField('ZZ3_ENF01')
	oStruZZ3:RemoveField('ZZ3_ENF02')
	oStruZZ3:RemoveField('ZZ3_NUMSOL')
	oStruZZ3:RemoveField('ZZ3_CONTRA')
	oStruZZ3:RemoveField('ZZ3_DCTR')
	oStruZZ3:RemoveField('ZZ3_DAPLIC')
	oStruZZ3:RemoveField('ZZ3_DAPLCO')
	oStruZZ3:RemoveField('ZZ3_CATATE')
	oStruZZ3:RemoveField('ZZ3_HAPL')
	oStruZZ3:RemoveField('ZZ3_DAPLTR')
	oStruZZ3:RemoveField('ZZ3_DAPLDE')
	oStruZZ3:RemoveField('ZZ3_REVCTR')
	oStruZZ3:RemoveField('ZZ3_FILCTR')
	oStruZZ3:RemoveField('ZZ3_QTDSOL')
	oStruZZ3:RemoveField('ZZ3_QTDNAP')
	oStruZZ3:RemoveField('ZZ3_SLDCRT')
	oStruZZ6:RemoveField('ZZ6_VACINA')
	oStruZZ6:RemoveField('ZZ6_VALOR')
	
Return( oView )

/*/{Protheus.doc} GerLanc
//Rotina criada para gerar Guia de Atendimento, 
//a partir da Rotina de Guia de Atendimentos em Lote. 
@author sergio.salustiano
@since 24/02/2016
@version 6
@return return, return_description
@example
(examples)
@see (links_or_references)
/*/

User Function GerLanc()

	Local lRet		:= .T.
	Local aAreaAtu  := GetArea()
	Local oModel 	:= FwLoadModel('SS3313S')
	Local oMdlCab	:= oModel:GetModel( "ZZ3MASTER" )
	//Local oMdlGrd	:= oModel:GetModel( "ZZ3DETAIL" )
	Local cFilLan	:= " "
	Local cCodLan   := " "
	Local cQuery    := " "
	Local aCposCab  := {}
	Local aCposDet  := {}
	Local aAux      := {}
	Local nReg      := 0
	Local nRecTra   := 0
        
	oModel:Activate()
    
	cFilLan	:= oMdlCab:GetValue( "ZZ3_FILIAL" )
	cCodLan	:= oMdlCab:GetValue( "ZZ3_CODIGO" )
	
	If Select("TRA") > 0
		DbSelectarea("TRA")
		DbCloseArea()
	Endif
	    
	cQuery := " "
	cQuery += "SELECT  * FROM "      + RETSQLNAME("ZZ6") + " ZZ6 "
	cQuery += "INNER JOIN "+ RETSQLNAME("ZZ3") + " ZZ3 ON ZZ3_CODIGO = ZZ6_CODIGO AND ZZ3_FILIAL = ZZ6_FILIAL "
	cQuery += "WHERE ZZ6_FILIAL = '" + cFilLan + "'"
	cQuery += "AND ZZ6_CODIGO = '" + cCodLan + "'"
	cQuery += "AND ZZ3_GERADO = 'N' "
    
	TCQUERY cQuery NEW ALIAS "TRA"
		
	DBSelectArea("TRA")
	Count To nRecTra
	ProcRegua(nRecTra)
	DBGoTop()
	
	While .Not. TRA->( EOF() )
		IncProc("Registro " + StrZero(nReg,3) + "  /  "  + STRZERO(nRecTRA,3))
		nReg++
		
		aCposCab := {}
		aCposDet := {}
		
		aAdd(aCposCab, {'ZZM_FILIAL', TRA->ZZ3_FILIAL       })
		aAdd(aCposCab, {'ZZM_DTPROC', STOD(TRA->ZZ3_DTPROC) })
		aAdd(aCposCab, {'ZZM_TPATEN', TRA->ZZ3_TPATEN       })
		aAdd(aCposCab, {'ZZM_ATNDFO', TRA->ZZ3_ATNDFO       })
		aAdd(aCposCab, {'ZZM_CODCLI', TRA->ZZ3_CODCLI       })
		aAdd(aCposCab, {'ZZM_LOJA'  , TRA->ZZ3_LOJA         })
		aAdd(aCposCab, {'ZZM_CEI'   , TRA->ZZ3_CEI          })
		aAdd(aCposCab, {'ZZM_TIPO'  , TRA->ZZ6_TIPO         })
		aAdd(aCposCab, {'ZZM_TRABAL', TRA->ZZ6_TRABAL       })
		aAdd(aCposCab, {'ZZM_ATENLT', TRA->ZZ3_CODIGO       })
		aAdd(aCposCab, {'ZZM_ITEMLT', TRA->ZZ6_ITEM         })
		aAdd(aCposCab, {'ZZM_ORIGEM','SS3313S'              })
		
		aAux := {}
		aAdd(aAux, {'ZZN_ITEM'  , '001' })
		aAdd(aAux, {'ZZN_PROCED', TRA->ZZ3_PROCED})
		aAdd(aAux, {'ZZN_CODCRE', TRA->ZZ3_CODCRE})
		aAdd( aCposDet, aAux )
		
		If !Empty(TRA->ZZ3_PROCE1)
			aAux := {}
			aAdd(aAux, {'ZZN_ITEM'  , '002' })
			aAdd(aAux, {'ZZN_PROCED', TRA->ZZ3_PROCE1})
			aAdd(aAux, {'ZZN_CODCRE', TRA->ZZ3_CODCRE})
			aAdd( aCposDet, aAux )
		EndIf
		
		If !Empty(TRA->ZZ3_PROCE2)
			aAux := {}
			aAdd(aAux, {'ZZN_ITEM'  , '003' })
			aAdd(aAux, {'ZZN_PROCED', TRA->ZZ3_PROCE2})
			aAdd(aAux, {'ZZN_CODCRE', TRA->ZZ3_CODCRE})
			aAdd( aCposDet, aAux )
		EndIf
		
		If !Empty(TRA->ZZ3_PROCE3)
			aAux := {}
			aAdd(aAux, {'ZZN_ITEM'  , '004' })
			aAdd(aAux, {'ZZN_PROCED', TRA->ZZ3_PROCE3})
			aAdd(aAux, {'ZZN_CODCRE', TRA->ZZ3_CODCRE})
			aAdd( aCposDet, aAux )
		EndIf
		
		If !GRVGA('ZZM', 'ZZN', aCposCab, aCposDet)
			lRet := .F.
		EndIf
		
		TRA->(DBSKIP())
	EndDo
		
	TRA->(DbCloseArea())
		
	DbSelectArea('ZZ3')
	DbSetOrder(1)
	DbSeek(xFilial()+cCodLan)
		
	If RecLock("ZZ3",.F.)
		ZZ3->ZZ3_GERADO  := 'S'
		ZZ3->(MsUnlock())
	EndIf
	
	Alert("G.A Gerado com sucesso")
	
	RestArea(aAreaAtu)
	oModel:DeActivate()
	
Return

/*/{Protheus.doc} GRVGA
//Rotina grava as Guias de Atendimento. 
Geradas a partir das informações da função GERALANC
@author sergio.salustiano
@since 05/02/2016
@version 1
@return return, return_description
@example
(examples)
@see (links_or_references)
/*/		
Static Function GRVGA(cMaster, cDetail, aCpoMaster, aCpoDetail)
	Local oModel, oAux, oStruct
	Local nI        := 0
	Local nJ        := 0
	Local nPos      := 0
	Local lRet      := .T.
	Local aAux      := {}
	Local aC        := {}
	Local aH        := {}
	Local nItErro   := 0
	Local lAux      := .T.
	Local cNGA      := ' '
	
	DBSelectArea(cDetail)
	DBSetOrder(1)
	
	DBSelectArea(cMaster)
	DBSetOrder(1)
	
	oModel := FWLoadModel('SS3306S')
	oModel:SetOperation(3)
	oModel:Activate()
	
	oAux     := oModel:GetModel(cMaster + 'MASTER')
	oStruct  := oAux:GetStruct()
	aAux     := oStruct:GetFields()
	
	If lRet
		For nI := 1 to Len(aCpoMaster)
			//If(nPos := aScan(aAux,{|x| AllTrim(x[3]) == AllTrim(aCpoMaster[nI][1])}))
			If ( nPos := aScan( aAux, { |x| AllTrim( x[3] ) == AllTrim( aCpoMaster[nI][1] ) } ) ) > 0
				If !(lAux := oModel:SetValue(cMaster + 'MASTER', aCpoMaster[nI][1], aCpoMaster[nI][2] ))
					lRet := .F.
					Exit
				EndIf
			EndIf
		Next
	EndIf
	
	If lRet
		oAux     := oModel:GetModel(cDetail + 'DETAIL')
		oStruct  := oAux:GetStruct()
		aAux     := oStruct:GetFields()
		
		nItErro := 0
	
		For nI := 1 to Len(aCpoDetail)
			If nI >1
				If(nItErro := oAux:addLine()) <> nI
					lRet := .F.
					Exit
				EndIf
			EndIf
			For nJ := 1 to Len(aCpoDetail[nI])
				If (nPos := aScan(aAux,{|X| AllTrim(X[3]) == AllTrim(aCpoDetail[nI][nJ][1])})) > 0
					If !(lAux := oModel:SetValue(cDetail + 'DETAIL', aCpoDetail[nI] [nJ] [1], aCpoDetail[nI] [nJ] [2]))
						lRet    := .F.
						nItErro := nI
					
						Exit
				
					EndIf
				EndIf
			Next
		
			If !lRet
				Exit
				
			EndIf
		Next
	EndIf

	If lRet
		If (lRet := oModel:VldData())
			oModel:CommitData()
		EndIf
	
	
	EndIf

	If !lRet
		aErro := oModel:GetErrorMessage()
		AutoGrLog( "Id do formulário de origem:" + ' [' + AllToChar( aErro[1] ) + ']' )
		AutoGrLog( "Id do campo de origem:     " + ' [' + AllToChar( aErro[2] ) + ']' )
		AutoGrLog( "Id do formulário de erro:  " + ' [' + AllToChar( aErro[3] ) + ']' )
		AutoGrLog( "Id do campo de erro:       " + ' [' + AllToChar( aErro[4] ) + ']' )
		AutoGrLog( "Id do erro:                " + ' [' + AllToChar( aErro[5] ) + ']' )
		AutoGrLog( "Mensagem do erro:          " + ' [' + AllToChar( aErro[6] ) + ']' )
		AutoGrLog( "Mensagem da solução:       " + ' [' + AllToChar( aErro[7] ) + ']' )
		AutoGrLog( "Valor atribuído:           " + ' [' + AllToChar( aErro[8] ) + ']' )
		AutoGrLog( "Valor anterior:            " + ' [' + AllToChar( aErro[9] ) + ']' )

		MostraErro()
	EndIf

Return

/*/{Protheus.doc} VERCEI
//Verifica se a empresa possui C.E.I
@author sergio.salustiano
@since 22/03/2016
@version 6
@return return, return_description
@example
(examples)
@see (links_or_references)
/*/
Static Function VERCEI()
	Local lRetorno       := .T.
	Local aAreaAtu       := GetArea()
	Local oModel 		 := FwModelActive()
	Local oGrdZZ3		 := oModel:GetModel('ZZ3MASTER')
	Local cCliente       := oGrdZZ3:GetValue('ZZ3_CODCLI')
	Local cLoja          := oGrdZZ3:GetValue('ZZ3_LOJA')
	Local cCEI           := oGrdZZ3:GetValue('ZZ3_CEI')
	
	dbSelectArea('ZZP')
	dbSetOrder(3)
	dbGoTop()
	If DbSeek(xFilial('ZZP')+ cCliente + cLoja)
		Help( ,, 'Help',, 'Cliente Possui C.E.I.', 1, 0 )
	EndIf
	dbCloseArea('ZZP')
	
Return

/*
--------------------------------------------------------------------------------
{Protheus.doc} <fVldTrb> Valida a manipulação de Trabalhadores.
 
@author Walmir Junior    
@since 09/02/2019
@version<1.00>
@return
@example
@see
--------------------------------------------------------------------------------
*/
Static Function fVldTrb()
Local _lRet := .T.
Local _oModel 		 := FwModelActive()
Local _oStruZZ3		:= _oModel:GetModel("ZZ3MASTER")
Local _cGera		:= _oStruZZ3:GetValue("ZZ3_GERADO")
Local _cMsg			:= "Não é possível alterar trabalhadores após a geração da Guia."
Local _aSol			:= {"Informe todos os trabalhadores antes da geração da Guia."}

If _cGera != 'N'
	Help( ,, 'Help',, _cMsg, 1, 0,,,,,,_aSol )
	MSGAlert("Operação não permitida, a Guia já foi gerada!","ATENÇÃO")
	_lRet := .F.
Endif

Return _lRet

/*
--------------------------------------------------------------------------------
{Protheus.doc} <SS3313SS> Pontos de Entrada de SS3313
 
@author Walmir Junior    
@since 09/02/2019
@version<1.00>
@return
@example
@see
--------------------------------------------------------------------------------
*/
User Function SS3313SS()
	Local _aPARAMIXB	:= PARAMIXB
	Local _xRet			:= Nil
	
	Do Case
		Case _aPARAMIXB[2] == "MODELPRE"				//Antes da alteracao de qualquer campo
			_xRet := .T.
		Case _aPARAMIXB[2] == "MODELPOS"				//Na validacao total do modelo
			_xRet := .T.
		Case _aPARAMIXB[2] == "FORMPRE"					//Antes da alteracao de qualquer campo de formulário
			_xRet := .T.
		Case _aPARAMIXB[2] == "FORMPOS"					//Na validação total do formulário
			_xRet := .T.
		Case _aPARAMIXB[2] == "FORMLINEPRE"				//Antes da alteração da linha do formulário FWFORMGRID
			_xRet := fVldTrb()
		Case _aPARAMIXB[2] == "FORMLINEPOS"				//Na validação total da linha do formulario FWFORMGRID
			_xRet := Nil
		Case _aPARAMIXB[2] == "MODELCOMMITTTS"			//Após a gravação total do modelo e dentro da transacao
			_xRet := Nil
		Case _aPARAMIXB[2] == "MODELCOMMITNTTS"			//Após a gravação total do modelo e fora da gravação
			_xRet := Nil
		Case _aPARAMIXB[2] == "FORMCOMMITTTSPRE"		//Antes da gravação da tabela do formulário
			_xRet := .T.
		Case _aPARAMIXB[2] == "FORMCOMMITTTSPOS"		//Após a gravação da tabela do formulário
			_xRet := Nil
		Case _aPARAMIXB[2] == "FORMCANCEL"				//No cancelamento do botão
			_xRet := .T.
		Case _aPARAMIXB[2] == "MODELVLDACTIVE"			//Na ativação do modelo
			_xRet := .T.
		Case _aPARAMIXB[2] == "BUTTONBAR"				//Para inclusão de botões na ControlBar
			_xRet := {}
		Case _aPARAMIXB[2] == "MODELCANCEL"				//Na ação do botão Cancelar
			_xRet := .T.
	EndcAse
	
Return _xRet