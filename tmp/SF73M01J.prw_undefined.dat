#INCLUDE "PROTHEUS.CH"
#INCLUDE "rwmake.CH"
#INCLUDE "Topconn.CH"

/*/{Protheus.doc} SF73M01J
Função para realizar carga no cadastro de clientes	
			     	
@author 	José Leite de Barros Neto
@since 		28/03/2014
@version 	1.0		

@return Nil, Nulo

@example

@see 
    
/*/
User Function SF73M01J( pPATHIMP03 )

	Local 	_lRet	:= .F.

	Private _aEstrut	:= {}
	Private _cArqTxt	:= Space(50)
	Private _cMemo  	:= ""
	
	Private lMsErroAuto := .F.

	//Verifica chamada se a rotina é automatica
	If !Empty( pPATHIMP03 )
		_cArqTxt := pPATHIMP03
	Else
		_cArqTxt:= U_SFXX01J('Importacao de Clientes','Arquivos csv (*.csv) |*.csv|')
	EndIf
	
	//Abre o Arquivo
	nHdl    := fOpen(_cArqTxt,68)

	If nHdl == -1
		MsgAlert("O arquivo de nome "+_cArqTxt+" nao pode ser aberto! Verifique os parametros.","Atencao!")
		Return
	Endif

	Processa({ |lEnd| _aEstrut := SA1CSV(_cArqTxt) },"LENDO ARQUIVO CSV DE CLIENTE")
	Processa({ |lEnd| _lRet := IMPSA1(_aEstrut) },"GERANDO REGISTROS")

	If Empty( pPATHIMP03 )
		MemoWrite( "C:\plog\csv\clientes_"+cFilAnt+".TXT", _cMemo ) //+CHR(13)+CHR(10)
		MsgBox("FIM DA IMPORTACAO DO CADASTRO DE CLIENTES")
	EndIf

Return( _lRet )

/** {Protheus.doc} IMPSA1
Funcao que realiza a importacao do cliente

@param: 	_aEstrut, Array com a estrutura dos campos
@author: 	Jose Leite de Barros Neto
@since: 	28/03/2014
@Uso: 		SFIEMT
*/
Static Function IMPSA1(_aEstrut)
	
	Local _lRet := .F.
	Local _nContador := 0

	For _i := 4 to Len(_aEstrut)
	
		//A1_CGC
		_cCGC	:= StrTran( StrTran( StrTran( _aEstrut[_i][2],".","" ),"/","" ),"-","" )
		
		//A1_NOME
		_cNome	:= AllTrim(_aEstrut[_i][6])
		
		//A1_NREDUZ
		_cNReduz	:= AllTrim(_aEstrut[_i][7])
		
		If Empty(_cNReduz)
			_cNReduz := _cNome
		EndIf
		
		//A1_DTNASC
		_dDtNasc	:= IIf(Empty(AllTrim(_aEstrut[_i][8])),' ',StoD(AllTrim(_aEstrut[_i][8])))
		
		//A1_TIPO
		_cTipo	:= "F"
		
		//A1_PESSOA
		_cPessoa	:= "J"		
		
		//A1_CNAE
		_cCnae	:= SubStr(AllTrim(_aEstrut[_i][14]),1,4)+'-'+SubStr(AllTrim(_aEstrut[_i][14]),5,1)+'/'+SubStr(AllTrim(_aEstrut[_i][14]),6,2)
		
		//A1_XCNAEIN
		_cCnaeInd	:= ""
		
		If AllTrim(_aEstrut[_i][19]) == "SIM"
			_cCnaeInd := "S"
		Else
			_cCnaeInd := "N"
		EndIf 
		
		//A1_XDSCNAE
		_cDscCnae := AllTrim(Posicione("CC3",1,xFilial("CC3") + PADR( AllTrim( _cCnae ),TAMSX3("CC3_COD")[1]),"CC3_DESC"))
		
		dbSelectArea("CC3")
		CC3->(dbSetOrder(1)) //CC3_FILIAL+CC3_COD
		CC3->(dbGotop())
		
		If .Not. DbSeek( xFilial("CC3") + PADR( AllTrim( _cCnae ),TAMSX3("CC3_COD")[1]))
		
			_cDscCnae 	:= AllTrim(_aEstrut[_i][71])
			_cSecao	:= AllTrim(_aEstrut[_i][73])
			_cDivisao	:= AllTrim(_aEstrut[_i][74])
			_cGrupo	:= AllTrim(_aEstrut[_i][75])
			_cClasse	:= AllTrim(_aEstrut[_i][76])
			
			Begin Transaction
				
				If RecLock("CC3",.T.)
					
					CC3->CC3_FILIAL	:= xFilial("CC3")
					CC3->CC3_COD		:= _cCnae
					CC3->CC3_DESC	:= _cDscCnae
					CC3->CC3_CSECAO	:= _cSecao
					CC3->CC3_CDIVIS	:= _cDivisao
					CC3->CC3_CGRUPO	:= _cGrupo
					CC3->CC3_CCLASS	:= _cClasse
					CC3->CC3_MSBLQL	:= "2"
											
					CC3->(msUnlock())
				EndIf
				
			End Transaction
				
		EndIf		
		
		//A1_END
		_cEnd	:= AllTrim(_aEstrut[_i][29])
		
		//A1_EST
		_cEst	:= AllTrim(_aEstrut[_i][31])

		//A1_MUN
		_cMun	:= AllTrim(_aEstrut[_i][33])

		//A1_COD_MUN
		_cCodMun	:= Posicione("CC2",2,xFilial("CC2")+PadR(_cMun,TamSX3("CC2_MUN")[1]),"CC2_CODMUN")
				
		//A1_BAIRRO
		_cBairro	:= AllTrim(_aEstrut[_i][34])
		
		//A1_CEP
		_cCep	:= AllTrim(_aEstrut[_i][35])
		
		If Empty(_cCep)
			_cCep := "78000000"
		EndIf
		
		//A1_DDD
		_cDDD	:= StrTran(AllTrim(_aEstrut[_i][46]),"-","")
		
		//A1_TEL
		_cTel	:= StrTran(AllTrim(_aEstrut[_i][47]),"-","")
		
		//A1_CODPAIS
		_cCodPais := "01058"
		
		//A1_XSITREC
		_cSituRec := ""
		
		If AllTrim(_aEstrut[_i][45]) == "Ativa"
			_cSituRec := "1"
		Else 
			_cSituRec := "0"
		EndIf
		
		//A1_SIMPLES
		_cOptSimp	:= ""
		
		If UPPER(AllTrim(_aEstrut[_i][46])) == "NAO"
			_cOptSimp := "N"
		ElseIf UPPER(AllTrim(_aEstrut[_i][46])) == "SIM"
			_cOptSimp := "S"
		EndIf
		
		//A1_XQTEMP
		_nQtdEmp	:= Val(AllTrim(_aEstrut[_i][47]))
		
		//A1_XFAIXFU
		If _nQtdEmp < 50
			_cFaixaFu := "0"
		ElseIf _nQtdEmp >= 51 .And. _nQtdEmp < 200
			_cFaixaFu := "1" 
		ElseIf _nQtdEmp >= 201 .And. _nQtdEmp < 500
			_cFaixaFu := "2"
		ElseIf _nQtdEmp >= 501 .And. _nQtdEmp < 1000
			_cFaixaFu := "3"
		ElseIf _nQtdEmp >= 1001 .And. _nQtdEmp < 5000
			_cFaixaFu := "4"
		Else
			_cFaixaFu := "5"
		EndIf	

		//A1_CONTA
		_cContaC	:= "11030101001"
		
		//A1_XPORTE
		//_cPorte 	:= AllTrim(_aEstrut[_i][10])
		
		//A1_XFATANU
		//_nFatAnu	:= Val(AllTrim(_aEstrut[_i][12]))
		
		dbSelectArea("SA1")
		SA1->(dbSetOrder(3))
		SA1->(dbGotop())
		
		If SA1->(DbSeek( xFilial("SA1") + PADR( AllTrim( _cCGC ),TAMSX3("A1_CGC")[1])))
			_nOpc		:= 4
			_cCliente	:= SA1->A1_COD
			_cLoja		:= SA1->A1_LOJA
			_cXOrigem	:= "CARGA ATUALIZADA - "+DtoC(dDataBase)+" - "+AllTrim(Time())+" - por: "+AllTrim(cUserName)
		Else
			_nOpc		:= 3
			_cCliente	:= IIF(_cPessoa=='F',Substr(_cCGC,1,9),IIF(_cPessoa=='J',Substr(_cCGC,1,8),))
			_cLoja		:= IIF(_cPessoa=='F','00PF',Substr(_cCGC,9,4))
			_cXOrigem	:= "CARGA INICIAL - "+DtoC(dDataBase)
		EndIf
		
		_aCliente := {}
		
		aAdd( _aCliente ,{"A1_COD"		,_cCliente		,Nil}) // Codigo
		aAdd( _aCliente ,{"A1_LOJA"  	,_cLoja  			,Nil}) // Loja
		
		If _nOpc = 3
			aAdd( _aCliente ,{"A1_TIPO"   	,_cTipo		,Nil}) // Tipo
			aAdd( _aCliente ,{"A1_PESSOA"  	,_cPessoa		,Nil}) // Pessoa
			aAdd( _aCliente ,{"A1_CGC"  	,_cCGC	  		,Nil}) // CGC
			aAdd( _aCliente ,{"A1_NOME"    	,_cNome 		,Nil}) // Nome
			aAdd( _aCliente ,{"A1_NREDUZ"  	,_cNReduz		,Nil}) // Nome reduz.
			aAdd( _aCliente ,{"A1_DTNASC"  	,_dDtNasc		,Nil}) // Data de Nascimento / Abertura
			aAdd( _aCliente ,{"A1_END"     	,_cEnd			,Nil}) // Endereco
			aAdd( _aCliente ,{"A1_BAIRRO"  	,_cBairro		,Nil}) // Bairro
			aAdd( _aCliente ,{"A1_CEP"     	,_cCep			,Nil}) // CEP
			aAdd( _aCliente ,{"A1_ENDCOB"  	,_cEnd			,Nil}) // End. Cobrança
			aAdd( _aCliente ,{"A1_MUNC"    	,_cMun 		,Nil}) // Mun. Cobrança
			aAdd( _aCliente ,{"A1_BAIRROC" 	,_cBairro		,Nil}) // Bairro Cobrança				
			aAdd( _aCliente ,{"A1_CEPC"    	,_cCep			,Nil}) // CEP Cobrança
			aAdd( _aCliente ,{"A1_ESTC"    	,_cEst 		,Nil}) // Estado Cobrança
			aAdd( _aCliente ,{"A1_SIMPLES" 	,_cOptSimp	,Nil}) // Optante pelo simples
			aAdd( _aCliente ,{"A1_DDD"		,_cDDD 		,Nil}) // Codigo DDD
			aAdd( _aCliente ,{"A1_TEL"		,_cTel 		,Nil}) // Telefone
			aAdd( _aCliente ,{"A1_CODPAIS"	,_cCodPais	,Nil}) // Codigo do Pais
			aAdd( _aCliente ,{"A1_EST"     	,_cEst			,Nil}) // Estado
			aAdd( _aCliente ,{"A1_MUN"     	,_cMun			,Nil}) // Cidade
			aAdd( _aCliente ,{"A1_CNAE" 	,_cCnae		,Nil}) // CNAE
			aAdd( _aCliente ,{"A1_CONTA"   	,_cContaC		,Nil}) // Conta Contabil
		EndIf
		
		aAdd( _aCliente ,{"A1_XCNAEIN"	,_cCnaeInd		,Nil}) // Indica Cnae Industria
		aAdd( _aCliente ,{"A1_XDSCNAE"	,_cDscCnae		,Nil}) // Descricao do Cnae
		aAdd( _aCliente ,{"A1_XSITREC"	,_cSituRec		,Nil}) // Situacao na Receita
		aAdd( _aCliente ,{"A1_XQTEMP" 	,_nQtdEmp			,Nil}) // Quantidade de Empregados
		aAdd( _aCliente ,{"A1_XFAIXFU" 	,_cFaixaFu		,Nil}) // Faixa de Funcionarios
		aAdd( _aCliente ,{"A1_XORIGEM" 	,_cXOrigem		,Nil}) // Origem do registro
		aAdd( _aCliente ,{"A1_MSBLQL" 	,"1"				,Nil}) // Bloqueia Cadastro
		
		lMsErroAuto := .F.
		
		Begin Transaction

			MSExecAuto({|x,y| MATA030(x,y)},_aCliente,_nOpc) //3- Inclusão, 4- Alteração, 5- Exclusão
			
			If lMsErroAuto
				MostraErro()
				MostraErro("C:\plog\log\", _cCGC+".LOG")
				DisarmTransaction()
			EndIf
		
		End Transaction
		
		_nContador++
		
	Next

	If _nContador > 0
		_lRet := .T.
	EndIf
	
Return( _lRet )

/** {Protheus.doc} SA1CSV
Funcao que realiza a Leitura do arquivo CSV

@param: 	cArquivo, Caminho do arquivo que sera lido
@author: 	Jose Leite de Barros Neto
@since: 	28/03/2014
@Uso: 		SFIEMT
*/
Static Function SA1CSV(cArquivo)
	
	Local cBuffer     := ""
	Local cAux        := ""
	Local cString     := ""
	Local cSeparador  := ""  //Verifica o tipo de separador do arquivo texto
	Local aTmp        := {}
	Local aEstrutura  := {}
	Local nCont       := 0
	Local cEof        := Chr(10)+ Chr(13)
	Local nRec        := 0
	Local lAspa       := .F.

	//Leitura da quantidade de Registros do Arquivo
	FT_FUSE(cArquivo)
	FT_FGOTOP()
	
	While !FT_FEOF()
		nRec++
		FT_FSKIP()
	End

	ProcRegua(nRec)

	//Leitura do arquivo e verificacao do ultimo caracter da linha lida para  consistencia da pesquisa
	FT_FGOTOP()

	While !FT_FEOF()
	
		cBuffer:= AllTrim(FT_FREADLN())
	
		If At(";",cBuffer) > 0
			cSeparador:= ";" 
		Else //linha de arquivo incorreta.
			IncProc()
			FT_FSKIP()
			Loop
		Endif
	
		If (SubStr(cBuffer,Len(cBuffer),1)<>cSeparador)
			cBuffer += cSeparador + cEof + cSeparador
		Else
			cBuffer += cEof + cSeparador
		Endif
	
		//Incrementa a regua
		IncProc()
	
		//Carrega o array aEstrutura com o resultado da Importacao
		cLinha:= fTAcento(cBuffer)
		lAspa := .F.

		For nCont := 1 To Len(cBuffer)
		
			cAux   := SubStr(cLinha,1,1)
			cLinha := SubStr(cLinha,2)
			
			If (cAux == cEof)
				Exit
			Endif
		
			//Sao verificadas as marcacoes feitas pelo Excel para concatenacao de strings
			Do Case
			
				Case cAux == '"'
					lAspa := !lAspa
					
				Case cAux == cSeparador .And. !lAspa
					aAdd(aTmp,cString)
					cString := ""
					
				OtherWise
					cString += cAux
					
			EndCase
		
		Next nCont
	
		For nCont := Len(aTmp)+1 To 11
			aAdd(aTmp,"")
		Next nCont
	
		//Validacao para nao salvar registros sem entidades
		If !Empty(aTmp[1]) .OR. !Empty(aTmp[2])
			aAdd(aEstrutura,aTmp)
			aTmp := {}
		Endif
		
		FT_FSKIP()
	End

	FT_FUSE()

Return( aEstrutura )