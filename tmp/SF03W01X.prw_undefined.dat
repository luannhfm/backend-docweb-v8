#INCLUDE 'TOTVS.CH'
#INCLUDE 'TBICONN.CH'
#INCLUDE 'RestFul.ch'

/*/{Protheus.doc} SF03W01X
    @description
    @type User Function
    @author Rafael Karczevski
    @since 21/08/2019
    @version 1.0
    /*/
User Function SF03W01X()	
Return

/*/{Protheus.doc} CLIENTES
    @description WebService Rest para realizar a manipulação de clientes
    @type WebService Method
    @author Rafael Karczevski
    @since 21/08/2019
    @version 1.0
/*/
WSRESTFUL SFCLIENTES DESCRIPTION "Serviço REST CRUD de Clientes"

    WSDATA RECEIVE As String //Json Recebido no corpo da requição
    WSDATA CGC	   As String //Em caso de PUT ou DELETE pega o CGC por URL
    WSDATA CGCFIL  As String
    
    WSMETHOD POST 	DESCRIPTION "Cadastra um novo cliente" 		WSSYNTAX "/CLIENTES/{CGCFIL}"
    WSMETHOD GET  	DESCRIPTION "Retorna Cadastro de cliente" 	WSSYNTAX "/CLIENTES/{CGCFIL}{CGC}"
    WSMETHOD PUT  	DESCRIPTION "Altera um cliente" 			WSSYNTAX "/CLIENTES/{CGCFIL}{CGC}"

END WSRESTFUL

/*/{Protheus.doc} GET
    @description Retorna uma lista de clientes.
    @type WebService Method
    @author Rafael Karczevski
    @since 21/08/2019
    @version 1.0
/*/
WSMETHOD GET WSSERVICE SFCLIENTES

    Local cCGC       := Self:CGC
    Local cCgcGil    := Self:CGCFIL
    Local aArea 	 := GetArea()
    Local cNextAlias := GetNextAlias()
    Local cJSON		 := ""
    Local oCliente   := Clientes():New()
    Local lRet		 := .T.
    Local nStart     := Seconds()

    If PepEnv(cCgcGil)
        FwLogMsg("INFO", /*cTransactionId*/, "REST", FunName(), "", "01", "[WS Clientes] Soliticou dados do cliente 000000", 0, (nStart - Seconds()), {})
        ::SetContentType("application/json")
        BeginSQL Alias cNextAlias
            SELECT 
                A1_TIPO,
                A1_CGC,	  
                A1_COD,	  
                A1_LOJA,	  
                A1_NOME,  
                A1_END,  
                A1_EST,	  
                A1_CODMUN,	  
                A1_MUN, 	  
                A1_BAIRRO,	  
                A1_CEP,	  
                A1_ENDCOB,	  
                A1_MUNC, 	  
                A1_BAIRROC,  
                A1_CEPC,	  
                A1_ESTC,	  
                A1_CONTA,	  
                A1_COMPLEM,  
                A1_XDDDTLX,  
                A1_TELEX,	  
                A1_DDD,	  
                A1_TEL,	  
                A1_XDDDCON,  
                A1_XTELCON,  
                A1_EMAIL
            FROM %Table:SA1% SA1
            WHERE SA1.%notdel%
                AND SA1.A1_CGC = %Exp:cCGC%
        EndSQL
        (cNextAlias)->( DbGoTop() )
        If (cNextAlias)->( !Eof() )
            While (cNextAlias)->( !Eof() )
                
                oCliente:A1_TIPO	:= AllTrim((cNextAlias)->(A1_TIPO	) )
                oCliente:A1_CGC	    := AllTrim((cNextAlias)->(A1_CGC	) )
                oCliente:A1_COD	    := AllTrim((cNextAlias)->(A1_COD	) )
                oCliente:A1_LOJA	:= AllTrim((cNextAlias)->(A1_LOJA	) )
                oCliente:A1_NOME	:= AllTrim((cNextAlias)->(A1_NOME	) )
                oCliente:A1_END	    := AllTrim((cNextAlias)->(A1_END	) )
                oCliente:A1_EST	    := AllTrim((cNextAlias)->(A1_EST	) )
                oCliente:A1_CODMUN	:= AllTrim((cNextAlias)->(A1_CODMUN	) )
                oCliente:A1_MUN 	:= AllTrim((cNextAlias)->(A1_MUN 	) )
                oCliente:A1_BAIRRO	:= AllTrim((cNextAlias)->(A1_BAIRRO	) )
                oCliente:A1_CEP	    := AllTrim((cNextAlias)->(A1_CEP	) )
                oCliente:A1_ENDCOB	:= AllTrim((cNextAlias)->(A1_ENDCOB	) )
                oCliente:A1_MUNC 	:= AllTrim((cNextAlias)->(A1_MUNC 	) )
                oCliente:A1_BAIRROC := AllTrim((cNextAlias)->(A1_BAIRROC) )
                oCliente:A1_CEPC	:= AllTrim((cNextAlias)->(A1_CEPC	) )
                oCliente:A1_ESTC	:= AllTrim((cNextAlias)->(A1_ESTC	) )
                oCliente:A1_CONTA	:= AllTrim((cNextAlias)->(A1_CONTA	) )
                oCliente:A1_COMPLEM := AllTrim((cNextAlias)->(A1_COMPLEM) )
                oCliente:A1_XDDDTLX := AllTrim((cNextAlias)->(A1_XDDDTLX) )
                oCliente:A1_TELEX	:= AllTrim((cNextAlias)->(A1_TELEX	) )
                oCliente:A1_DDD	    := AllTrim((cNextAlias)->(A1_DDD	) )
                oCliente:A1_TEL	    := AllTrim((cNextAlias)->(A1_TEL	) )
                oCliente:A1_XDDDCON := AllTrim((cNextAlias)->(A1_XDDDCON) )
                oCliente:A1_XTELCON := AllTrim((cNextAlias)->(A1_XTELCON) )
                oCliente:A1_EMAIL	:= AllTrim((cNextAlias)->(A1_EMAIL	) )
                
                (cNextAlias)->( DbSkip() )
            
            EndDo
            
            cJSON := FWJsonSerialize(oCliente, .T., .T.,,.F.)
            ::SetResponse(cJSON)
                
        Else
            SetRestFault(400, "SA1 Empty")
            lRet := .F.
        EndIf

        (cNextAlias)->(DbCloseArea())
        RestArea(aArea)
        RESET ENVIRONMENT
    EndIf

Return(lRet)

/*/{Protheus.doc} POST
    @description Efetua a inclusão de um novo cliente
    @type WebService Method
    @author Rafael Karczevski
    @since 21/08/2019
    @version 1.0
/*/
WSMETHOD POST WSRECEIVE RECEIVE WSSERVICE SFCLIENTES

    Local cJSON 	 := Self:GetContent() // Pega a string do JSON 
    Local cCgcGil    := Self:CGCFIL
    Local oParseJSON := Nil 
    Local aDadosCli	 := {} //--> Array para ExecAuto do MATA030
    Local cJsonRet   := ""
    Local cArqLog	 := ""
    Local cErro		 := ""
    Local lRet		 := .T.
    Local aArea		 := GetArea()
    Private lMsErroAuto := .F.

    If PepEnv(cCgcGil)
        // --> Cria o diretório para salvar os arquivos de log
        If !ExistDir("\log_cli")
            MakeDir("\log_cli")
        EndIf
        ::SetContentType("application/json")
        // --> Deserializa a string JSON
        FWJsonDeserialize(cJson, @oParseJSON)
        SA1->( DbSetOrder(3) )
        If !(SA1->( DbSeek( xFilial("SA1") + oParseJSON:A1_CGC ) ))

            Aadd(aDadosCli, {"A1_FILIAL"	, xFilial("SA1")								, Nil} )	
            Aadd(aDadosCli, {"A1_TIPO"		, oParseJSON:A1_TIPO							, Nil} )
            Aadd(aDadosCli, {"A1_PESSOA"	, Iif(Len(oParseJSON:A1_CGC) == 11, "F", "J")	, Nil} )
            Aadd(aDadosCli, {"A1_CGC"		, oParseJSON:A1_CGC								, Nil} )

            Aadd(aDadosCli, {"A1_COD"		, oParseJSON:A1_COD								, Nil} )
            Aadd(aDadosCli, {"A1_LOJA"		, oParseJSON:A1_LOJA							, Nil} )
            Aadd(aDadosCli, {"A1_NOME"		, oParseJSON:A1_NOME							, Nil} )
            Aadd(aDadosCli, {"A1_NREDUZ"	, oParseJSON:A1_NOME							, Nil} )
            Aadd(aDadosCli, {"A1_END"		, oParseJSON:A1_END							    , Nil} )
            Aadd(aDadosCli, {"A1_EST"		, oParseJSON:A1_EST			    				, Nil} )
            Aadd(aDadosCli, {"A1_CODMUN"	, oParseJSON:A1_CODMUN	    					, Nil} )
            Aadd(aDadosCli, {"A1_MUN"	    , oParseJSON:A1_MUN 	    					, Nil} )
            Aadd(aDadosCli, {"A1_BAIRRO"	, oParseJSON:A1_BAIRRO							, Nil} )
            Aadd(aDadosCli, {"A1_CEP"		, oParseJSON:A1_CEP								, Nil} )
            Aadd(aDadosCli, {"A1_ENDCOB"	, oParseJSON:A1_ENDCOB							, Nil} )
            Aadd(aDadosCli, {"A1_MUNC"	    , oParseJSON:A1_MUNC 	    					, Nil} )
            Aadd(aDadosCli, {"A1_BAIRROC"	, oParseJSON:A1_BAIRROC							, Nil} )
            Aadd(aDadosCli, {"A1_CEPC"		, oParseJSON:A1_CEPC							, Nil} )
            Aadd(aDadosCli, {"A1_ESTC"		, oParseJSON:A1_ESTC		    				, Nil} )
            Aadd(aDadosCli, {"A1_CONTA"		, oParseJSON:A1_CONTA		    				, Nil} )
            Aadd(aDadosCli, {"A1_COMPLEM"	, oParseJSON:A1_COMPLEM		    				, Nil} )
            Aadd(aDadosCli, {"A1_MSBLQL"	, "2"               		    				, Nil} )
            Aadd(aDadosCli, {"A1_XDDDTLX"	, oParseJSON:A1_XDDDTLX		    				, Nil} )
            Aadd(aDadosCli, {"A1_TELEX"	    , oParseJSON:A1_TELEX		    				, Nil} )
            Aadd(aDadosCli, {"A1_DDD"	    , oParseJSON:A1_DDD		    			    	, Nil} )
            Aadd(aDadosCli, {"A1_TEL"		, oParseJSON:A1_TEL							    , Nil} )
            Aadd(aDadosCli, {"A1_XDDDCON"   , oParseJSON:A1_XDDDCON	    			    	, Nil} )
            Aadd(aDadosCli, {"A1_XTELCON"   , oParseJSON:A1_XTELCON	    			    	, Nil} )
            Aadd(aDadosCli, {"A1_EMAIL"     , oParseJSON:A1_EMAIL	    			    	, Nil} )

            MsExecAuto({|x,y| MATA030(x,y)}, aDadosCli, 3) 
            
            If lMsErroAuto
                cArqLog := oParseJSON:A1_CGC + " - " + SubStr( Time(),1,5 ) + ".log"
                RollBackSX8()
                cErro := MostraErro("\log_cli", cArqLog)
                cErro := TrataErro(cErro) // --> Trata o erro para devolver para o client.
                SetRestFault(400, cErro)
                lRet := .F. 				
            Else
                ConfirmSX8()
                cJSONRet := '{"code":"204"';
                            + ',"message":"' + "Cliente incluido com sucesso" + '"';
                            + ',"A1_COD":"'  + SA1->A1_COD 	    + '"';
                            + ',"A1_LOJA":"' + SA1->A1_LOJA 	+ '"';
                            +'}'
                            
                ::SetResponse( cJSONRet )				
            EndIf		 
        Else
            SetRestFault(400, "Cliente já cadastrado: " + SA1->A1_COD + " - " + SA1->A1_LOJA)
            lRet := .T. 	 
        EndIf

        RestArea(aArea)
        RESET ENVIRONMENT
    EndIf

Return(lRet)

/*/{Protheus.doc} PUT
    @description Altera as informações de um cliente
    @type WebService Method
    @author Rafael Karczevski
    @since 21/08/2019
    @version 1.0
/*/
WSMETHOD PUT WSRECEIVE RECEIVE WSSERVICE SFCLIENTES

    Local cJSON := Self:GetContent() // --> Pega a string do JSON
    Local cCGC	:= Self:A1_CGC // --> Pega o parâmetro recebido pela URÇ
    Local cCgcGil    := Self:CGCFIL
    Local lRet  := .T.
    Local oParseJSON := Nil 
    Local aDadosCli	 := {} //--> Array para ExecAuto do MATA030
    Local cJsonRet   := ""
    Local cArqLog	 := ""
    Local cErro		 := ""
    Local aArea		 := GetArea()
    Private lMsErroAuto := .F.

    If PepEnv(cCgcGil)
        If !ExistDir("\log_cli")
            MakeDir("\log_cli")
        EndIf
        ::SetContentType("application/json")
        // --> Deserializa a string JSON
        FWJsonDeserialize(cJson, @oParseJSON)
        SA1->( DbSetOrder(3) )
        If (SA1->( DbSeek( xFilial("SA1") + oParseJSON:A1_CGC ) ))
            
            Aadd( aDadosCli, {"A1_COD" , SA1->A1_COD , Nil } )
            Aadd( aDadosCli, {"A1_LOJA", SA1->A1_LOJA , Nil } )
            Aadd( aDadosCli, {"A1_NOME", oParseJSON:A1_NOME , Nil } )
            Aadd( aDadosCli, {"A1_END" , oParseJSON:A1_END  , Nil } )
            
            MsExecAuto({|x,y| MATA030(x,y)}, aDadosCli, 4) 
            
            If lMsErroAuto
                cArqLog := oParseJSON:A1_CGC + " - " + SubStr( Time(),1,5 ) + ".log"
                cErro := MostraErro("\log_cli", cArqLog)
                cErro := TrataErro(cErro) // --> Trata o erro para devolver para o client.
                SetRestFault(400, cErro)
                lRet := .F.
            Else
                cJSONRet := '{"cod_cli":"' + SA1->A1_COD	+ '"';
                            + ',"loja":"'  + SA1->A1_LOJA 	+ '"';
                            + ',"msg":"'   + "Alterado" 	+ '"';
                            +'}'
                ::SetResponse( cJSONRet )				
            EndIf		 
            
        Else
            SetRestFault(400, "Cliente não encontrado.")
            lRet := .F.
        EndIf
        RestArea(aArea)
        RESET ENVIRONMENT
    EndIf

Return(lRet)

/*/{Protheus.doc} TrataErro
    @description Trata o erro para devolver no JSON
    @type WebService Method
    @author Rafael Karczevski
    @since 21/08/2019
    @version 1.0
/*/
Static Function TrataErro(cErroAuto)

    Local nLines   := MLCount(cErroAuto)
    Local cNewErro := ""
    Local nErr	   := 0
    For nErr := 1 To nLines
        cNewErro += AllTrim( MemoLine( cErroAuto, , nErr ) ) + " - "
    Next nErr

Return(cNewErro)

/*/{Protheus.doc} PepEnv
    @description
    @type Static Function
    @author Rafael Karczevski
    @since 27/08/2019
    @version 1.0
    @param param, param_type, param_descr
    @return return, return_type, return_description
    @example
    (examples)
    @see (links_or_references)
    /*/
Static Function PepEnv(p_FilCgc)

    Local cCodFil := ""
    Local cCGc := ""
    Local lRet := .T.
    
    PREPARE ENVIRONMENT EMPRESA '01' FILIAL '01MT0001'
        dbSelectArea("SM0")
        SM0->(DbSetOrder(1))
        SM0->(DbGoTop())
        While !(SM0->(eof())) .and. cCGc <> p_FilCgc
            cCodFil := SM0->M0_CODFIL
            cCGc := SM0->M0_CGC
            SM0->(dbSkip())
        End

    If cCGc <> p_FilCgc        
        SetRestFault(400, "Não foi possivel localizar a filial solicitada!")
        lRet := .F.
    EndIf
    RESET ENVIRONMENT

    PREPARE ENVIRONMENT EMPRESA '01' FILIAL AllTrim(cCodFil)

Return lRet

/*/{Protheus.doc} Clientes
    @description Objeto de cliente para utilização em web service rest
    @type Class
    @author Rafael Karczevski
    @since 21/08/2019
    @version 1.0
    /*/
Class Clientes
	
	Data A1_TIPO			As String
    Data A1_CGC				As String
    Data A1_COD				As String
    Data A1_LOJA			As String
    Data A1_NOME			As String
    Data A1_END				As String
    Data A1_EST			    As String
    Data A1_CODMUN	    	As String
    Data A1_MUN 	    	As String
    Data A1_BAIRRO			As String
    Data A1_CEP				As String
    Data A1_ENDCOB			As String
    Data A1_MUNC 	    	As String
    Data A1_BAIRROC			As String
    Data A1_CEPC			As String
    Data A1_ESTC		    As String
    Data A1_CONTA		    As String
    Data A1_COMPLEM		    As String
    Data A1_XDDDTLX		    As String
    Data A1_TELEX		    As String
    Data A1_DDD		    	As String
    Data A1_TEL				As String
    Data A1_XDDDCON	        As String
    Data A1_XTELCON	        As String
    Data A1_EMAIL	    	As String
	
	Method New() Constructor
	
EndClass

/*/{Protheus.doc} New
Método Construtor
/*/
Method New() Class CLIENTES
    
    ::A1_TIPO	    := ""
    ::A1_CGC	    := ""
    ::A1_COD	    := ""
    ::A1_LOJA	    := ""
    ::A1_NOME	    := ""
    ::A1_END	    := ""
    ::A1_EST	    := ""
    ::A1_CODMUN	    := ""
    ::A1_MUN 	    := ""
    ::A1_BAIRRO	    := ""
    ::A1_CEP	    := ""
    ::A1_ENDCOB	    := ""
    ::A1_MUNC 	    := ""
    ::A1_BAIRROC    := ""
    ::A1_CEPC	    := ""
    ::A1_ESTC	    := ""
    ::A1_CONTA	    := ""
    ::A1_COMPLEM    := ""
    ::A1_XDDDTLX    := ""
    ::A1_TELEX	    := ""
    ::A1_DDD	    := ""
    ::A1_TEL	    := ""
    ::A1_XDDDCON    := ""
    ::A1_XTELCON    := ""
    ::A1_EMAIL	    := ""

Return(Self)