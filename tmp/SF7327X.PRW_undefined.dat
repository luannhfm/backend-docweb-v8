#INCLUDE "PROTHEUS.CH"
#INCLUDE "TOPCONN.CH"
#INCLUDE "RWMAKE.CH"
#INCLUDE "FONT.CH"
#INCLUDE "COLORS.CH"
#INCLUDE "PARMTYPE.CH"     
#INCLUDE "FWMBROWSE.CH"
#INCLUDE "FWMVCDEF.CH"
#INCLUDE "FWCOMMAND.CH" 

#DEFINE CRLF chr(13)+chr(10)   
/*
----------------------------------------------------------------------------
{Protheus.doc}<SF7327X>   
  #CONTROLE_DN - EXPORTA [AD1-OPORTUNIDADES]                                               
   Gera arquivo CSV (txt) com as informacoes das Oportunidades conforme
   Layout Proprio para Remessa ao DN.
                                                                          
@author<Antonio Dantas> 
@since<01/12/2015>                                                        
@version<1.00>
@receive
<    _cModo (c) - Modo de Execucao [E=Emissao;R=Re-Emissao]
   _cHistor (c) - Historico complementar da Remessa 
>
@return
<  _lRemOK (l) - (.t.) Arquivo Gerado com sucesso; 
                 (.f.) Arquivo não foi Gerado
>
@example<Nil>
@see<Nil>
----------------------------------------------------------------------------
*/
User Function SF7327X(_cModo,_cHistor)

Local cEstat := U_SFGN001A(ProcName(0), "SF7327X")
Local _nAviso			:= 0
Local _cMensagem		:= ""
Local _cCasa			:= Space(Len(cFilAnt))
Private _cNomArqR		:= ""
Private _cNR_Rem 		:= ZCK->ZCK_CODIGO
Private _lRemOK			:= .t.
Private _aRecnos		:= {}
Private _nQtdREG 		:= 0 						//-- Variavel private a ser usada pelo arquivo de layout
Private _cPerg			:= Substr(ProcName(),3)		//-- Define o Grupo de Perguntas
//+------------------------------------------------------------------+
//| Carrega as perguntas relativas aos parametros de Impressao       |
//|    Mv_par01 - Somente a CASA ATUAL ?                           |
//+------------------------------------------------------------------+
xParPerg(_cPerg)      
//+------------------------------------------------------------------+
//|  Monta tela de paramentos para usuario, se cancelar sair         |
//+------------------------------------------------------------------+
If !Pergunte(_cPerg,.t.)  
	_lCancel := .T. 
   Return
Endif 
//+------------------------------------------------------------------+
//|  Identifica a Casa                                               |
//+------------------------------------------------------------------+
If Mv_par01 == 1 		//-- Somente a CASA ATUAL ? 
	_cCasa	:= Substr(cFilAnt,1,4) 
Endif 
//+------------------------------------------------------------------+
//| Monta a mensagem de Confirmacao                                  |
//+------------------------------------------------------------------+
_cMensagem	:= "A T E N Ç ã O !"+CRLF
_cMensagem	+= "Confirma a geração do arquivo de remessa para [OPORTUNIDADES]!"+CRLF
_cMensagem	+= " "+CRLF
_cMensagem	+= " Considera ["+Dtoc(dDataBase)+"] como Data Base da Remessa das Oportunidades."
//+--------------------------------------------------------------------+
//| Implementa controle de Transacao.                                  |
//+--------------------------------------------------------------------+
_nAviso	:= Aviso(FunName()+"/"+ProcName(),_cMensagem,{"Sim","Não"},3)
If _nAviso == 1 			
	Begin Transaction
		//-- Confirmou a geracao do arquivo de remessa para cartoes
		Processa( {|| fGerArq() }, "Gera Arq. de Remessa [OPORTUNIDADES]","Processando...")
		If !_lRemOK
			DisarmTransaction()
		Endif 
	End Transaction
Endif
If _lRemOK						
	//-- Na confirmação da Geração da Remessa modifica o Status da Remessa 
	If _lRemOK
		If Aviso(FunName()+"/"+ProcName(),"O Arquivo de remessa ["+Alltrim(_cNomArqR)+"] foi gerado com sucesso?",{"Sim","Não"}) == 1
			u_fMarkRem(_cModo,_cHistor,_cCasa)		//-- Rotina descrita no fonte [SF7325X.PRW]
		Endif 
	Endif 
Endif
Return _lRemOK


/*
----------------------------------------------------------------------------
{Protheus.doc}<fGerArq>                                                
   Rotina Responsavel Gerar o Arquivo de Remessa     
																		   
@author<Antonio Dantas> 
@since<01/12/2015>                                                        
@version<Nil>                                                             
@Receive<Nil>                                                                  
@return                                                              
<   _lRemOK (l) - (.t.) Se a Geracao do Arquivo foi OK                    
                  (.f.) Por qualquer motivo não gerou arquivo de remesa   
>                                                                         
@example<Nil>
@see<Nil>
----------------------------------------------------------------------------
*/
Static Function fGerArq()

Local cEstat := U_SFGN001A(ProcName(0), "SF7327X")
Local _cArqRem 		:= ""
Local _cArqCarta	:= ""
Local _cArLayout	:= Alltrim(ZCJ->ZCJ_LAYOUT)
Local _cPathRoot	:= Alltrim(ZCJ->ZCJ_PATH)  
//--
Local _aArqLyt 		:= {} 
Local _aHeader 		:= {}
Local _aDetalhe 	:= {}
Local _aTrailler	:= {}
//-- 
Local _nH_Arq		:= 0
Local _cTexto		:= ""
Local _cFileLog		:= ""
Local _nRegs			:= 0
Local _nRegsPF		:= 0
Local _bBlock		:= "" 
Local _cDados 		:= ""
Local _cMkTp 		:= ""
Local _cPathRem		:= ""
//-- Variaveis de Controle dos Registros a Exportar 
Local _aCodEmp 		:={	{"01MT","3"},{"02MT","6"},{"03MT","5"},{"04MT","4"} } 
Local _cEmp 		:= ""
Local _nPos			:= 0 
Local _ddataRem 	:= CtoD("  /  /  ")
Local _cCNPJ		:= ""
Local _cUfEst		:= ""
//-- Variaveis INVOCADAS do Arquivo .INI 
Private _cdataRem 	:= ""
Private _cEntidade	:= ""
Private _nCtaREG	:= 0
Private _cPapReg	:= ""
Private _cUfAC 		:= "0"
Private _cUfAL 		:= "0"
Private _cUfAP 		:= "0"
Private _cUfAM 		:= "0"
Private _cUfBA 		:= "0"
Private _cUfCE 		:= "0"
Private _cUfDF 		:= "0"
Private _cUfES 		:= "0"
Private _cUfGO 		:= "0"
Private _cUfMA 		:= "0"
Private _cUfMT 		:= "0"
Private _cUfMS 		:= "0"
Private _cUfMG 		:= "0"
Private _cUfPA 		:= "0"
Private _cUfPB 		:= "0"
Private _cUfPR 		:= "0"
Private _cUfPE 		:= "0"
Private _cUfPI 		:= "0"
Private _cUfRJ 		:= "0"
Private _cUfRN 		:= "0"
Private _cUfRS 		:= "0"
Private _cUfRO 		:= "0"
Private _cUfRR 		:= "0"
Private _cUfSC 		:= "0"
Private _cUfSP 		:= "0"
Private _cUfSE 		:= "0"
Private _cUfTO 		:= "0"
//+-----------------------------------------------------------------------+
//| Modifica o Flag de controle, para gerar remessa                       |
//+-----------------------------------------------------------------------+
_lRemOK := .t. 
//+-----------------------------------------------------------------------+
//| Validacoes antes da chamada da rotina de geracao do arquivo de Remesa |
//+-----------------------------------------------------------------------+
If Alltrim(_cArLayout) == ""
	Aviso(FunName()+"/"+ProcName(),"Não foi informado neste LAYOUT o nome do Arquivo de Configuração para Gerar o Arquivo de Remessa!",{"OK"},3)
	_lRemOK := .f.
Endif
If _lRemOK
	_cArqCarta 	:= cGetFile('Arquivo*.*','Salvar Arquivo',1,'C:\TEMP',.F.,GETF_LOCALHARD)
	_cArqCarta 	:= _cArqCarta
	If _cArqCarta == ""
		Aviso(FunName()+"/"+ProcName(),"Nome do Arquivo de Remessa não Foi Informado!",{"OK"})
		_lRemOK := .f.
	Endif 
	//+-----------------------------------------------------------------------+
	//| Se o operador informat ponto(.) gera nome do Arquivo de Remessa.      |
	//+-----------------------------------------------------------------------+
	_cMkTp := Substr(_cArqCarta,Len(Alltrim(_cArqCarta)),1)
	If _cMkTp == "."
		_cPathRem	:= Substr(_cArqCarta,1,Len(Alltrim(_cArqCarta))-1)
		_cNomArqR	:= Alltrim(ZCJ->ZCJ_MASTER)+Alltrim(ZCJ->ZCJ_CODIGO)+"_"+dtos(dDataBase)+StrTran(Time(),":","")+".CSV"
		_cArqCarta	:= _cPathRem+_cNomArqR 
		Aviso(FunName()+"/"+ProcName(),"Arquivo de Remessa será gerado com nome ["+_cNomArqR+"].",{"OK"})
	Endif
	//+-----------------------------------------------------------------------+
	//| Cria e Abre o Arquivo de Remessa                                      |
	//+-----------------------------------------------------------------------+
	_nH_Arq	:= fCreate(_cArqCarta)
Endif      
If _lRemOK
	If !File(_cPathRoot+Alltrim(_cArLayout))
		Aviso(FunName()+"/"+ProcName(),"Arquivo de Layout: "+_cPathRoot+Alltrim(_cArLayout)+". não foi encontrado!",{"OK"})
		_lRemOK := .f.
	EndIf
EndIf     
If _lRemOK
	//+-----------------------------------------------------------------------+
	//| Carrega o Layout do Arquivo de Remessa                                |
	//|  _aArqLyt[N,1] - Identificacao da Sessao                              |
	//|  _aArqLyt[N,2] - Numero de Repeticoes 	                              |
	//|  _aArqLyt[N,3] - Condicao de Quebra  	                              |
	//|  _aArqLyt[N,4] - ARRAY DA ORIGEM DOS CAMPOS 'informacoes' 	          |
	//|  _aArqLyt[N,5] - LIVRE 	                                              |
	//|  _aArqLyt[N,6] - Condicao do Loop 	                                  |
	//|  _aArqLyt[N,7] - Separados de Campos 	                              |
	//+-----------------------------------------------------------------------+
	_aArqLyt 	:= u_fCrArqIn(_cPathRoot+Alltrim(_cArLayout))
	//+-----------------------------------------------------------------------+
	//| Identifica os Arrays de Header, Detalhe e Trailler                    |
	//| OBS: Caso venha a existir tipo de arquivos com mais de uma linha por  |
	//|      tipo; Tratar caso a caso. Deve-se adicionar ao array do tipo e   |
	//|      tratar na seguencia.                                             |
	//|      - Inicialmente estamos considerando um de cada tipo.             |
	//+-----------------------------------------------------------------------+  
	_nLinH := aScan(_aArqLyt , {|x| x[1] = "[H  ]" }) // Header
	_nLinD := aScan(_aArqLyt , {|x| x[1] = "[D  ]" }) // Detalhe
	_nLinT := aScan(_aArqLyt , {|x| x[1] = "[T  ]" }) // Trailler
	If _nLinH > 0
		_cSeparH 	:= ";" //_aArqLyt[_nLinH,07]	
		_aHeader 	:= _aArqLyt[_nLinH,04]
	Endif
	If _nLinD > 0
		_cSeparD 	:= ";" //_aArqLyt[_nLinD,07]	
		_aDetalhe	:= _aArqLyt[_nLinD,04]
	Endif
	If _nLinT > 0
		_cSeparT 		:= ";" //_aArqLyt[_nLinT,07]	
		_aTrailler 	:= _aArqLyt[_nLinT,04]
	Endif
Endif 	
//+-----------------------------------------------------------------------+
//| Trata caso a caso os Layout's da Remessa                              |
//+-----------------------------------------------------------------------+  
If _lRemOK .and. Len(_aDetalhe) > 0
	//+-----------------------------------------------------------------------+
	//| ----- GERA CABECALHO "Header"                                         |
	//+-----------------------------------------------------------------------+
 	If _lRemOK .and. Len(_aHeader) >= 1
		_cTexto := ""
 		_cDados := ""
		_nCtaA	:= 0
 		For _nCtaA := 2 To Len(_aHeader) 
			_bBlock := {|| &(_aHeader[_nCtaA,2]) }
 			_cDados := Eval(_bBlock)
 			_cDados := StrTran(_cDados,Chr(13)+Chr(10),Space(2))
 			_cTexto += _cDados+Iif(_cSeparH!="",_cSeparH,"")
		Next _nCtaA
		_cTexto += Chr(13)+Chr(10) 
        //-- Grava a Linha de Cabecalho "Header" do Arquivos Remessa 
		If fWrite(_nH_Arq,_cTexto,Len(_cTexto)) != Len(_cTexto)
			If !MsgAlert("Ocorreu um erro na gravacao do arquivo.","Atencao!")
				_lRemOK := .f.
			Endif
		Endif
	Endif 
	//+-----------------------------------------------------------------------+
	//| ----- GERA DETALHE "Detalhe"                                          |
	//+-----------------------------------------------------------------------+
 	If _lRemOK .and. Len(_aDetalhe) >= 1
		//-- Zera as VARIAVEIS de controle de Registro 
		_nRegs := 0	; _nCtaREG := 0 ; _lRemOK 	:= .F.   
		//+-----------------------------------------------------------------------+
		//| Executa a Consulta as Oportunidade Disponivel para remessa e Gera o   | 
		//| Arquivo Temporario para Gerar a Remessa.                              |
		//+-----------------------------------------------------------------------+
		If fCriaTMP() 
			//-- Conta o Numero de Registros da Tabela 
			TMP_REM->(DbGoTop())				
			TMP_REM->(DbEval({|| _nRegs++ }))				
			TMP_REM->(DbGoTop())				
			//-- Inicializa o Termometro  
			ProcRegua(_nRegs)
			//-- Loop na Tabela Temporaria com os Registro das OPORTUNIDADES  
			Do While TMP_REM->(!eof())
				//+-----------------------------------------------------------------------+
				//| Inicizaliza variaveis que seram INVOCADAS no Arquivo de configuracao  |
				//| .INI                                                                  |
				//+-----------------------------------------------------------------------+ 
				//-- Implementa Termometro
				_nCtaREG++
				IncProc("Total de Registros:"+Alltrim(Transform(_nRegs,"@E 999,999,999"))+"  Lidos:"+Alltrim(Transform(_nCtaREG,"@E 999,999,999")))
				//-- Sequencia de Registro 
				_nSeguenc := _nCtaREG	 
				//-- Defini o segencial do arquivo de exportacao
				_ddataRem 	:= StoD(Substr(TMP_REM->DATA_MOV,1,8))
				_cdataRem 	:= Strzero(Day(_ddataRem),2)+"/"+ Strzero(Month(_ddataRem),2)+"/"+ Strzero(Year(_ddataRem),4)+" "+Substr(Time(),1,5)
				//-- Idenrifica a ENTIDADE
				_cEmp 		:= Iif(Empty(TMP_REM->AD1_FILIAL),Substr(cFilAnt,1,4),Substr(TMP_REM->AD1_FILIAL,1,4))
				_cEmp 		:= Substr(TMP_REM->AD1_FILIAL,1,4)
				_nPos		:= Ascan(_aCodEmp,{ |x| x[1] == _cEmp }) 
				_cEntidade	:= _aCodEmp[_nPos,2]
				
				//-- Identifica o CNPJ do Cliente/Prospect  	
				If !Empty(Alltrim(TMP_REM->AD1_CODCLI))
					_cCNPJ	:= Posicione("SA1",1,FwxFilial("SA1")+TMP_REM->AD1_CODCLI+TMP_REM->AD1_LOJCLI,"A1_CGC")
				Else
					_cCNPJ	:= Posicione("SUS",1,FwxFilial("SUS")+TMP_REM->AD1_PROSPE+TMP_REM->AD1_LOJPRO,"US_CGC")
				Endif 
				
				//+-----------------------------------------------------------------------+
				//| Antonio Dantas                                                        |
				//| Aguardar posicionamento para definir como sera tradado.               | 
				//+-----------------------------------------------------------------------+
				//&&==	_cCPF_CNPJ	:= Transform(_cCNPJ,Iif(Len(AllTrim(_cCNPJ))==11,"@R 999.999.999-99","@R 99.999.999/9999-99"))
				_cCPF_CNPJ	:= Transform(_cCNPJ,"@R 99.999.999/9999-99")
				
				//-- Defini o VALOR TOTAL da proposta 	
				_nVlrTot	:= fGetVrOp(TMP_REM->AD1_FILIAL,TMP_REM->AD1_NROPOR,TMP_REM->AD1_REVISA) 			//-- Construir funcao paa Pegar o valor da Proposta GANHA, quando houver. 
				
				//Define o papel do Regional
				//--  ;---  PAPEL_DO_REGIONAL: 1 - Operador;  2 - Coordenador Técnico; 3 - Coordenador Relacionamento
				//--  D20="1"
				_cPapReg := AllTrim(TMP_REM->AD1_XPAPRG)
				
				If Empty(_cPapReg)
					_cPapReg := 'X' 
				EndIf
				
				//Define o estado operador
				//--  D21 ate D47 - OPERADOR_AC ate OPERADOR_OPERADOR_TO
				_cUfEst := AllTrim(TMP_REM->AD1_XOPRRG)
				_cUfAC := "0"
				_cUfAL := "0"
				_cUfAP := "0"
				_cUfAM := "0"
				_cUfBA := "0"
				_cUfCE := "0"
				_cUfDF := "0"
				_cUfES := "0"
				_cUfGO := "0"
				_cUfMA := "0"
				_cUfMT := "0"
				_cUfMS := "0"
				_cUfMG := "0"
				_cUfPA := "0"
				_cUfPB := "0"
				_cUfPR := "0"
				_cUfPE := "0"
				_cUfPI := "0"
				_cUfRJ := "0"
				_cUfRN := "0"
				_cUfRS := "0"
				_cUfRO := "0"
				_cUfRR := "0"
				_cUfSC := "0"
				_cUfSP := "0"
				_cUfSE := "0"
				_cUfTO := "0"

				If "AC" $  _cUfEst
					_cUfAC := "1"
				EndIf
				
				If "AL" $  _cUfEst
					_cUfAL := "1"
				EndIf
				
				If "AP" $  _cUfEst
					_cUfAP := "1"
				EndIf
				
				If "AM" $  _cUfEst
					_cUfAM := "1"
				EndIf
				
				If "BA" $  _cUfEst
					_cUfBA := "1"
				EndIf
				
				If "CE" $  _cUfEst
					_cUfCE := "1"
				EndIf
				
				If "DF" $  _cUfEst
					_cUfDF := "1"
				EndIf
				
				If "ES" $  _cUfEst
					_cUfES := "1"
				EndIf
				
				If "GO" $  _cUfEst
					_cUfGO := "1"
				EndIf
				
				If "MA" $  _cUfEst
					_cUfMA := "1"
				EndIf
				
				If "MT" $  _cUfEst
					_cUfMT := "1"
				EndIf
				
				If "MS" $  _cUfEst
					_cUfMS := "1"
				EndIf
				
				If "MG" $  _cUfEst
					_cUfMG := "1"
				EndIf
				
				If "PA" $  _cUfEst
					_cUfPA := "1"
				EndIf
				
				If "PB" $  _cUfEst
					_cUfPB := "1"
				EndIf
				
				If "PR" $  _cUfEst
					_cUfPR := "1"
				EndIf
				
				If "PE" $  _cUfEst
					_cUfPE := "1"
				EndIf
				
				If "PI" $  _cUfEst
					_cUfPI := "1"
				EndIf
				
				If "RJ" $  _cUfEst
					_cUfRJ := "1"
				EndIf
				
				If "RN" $  _cUfEst
					_cUfRN := "1"
				EndIf
				
				If "RS" $  _cUfEst
					_cUfRS := "1"
				EndIf
				
				If "RO" $  _cUfEst
					_cUfRO := "1"
				EndIf
				
				If "RR" $  _cUfEst
					_cUfRR := "1"
				EndIf
				
				If "SC" $  _cUfEst
					_cUfSC := "1"
				EndIf
				
				If "SP" $  _cUfEst
					_cUfSP := "1"
				EndIf
				
				If "SE" $  _cUfEst
					_cUfSE := "1"
				EndIf
				
				If "TO" $  _cUfEst
					_cUfTO := "1"
				EndIf
				
				//+-----------------------------------------------------------------------+
				//| ------------ INICIO BLOCO DA MACRO PAARA GERAR REGISTRO  ------------ |
				//+-----------------------------------------------------------------------+
				//-- Monta a Linha de detalhe Conforme Layout e GRAVA  
		 		_cDados := ""
				_cTexto := ""
				_nCtaA 	:= 0 
				For _nCtaA := 2 To Len(_aDetalhe) 
					_bBlock	:= {|| &(_aDetalhe[_nCtaA,2]) }
		 			_cDados := Eval(_bBlock)
		 			_cDados := StrTran(_cDados,Chr(13)+Chr(10),Space(2))
 					_cTexto += _cDados+Iif(_cSeparD!="",_cSeparH,"")
				Next _nCtaA
				_cTexto += Chr(13)+Chr(10) 
				//-- Grava as Linhas de Informacoes "Detalhe" no Arquivos Remessa 
				If fWrite(_nH_Arq,_cTexto,Len(_cTexto)) != Len(_cTexto)
					If !MsgAlert("Ocorreu um erro na gravacao do arquivo.","Atencao!")
						_lRemOK := .f.
					Endif
				EndIf
				_lRemOK := .T.
				//+-----------------------------------------------------------------------+
				//| -------------- FIM BLOCO DA MACRO PAARA GERAR REGISTRO  ------------- |
				//+-----------------------------------------------------------------------+
				TMP_REM->(dbskip())
			Enddo
		Endif		//-- If fCriaTMP() 
	Endif			//-- If _lRemOK .and. Len(_aDetalhe) >= 1 		
	//+-----------------------------------------------------------------------+
	//| ----- GERA RODAPE "Trailler"                                          |
	//+-----------------------------------------------------------------------+
 	//-- 
 	If _lRemOK .and. Len(_aTrailler) >= 1     
 		_cDados := ""
 		_cTexto := ""
		_nCtaA	:= 0
 		For _nCtaA := 1 To Len(_aTrailler) 
			_bBlock	:= {|| &(_aTrailler[_nCtaA,2]) }
 			_cDados := Eval(_bBlock)
 			_cDados := StrTran(_cDados,Chr(13)+Chr(10),Space(2))
 			_cTexto += _cDados+Iif(_cSeparT!="",_cSeparH,"")
		Next _nCtaA
		_cTexto += Chr(13)+Chr(10) 
        //-- Grava a Linha de Rodape "Trailler" do Arquivos Remessa 
		If fWrite(_nH_Arq,_cTexto,Len(_cTexto)) != Len(_cTexto)
			If !MsgAlert("Ocorreu um erro na gravacao do arquivo.","Atencao!")
				_lRemOK := .f.
			Endif
		EndIf
	Endif
	If !_lRemOK
			//+-----------------------------------------------------------------------+
			//|  Se não existir registro para exportacao, finaliza o processo.        | 
			//+-----------------------------------------------------------------------+
			If TMP_REM->(Eof()) .And. TMP_REM->(Bof())
				Aviso(FunName()+"/"+ProcName(),"Não existem OPORTUNIDADES para Remessa!",{"OK"})
				//-- Fecha o Arquivo Temporario Criado na Funcao [fCriaTMP()]
				TMP_REM->(DbCloseArea())				
				//-- Fecha o Arquivo TXT criado para exportacao das Informacoes 
				fClose(_nH_Arq)
	           If File(_cArqCarta)
					fErase(_cArqCarta)
	           Endif 
			Endif  				
	Else
		//-- Fecha o Arquivo Temporario Criado na Funcao [fCriaTMP()]
		TMP_REM->(DbCloseArea())				
		//-- Fecha o Arquivo TXT criado para exportacao das Informacoes 
		fClose(_nH_Arq)
	Endif 
	
	If _nRegsPF > 0
		Aviso(FunName()+"/"+ProcName(),"De: "+ cValToChar(_nRegs) +" registro(s), existe um total de: "+ cValToChar(_nRegsPF) +" registro(s) que são de PF, estes serão Desconsiderados!",{"OK"})
	EndIf
	
Endif  	
Return _lRemOK


/*
----------------------------------------------------------------------------
{Protheus.doc}<fCriaTMP>                                                   
   Executa consulta a tabela [AD1-Oportunidades], apura os Registro
   recentemente INCLUIDOS os ALTERADOS NO PERIODO e os EXCLUIDOS. Gera
   Tabela temporaria [TMP_REM] que sera utilizada para criar o arquivo de
   exportacao ao DN.   
																		   
@Author<Antonio Dantas>                                                   
@since<02/12/2015>                                                        
@version<Nil>                                                             
@Receive<Nil>                                                                  
@return<Nil>                                                                   
@example<Nil>
@see<Nil>
----------------------------------------------------------------------------
*/
Static Function fCriaTMP() 

Local cEstat := U_SFGN001A(ProcName(0), "SF7327X")
Local _cQuery		:= "" 
Local _lReturn 		:= .T. 
//+-----------------------------------------------------------------------+
//| ----- Consulta as Oportunidades INCLUIDAS: NOPER == 3                 |
//+-----------------------------------------------------------------------+
_cQuery := ""
_cQuery += "  Select '3' AS OPER, AD1.AD1_FILIAL, AD1.AD1_NROPOR, AD1.AD1_REVISA, AD1.AD1_DESCRI, "+CRLF
_cQuery += "          AD1.AD1_DATA, AD1.AD1_HORA, AD1.AD1_USER, AD1.AD1_VEND, AD1.AD1_DTINI, AD1.AD1_XPAPRG, AD1.AD1_XOPRRG, "+CRLF
_cQuery += "          AD1.AD1_DTFIM, AD1.AD1_PROSPE, AD1.AD1_LOJPRO, AD1.AD1_CODCLI, AD1.AD1_LOJCLI, "+CRLF
_cQuery += "          AD1.AD1_XCLASS, AD1.AD1_STAGE, AD1.AD1_FCS, AD1.AD1_FCI, AD1.AD1_STATUS, "+CRLF
_cQuery += "          AD1.AD1_DTPFIM, AD1.AD1_DTASSI, AD1.AD1_OBSPRO, AD1.AD1_CNTPRO, AD1.AD1_PROVEN, "+CRLF
_cQuery += "          AD1.AD1_XOPER, AD1.AD1_XREM, Substr(AD1.AD1_XOPER,1,15) As DATA_MOV  "+CRLF
_cQuery += "  From "+RetSqlName("AD1")+" AD1 "+CRLF
If Mv_par05 == 2 	//-- Considera PF / 1=sim;2=nao ?
	_cQuery += "  INNER JOIN "+ RetSqlName("SA1") +" SA1 ON A1_FILIAL = '"+ FwxFilial("SA1") +"' AND A1_COD = AD1_CODCLI AND A1_LOJA = AD1_LOJCLI AND A1_PESSOA = 'J' AND  SA1.D_E_L_E_T_ = ' ' "+CRLF
EndIf
_cQuery += "  Where AD1.D_E_L_E_T_ = ' ' "+CRLF 
If Mv_par01 == 1	//-- Somente a CASA ATUAL ?
	_cQuery += "  And Substr(AD1.AD1_FILIAL,1,4) = '"+Substr(FwxFilial("AD1"),1,4)+"' "+CRLF
Endif 
If mv_par02 == 2	//-- Considera prospect / 1=sim;2=nao ?
	_cQuery += " And AD1.AD1_CODCLI <> ' ' "+CRLF  
EndIf
_cQuery += "  And (Substr(AD1.AD1_XOPER,1,15) = '               ' Or (Substr(AD1.AD1_XOPER,1,15) > Substr(AD1.AD1_XREM,1,15))) "+CRLF
If .Not. Empty(Mv_par03) .And. .Not. Empty(Mv_par04)
	_cQuery += "  And AD1_DATA >= '"+ DtoS(Mv_par03) +"'	"
	_cQuery += "  And AD1_DATA <= '"+ DtoS(Mv_par04) +"'	"
EndIf
//+-----------------------------------------------------------------------+
//| ----- Consulta as Oportunidades ALTERADAS: NOPER == 4                 |
//+-----------------------------------------------------------------------+
_cQuery += "Union all "+CRLF
_cQuery += "  Select '4' AS OPER, AD1.AD1_FILIAL, AD1.AD1_NROPOR, AD1.AD1_REVISA, AD1.AD1_DESCRI, "+CRLF 
_cQuery += "          AD1.AD1_DATA, AD1.AD1_HORA, AD1.AD1_USER, AD1.AD1_VEND, AD1.AD1_DTINI, AD1.AD1_XPAPRG, AD1.AD1_XOPRRG, "+CRLF
_cQuery += "          AD1.AD1_DTFIM, AD1.AD1_PROSPE, AD1.AD1_LOJPRO, AD1.AD1_CODCLI, AD1.AD1_LOJCLI, "+CRLF
_cQuery += "          AD1.AD1_XCLASS, AD1.AD1_STAGE, AD1.AD1_FCS, AD1.AD1_FCI, AD1.AD1_STATUS, "+CRLF 
_cQuery += "          AD1.AD1_DTPFIM, AD1.AD1_DTASSI, AD1.AD1_OBSPRO, AD1.AD1_CNTPRO, AD1.AD1_PROVEN, "+CRLF
_cQuery += "          AD1.AD1_XOPER, AD1.AD1_XREM, Substr(AD1.AD1_XOPER,16,15) As DATA_MOV "+CRLF
_cQuery += "  From "+RetSqlName("AD1")+" AD1 "+CRLF
If Mv_par05 == 2 	//-- Considera PF / 1=sim;2=nao ?
	_cQuery += "  INNER JOIN "+ RetSqlName("SA1") +" SA1 ON A1_FILIAL = '"+ FwxFilial("SA1") +"' AND A1_COD = AD1_CODCLI AND A1_LOJA = AD1_LOJCLI AND A1_PESSOA = 'J' AND  SA1.D_E_L_E_T_ = ' ' "+CRLF
EndIf
_cQuery += "  Where AD1.D_E_L_E_T_ = ' ' "+CRLF 
If Mv_par01 == 1 		//-- Somente a CASA ATUAL ?
	_cQuery += "  And Substr(AD1.AD1_FILIAL,1,4) = '"+Substr(FwxFilial("AD1"),1,4)+"' "+CRLF
Endif 
If mv_par02 == 2 //-- Considera prospect / 1=sim;2=nao ?
	_cQuery += " And AD1.AD1_CODCLI <> ' ' "+CRLF  
EndIf
_cQuery += "  And Substr(AD1.AD1_XOPER,1,15) <> '               ' "+CRLF
_cQuery += "  And Substr(AD1.AD1_XOPER,16,15) > Substr(AD1.AD1_XREM,16,15) "+CRLF 
If .Not. Empty(Mv_par03) .And. .Not. Empty(Mv_par04)
	_cQuery += "  And AD1_DATA >= '"+ DtoS(Mv_par03) +"'	"
	_cQuery += "  And AD1_DATA <= '"+ DtoS(Mv_par04) +"'	"
EndIf
//+-----------------------------------------------------------------------+
//| ----- Consulta as Oportunidades EXCLUIDAS: NOPER == 5                 |
//+-----------------------------------------------------------------------+
_cQuery += "Union all "+CRLF
_cQuery += "  Select '5' AS OPER, AD1.AD1_FILIAL, AD1.AD1_NROPOR, AD1.AD1_REVISA, AD1.AD1_DESCRI, "+CRLF 
_cQuery += "          AD1.AD1_DATA, AD1.AD1_HORA, AD1.AD1_USER, AD1.AD1_VEND, AD1.AD1_DTINI, AD1.AD1_XPAPRG, AD1.AD1_XOPRRG, "+CRLF
_cQuery += "          AD1.AD1_DTFIM, AD1.AD1_PROSPE, AD1.AD1_LOJPRO, AD1.AD1_CODCLI, AD1.AD1_LOJCLI, "+CRLF
_cQuery += "          AD1.AD1_XCLASS, AD1.AD1_STAGE, AD1.AD1_FCS, AD1.AD1_FCI, AD1.AD1_STATUS, "+CRLF 
_cQuery += "          AD1.AD1_DTPFIM, AD1.AD1_DTASSI, AD1.AD1_OBSPRO, AD1.AD1_CNTPRO, AD1.AD1_PROVEN, "+CRLF
_cQuery += "          AD1.AD1_XOPER, AD1.AD1_XREM, Substr(AD1.AD1_XOPER,31,15) As DATA_MOV "+CRLF
_cQuery += "  From "+RetSqlName("AD1")+" AD1 "+CRLF
If Mv_par05 == 2 	//-- Considera PF / 1=sim;2=nao ?
	_cQuery += "  INNER JOIN "+ RetSqlName("SA1") +" SA1 ON A1_FILIAL = '"+ FwxFilial("SA1") +"' AND A1_COD = AD1_CODCLI AND A1_LOJA = AD1_LOJCLI AND A1_PESSOA = 'J' AND  SA1.D_E_L_E_T_ = ' ' "+CRLF
EndIf
_cQuery += "  Where AD1.D_E_L_E_T_ = '*' "+CRLF 
If Mv_par01 == 1 		//-- Somente a CASA ATUAL ?
	_cQuery += "  And Substr(AD1.AD1_FILIAL,1,4) = '"+Substr(FwxFilial("AD1"),1,4)+"' "+CRLF
Endif 
If mv_par02 == 2 //-- Considera prospect / 1=sim;2=nao ?
	_cQuery += " And AD1.AD1_CODCLI <> ' ' "+CRLF  
EndIf
_cQuery += "  And Substr(AD1.AD1_XOPER,1,15) <> '               ' "+CRLF
_cQuery += "  And Substr(AD1.AD1_XOPER,31,15) > Substr(AD1.AD1_XREM,31,15) "+CRLF
If .Not. Empty(Mv_par03) .And. .Not. Empty(Mv_par04)
	_cQuery += "  And AD1_DATA >= '"+ DtoS(Mv_par03) +"'	"
	_cQuery += "  And AD1_DATA <= '"+ DtoS(Mv_par04) +"'	"
EndIf 
_cQuery += "  Order By OPER, AD1_FILIAL, AD1_NROPOR "+CRLF
//+------------------------------------------------------------------+
//| Grava o Resultado da Query para consulta                         |
//+------------------------------------------------------------------+
MemoWrite("C:\temp\"+UPPER(_cPerg)+"_"+ProcName()+".TXT",_cQuery)
If Select("TMP_REM")>0
	TMP_REM->(DbCloseArea())
Endif
DbUseArea(.t.,"TOPCONN",TcGenQry(,,_cQuery),"TMP_REM",.t.,.t.)
//+------------------------------------------------------------------+
//| Converte os campos tipo DATA                                     |
//+------------------------------------------------------------------+
TCSETFIELD("TMP_REM", "AD1_DATA"	,"D",8,0 )
TCSETFIELD("TMP_REM", "AD1_DTINI"	,"D",8,0 ) 
TCSETFIELD("TMP_REM", "AD1_DTFIM"	,"D",8,0 )
TCSETFIELD("TMP_REM", "AD1_DTPFIM"	,"D",8,0 )
TCSETFIELD("TMP_REM", "AD1_DTASSI"	,"D",8,0 )
TMP_REM->(DbGoTop())				
If TMP_REM->(Eof()) .And. TMP_REM->(Bof()) 				
	_lReturn := .f. 
Endif 
Return	_lReturn 

/*
--------------------------------------------------------------------------------
{Protheus.doc} <xParPerg>
 Cria as perguntas.	  

@author<Antonio Dantas>
@since<13/02/2015>
@version<1.00>
@receive<Nil>
@return<Nil>
@example<Nil>
@see<Nil>
--------------------------------------------------------------------------------
*/
Static Function xParPerg()	

Local cEstat := U_SFGN001A(ProcName(0), "SF7327X")
Local _aPerg := {}
//*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*
//*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*
//   //-- MAPEAMENTOS DOS CAMPOS DE SX1
//   aAdd (_aPerg,{"X1_PERGUNT","X1_PERPA","X1_PERENG","MV_CHL","C",5,0,0,"X1_GSC","X1_VALID",;
//								"X1_VAR01",("X1_DEF01" e "X1_PYNE"),"X1_DEFSPA1","X1_DEFENG1","X1_CNT01",;
//								"X1_VAR02","X1_DEF02","X1_DEFSPA2","X1_DEFENG2","X1_CNT02",;
//								"X1_VAR03","X1_DEF03","X1_DEFSPA3","X1_DEFENG3","X1_CNT03",;
//								"X1_VAR04","X1_DEF04","X1_DEFSPA4","X1_DEFENG4","X1_CNT04",;
//								"X1_VAR05","X1_DEF05","X1_DEFSPA5","X1_DEFENG5","X1_CNT05",;
//								"X1_F3","X1_GRPSXG","","X1_HELP","X1_PICTURE",{"Descricao para Tela PTG"},{"Descricao para Tela EPA"},{"Descricao para Tela USA"}})
//*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*
//*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*
//+------------------------------------------------------------------+
//| Verifica se o operador esta logado na filail DR que tem acesso   |
//| a todas as filiais, ou somente na CASA em que esta logada.     |
//+------------------------------------------------------------------+
//-- Mv_par01 =     Somente a CASA ATUAL ?
aAdd(_aPerg, {"Somente a CASA ATUAL ?","Somente a CASA ATUAL ?","Somente a CASA ATUAL ?","MV_CH1","N",1,0,1,"C",,;
					"MV_PAR01","Sim","Sim","Sim","",;
					"","Não","Não","Não","",;
					"","","","","",;
					"","","","","",;
					"","","","","",;
					"","","","","",{"Se [SIM]Considera Somente a CASA ATUAL."},{"Se [SIM]Considera Somente a CASA ATUAL."},{"Se [SIM]Considera Somente a CASA ATUAL."}})
//-- Mv_par02 =     Considera Prospect ?
aAdd(_aPerg, {"Considera Prospect ?","Considera Prospect ?","Considera Prospect ?","MV_CH2","N",1,0,1,"C",,;
					"MV_PAR02","Sim","Sim","Sim","",;
					"","Não","Não","Não","",;
					"","","","","",;
					"","","","","",;
					"","","","","",;
					"","","","","",{"Se [SIM]Considera Prospect."},{"Se [SIM]Considera Prospect."},{"Se [SIM]Considera Prospect."}})
//-- Mv_par03 =     Data Inicial ?
aAdd(_aPerg, {"Data Inicial ?","Data Inicial ?","Data Inicial ?","MV_CH3","D",8,0,1,"C",,;
					"MV_PAR03","","","","",;
					"","","","","",;
					"","","","","",;
					"","","","","",;
					"","","","","",;
					"","","","","",{"Data inicial a considerar"},{"Data inicial a considerar"},{"Data inicial a considerar"}})
//-- Mv_par04 =     Data Final ?
aAdd(_aPerg, {"Data Final ?","Data Final ?","Data Final ?","MV_CH4","D",8,0,1,"C",,;
					"MV_PAR04","","","","",;
					"","","","","",;
					"","","","","",;
					"","","","","",;
					"","","","","",;
					"","","","","",{"Data final a considerar"},{"Data final a considerar"},{"Data final a considerar"}})
//-- Mv_par05 =     Considera Pessoa Fisica ?
aAdd(_aPerg, {"Considera Pessoa Fisica?","Considera Pessoa Fisica?","Considera Pessoa Fisica?","MV_CH5","N",1,0,1,"C",,;
					"MV_PAR05","Sim","Sim","Sim","",;
					"","Não","Não","Não","",;
					"","","","","",;
					"","","","","",;
					"","","","","",;
					"","","","","",{"Se [SIM]Considera Pessoa Fisica."},{"Se [SIM]Considera Pessoa Fisica."},{"Se [SIM]Considera Prospect."}})
//-- 
u_SFAJUSX1(_cPerg,_aPerg) 
Return 



/*
--------------------------------------------------------------------------------
{Protheus.doc} <fGetVrOp>
 Devolve o VALOR TOTAL da Oportunidade, obdesendo a seguintes Regras:
 - Se houver produtos definidos para a Oportunidade, calcula o valor 
   de acordo com os produtos indicados nesta [];
 - Se houver PROPOSTA ofertadas para oportunidade, considera o valor 
   total da ultima PROPOSTA oferdada e valida.    

@author<Antonio Dantas>
@since<26/01/2016>
@version<1.00>
@receive
<   _cFilial (c) - Filial de Origem do Reguistro 
    _cNrOpor (c) - Codigo da Oportunidade 
   _cRevOPOR (c) - Revisao da Oportundade 
>
@return
<    _nVlrTot (n) - Valor total Apurado 
>
@example<Nil>
@see<Nil>
--------------------------------------------------------------------------------
*/
Static Function fGetVrOp(_cFilial,_cNrOpor,_cRevOpor)

Local cEstat := U_SFGN001A(ProcName(0), "SF7327X")
Local _aSaveArea	:= GetArea()
Local _nVlrTot		:= 0.00  
Local _cQuery 		:= ""
//-- 
Local _cProposta	:= ""
Local _cRevProp		:= ""
Local _lTem_ADY		:= .F.  
//+------------------------------------------------------------------+
//| ---                                                          --- |
//| --- Efetua consulta na TABELA [ADJ-Produtos da Oportunidade] --- |
//| ---                                                          --- |
//+------------------------------------------------------------------+
_cQuery := ""
_cQuery += "Select Sum(ADJ.ADJ_VALOR) TOTAL "+CRLF
_cQuery += "From "+RetSqlName("ADJ")+" ADJ "+CRLF
_cQuery += "Where ADJ.D_E_L_E_T_ = ' ' "+CRLF
_cQuery += "And ADJ.ADJ_FILIAL = '"+_cFilial+"' "+CRLF
_cQuery += "And ADJ.ADJ_NROPOR = '"+_cNrOpor+"' "+CRLF
_cQuery += "And ADJ.ADJ_REVISA = '"+_cRevOpor+"' "+CRLF
_cQuery += "And ADJ.ADJ_PROPOS = '      ' "+CRLF
//+------------------------------------------------------------------+
//| Grava o Resultado da Query para consulta                         |
//+------------------------------------------------------------------+
//&&--  MemoWrite("C:\temp\"+FunName()+"_"+ProcName()+"_TMPADJ"+".TXT",_cQuery)
If Select("TMPADJ")>0
	TMPADJ->(DbCloseArea())
Endif
DbUseArea(.t.,"TOPCONN",TcGenQry(,,_cQuery),"TMPADJ",.t.,.t.)
//+------------------------------------------------------------------+
//| Converte os campos tipo DATA                                     |
//+------------------------------------------------------------------+
TMPADJ->(DbGoTop())				
If TMPADJ->(!Eof()) .And. TMPADJ->(!Bof()) 				
	_nVlrTot := TMPADJ->TOTAL 
Endif 
//-- Fecha o arquivo temporario
If Select("TMPADJ")>0
	TMPADJ->(DbCloseArea())
Endif
//+------------------------------------------------------------------+
//| ---                                                          --- |
//| --- Efetua consulta na TABELA [ADY-PROPOSTAS], pega a ultima --- |
//| --- proposta ou a proposta vencedora.                        --- |
//| ---                                                          --- |
//+------------------------------------------------------------------+
_cQuery := ""
_cQuery += "Select MAX(ADY.ADY_PROPOS) PROPOSTA, MAX(ADY.ADY_PREVIS) REVISAO "+CRLF
_cQuery += "From "+RetSqlName("ADY")+" ADY  "+CRLF
_cQuery += "where ADY.D_E_L_E_T_ = ' '  "+CRLF
_cQuery += "And ADY.ADY_FILIAL = '"+_cFilial+"' "+CRLF
_cQuery += "And ADY.ADY_OPORTU = '"+_cNrOpor+"' "+CRLF
_cQuery += "And ADY.ADY_REVISA = '"+_cRevOpor+"' "+CRLF
_cQuery += "And (ADY.ADY_STATUS = 'E' Or ADY.ADY_STATUS <> 'C')  "+CRLF
//+------------------------------------------------------------------+
//| Grava o Resultado da Query para consulta                         |
//+------------------------------------------------------------------+
//&&--  MemoWrite("C:\temp\"+FunName()+"_"+ProcName()+"_TMPADY"+".TXT",_cQuery)
If Select("TMPADY")>0
	TMPADY->(DbCloseArea())
Endif
DbUseArea(.t.,"TOPCONN",TcGenQry(,,_cQuery),"TMPADY",.t.,.t.)
//+------------------------------------------------------------------+
//| Converte os campos tipo DATA                                     |
//+------------------------------------------------------------------+
TMPADY->(DbGoTop())				
_lTem_ADY	:= .f.  
If TMPADY->(!Eof()) .And. TMPADY->(!Bof()) 				
	_cProposta	:= TMPADY->PROPOSTA
	_cRevProp	:= TMPADY->REVISAO
	_lTem_ADY	:= .t.  
Endif 
//-- Fecha o arquivo temporario
If Select("TMPADY")>0
	TMPADY->(DbCloseArea())
Endif
If _lTem_ADY
	_cQuery := ""
	_cQuery += "Select sum(ADZ.ADZ_TOTAL) TOTAL"+CRLF
	_cQuery += "From "+RetSqlName("ADZ")+"  ADZ "+CRLF
	_cQuery += "Where ADZ.D_E_l_E_T_ = ' ' "+CRLF
	_cQuery += "And ADZ.ADZ_FILIAL = '"+_cFilial+"' "+CRLF
	_cQuery += "And ADZ.ADZ_PROPOS = '"+_cProposta+"' "+CRLF
	_cQuery += "And ADZ.ADZ_REVISA = '"+_cRevProp+"' "+CRLF
	//+------------------------------------------------------------------+
	//| Grava o Resultado da Query para consulta                         |
	//+------------------------------------------------------------------+
//&&--  	MemoWrite("C:\temp\"+FunName()+"_"+ProcName()+"_TMPADZ"+".TXT",_cQuery)
	If Select("TMPADZ")>0
		TMPADZ->(DbCloseArea())
	Endif
	DbUseArea(.t.,"TOPCONN",TcGenQry(,,_cQuery),"TMPADZ",.t.,.t.)
	//+------------------------------------------------------------------+
	//| Converte os campos tipo DATA                                     |
	//+------------------------------------------------------------------+
	TMPADZ->(DbGoTop())				
	If TMPADZ->(!Eof()) .And. TMPADZ->(!Bof()) 				
		_nVlrTot := TMPADZ->TOTAL 
	Endif 
	//-- Fecha o arquivo temporario
	If Select("TMPADZ")>0
		TMPADZ->(DbCloseArea())
	Endif
Endif 
RestArea(_aSaveArea)
Return _nVlrTot