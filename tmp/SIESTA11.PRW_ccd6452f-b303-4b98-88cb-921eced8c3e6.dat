#Include "Protheus.ch"
#Include "TopConn.ch"

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³SIESTA11  ºAutor  ³Felipe Alves        º Data ³  16/01/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Interface de transferencia de estoques                     º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ P11 - SISTEMA INDUSTRIA                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

User Function SIESTA11()
Local lRet    := .T.
Local oDlg
Local oGet
Local cFilDes := Space(8)

Define MsDialog oDlg Title "Transferência de Produtos Entre Filiais em Lote" From 3, 0 To 145, 530 Pixel

@ 005, 005 Say "Esta rotina tem o objetivo de Listar o saldos totalizados por produto das Pré-Requisições com saldo total" + CRLF + ;
"ou parcial, para realização da Transferência entre filiais em escala. Para correta utilização desta rotina é" Pixel Of oDlg
@ 020, 005 Say "necessário que o usuário esteja 'logado' na Filial ORIGEM(Filial que fornecerá os produtos do estoque" + CRLF + ;
"para transferência para a unidade solicitante)" Pixel Of oDlg

@ 040, 050 Say "Selecione a Filial (Unidade) de destino: " Pixel Of oDlg
@ 050, 050 MsGet oGet Var cFilDes Size 80, 10 F3 "SM0FIL" VALID FilDiff(cFilDes) Of oDlg Pixel

Define SButton From 060, 225 Type 1 Action {|| lRet := TRSF002(cFilDes, @oDlg)} Enable Of oDlg Pixel
Define SButton From 060, 195 Type 2 Action oDlg:End() Enable Of oDlg Pixel

Activate MsDialog oDlg Center
Return(lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³SIESTA11   ºAutor  ³Felipe Alves        º Data ³  16/01/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function TRSF002(cFilDes, oDlg)
Local aArea           := GetArea()
Local lRet            := .T.
Local oDlg2
Local oOri
Local cFilOri         := Space(8)
Local oDes
Local oTrans
Local cTrans          := GetSXENum("ZAF", "ZAF_TRANSF")
Local oDCAC
Local cDCAC           := Space(15)
Local aDCAC           := {"1=Classificado"}//, "2=A Classificar"}
Local oTESE
Local cTESE           := Space(3)
Local oTESS
Local cTESS           := Space(3)
Local oPV
Local cPV             := Space(30)
Local aPV             := {"1=Custo Unitário Médio", "2=Último Preço de Compra", "3=Custo Standard", "4=Tabela de Preço"}
Local oDocE
Local cDocE           := Space(20)
Local aDocE           := {}
Local cQuery          := ""
Local cTab            := ""
Local aGetAlt         := {}
Local aHeader         := {}
Local aSize           := MsAdvSize()
Local aButtons        := {}
Local lHab            := .T.
Local oCond
Local cCond           := Space(3)
Local oDesCond
Local cDesCond        := ""
Local aCols           := {}

Private oDados

Set Key VK_F4 TO MT010F4()

DbSelectArea("SM0")
cFilOri               := cFilAnt

cQuery                := "SELECT" + CRLF
cQuery                += "X5_CHAVE" + CRLF
cQuery                += "FROM " + RetSQLName("SX5") + "" + CRLF
cQuery                += "WHERE X5_FILIAL = '" + xFilial("SX5") + "'" + CRLF
cQuery                += "AND X5_TABELA = '42'" + CRLF
cQuery                += "AND D_E_L_E_T_ = ''"

cQuery                := ChangeQuery(cQuery)

cTab                  := GetNextAlias()

TcQUERY cQuery NEW ALIAS ((cTab))

DbSelectArea((cTab))
(cTab)->(DbGoTop())

While ((cTab)->(!Eof()))
	aAdd(aDocE, (cTab)->(X5_CHAVE))
	
	(cTab)->(DbSkip())
Enddo

(cTab)->(DbCloseArea())

aAdd(aHeader, {'Transf.?'          , 'CHKMRK'    , '@BMP'                       , 2                       , 0                      , /* Valid */, /* Usado */, 'C'                     , /* F3 */, 'V', /*ComboBox */, /*Relacao*/, /*F46WHEN()*/, /* Visual */, /* Vld User */, /* PictVar */, /* Obrigatorio */})
aAdd(aHeader, {'Produto'           , 'CP_PRODUTO', PesqPict('SCP', 'CP_PRODUTO'), TamSX3('CP_PRODUTO')[1], TamSX3('CP_PRODUTO')[2], /* Valid */, /* Usado */, TamSX3('CP_PRODUTO')[3], /* F3 */, 'R', /*ComboBox */, /*Relacao*/, /*F46WHEN()*/, /* Visual */, /* Vld User */, /* PictVar */, /* Obrigatorio */})
aAdd(aHeader, {'Desc. Prod.'       , 'B1_DESC'   , PesqPict('SB1', 'B1_DESC')   , TamSX3('B1_DESC')[1]   , TamSX3('B1_DESC')[2]   , /* Valid */, /* Usado */, TamSX3('B1_DESC')[3]   , /* F3 */, 'R', /*ComboBox */, /*Relacao*/, /*F46WHEN()*/, /* Visual */, /* Vld User */, /* PictVar */, /* Obrigatorio */})
aAdd(aHeader, {'Saldo Pré-Req.'    , 'CP_QUANT'  , PesqPict('SCP', 'CP_QUANT')  , TamSX3('CP_QUANT')[1]  , TamSX3('CP_QUANT')[2]  , /* Valid */, /* Usado */, TamSX3('CP_QUANT')[3]  , /* F3 */, 'R', /*ComboBox */, /*Relacao*/, /*F46WHEN()*/, /* Visual */, /* Vld User */, /* PictVar */, /* Obrigatorio */})
aAdd(aHeader, {'Local.'            , 'B2_LOCAL'  , PesqPict('SB2', 'B2_LOCAL')  , TamSX3('B2_LOCAL')[1]  , TamSX3('B2_LOCAL')[2]  , /* Valid */, /* Usado */, TamSX3('B2_LOCAL')[3]  , /* F3 */, 'R', /*ComboBox */, /*Relacao*/, /*F46WHEN()*/, /* Visual */, /* Vld User */, /* PictVar */, /* Obrigatorio */})
aAdd(aHeader, {'Saldo em Estoque'  , 'B2_QATU'   , PesqPict('SB2', 'B2_QATU')   , TamSX3('B2_QATU')[1]   , TamSX3('B2_QATU')[2]   , /* Valid */, /* Usado */, TamSX3('B2_QATU')[3]   , /* F3 */, 'R', /*ComboBox */, /*Relacao*/, /*F46WHEN()*/, /* Visual */, /* Vld User */, /* PictVar */, /* Obrigatorio */})
aAdd(aHeader, {'Local..'           , 'B2_LOCAL'  , PesqPict('SB2', 'B2_LOCAL')  , TamSX3('B2_LOCAL')[1]  , TamSX3('B2_LOCAL')[2]  , /* Valid */, /* Usado */, TamSX3('B2_LOCAL')[3]  , /* F3 */, 'R', /*ComboBox */, /*Relacao*/, /*F46WHEN()*/, /* Visual */, /* Vld User */, /* PictVar */, /* Obrigatorio */})
aAdd(aHeader, {'Qtde. a Transferir', 'CP_QUJE'   , PesqPict('SCP', 'CP_QUANT')  , TamSX3('CP_QUANT')[1]  , TamSX3('CP_QUANT')[2]  , "U_VldQtd(aCols, M->CP_QUJE, 1, 0)", /* Usado */, TamSX3('CP_QUANT')[3]  , /* F3 */, 'R', /*ComboBox */, /*Relacao*/, /*F46WHEN()*/, /* Visual */, /* Vld User */, /* PictVar */, /* Obrigatorio */})
aAdd(aHeader, {'Local...'          , 'CP_LOCAL'  , PesqPict('SCP', 'CP_LOCAL')  , TamSX3('CP_LOCAL')[1]  , TamSX3('CP_LOCAL')[2]  , /* Valid */, /* Usado */, TamSX3('CP_LOCAL')[3]  , /* F3 */, 'R', /*ComboBox */, /*Relacao*/, /*F46WHEN()*/, /* Visual */, /* Vld User */, /* PictVar */, /* Obrigatorio */})
//aAdd(aHeader, {'Local...'          , 'CP_LOCAL'  , PesqPict('SCP', 'CP_LOCAL')  , TamSX3('CP_LOCAL')[1]  , TamSX3('CP_LOCAL')[2]  , "U_VldQtd(aCols, oDados:aCols[oDados:oBrowse:nAt, 8], 2, oDados:oBrowse:nAt)", /* Usado */, TamSX3('CP_LOCAL')[3]  , /* F3 */, 'R', /*ComboBox */, /*Relacao*/, /*F46WHEN()*/, /* Visual */, /* Vld User */, /* PictVar */, /* Obrigatorio */})

cFilAnt               := cFilDes

cQuery                := "SELECT" + CRLF
cQuery                += "T0.CP_PRODUTO," + CRLF
//cQuery                += "T0.CP_DESCRI," + CRLF
cQuery                += "SUM(T0.CP_QUANT - T0.CP_QUJE) AS CP_QUANT," + CRLF
cQuery                += "T0.CP_LOCAL," + CRLF
cQuery                += "T1.B2_QATU," + CRLF
cQuery                += "0 AS CP_QUJE" + CRLF
cQuery                += "FROM " + RetSQLName("SCP") + " T0" + CRLF
cQuery                += "INNER JOIN " + RetSQLName("SB2") + " T1 ON ((T1.B2_COD = T0.CP_PRODUTO) AND (T1.B2_LOCAL = T0.CP_LOCAL))" + CRLF
cQuery                += "WHERE T0.CP_FILIAL = '" + xFilial("SCP") + "'" + CRLF
cQuery                += "AND T0.CP_PREREQU = 'S'" + CRLF
cQuery                += "AND T0.CP_QUJE < T0.CP_QUANT" + CRLF
cQuery                += "AND T0.CP_STATUS = ''" + CRLF
cQuery                += "AND T0.D_E_L_E_T_ = ''" + CRLF
cQuery                += "AND T1.B2_FILIAL = '" + xFilial("SB2") + "'" + CRLF
cQuery                += "AND T1.D_E_L_E_T_ = ''" + CRLF
//cQuery                += "GROUP BY T0.CP_PRODUTO, T0.CP_DESCRI, T0.CP_LOCAL, T1.B2_QATU"
cQuery                += "GROUP BY T0.CP_PRODUTO, T0.CP_LOCAL, T1.B2_QATU"

cQuery                := ChangeQuery(cQuery)

cTab                  := GetNextAlias()

TcQUERY cQuery NEW ALIAS ((cTab))

DbSelectArea((cTab))
(cTab)->(DbGoTop())

While ((cTab)->(!Eof()))
	aAdd(aCols, {"LBNO", (cTab)->(CP_PRODUTO), Posicione("SB1", 1, xFilial("SB1") + (cTab)->(CP_PRODUTO), "B1_DESC"), (cTab)->(CP_QUANT), (cTab)->(CP_LOCAL), ;
	(cTab)->(B2_QATU), (cTab)->(CP_LOCAL), (cTab)->(CP_QUJE), (cTab)->(CP_LOCAL), .F.})
	
	(cTab)->(DbSkip())
Enddo

(cTab)->(DbCloseArea())

cFilAnt               := cFilOri

If (Len(aCols) <= 0)
	Aviso("Transferência de Estoque Entre Filiais", "Nenhum registro encontrado.", {"Ok"}, 3)
	Return(.F.)
Endif   

If Substr(cFilOri,1,2) <> Substr(cFilDes,1,2)

	cTESS := GetMv("MV_XTESTEE")
	cTESE := GetMv("MV_XTESTSE")  
	
Else 

	cTESS := GetMv("MV_XTESTEF")
	cTESE := GetMv("MV_XTESTSF")   
	
EndIf

//Condicao de Pagamento
cCond:='007' 
cDesCond:= 'A Vista'

//Especie de Documento de Entrada
cDocE:= 'NFE'

Define MsDialog oDlg2 Title "Transferência Entre Filiais em Lote" From 3, 0 To 450, 960 Pixel

@ 005, 005 Say "Origem: " Pixel Of oDlg2
@ 015, 030 MsGet oOri Var cFilOri When !(lHab) Size 80, 10 Of oDlg2 Pixel

@ 030, 005 Say "Destino: " Pixel Of oDlg2
@ 040, 030 MsGet oDes Var cFilDes When !(lHab) Size 80, 10 Of oDlg2 Pixel

@ 005, 125 Say "Transf.: " Pixel Of oDlg2
@ 015, 150 MsGet oTrans Var cTrans When !(lHab) Size 80, 10 Of oDlg2 Pixel

@ 030, 125 Say "Doc. Class./ A Class.: " Pixel Of oDlg2
@ 040, 150 MsComboBox oDCAC Var cDCAC ITEMS aDCAC When !(lHab) Size 80, 10 Of oDlg2 Pixel

@ 005, 245 Say "TES Saída: " Pixel Of oDlg2
@ 015, 270 MsGet oTESE Var cTESE /*F3 "SF4"*/ When !(lHab) VALID MaAvalTes("S", cTESE) Size 80, 10 Of oDlg2 Pixel

@ 030, 245 Say "TES Entrada: " Pixel Of oDlg2
@ 040, 270 MsGet oTESS Var cTESS /*F3 "SF4"*/ When !(lHab) VALID MaAvalTes("E", cTESS) Size 80, 10 Of oDlg2 Pixel

@ 005, 365 Say "Considera Preço PV? " Pixel Of oDlg2
@ 015, 390 MsComboBox oPV Var cPV ITEMS aPV When (lHab) Size 80, 10 Of oDlg2 Pixel

@ 030, 365 Say "Espécie Doc. Entrada? " Pixel Of oDlg2
@ 040, 390 MsComboBox oDocE Var cDocE ITEMS aDocE When !(lHab) Size 80, 10 Of oDlg2 Pixel

@ 055, 005 Say "Cond. Pagto.: " Pixel Of oDlg2
@ 065, 030 MsGet oCond Var cCond /*F3 "SE4"*/ When !(lHab) Valid DesCond(cCond, @oDesCond, @cDesCond) Size 20, 10 Of oDlg2 Pixel
@ 065, 065 MsGet oDesCond Var cDesCond When !(lHab) Size 45, 10 Of oDlg2 Pixel//Say oDesCond Var cDesCond Pixel Of oDlg2

aAdd(aGetAlt, 'CHKMRK')
aAdd(aGetAlt, 'CP_QUJE')
aAdd(aGetAlt, 'CP_LOCAL')

oDados                := MsNewGetDados():New(85, 5, 200, 470, GD_UPDATE, , , , aGetAlt, 0, , , , , oDlg2, aHeader, aCols)
oDados:AddAction('CHKMRK', {|| SelecLin(oDados:oBrowse, aCols)})

Activate MsDialog oDlg2 Center On Init EnchoiceBar(oDlg2, {|| ConfirmSX8(), MsgRun("Realizando transferências, aguarde...", "Transferência de Estoque Entre Filiais", {|| CursorWait(), TRSF003(cFilOri, oDados:aCols, cPV, cFilDes, cTESE, cFilDes, cDocE, cTESS, cDCAC, cTrans, cCond, @oDlg2), CursorArrow()})}, {|| lRet := .T., oDlg2:End()}, , aButtons)

If (lRet)
	oDlg:End()
Endif

RestArea(aArea)
Return(lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³SIESTA11   ºAutor  ³Felipe Alves        º Data ³  16/01/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function SelecLin(oDds, aCls)
Local aArea                          := GetArea()
Local lRet                           := .T.

oDados:aCols[oDados:oBrowse:nAt, 1] := Iif(oDados:aCols[oDados:oBrowse:nAt, 1] == "LBNO", "LBOK", "LBNO")

oDds:Refresh()

RestArea(aArea)
Return(lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³SIESTA11   ºAutor  ³Felipe Alves        º Data ³  16/01/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function TRSF003(cFilOri, aCols, cPV, cFilDes, cTESS, cFilDes, cDocE, cTESE, cDCAC, cTrans, cCond, oDlg2)
Local aArea                := GetArea()
Local lRet                 := .T.
Local aCabSC5              := {}
Local aLinSC6              := {}
Local aItemSC6             := {}
Local nI                   := 0
Local nX                   := 1
Local cNumPed              := ""
Local cQuery               := ""
Local cTab                 := ""
Local nValor               := 0
Local cCGCCli              := ""
Local cUm                  := ""
Local cCodCli              := ""
Local cLojaCli             := ""
Local cTipoCli             := ""
Local cCondPag             := cCond
Local cNaturez             := ""
Local lGeraSC5             := .F.
Local aNotas               := {}
Local cSerie               := GetMV("SI_TRFSER", , "")
Local lCredito	         := .T.
Local lEstoque	         := .T.
Local lAvCred	             := .F.
Local lAvEst	             := .F.
Local lLiber	             := .T.
Local lTransf              := .F.
Local cCGCFor              := ""
Local cCodFor              := ""
Local cLojaFor             := ""
Local cNota                := ""
Local aCabSF1              := {}
Local aLinSD1              := {}
Local aItemSD1             := {}
Local cCondFor             := cCond

Private lMsErroAuto        := .F.

If (Empty(cSerie))
	Aviso("Parâmetro", "Parâmetro 'SI_TRFSER' não está preenchido.", {"OK"}, 3)
	Return(.F.)
Endif

Begin Transaction

cNumPed                    := GetSXENum("SC5", "C5_NUM")
ConfirmSX8()

DbSelectArea("SM0")
SM0->(DbGoTop())

While (SM0->(!Eof()))
	If (AllTrim(SM0->M0_CODFIL) == AllTrim(cFilDes))
		cCGCCli                := SM0->M0_CGC
	Endif
	
	SM0->(DbSkip())
Enddo

DbSelectArea("SM0")
SM0->(DbGoTop())

While (SM0->(!Eof()))
	If (AllTrim(SM0->M0_CODFIL) == AllTrim(cFilOri))
		cCGCFor          := SM0->M0_CGC
	Endif
	
	SM0->(DbSkip())
Enddo

cQuery               := "SELECT" + CRLF
cQuery               += "A2_COD," + CRLF
cQuery               += "A2_LOJA," + CRLF
cQuery               += "A2_COND" + CRLF
cQuery               += "FROM " + RetSQLName("SA2") + "" + CRLF
cQuery               += "WHERE A2_FILIAL = '" + xFilial("SA2") + "'" + CRLF
cQuery               += "AND A2_CGC = '" + cCGCFor + "'" + CRLF
cQuery               += "AND D_E_L_E_T_ = ''"

cQuery               := ChangeQuery(cQuery)

cTab                 := GetNextAlias()

TcQUERY cQuery NEW ALIAS ((cTab))

DbSelectArea((cTab))
(cTab)->(DbGoTop())

While ((cTab)->(!Eof()))
	cCodFor            := (cTab)->(A2_COD)
	cLojaFor           := (cTab)->(A2_LOJA)
	
	(cTab)->(DbSkip())
Enddo

(cTab)->(DbCloseArea())

If ((Empty(cCodFor)) .Or. (Empty(cLojaFor)))
	Aviso("Transferência de Estoque Entre Filiais", "Por favor, verifique o Cadastro de Fornecedores.", {"Ok"}, 3)
	Return(.F.)
Endif

For nI := 1 To Len(aCols)
	If (aCols[nI, 1] == "LBOK")
		If !(U_VldQtd(aCols, aCols[nI, 8], 2, nI))
			Aviso("Transferência de Estoque Entre Filiais", "Por favor, verifique o saldo em estoque do produto " + aCols[nI, 2] + " no local " + aCols[nI, 9] + ".", {"Ok"}, 3)
			DisarmTransaction()
			Return(.F.)
		Endif
		
		lGeraSC5               := .T.
		
		aAdd(aLinSC6, {"C6_FILIAL", cFilOri, Nil})
		aAdd(aLinSC6, {"C6_ITEM", StrZero(nX, 2), Nil})
		aAdd(aLinSC6, {"C6_NUM", cNumPed, Nil})
		aAdd(aLinSC6, {"C6_PRODUTO", aCols[nI, 2], Nil})
		aAdd(aLinSC6, {"C6_QTDVEN", aCols[nI, 8], Nil})
		
		nValor                 := 0
		
		If (cPV == "1")
			cQuery               := "SELECT" + CRLF
			cQuery               += "B2_CM1" + CRLF
			cQuery               += "FROM " + RetSQLName("SB2") + "" + CRLF
			cQuery               += "WHERE B2_FILIAL = '" + xFilial("SB2") + "'" + CRLF
			cQuery               += "AND B2_COD = '" + aCols[nI, 2] + "'" + CRLF
			cQuery               += "AND B2_LOCAL = '" + aCols[nI, 9] + "'" + CRLF
			cQuery               += "AND D_E_L_E_T_ = ''"
			
			cQuery               := ChangeQuery(cQuery)
			
			cTab                 := GetNextAlias()
			
			TcQUERY cQuery NEW ALIAS ((cTab))
			
			DbSelectArea((cTab))
			(cTab)->(DbGoTop())
			
			While ((cTab)->(!Eof()))
				nValor             := (cTab)->(B2_CM1)
				
				(cTab)->(DbSkip())
			Enddo
			
			(cTab)->(DbCloseArea())
		Elseif (cPV == "2")
			cQuery               := "SELECT" + CRLF
			cQuery               += "BZ_UPRC" + CRLF
			cQuery               += "FROM " + RetSQLName("SBZ") + "" + CRLF
			cQuery               += "WHERE BZ_FILIAL = '" + xFilial("SBZ") + "'" + CRLF
			cQuery               += "AND BZ_COD = '" + aCols[nI, 2] + "'" + CRLF
			cQuery               += "AND D_E_L_E_T_ = ''"
			
			cQuery               := ChangeQuery(cQuery)
			
			cTab                 := GetNextAlias()
			
			TcQUERY cQuery NEW ALIAS ((cTab))
			
			DbSelectArea((cTab))
			(cTab)->(DbGoTop())
			
			While ((cTab)->(!Eof()))
				nValor             := (cTab)->(BZ_UPRC)
				
				(cTab)->(DbSkip())
			Enddo
			
			(cTab)->(DbCloseArea())
			
			If (nValor == 0)
				cQuery             := "SELECT" + CRLF
				cQuery             += "B1_UPRC" + CRLF
				cQuery             += "FROM " + RetSQLName("SB1") + "" + CRLF
				cQuery             += "WHERE B1_FILIAL = '" + xFilial("SB1") + "'" + CRLF
				cQuery             += "AND B1_COD = '" + aCols[nI, 2] + "'" + CRLF
				cQuery             += "AND D_E_L_E_T_ = ''"
				
				cQuery             := ChangeQuery(cQuery)
				
				cTab               := GetNextAlias()
				
				TcQUERY cQuery NEW ALIAS ((cTab))
				
				DbSelectArea((cTab))
				(cTab)->(DbGoTop())
				
				While ((cTab)->(!Eof()))
					nValor           := (cTab)->(B1_UPRC)
					
					(cTab)->(DbSkip())
				Enddo
				
				(cTab)->(DbCloseArea())
			Endif
		Elseif (cPV == "3")
			cQuery               := "SELECT" + CRLF
			cQuery               += "BZ_CUSTD" + CRLF
			cQuery               += "FROM " + RetSQLName("SBZ") + "" + CRLF
			cQuery               += "WHERE BZ_FILIAL = '" + xFilial("SBZ") + "'" + CRLF
			cQuery               += "AND BZ_COD = '" + aCols[nI, 2] + "'" + CRLF
			cQuery               += "AND D_E_L_E_T_ = ''"
			
			cQuery               := ChangeQuery(cQuery)
			
			cTab                 := GetNextAlias()
			
			TcQUERY cQuery NEW ALIAS ((cTab))
			
			DbSelectArea((cTab))
			(cTab)->(DbGoTop())
			
			While ((cTab)->(!Eof()))
				nValor             := (cTab)->(BZ_CUSTD)
				
				(cTab)->(DbSkip())
			Enddo
			
			(cTab)->(DbCloseArea())
			
			If (nValor == 0)
				cQuery             := "SELECT" + CRLF
				cQuery             += "B1_CUSTD" + CRLF
				cQuery             += "FROM " + RetSQLName("SB1") + "" + CRLF
				cQuery             += "WHERE B1_FILIAL = '" + xFilial("SB1") + "'" + CRLF
				cQuery             += "AND B1_COD = '" + aCols[nI, 2] + "'" + CRLF
				cQuery             += "AND D_E_L_E_T_ = ''"
				
				cQuery             := ChangeQuery(cQuery)
				
				cTab               := GetNextAlias()
				
				TcQUERY cQuery NEW ALIAS ((cTab))
				
				DbSelectArea((cTab))
				(cTab)->(DbGoTop())
				
				While ((cTab)->(!Eof()))
					nValor           := (cTab)->(B1_CUSTD)
					
					(cTab)->(DbSkip())
				Enddo
				
				(cTab)->(DbCloseArea())
			Endif
		Elseif (cPV == "4")
			cQuery               := "SELECT" + CRLF
			cQuery               += "T0.DA1_PRCVEN" + CRLF
			cQuery               += "FROM " + RetSQLName("DA1") + " T0" + CRLF
			cQuery               += "INNER JOIN " + RetSQLName("DA0") + " T1 ON (T1.DA0_CODTAB = T0.DA1_CODTAB)" + CRLF
			cQuery               += "WHERE T0.DA1_FILIAL = '" + xFilial("DA1") + "'" + CRLF
			cQuery               += "AND T0.DA1_CODPRO = '" + aCols[nI, 2] + "'" + CRLF
			cQuery               += "AND T0.D_E_L_E_T_ = ''" + CRLF
			cQuery               += "AND T1.DA0_FILIAL = '" + xFilial("DA0") + "'" + CRLF
			cQuery               += "AND T1.DA0_CODTAB = (SELECT" + CRLF
			cQuery               += "A1_TABELA" + CRLF
			cQuery               += "FROM " + RetSQLName("SA1") + "" + CRLF
			cQuery               += "WHERE A1_FILIAL = '" + xFilial("SA1") + "'" + CRLF
			cQuery               += "AND A1_CGC = '" + cCGCCli + "'" + CRLF
			cQuery               += "AND D_E_L_E_T_ = '')" + CRLF
			cQuery               += "AND T1.DA0_DATDE <= '" + DToS(dDataBase) + "'" + CRLF
			cQuery               += "AND T1.D_E_L_E_T_ = ''"
			
			cQuery               := ChangeQuery(cQuery)
			
			cTab                 := GetNextAlias()
			
			TcQUERY cQuery NEW ALIAS ((cTab))
			
			DbSelectArea((cTab))
			(cTab)->(DbGoTop())
			
			While ((cTab)->(!Eof()))
				nValor             := (cTab)->(DA1_PRCVEN)
				
				(cTab)->(DbSkip())
			Enddo
			
			(cTab)->(DbCloseArea())
		Endif
		aAdd(aLinSC6, {"C6_PRCVEN", nValor, Nil})
		
		cQuery                 := "SELECT" + CRLF
		cQuery                 += "B1_UM" + CRLF
		cQuery                 += "FROM " + RetSQLName("SB1") + "" + CRLF
		cQuery                 += "WHERE B1_FILIAL = '" + xFilial("SB1") + "'" + CRLF
		cQuery                 += "AND B1_COD = '" + aCols[nI, 2] + "'" + CRLF
		cQuery                 += "AND D_E_L_E_T_ = ''"
		
		cQuery                 := ChangeQuery(cQuery)
		
		cTab                   := GetNextAlias()
		
		TcQUERY cQuery NEW ALIAS ((cTab))
		
		DbSelectArea((cTab))
		(cTab)->(DbGoTop())
		
		While ((cTab)->(!Eof()))
			cUm                  := (cTab)->(B1_UM)
			
			(cTab)->(DbSkip())
		Enddo
		
		(cTab)->(DbCloseArea())
		
		aAdd(aLinSC6, {"C6_UM", cUm, Nil})
		aAdd(aLinSC6, {"C6_TES", cTESS, Nil})
		aAdd(aLinSC6, {"C6_LOCAL", aCols[nI, 9], Nil})
		aAdd(aItemSC6, aLinSC6)
		
		aLinSC6                := {}
		
		/*
		aadd(aLinha,{"D1_ITEM",Strzero(nItem,4),Nil})
		aadd(aLinha,{"D1_COD",SD2->D2_COD,Nil})
		aadd(aLinha,{"D1_QUANT",SD2->D2_QUANT,Nil})
		aadd(aLinha,{"D1_VUNIT",SD2->D2_PRCVEN,Nil})
		aadd(aLinha,{"D1_TOTAL",SD2->D2_TOTAL,Nil})
		//-- Pesquisa armazem destino
		nPosLocal := Ascan(aDadosAux,{|x| x[1]+x[2] == SD2->D2_PEDIDO+SD2->D2_ITEMPV})
		If nPosLocal > 0
		aadd(aLinha,{"D1_LOCAL"	,aDadosAux[nPosLocal,3]	,Nil})
		Else
		aadd(aLinha,{"D1_LOCAL"	,aDadosTransf[ni-1,7]	,Nil})
		EndIf
		aadd(aLinha,{"D1_GRADE",cGrade,Nil})
		aadd(aLinha,{"D1_ITEMGRD",If(cGrade=="S",Strzero(nItGrd,2)," "),Nil})
		// Checa geracao de documento
		If aParam310[14] == 2
		aadd(aLinha,{"D1_TES",aParam310[15],Nil})
		// Checa se utiliza rastreabilidade
		If Rastro(SD2->D2_COD,"L")
		aadd(aLinha,{"D1_LOTECTL",SD2->D2_LOTECTL,Nil})
		aadd(aLinha,{"D1_DTVALID",SD2->D2_DTVALID,Nil})
		EndIf
		If Rastro(SD2->D2_COD,"S")
		aadd(aLinha,{"D1_NUMLOTE",SD2->D2_NUMLOTE,Nil})
		aadd(aLinha,{"D1_DTVALID",SD2->D2_DTVALID,Nil})
		EndIf
		EndIf
		aadd(aItens,aLinha)
		*/
		//aAdd(aLinSD1, {"D1_ITEM"  , "0001"                 , Nil})
		aAdd(aLinSD1, {"D1_COD"  , aCols[nI, 2]                 , Nil})
		aAdd(aLinSD1, {"D1_QUANT", aCols[nI, 8]                 , Nil})
		aAdd(aLinSD1, {"D1_VUNIT", nValor                       , Nil})
		aAdd(aLinSD1, {"D1_TOTAL", (aCols[nI, 8] * nValor)     , Nil})
		//If (cDCAC == "1")
		aAdd(aLinSD1, {"D1_TES", cTESE                        , Nil})
		//Endif
		aAdd(aLinSD1, {"D1_UM"   , cUm                          , Nil})
		aAdd(aLinSD1, {"D1_LOCAL", aCols[nI, 5]                 , Nil})
		aAdd(aLinSD1, {"D1_FORNECE", cCodFor                 , Nil})
		aAdd(aLinSD1, {"D1_LOJA", cLojaFor                 , Nil})
		aAdd(aLinSD1, {"D1_DOC", ""                 , Nil})
		aAdd(aLinSD1, {"D1_SERIE", ""                 , Nil})
		aAdd(aLinSD1, {"D1_FILIAL", cFilDes                 , Nil})
		//aAdd(aLinSD1, {"D1_STSERV", "1"                 , Nil})
		aAdd(aLinSD1, {"D1_GRADE", "N"                 , Nil})
		aAdd(aLinSD1, {"D1_ITEMGRD", " "                 , Nil})
		aadd(aLinSD1,{"D1_DTDIGIT",dDataBase,Nil})
		aAdd(aLinSD1, {"D1_TES", cTESE                        , Nil})
		
		aAdd(aItemSD1, aLinSD1)
		
		aLinSD1                := {}
		
		nX++
	Endif
Next nI

If (lGeraSC5)
	cQuery                   := "SELECT" + CRLF
	cQuery                   += "A1_COD," + CRLF
	cQuery                   += "A1_LOJA," + CRLF
	cQuery                   += "A1_TIPO," + CRLF
	cQuery                   += "A1_COND," + CRLF
	cQuery                   += "A1_NATUREZ" + CRLF
	cQuery                   += "FROM " + RetSQLName("SA1") + "" + CRLF
	cQuery                   += "WHERE A1_FILIAL = '" + xFilial("SA1") + "'" + CRLF
	cQuery                   += "AND A1_CGC = '" + cCGCCli + "'" + CRLF
	cQuery                   += "AND D_E_L_E_T_ = ''"
	
	cQuery                   := ChangeQuery(cQuery)
	
	cTab                     := GetNextAlias()
	
	TcQUERY cQuery NEW ALIAS ((cTab))
	
	DbSelectArea((cTab))
	(cTab)->(DbGoTop())
	
	While ((cTab)->(!Eof()))
		cCodCli                := (cTab)->(A1_COD)
		cLojaCli               := (cTab)->(A1_LOJA)
		cTipoCli               := (cTab)->(A1_TIPO)
		cNaturez               := (cTab)->(A1_NATUREZ)
		
		(cTab)->(DbSkip())
	Enddo
	
	(cTab)->(DbCloseArea())
	
	If ((Empty(cCodCli)) .Or. (Empty(cLojaCli)))
		Aviso("Transferência de Estoque Entre Filiais", "Por favor, verifique o Cadastro de Clientes.", {"Ok"}, 3)
		Return(.F.)
	Endif
	
	aCabSC5                  := {{"C5_FILIAL" , xFilial("SC5"), Nil} ,;
	{"C5_NUM"    , cNumPed, Nil} ,;
	{"C5_TIPO"   , "N", Nil} ,;
	{"C5_CLIENTE", cCodCli, Nil} ,;
	{"C5_LOJACLI", cLojaCli, Nil} ,;
	{"C5_TIPOCLI", cTipoCli, Nil} ,;
	{"C5_CONDPAG", cCondPag, Nil} ,;
	{"C5_NATUREZ", cNaturez, Nil} ,;
	{"C5_TPFRETE", "C", Nil} ,;
	{"C5_EMISSAO", dDataBase, Nil}}
	
	MsExecAuto({|x,y,z| MATA410(x,y,z)}, aCabSC5, aItemSC6, 3)
	
	If (lMsErroAuto)
		lRet                   := .F.
		DisarmTransaction()
		MostraErro()
	Else
		DbSelectArea("SC6")
		SC6->(DbSetOrder(1))
		SC6->(DbSeek(xFilial("SC6") + cNumPed))
		
		While ((SC6->(!Eof())) .And. (SC6->C6_FILIAL + SC6->C6_NUM == xFilial("SC6") + cNumPed))
			MaLibDoFat(SC6->(Recno()), SC6->C6_QTDVEN, @lCredito, @lEstoque, lAvCred, lAvEst, lLiber, .T.)
			DbSelectArea("SC6")
			SC6->(DbSkip())
		Enddo
		
		IncNota(cNumPed, cSerie, "", @aNotas)
		
		cNota 	             := aNotas[1][2]
		cSerie                 := aNotas[1][1]
		
		For nI := 1 To Len(aItemSD1)
			aItemSD1[nI, 10, 2] := cNota
			aItemSD1[nI, 11, 2] := cSerie
		Next nI
		
		If !(Empty(cNota))
			aAdd(aCabSF1, {"F1_FILIAL" , cFilDes  , Nil})
			aAdd(aCabSF1, {"F1_DOC"    , cNota    , Nil})
			aAdd(aCabSF1, {"F1_SERIE"  , cSerie   , Nil})
			aAdd(aCabSF1, {"F1_TIPO"   , "N"      , Nil})
			aAdd(aCabSF1, {"F1_FORNECE", cCodFor  , Nil})
			aAdd(aCabSF1, {"F1_LOJA"   , cLojaFor , Nil})
			aAdd(aCabSF1, {"F1_EMISSAO", dDataBase, Nil})
			aAdd(aCabSF1, {"F1_FORMUL" , "N"      , Nil})
			aAdd(aCabSF1, {"F1_ESPECIE", cDocE    , Nil})
			aAdd(aCabSF1, {"F1_COND"   , cCondFor , Nil})
			//aAdd(aCabSF1, {"F1_STATUS" , "A"      , Nil})
			//aadd(aCabSF1,{"F1_TIPODOC","10"})
			//	aadd(aCabSF1,{"F1_MOEDA"		,1})
			//aadd(aCabSF1,{"F1_TXMOEDA"	,1})
			
			cFilAnt              := cFilDes
			
			lMsErroAuto          := .F.
			
			If (cDCAC == "1")
				MsExecAuto({|x,y,z| MATA103(x,y,z)}, aCabSF1, aItemSD1, 3)
			Elseif (cDCAC == "2")
				MsExecAuto({|x,y,z| MATA140(x,y,z)}, aCabSF1, aItemSD1, 3)
			Endif
			
			cFilAnt              := cFilOri
			
			If (lMsErroAuto)
				lRet               := .F.
				DisarmTransaction()
				MostraErro()
			Else
				For nI := 1 To Len(aItemSD1)
					RecLock("ZAF", .T.)
					/*
					aAdd(aLinSD1, {"D1_COD"  , aCols[nI, 2]                 , Nil})
					aAdd(aLinSD1, {"D1_QUANT", aCols[nI, 8]                 , Nil})
					aAdd(aLinSD1, {"D1_VUNIT", nValor                       , Nil})
					aAdd(aLinSD1, {"D1_TOTAL", (aCols[nI, 8] * nValor)     , Nil})
					If (cDCAC == "1")
					aAdd(aLinSD1, {"D1_TES", cTESE                        , Nil})
					Endif
					aAdd(aLinSD1, {"D1_UM"   , cUm                          , Nil})
					aAdd(aLinSD1, {"D1_LOCAL", aCols[nI, 9]                 , Nil})
					aAdd(aLinSD1, {"D1_FORNECE", cCodFor                 , Nil})
					aAdd(aLinSD1, {"D1_LOJA", cLojaFor                 , Nil})
					aAdd(aLinSD1, {"D1_DOC", ""                 , Nil})
					aAdd(aLinSD1, {"D1_SERIE", ""                 , Nil})
					aAdd(aLinSD1, {"D1_FILIAL", cFilDes                 , Nil})
					//aAdd(aLinSD1, {"D1_STSERV", "1"                 , Nil})
					aAdd(aLinSD1, {"D1_GRADE", "N"                 , Nil})
					aAdd(aLinSD1, {"D1_ITEMGRD", " "                 , Nil})
					aadd(aLinSD1,{"D1_DTDIGIT",dDataBase,Nil})
					*/
					ZAF->ZAF_FILIAL   := xFilial("ZAF")
					ZAF->ZAF_TRANSF   := cTrans
					ZAF->ZAF_DATA     := dDataBase
					ZAF->ZAF_HORA     := SubStr(Time(), 1, 5)
					ZAF->ZAF_FILORI   := cFilOri
					ZAF->ZAF_FILDES   := cFilDes
					ZAF->ZAF_NFTRAN   := cNota + "/" + cSerie
					ZAF->ZAF_PRODUT   := Iif(cDCAC == "1", aItemSD1[nI, 2, 2], aItemSD1[nI, 1, 2])
					ZAF->ZAF_DESCRI   := Posicione("SB1", 1, xFilial("SB1") + Iif(cDCAC == "1", aItemSD1[nI, 2, 2], aItemSD1[nI, 1, 2]), "B1_DESC")
					ZAF->ZAF_QTDE     := Iif(cDCAC == "1", aItemSD1[nI, 3, 2], aItemSD1[nI, 2, 2])   //aItemSD1[nI, 3, 2]
					ZAF->ZAF_LOCAL    := aItemSD1[nI, 8, 2]   //aItemSD1[nI, 8, 2]
					ZAF->(MsUnlock())
					
					cFilAnt            := cFilDes
					
					cQuery             := "SELECT" + CRLF
					cQuery             += "T0.R_E_C_N_O_" + CRLF
					cQuery             += "FROM " + RetSQLName("SCQ") + " T0" + CRLF
					cQuery             += "INNER JOIN " + RetSQLName("SB2") + " T1 ON ((T1.B2_COD = T0.CQ_PRODUTO) AND (T1.B2_LOCAL = T0.CQ_LOCAL))" + CRLF
					cQuery             += "INNER JOIN " + RetSQLName("SCP") + " T2 ON ((T2.CP_NUM = T0.CQ_NUM) AND (T2.CP_ITEM = T0.CQ_ITEM) AND (T2.CP_PRODUTO = T0.CQ_PRODUTO))" + CRLF
					cQuery             += "WHERE T0.CQ_FILIAL = '" + xFilial("SCQ") + "'" + CRLF
					cQuery             += "AND T0.CQ_PRODUTO = '" + Iif(cDCAC == "1", aItemSD1[nI, 2, 2], aItemSD1[nI, 1, 2]) + "'" + CRLF
					cQuery             += "AND T0.D_E_L_E_T_ = ''" + CRLF
					cQuery             += "AND T1.B2_FILIAL = '" + xFilial("SB2") + "'" + CRLF
					cQuery             += "AND T1.D_E_L_E_T_ = ''" + CRLF
					cQuery             += "AND T2.CP_FILIAL = '" + xFilial("SCP") + "'" + CRLF
					cQuery             += "AND T2.CP_PREREQU = 'S'" + CRLF
					cQuery             += "AND T2.CP_QUJE < T2.CP_QUANT" + CRLF
					cQuery             += "AND T2.D_E_L_E_T_ = ''"
					
					cQuery             := ChangeQuery(cQuery)
					
					cTab               := GetNextAlias()
					
					TcQUERY cQuery NEW ALIAS ((cTab))
					
					DbSelectArea((cTab))
					(cTab)->(DbGoTop())
					
					While ((cTab)->(!Eof()))
						DbSelectArea("SCQ")
						SCQ->(DbGoTo((cTab)->(R_E_C_N_O_)))
						RecLock("SCQ", .F.)
						SCQ->CQ_XTRSF    := cTrans
						SCQ->(MsUnlock())
						
						(cTab)->(DbSkip())
					Enddo
					
					(cTab)->(DbCloseArea())
					
					cFilAnt            := cFilOri
				Next nI
				
				If (lRet)
					If (MsgYesNo("Deseja imprimir o relatório de Romaneio de Entrega?"))
						U_SIESTR03(cTrans, 1)
					Endif
				Endif
			Endif
		Endif
	Endif
Else
	Aviso("Transferência de Estoque Entre Filiais", "Nenhum registro encontrado.", {"Ok"}, 3)
	lRet                       := .F.
Endif

End Transaction

If (lRet)
	oDlg2:End()
Endif

RestArea(aArea)
Return(lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³SIESTA11   ºAutor  ³Felipe Alves        º Data ³  17/01/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function MT010F4()
Set Key VK_F4 TO
MaViewSB2(oDados:aCols[oDados:oBrowse:nAt, 2])
Set Key VK_F4 TO MT010F4()
Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³SIESTA11   ºAutor  ³Felipe Alves        º Data ³  21/01/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function FilDiff(cFilDes)
Local lRet := .T.

If (cFilDes == cFilAnt)
	Aviso("Erro", "Por favor, selecione uma Filial Destino diferente da Filial Original.", {"Ok"}, 3)
	lRet     := .F.
Endif
Return(lRet)

Static Function DesCond(cCond, oDesCond, cDesCond)
Local lRet := .T.
Local cDesc := ""
Local cQuery := ""
Local cTab := ""

cQuery := "SELECT" + CRLF
cQuery += "E4_DESCRI" + CRLF
cQuery += "FROM " + RetSQLName("SE4") + "" + CRLF
cQuery += "WHERE E4_FILIAL = '" + xFilial("SE4") + "'" + CRLF
cQuery += "AND E4_CODIGO = '" + cCond + "'" + CRLF
cQuery += "AND D_E_L_E_T_ = ''"

cQuery := ChangeQuery(cQuery)

cTab := GetNextAlias()

TcQUERY cQuery NEW ALIAS ((cTab))

DbSelectArea((cTab))
(cTab)->(DbGoTop())

While ((cTab)->(!Eof()))
	cDesc := (cTab)->(E4_DESCRI)
	
	(cTab)->(DbSkip())
Enddo

(cTab)->(DbCloseArea())

cDesCond := cDesc

oDesCond:Refresh()
Return(lRet)

User Function VldQtd(aCols, nQtde, nOpc, nReg)
Local aArea := GetArea()
Local lRet := .T.
Local cQuery := ""
Local cTab := ""
Local nQAtu := 0
Local nI := 0

If (nQtde != 0)
	For nI := 1 To Len(aCols)
		If ((Iif(nOpc == 1, oDados:oBrowse:nAt, nReg) != nI) .And. ;
			(Iif(nOpc == 1, aCols[oDados:oBrowse:nAt, 2], oDados:aCols[nReg, 2]) == oDados:aCols[nI, 2]) .And. ;
			(Iif(nOpc == 1, aCols[oDados:oBrowse:nAt, 9], oDados:aCols[nReg, 9]) == oDados:aCols[nI, 9]))
			nQtde += Iif(nOpc == 1, aCols[nI, 8], oDados:aCols[nI, 8])
		Endif
	Next nI
	
	cQuery := "SELECT" + CRLF
	cQuery += "B2_QATU" + CRLF
	cQuery += "FROM " + RetSQLName("SB2") + "" + CRLF
	cQuery += "WHERE B2_FILIAL = '" + xFilial("SB2") + "'" + CRLF
	cQuery += "AND B2_COD = '" + Iif(nOpc == 1, aCols[oDados:oBrowse:nAt, 2], oDados:aCols[nReg, 2]) + "'" + CRLF
	cQuery += "AND B2_LOCAL = '" + Iif(nOpc == 1, aCols[oDados:oBrowse:nAt, 9], oDados:aCols[nReg, 9]) + "'" + CRLF
	cQuery += "AND D_E_L_E_T_ = ''"
	
	cQuery := ChangeQuery(cQuery)
	
	cTab := GetNextAlias()
	
	TcQUERY cQuery NEW ALIAS ((cTab))
	
	DbSelectArea((cTab))
	(cTab)->(DbGoTop())
	
	While ((cTab)->(!Eof()))
		nQAtu := (cTab)->(B2_QATU)
		
		(cTab)->(DbSkip())
	Enddo
	
	(cTab)->(DbCloseArea())
	
	If ((nQAtu <= 0) .Or. (nQAtu < nQtde))
		Iif(nOpc == 1, Aviso("Transferência de Estoque Entre Filiais", "Por favor, confira o Saldo do Produto no Armazém selecionado.", {"Ok"}, 3), )
		lRet := .F.
	Endif
	
	If (lRet)
		For nI := 1 To Len(aCols)
			If ((Iif(nOpc == 1, oDados:oBrowse:nAt, nReg) != nI) .And. ;
				(Iif(nOpc == 1, aCols[oDados:oBrowse:nAt, 2], oDados:aCols[nReg, 2]) == oDados:aCols[nI, 2]) .And. ;
				(Iif(nOpc == 1, aCols[oDados:oBrowse:nAt, 9], oDados:aCols[nReg, 9]) == oDados:aCols[nI, 9]))
				nQtde -= Iif(nOpc == 1, aCols[nI, 8], oDados:aCols[nI, 8])
			Endif
		Next nI
		//If (nQtde > aCols[oDados:oBrowse:nAt, 4])
		If (nQtde > Iif(nOpc == 1, aCols[oDados:oBrowse:nAt, 4], oDados:aCols[nReg, 4]))
			Aviso("Transferência de Estoque Entre Filiais", "Por favor, confira a Qtde. a Transferir." + CRLF + ;
			"Qtde. a Transferir maior do que o Saldo da pré-Requisição.", {"Ok"}, 3)
			lRet := .F.
		Endif
	Endif
Endif

RestArea(aArea)
Return(lRet)
