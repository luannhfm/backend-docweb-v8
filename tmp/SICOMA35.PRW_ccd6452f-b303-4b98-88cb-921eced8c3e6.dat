#Include "Protheus.Ch"
    
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³SICOMA35  ºAutor  ³Microsiga           º Data ³  06/13/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funções Diversas utilizadas no GAP 097 Contrato            º±±
±±º          ³ Compartilhado                                              º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

//-------------------------------------------------------------------
/*/{Protheus.doc} CNIA109
Valida a linha da getdados da Solicitacao de Compras para verificar a
necessidade de informar ou nao o contrato de registro de preco		

@author Tiago Tudisco
@since 15/06/2011
@version 1.0
/*/
//-------------------------------------------------------------------

/*User Function CNIA109()

Local lRet		:= .T.

Return lRet*/

//-------------------------------------------------------------------
/*/{Protheus.doc} CNIA109v
Validacao para quando o usuario digitar o contrato no campo contrato 
de preco da getDados

@author Tiago Tudisco
@since 17/06/2011
@version 1.0
/*/
//-------------------------------------------------------------------

User Function CNIA109v()
Local lRet	:= .T.
Local nPosPrd	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_PRODUTO'})	//posicao do produto na getDados     
Local nPosCtr	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_XCONTPR'})	//posicao do Contrato Registro de Preco na getDados     
Local nPosQtd	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_QUANT'})      
Local nPosFil  	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_XCONTFI'})  
Local nPosRevis	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_XCONTRV'}) 
Local aArea		:= getArea()
Local cTMP  	:= GetNextAlias()
Local cHoje		:= Date()
Local nQuant	:= aCols[n][nPosQtd]  
Local cQuery    := ""

// inserido por Carlos Queiroz em 22/01/2013
Local aItens    := {}
Local nPosPrc   := aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_VUNIT'})  
Local nPosPl	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_XCONTPL'})   
Local nPosIt	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_XCONTIT'})   
Local nPosFor	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_FORNECE'})   
Local nPosLoj	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_LOJA'})   

Do	While .T.
	        
If !Empty(aCols[n][nPosPrd]) .And. !Empty(aCols[n][nPosQtd])

	If ExistBlock("CN109QV")
		cQuery := ExecBlock("CN109QV",.F.,.F.,{aCols[n][nPosPrd],cHoje,nQuant})
	EndIf 
	
	If (Empty(cQuery))
	   cQuery := " ORDER BY CN9.CN9_NUMERO "
	   cQuery := '%' + cQuery + '%'
	EndIf

	BeginSQL Alias cTMP    
	    
	    //%NoParser%
		SELECT CNB.CNB_SLDMED, CN9.CN9_NUMERO, CNA.CNA_FORNEC, CNB.CNB_VLUNIT, CNA.CNA_SALDO, CN9.CN9_FILIAL, CN9.CN9_REVISA, CNA.CNA_NUMERO, CNB.CNB_ITEM, CN9.CN9_DESCRI, CNA.CNA_LJFORN 
		FROM	%Table:CNB% CNB, %Table:CN9% CN9, %Table:CNA% CNA, %Table:CN1% CN1
		WHERE	CN9.CN9_FILIAL  =   %xFilial:CN9%  				AND
				CNB.CNB_FILIAL  =   %xFilial:CNB% 		   		AND
				CNA.CNA_FILIAL  =   %xFilial:CNA% 				AND
				CNB.CNB_CONTRA	=	CN9.CN9_NUMERO				AND
				CNB.CNB_REVISA	=	CN9.CN9_REVISA				AND
				CNB.CNB_CONTRA	=	CNA.CNA_CONTRA				AND
				CNB.CNB_REVISA	=	CNA.CNA_REVISA				AND
				CNB.CNB_NUMERO	=	CNA.CNA_NUMERO				AND
				CN9.CN9_TPCTO	=	CN1.CN1_CODIGO				AND
				CN1.CN1_MEDEVE	=	'1'							AND
				CN1.CN1_ESPCTR	=	'1'							AND
				CNB.CNB_PRODUT	=	%Exp:aCols[n][nPosPrd]%		AND
				CN9.CN9_DTFIM	>=	%Exp:cHoje%					AND
				CN9.CN9_SITUAC	=	'05'						AND  
				CN9.CN9_XREGP	=	'1'							AND
				CN9.CN9_NUMERO	=	%Exp:M->C1_XCONTPR%			AND
				CNB.CNB_VLUNIT * %Exp:nQuant% <= CNA.CNA_SALDO	AND
				CNB.CNB_SLDMED  >   '0'                         AND 	
				CNB.%NotDel%									AND
				CNA.%NotDel%									AND
				CN9.%NotDel%	
				
				//Query do ponto de entrada
			   	%exp:cQuery%  
										
	
	EndSQL       
   
	If(cTMP)->(EOF())
	    
		MsgAlert("Contrato não encontrado ou com saldo zerado para este produto.")	
		VAR_IXB := CriaVar("C1_XCONTPR",.F.) 
		aCols[n][nPosFil]	:= Space(7)
	   	aCols[n][nPosRevis]	:= Space(3)

	   	// inserido por Carlos Queiroz em 22/01/2013
	   	aCols[n][nPosPl]	:= Space(TamSX3("CNA_NUMERO")[1]) //aItens[nRet][7]//atribui a Planilha ao campo do aCols
	   	aCols[n][nPosIt]	:= Space(TamSX3("CNB_ITEM")[1])//aItens[nRet][8]//atribui a Item Planilha ao campo do aCols
		aCols[n][nPosFor]	:= Space(TamSX3("CNA_FORNEC")[1])//aItens[nRet][4]//ATRIBUI O FORNECEDOR
		aCols[n][nPosLoj]	:= Space(TamSX3("CNA_LJFORN")[1])//aItens[nRet][10]//ATRIBUI A LOJA DO FORNECEDOR

		lRet := .F. 
		Exit
				
	Else
			If ((cTMP)->CNB_SLDMED - aCols[n][nPosQtd]) >= 0
			AADD(aItens,{(cTMP)->CN9_FILIAL,(cTMP)->CN9_NUMERO,(cTMP)->CN9_REVISA,(cTMP)->CNA_FORNEC,(cTMP)->CNB_VLUNIT,;
 				(cTMP)->CNB_SLDMED,(cTMP)->CNA_NUMERO,(cTMP)->CNB_ITEM,(cTMP)->CN9_DESCRI,(cTMP)->CNA_LJFORN})

		   	If nPosPrc > 0//O campos de valor normalmente não está na tela, portanto não consta no aHeader
				aCols[n][nPosPrc]	:= aItens[1][5]//atribui o valor ao item no aCols
			EndIf

		   	aCols[n][nPosFil]	:= aItens[1][1]//atribui a filial ao campo do aCols
		   	aCols[n][nPosRevis]	:= aItens[1][3]//atribui a revisao ao campo do aCols
		   	aCols[n][nPosPl]	:= aItens[1][7]//atribui a Planilha ao campo do aCols
		   	aCols[n][nPosIt]	:= aItens[1][8]//atribui a Item Planilha ao campo do aCols
		   	aCols[n][nPosFor]	:= aItens[1][4]//ATRIBUI O FORNECEDOR
		   	aCols[n][nPosLoj]	:= aItens[1][10]//ATRIBUI A LOJA DO FORNECEDOR
			EndIf
			If Len(aItens) == 0
				MsgAlert("Nenhum Contrato Encontrado.")
				aCols[n][nPosFil]	:= Space(7)
				aCols[n][nPosRevis]	:= Space(3)
				aCols[n][nPosPl]	:= Space(6)
				aCols[n][nPosIt]	:= Space(3)
				lRet := .F.
				Exit
			EndIf

	EndIf 
	
Else
	 
	MsgAlert("Preencha os campos: "+AllTrim(RetTitle("C1_PRODUTO"))+" e "+AllTrim(RetTitle("C1_QUANT")))
	lRet := .F.
	
EndIf
       
	Exit
EndDo  

Return lRet
                   
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³CNIA109c  ºAutor  ³Tiago Tudisco       º Data ³  14/06/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Consulta especifica para mostrar os contratos vigentes e    º±±
±±º          ³com saldo para um dado produto.                             º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
User Function CNIA109c()
    
Local cTitulo	:= "Consulta Contratos Vigentes"					//Titulo da consulta
Local aArea		:= getArea()
Local aCampos	:= {"Filial","Contrato","Descrição da Planilha","Fornecedor","Valor Unit.","Saldo","Revisão","Planilha","Item Planilha","Descrição", "Unid. Medida"} 	//Colunas da consulta
Local aItens	:= {}  												//Itens da consulta
Local nRet		:= 0                               					//Linha selecionada da lista
        
Local cTMP  	:= GetNextAlias()
Local cHoje		:= Date()

Local nPosPrd	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_PRODUTO'})
Local nPosQtd	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_QUANT'}) 
Local nPosPrc   := aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_VUNIT'})  
Local nPosFil  	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_XCONTFI'})  
Local nPosRevis	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_XCONTRV'})   
Local nPosPl	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_XCONTPL'})   
Local nPosIt	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_XCONTIT'})   
Local nPosFor	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_FORNECE'})   
Local nPosLoj	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_LOJA'})

Local cQuery    := ""

//Verifica se a linha referente ao produto e a quantidade estao preenchidas na getdados
If !Empty(aCols[n][nPosPrd]) .And. !Empty(aCols[n][nPosQtd]) 

	If ExistBlock("CN109QC")
		cQuery := ExecBlock("CN109QC",.F.,.F.,{aCols[n][nPosPrd],cHoje})
	EndIf
	
	If (Empty(cQuery))
	   cQuery := " ORDER BY CN9.CN9_NUMERO "  
	   cQuery := '%' + cQuery + '%'
	EndIf
	
	BeginSQL Alias cTMP    
		SELECT CN9.CN9_FILIAL, CN9.CN9_NUMERO, CN9.CN9_REVISA, CN9.CN9_DESCRI, CNA.CNA_FORNEC, CNA.CNA_LJFORN, CNB.CNB_VLUNIT, CNB.CNB_SLDREC, CNA.CNA_XDESC, CNA.CNA_NUMERO, CNB.CNB_ITEM, CNB.CNB_SLDMED, CNB.CNB_UM 
		FROM	%Table:CNB% CNB, %Table:CN9% CN9, %Table:CNA% CNA, %Table:CN1% CN1
		WHERE	CN9.CN9_FILIAL  =   %xFilial:CN9%  			AND
				CNB.CNB_FILIAL  =   %xFilial:CNB% 			AND
				CNA.CNA_FILIAL  =   %xFilial:CNA% 			AND
				CN1.CN1_FILIAL  =   %xFilial:CN1% 			AND
	   			CNB.CNB_CONTRA	=	CN9.CN9_NUMERO			AND
				CNB.CNB_REVISA	=	CN9.CN9_REVISA			AND
				CNB.CNB_CONTRA	=	CNA.CNA_CONTRA			AND
				CNB.CNB_REVISA	=	CNA.CNA_REVISA			AND
				CNB.CNB_NUMERO	=	CNA.CNA_NUMERO			AND
				CN9.CN9_TPCTO	=	CN1.CN1_CODIGO			AND
				CN1.CN1_MEDEVE	=	'1'						AND
				CN1.CN1_ESPCTR	=	'1'						AND
				CNB.CNB_PRODUT	=	%Exp:aCols[n][nPosPrd]%	AND
				CN9.CN9_DTFIM	>=	%Exp:cHoje%				AND
				CN9.CN9_SITUAC	=	'05'					AND   
				CN9.CN9_XREGP	=	'1'						AND
				CNB.CNB_SLDMED  >   '0'                     AND
				CNB.%NotDel%								AND
				CNA.%NotDel%								AND
				CN9.%NotDel%		
				
				//Query do ponto de entrada
			  	%exp:cQuery% 

	
	EndSQL                    

	While (cTMP)->(!EOF())
	
		If ((cTMP)->CNB_SLDREC - aCols[n][nPosQtd]) >= 0

 			AADD(aItens,{(cTMP)->CN9_FILIAL,(cTMP)->CN9_NUMERO,(cTMP)->CNA_XDESC,(cTMP)->CNA_FORNEC,Transform((cTMP)->CNB_VLUNIT, "@E 99,999,999.99"),;
 				Transform((cTMP)->CNB_SLDMED, "@E 999,999,999.99"), (cTMP)->CN9_REVISA,(cTMP)->CNA_NUMERO,(cTMP)->CNB_ITEM,(cTMP)->CN9_DESCRI,(cTMP)->CNB_UM,(cTMP)->CNA_LJFORN})

		EndIf
		
		(cTMP)->(dbSkip())
	
	EndDo          
	
	If Len(aItens) > 0 
	
		//Funcao que cria uma tela para exibicao da consulta
		nRet := TmsF3Array(aCampos,aItens,cTitulo,.T.,,aCampos)   
				
		If nRet > 0//nRet e o numero da linha selecionada na consulta
			
			VAR_IXB				:= aItens[nRet][2]//VAR_IXB e o campo que sera retornado na consulta especifica
			     
			If nPosPrc > 0//O campos de valor normalmente não está na tela, portanto não consta no aHeader	     
				aCols[n][nPosPrc]	:= aItens[nRet][5]//atribui o valor ao item no aCols
			EndIf	   	
			
			aCols[n][nPosFil]	:= aItens[nRet][1]//atribui a filial ao campo do aCols
		   	aCols[n][nPosRevis]	:= aItens[nRet][3]//atribui a revisao ao campo do aCols
		   	aCols[n][nPosPl]	:= aItens[nRet][8]//atribui a Planilha ao campo do aCols
		   	aCols[n][nPosIt]	:= aItens[nRet][9]//atribui a Item Planilha ao campo do aCols
		   	aCols[n][nPosFor]	:= aItens[nRet][4]//ATRIBUI O FORNECEDOR
		   	aCols[n][nPosLoj]	:= aItens[nRet][12]//ATRIBUI A LOJA DO FORNECEDOR
		   	
		   	
		Else
			VAR_IXB := CriaVar("C1_XCONTPR",.F.)   
		   	aCols[n][nPosFil]	:= Space(7)//atribui a filial ao campo do aCols
		   	aCols[n][nPosRevis]	:= Space(3)//atribui a revisao ao campo do aCols
			aCols[n][nPosPl]	:= Space(6)//atribui a Planilha ao campo do aCols
		   	aCols[n][nPosIt]	:= Space(3)//atribui a Item Planilha ao campo do aCols
		   	
		EndIf
	      
	Else                                                        
	                                       
		MsgAlert("Nenhum Contrato Encontrado.")	
		VAR_IXB := CriaVar("C1_XCONTPR",.F.)
	   	aCols[n][nPosFil]	:= Space(7)
	   	aCols[n][nPosRevis]	:= Space(3)   
   		aCols[n][nPosPl]	:= Space(6)
	   	aCols[n][nPosIt]	:= Space(3)
		
	EndIf

	(cTMP)->(dbCloseArea())//Fecha a tabela temporaria
	      
Else
	 
	MsgAlert("Preencha os campos: "+AllTrim(RetTitle("C1_PRODUTO"))+" e "+AllTrim(RetTitle("C1_QUANT")))
	
EndIf


restArea(aArea)

Return .T.

/*
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í»ï¿½ï¿½
ï¿½ï¿½ï¿½Programa  ï¿½CNIA109m  ï¿½Autor  ï¿½Tiago Tudisco       ï¿½ Data ï¿½  20/06/11   ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¹ï¿½ï¿½
ï¿½ï¿½ï¿½Desc.     ï¿½Gera a medicao automatica                                   ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½          ï¿½                                                            ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½			 ï¿½                                                            ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¹ï¿½ï¿½
ï¿½ï¿½ï¿½Uso       ï¿½ CNI                                                        ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¼ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
*/      
User Function CNIA109m(cA120Num,l120Inclui,l120Altera,l120Deleta)
Local lRet			:= .T.
Local aCtr 			:= {}	//-- Contratos

Local aCabCN120  	:= {} 
Local aItemCN120 	:= {}

Local nPosSC		:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C7_NUMSC' })	//posicao da SC na getDados
Local nPosItem		:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C7_ITEMSC'})	//posicao do item da SC na getDados
Local nDesc  		:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C7_VLDESC'})	//valor de desconto para o item    
Local nProduto		:= aScan(aHeader,{|x| AllTrim(x[2]) == "C7_PRODUTO"})   
Local nQuant		:= aScan(aHeader,{|x| AllTrim(x[2]) == "C7_QUANT"})  
Local nPreco  		:= aScan(aHeader,{|x| AllTrim(x[2]) == "C7_PRECO"})
Local nDtEnt  		:= aScan(aHeader,{|x| AllTrim(x[2]) == "C7_DATPRF"})
Local nContra  		:= aScan(aHeader,{|x| AllTrim(x[2]) == "C7_CONTRA"}) 
Local nRevisa  		:= aScan(aHeader,{|x| AllTrim(x[2]) == "C7_CONTREV"}) 
Local nPlanil  		:= aScan(aHeader,{|x| AllTrim(x[2]) == "C7_PLANILH"}) 


Local cCompet		:= subs(dtos(date()),5,2)+"/"+subs(dtos(date()),1,4)	//Mes/Ano (mm/aaaa)
Local cPlan			:= 0
Local cNumMed															//numero da medicao     
Local nPos			:= 1 
Local nPosIt
Local nItem			:= 1  //controla os itens da medicao para cada contrato
Local lAchou		:= .F.            
Local cCtr	
Local cRevisa
Local cFilCtr
Local cPlaCtr		
Local cItem, cNum
Local nRet
Local aItemMed		:= {} 
Local nI
Local aArea			:= getArea()  
Local cChave    := "" 
Local aAreaSC1      
Local cItemCNE     := "001"   
Local lProd := .F.

Private cFilOri := "" 
Private cFilCn9 := ""


dbSelectArea("CN9")
dbSelectArea("CNB")
dbSelectArea("CNA")
restArea(aArea)
    
SC1->(dbSetOrder(1))//C1_FILIAL+C1_NUM+C1_ITEM
CN9->(dbSetOrder(1))//CN9_FILIAL+CN9_NUMERO+CN9_REVISA            
CNB->(dbSetOrder(1))//CNB_FILIAL+CNB_CONTRA+CNB_REVISA+CNB_NUMERO+CNB_ITEM
CNA->(dbSetOrder(1))//CNA_FILIAL+CNA_CONTRA+CNA_REVISA+CNA_NUMERO
While nPos <= Len(aCols)
  	   
	If !Empty(aCols[nPos][nPosSC]) .And. !Empty(aCols[nPos][nPosItem]) .And. !aCols[nPos][Len(aHeader)+1]//o item pertence a uma SC
		
		If SC1->(dbSeek(xFilial()+aCols[nPos][nPosSC]+aCols[nPos][nPosItem]))
		  							
			If !Empty(SC1->(C1_XCONTPR)) .And. Empty(aCols[nPos][nContra])//existe contrato de registro de preço
	//-----	    
				aEval(aCtr, {|x| IIF (x[1] == SC1->(C1_XCONTPR) .And. x[2] == SC1->(C1_XCONTRV) ;
							  .And. x[3] == SC1->(C1_XCONTFI) .And. x[4] == SC1->(C1_XCONTPL), lAchou := .T. , .F. )})				
	            
				If !lAchou //contrato ja medido
		
			    	aAdd(aCtr,{SC1->(C1_XCONTPR),SC1->(C1_XCONTRV),SC1->(C1_XCONTFI),SC1->(C1_XCONTPL)})
			    	 
					cNumMed := CN130NumMd()// Função que inicializa o numero da medição //CriaVar("CND_NUMMED")
					
					// FSW -  Procurar pela Filial de origem do contrato
					DbSelectArea("PA9")
					DbSetOrder(1) // fILIAL +FILIAL ORIGEM + NUMERO CONTRATO + REVISÃO
					
					// Busca pelo contrato compartilhado 
					// Passar a filial de origem do contrato
					If DbSeek(xFilial("PA9")+SC1->(C1_XCONTFI)+SC1->(C1_XCONTPR)+SC1->(C1_XCONTRV))  
						cFilOri := CFILANT
						CFILANT := PA9->PA9_FILCN9
						cFilCn9 := PA9->PA9_FILCN9 // Guardará a filial de origem do contrato para utilizar em todos PEs
						
						cNumMed := CN130NumMd() // Função inicializador padrão do número da medição //CriaVar("CND_NUMMED")        
						ConOut("cNumMed: "+cNumMed) 
						
						CFILANT := cFilOri // Volta a filial logada
					Else 
						cFilOri := CFILANT
						cFilCn9 := CFILANT // Guardará a filial de origem do contrato para utilizar em todos PEs
						//CFILANT := PA9->PA9_FILCN9
						
						cNumMed := CN130NumMd() // Função inicializador padrão do número da medição //CriaVar("CND_NUMMED")        
						ConOut("cNumMed: "+cNumMed) 
						
					   //	CFILANT := cFilOri // Volta a filial logada
						 
					EndIf


						
						aAdd(aCabCN120,{"CND_CONTRA",SC1->C1_XCONTPR,NIL})
						aAdd(aCabCN120,{"CND_REVISA",SC1->C1_XCONTRV,NIL})
						aAdd(aCabCN120,{"CND_COMPET",cCompet,NIL})	//mes/ano 
						aAdd(aCabCN120,{"CND_NUMERO",SC1->C1_XCONTPL,NIL})	//numero da planilha
						aAdd(aCabCN120,{"CND_NUMMED",cNumMed,NIL})	//numero da medicao
						If !Empty(CND->(FieldPos("CND_PARCEL")))
					   		aAdd(aCabCN120,{"CND_PARCEL",'1',NIL})
						EndIf                                                    
						aAdd(aCabCN120,{"CND_MOEDA",NMOEDAPED,NIL})	//moeda do pedido
						//Calcula desconto aplicado
						
						If aCols[nPos][nDesc] > 0
							aAdd(aCabCN120,{"CND_DESCME",aCols[nPos][nDesc],NIL})
						EndIf
						
						aAdd(aCabCN120,{"CND_OBS","Medição gerada automaticamente a partir da inclusão do pedido de compra " +cValToChar(CA120NUM)+".",NIL}) 
						aAdd(aCabCN120,{"NUMPED",CA120NUM,NIL})//numero do pedido de compra
						
		//-----			//-- Preenche item da medicao, de acordo com a existencia de planilha
						cCtr 	:= SC1->C1_XCONTPR  
						cRevisa	:= SC1->C1_XCONTRV
						cFilCtr	:= SC1->C1_XCONTFI
						cPlaCtr	:= SC1->C1_XCONTPL   
		        		cItem   := SC1->C1_ITEM                                    
		        		cNum    := SC1->C1_NUM
						
							// Posiciona na CNB de acordo com o número e item da SC para ter o número correto do contrato                
						CNB->(dbSeek(SC1->(cFilCn9+C1_XCONTPR+C1_XCONTRV+C1_XCONTPL)))
						 
						//Guarda a área da SC1
						aAreaSC1 := SC1->(GetArea()) 
						
						DbSelectArea("SC1")
						SC1->(DbSetOrder(1))
					   //	SC1->(DbGoTop()) 
						
						// Posiciona no primeiro registro do número da SC que será liberada
					   //	SC1->(DbSeek(xFilial("SC1")+cNum+cItem)) 
						
						While !CNB->(EOF()) .And. (CNB->(CNB_FILIAL+CNB_CONTRA+CNB_REVISA+CNB_NUMERO) == cFilCn9+cCtr+cRevisa+cPlaCtr) 
						
							SC1->(DbGoTop()) 
						
							// Posiciona no primeiro registro do número da SC que será liberada
							SC1->(DbSeek(xFilial("SC1")+cNum+cItem)) 
						                                        
							lProd := .F. // Inicializa o controle de item da medição
							// Enquanto for a mesma solicitação
							Do While(!SC1->(EOF()) .And. SC1->C1_FILIAL+SC1->C1_NUM== xFilial("SC1")+cNum) 
								// Entre os itens da SC se existir itens do mesmo contrato, adicionar nos itens da medição(CNE)
								If ((cCtr+cRevisa+cFilCtr+cPlaCtr == SC1->(C1_XCONTPR+C1_XCONTRV+C1_XCONTFI+C1_XCONTPL)) .And.;
									CNB->CNB_PRODUT == SC1->C1_PRODUTO)
									aAdd(aItemCN120,{})	               
				      					//preenche item da medicao                                                                   
					 				//aAdd(aItemCN120[Len(aItemCN120)],{"CNE_ITEM",cItemCNE,NIL})
					 				aAdd(aItemCN120[Len(aItemCN120)],{"CNE_ITEM",CNB->CNB_ITEM,NIL})
									aAdd(aItemCN120[Len(aItemCN120)],{"CNE_PRODUT",SC1->C1_PRODUTO,NIL})
									aAdd(aItemCN120[Len(aItemCN120)],{"CNE_QUANT",SC1->C1_QUANT,NIL})
									aAdd(aItemCN120[Len(aItemCN120)],{"CNE_VLUNIT",SC1->C1_VUNIT,NIL}) 
									 
									aAdd(aXItSC,SC1->C1_ITEM)  //Guarda o numero do item da SC vinculada ao item da medição
									//cItemCNE := Soma1(cItemCNE)
									lProd := .T. // Indica se o foi incluido o item na medição 
							 	EndIf
								SC1->(DbSkip())
							EndDo     
							
							// Se não incluiu o item na medição, pois não havia o produto da CNB na SC1
							// Deve incluir o item na medição, porém com as informações na CNB
							If (lProd == .F.)   
								aAdd(aItemCN120,{})	 
			                     //preenche item da medicao                                                                   
				 				//aAdd(aItemCN120[Len(aItemCN120)],{"CNE_ITEM",cItemCNE,NIL})
				 				aAdd(aItemCN120[Len(aItemCN120)],{"CNE_ITEM",CNB->CNB_ITEM,NIL})
								aAdd(aItemCN120[Len(aItemCN120)],{"CNE_PRODUT",CNB->CNB_PRODUT,NIL})
								aAdd(aItemCN120[Len(aItemCN120)],{"CNE_QUANT",0,NIL})            // qtd zerada pois o produto não é medido
								aAdd(aItemCN120[Len(aItemCN120)],{"CNE_VLUNIT",CNB->CNB_VLUNIT,NIL})    	
				
				
								aAdd(aXItSC,"")  //manda o item da SC em branco pois não gerará pedido de compra para esse produto
								//cItemCNE := Soma1(cItemCNE)
									
							EndIf
							
							CNB->(DbSkip())
						EndDo
						
						RestArea(aAreaSC1)
						
								
						//posiciona os itens da planilha                 adminadmin
					   /*	CNB->(dbSeek(SC1->(cFilCn9/*PA9->PA9_FILCN9+C1_XCONTPR+C1_XCONTRV+C1_XCONTPL)))//CNB_FILIAL+CNB_CONTRA+CNB_REVISA+CNB_NUMERO+CNB_ITEM
						While !CNB->(EOF()) .And. (CNB->(CNB_FILIAL+CNB_CONTRA+CNB_REVISA+CNB_NUMERO) == SC1->(cFilCn9/*PA9->PA9_FILCN9*+C1_XCONTPR+C1_XCONTRV+C1_XCONTPL))
						
							aAdd(aItemCN120,{})	 
	                                    
	      					//preenche item da medicao                                                                   
	 						aAdd(aItemCN120[Len(aItemCN120)],{"CNE_ITEM",CNB->CNB_ITEM,NIL})
							aAdd(aItemCN120[Len(aItemCN120)],{"CNE_PRODUT",CNB->CNB_PRODUT,NIL})
							aAdd(aItemCN120[Len(aItemCN120)],{"CNE_QUANT",0,NIL})
							aAdd(aItemCN120[Len(aItemCN120)],{"CNE_VLUNIT",0,NIL})    			
						    
							CNB->(dbSkip())
						End   */
						
						For nPosIt := nPos to Len(aCols)					
		                        
						  	If !Empty(aCols[nPosIt][nPosSC]) .And. !Empty(aCols[nPosIt][nPosItem]) .And. !aCols[nPosIt][Len(aHeader)+1]
								If SC1->(dbSeek(xFilial()+aCols[nPosIt][nPosSC]+aCols[nPosIt][nPosItem]))
									If !Empty(SC1->(C1_XCONTPR)).And.(SC1->(C1_XCONTPR)==cCtr).And.(SC1->(C1_XCONTRV)==cRevisa).And.;
											 (SC1->(C1_XCONTFI)==cFilCtr) .And. (SC1->(C1_XCONTPL)==cPlaCtr)
	 									
									  	nRet := aScan(aItemCN120,{|x| x[1][2] == SC1->C1_XCONTIT})
	                                    
	                                    If nRet > 0
		                                    //atualiza os campos q farao a medicao
		                                    
		                                    aItemCN120[nRet][3][2] := aCols[nPosIt][nQuant] //quantidade  C7_QTDSOL
		                                    aItemCN120[nRet][4][2] := aCols[nPosIt][nPreco] //valor unitario  C7_VALSOL
		                                    //aItemCN120[nRet][5][2] := aCols[nPosIt,nDtEnt]//data da entrega
									 		aCols[nPosIt][nContra]	:= SC1->C1_XCONTPR//numero do contrato   
											aCols[nPosIt][nRevisa]	:= SC1->C1_XCONTRV//numero da revisao
											aCols[nPosIt][nPlanil]	:= SC1->C1_XCONTPL//
											
											aADD(aItemMed,nPosIt)
											
										EndIf                
							
									EndIf
								EndIf
							EndIf
						
						Next  
						
						cFilOri := CFILANT
						CFILANT := cFilCn9 //PA9->PA9_FILCN9 // Altera a Cfilant para buscar o contrato na filial de origem 
				   		
				   	    lRet:= U_CNIGrvMed(aCabCN120,aItemCN120)  
				   	    
				   	    CFILANT := cFilOri // Volta a filial logada
				   	    
				   	    //nao fez a medicao para os itens
				   	    If !lRet
				   	    
				   	    	For nI := 1 To Len(aItemMed)
				   	    	    
				   	    		aCols[nI][nContra]	:= Space(Len(SC7->C7_CONTRA))
				   	    		aCols[nI][nRevisa] 	:= Space(Len(SC7->C7_CONTREV))
				   	    		aCols[nI][nPlanil] 	:= Space(Len(SC7->C7_PLANILH))
				   	    	
				   	    	Next 
				   	    
				   	    Else
				   	    	// Grava o campo CNE_XFILCO a filial que está logada caso a mesma seja diferente da filial de origem do contrato - Gap097
				   	    	DbSelectArea("CNE")
				   	    	DbSetOrder(1)
				   	    	
				   	    	CNE->(DbGoTop())
				   	    	cChave := CND->CND_FILIAL+CND->CND_CONTRA+CND->CND_REVISA+CND->CND_NUMERO+CND->CND_NUMMED // Chave usada para encontrar CNE
				   	    	
				   	    	// Retirado por Peder Munksgaard (Do.it Sistemas) em 26/02/2014        
				   	    	//RecLock("CND",.F.)
				   	       	//	CND->CND_PEDFIL := CFILANT
				   	    	//MsUnlock()
		   	    	
		   	    	
				   	    	DbSeek(cChave)
				   	    	
				   	    	// Só grava se a filial de origem for diferente da logada
				   	    	If (cFilOri <> PA9->PA9_FILCN9)
					   	    	Do While (CNE->(!EOF()) .And. cChave == CNE->CNE_FILIAL+CNE->CNE_CONTRA+CNE->CNE_REVISA+CNE->CNE_NUMERO+CNE->CNE_NUMMED) 
					   	    		RecLock("CNE",.F.)
					   	    		    // Modificado por Peder Munksgaard (Do.it Sistemas) em 26/02/2014
										//CNE->CNE_XFILCO := cFilOri // Dois primeiros digitos são a empresa compartilhada 
										CNE->CNE_XFILCO := CND->CND_FILIAL // Dois primeiros digitos são a empresa compartilhada 
									MsUnlock()
									CNE->(dbSkip())
					   	    	EndDo
					   		EndIf 
					   		
					   		CND->(ConfirmSX8())
				   	    	
				   	    EndIf   	    
				   	    
				   	    
				   		nItem 		:= 0
				   		aItemCN120 	:= {}
				   		aCabCN120  	:= {}  
			   		
			   		//Endif
		   		EndIf        
		   		
		   		lAchou := .F.
		   		
			EndIf//Existe contrato
	
		EndIf//fim do dbseek
		
	EndIf//nao possui SC ou Item
	
	nPos := nPos+1
End//fim do whiï¿½e	


Return lRet                      


/*
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í»ï¿½ï¿½
ï¿½ï¿½ï¿½Programa  ï¿½CNIGrvMed ï¿½Autor  ï¿½Tiago Tudisco 		 ï¿½ Data ï¿½  22/06/2011 ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¹ï¿½ï¿½
ï¿½ï¿½ï¿½Descricao ï¿½ Funcao que executa a rotina automatica da medicao (CNTA120)ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¹ï¿½ï¿½
ï¿½ï¿½ï¿½Uso       ï¿½ CNI    			                                       	  ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¼ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
*/   
User Function CNIGrvMed(aCab,aItens)
Local aArea := GetArea()  
Local aAreaSC1 := SC1->(GetArea())

If Type("lMsErroAuto") # "L"
	PRIVATE lMsErroAuto := .F.
Else
	lMsErroAuto := .F.
EndIf
      
ConOut("CHAMA FUNÇÃO CNTA120 PARA GERAR MEDIÇÃO: ")
//-- Gera a medicao
MsExecAuto({|a,b,c|,CNTA120(a,b,c)},aCab,aItens,3)		

//-- Encerra a medicao
If !lMsErroAuto     
	MsExecAuto({|a,b,c|,CNTA120(a,b,c)},aCab,aItens,6)
	If lMsErroAuto     
		ConOut("ERRO NO ENCERRAMENTO DA MEDIÇÃO!")
		MsgAlert("Não foi possivel encerrar a medição.")
		MostraErro()	
	EndIf
Else      
	ConOut("NÃO INCLUI MEDIÇÃO PARA ALGUNS ITENS!")
	MsgAlert("Não foi possivel incluir a medição para alguns Itens.")
	MostraErro()
EndIf


RestArea(aArea)
RestArea(aAreaSC1)
Return !lMsErroAuto    

  
/*
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í»ï¿½ï¿½
ï¿½ï¿½ï¿½Programa  ï¿½CNIA109b   ï¿½Autor  ï¿½Tiago Tudisco       ï¿½ Data ï¿½  01/07/11   ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¹ï¿½ï¿½
ï¿½ï¿½ï¿½Desc.     ï¿½Valida se o campo do pedido de compra pertence a um contrato ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½          ï¿½e bloqueia a edicao caso seja verdadeiro.                    ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¹ï¿½ï¿½
ï¿½ï¿½ï¿½Uso       ï¿½ CNI                                                         ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¼ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
*/
User Function CNIA109b()
Local lRet			:= .T.
Local nContra  		:= aScan(aHeader,{|x| AllTrim(x[2]) == "C7_CONTRA"}) 

If !Empty(aCols[n][nContra])
     
	lRet := .F.	

EndIf

Return lRet       

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³CNIA109L  ºAutor  ³Fabricio Romera     º Data ³  11/04/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Gera medição de contrato na liberação de pedido.           º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
User Function CNIA109L(cNum, cTipo, nOpc)
Local lRet 			:= .T.
Local aCtr			:= {}
Local aCabCN120  	:= {} 
Local aItemCN120 	:= {}
Local cCompet		:= subs(dtos(date()),5,2)+"/"+subs(dtos(date()),1,4)	//Mes/Ano (mm/aaaa)
Local cPlan			:= 0
Local cNumMed																//numero da medicao
Local nPos			:= 1
Local nPosIt
Local nItem			:= 1													//controla os itens da medicao para cada contrato
Local lAchou		:= .F.
Local cCtr
Local cRevisa
Local cFilCtr
Local cPlaCtr
Local cItem
Local nRet
Local aItemMed		:= {}
Local nI
Local aArea			:= getArea()

	If cTipo <> "PC" .or. nOpc <> 2
		Return .F.
	End If

	//Posiciona no Pedido de Compra
	DbSelectArea("SC7")
	DbSetOrder(1)
	If !SC7->( DbSeek( xFilial("SC7")+AllTrim(cNum) ) )
		Return .F.
	End If
	
	//Inicia Medição de Contrato
	dbSelectArea("CN9")
	dbSelectArea("CNB")
	dbSelectArea("CNA")
//	restArea(aArea)
    
	SC1->(dbSetOrder(1))//C1_FILIAL+C1_NUM+C1_ITEM
	CN9->(dbSetOrder(1))//CN9_FILIAL+CN9_NUMERO+CN9_REVISA            
	CNB->(dbSetOrder(1))//CNB_FILIAL+CNB_CONTRA+CNB_REVISA+CNB_NUMERO+CNB_ITEM
	CNA->(dbSetOrder(1))//CNA_FILIAL+CNA_CONTRA+CNA_REVISA+CNA_NUMERO
	While SC7->( !Eof() ) //nPos <= Len(aCols)
	  	   
		If SC7->( !Empty(C7_NUMSC) .And. !Empty(C7_ITEMSC) )
			
			If SC1->( DbSeek(xFilial("SC1")+SC7->C7_NUMSC+SC7->C7_ITEMSC) ) //dbSeek(xFilial()+aCols[nPos][nPosSC]+aCols[nPos][nPosItem]))
			  							
				If !Empty(SC1->(C1_XCONTPR)) .And. Empty(SC7->C7_CONTRA) //existe contrato
		//-----	    
					aEval(aCtr, {|x| IIF (x[1] == SC1->(C1_XCONTPR) .And. x[2] == SC1->(C1_XCONTRV) ;
								  .And. x[3] == SC1->(C1_XCONTFI) .And. x[4] == SC1->(C1_XCONTPL), lAchou := .T. , .F. )})				
		            
					If !lAchou //contrato ja medido
			
				    	aAdd(aCtr,{SC1->(C1_XCONTPR),SC1->(C1_XCONTRV),SC1->(C1_XCONTFI),SC1->(C1_XCONTPL)})
				    	 
						cNumMed := CriaVar("CND_NUMMED")
						
						aAdd(aCabCN120,{"CND_CONTRA",SC1->C1_XCONTPR,NIL})
						aAdd(aCabCN120,{"CND_REVISA",SC1->C1_XCONTRV,NIL})
						aAdd(aCabCN120,{"CND_COMPET",cCompet,NIL})	//mes/ano 
						aAdd(aCabCN120,{"CND_NUMERO",SC1->C1_XCONTPL,NIL})	//numero da planilha
						aAdd(aCabCN120,{"CND_NUMMED",cNumMed,NIL})	//numero da medicao
						If !Empty(CND->(FieldPos("CND_PARCEL")))
					   		aAdd(aCabCN120,{"CND_PARCEL",'1',NIL})
						EndIf                                                    
						aAdd(aCabCN120,{"CND_MOEDA",SC7->C7_MOEDA,NIL})	//moeda do pedido
						//Calcula desconto aplicado
						
						If SC7->C7_VLDESC > 0
							aAdd(aCabCN120,{"CND_DESCME",SC7->C7_VLDESC,NIL})
						EndIf
						
						aAdd(aCabCN120,{"CND_OBS","Medição gerada automaticamente a partir da inclusão do pedido de compra " +cNum+".",NIL}) 
						aAdd(aCabCN120,{"NUMPED",cNum,NIL})//numero do pedido de compra
						
		//-----			//-- Preenche item da medicao, de acordo com a existencia de planilha
						cCtr 	:= SC1->C1_XCONTPR  
						cRevisa	:= SC1->C1_XCONTRV
						cFilCtr	:= SC1->C1_XCONTFI
						cPlaCtr	:= SC1->C1_XCONTPL
						
						//posiciona os itens da planilha                 adminadmin
						CNB->(dbSeek(SC1->(xFilial("CNB")+C1_XCONTPR+C1_XCONTRV+C1_XCONTPL)))//CNB_FILIAL+CNB_CONTRA+CNB_REVISA+CNB_NUMERO+CNB_ITEM
						While !CNB->(EOF()) .And. (CNB->(CNB_FILIAL+CNB_CONTRA+CNB_REVISA+CNB_NUMERO) == SC1->(xFilial("CNB")+C1_XCONTPR+C1_XCONTRV+C1_XCONTPL))
						
							aAdd(aItemCN120,{})	 
	                                    
	      					//preenche item da medicao                                                                   
							
	 						aAdd(aItemCN120[Len(aItemCN120)],{"CNE_ITEM",CNB->CNB_ITEM,NIL})
							aAdd(aItemCN120[Len(aItemCN120)],{"CNE_PRODUT",CNB->CNB_PRODUT,NIL})
							aAdd(aItemCN120[Len(aItemCN120)],{"CNE_QUANT",0,NIL})
							aAdd(aItemCN120[Len(aItemCN120)],{"CNE_VLUNIT",0,NIL})    	
	//						aAdd(aItemCN120[Len(aItemCN120)],{"CNE_DTENT",CTOD(''),NIL})		
						    
							CNB->(dbSkip())
						End
/*						
						For nPosIt := nPos to Len(aCols)					
		                        
							If SC7->( !Empty(C7_NUMSC) .And. !Empty(C7_ITEMSC) )
								If SC1->(dbSeek(xFilial("SC1")+aCols[nPosIt][nPosSC]+aCols[nPosIt][nPosItem]))
									If !Empty(SC1->(C1_XCONTPR)).And.(SC1->(C1_XCONTPR)==cCtr).And.(SC1->(C1_XCONTRV)==cRevisa).And.;
											 (SC1->(C1_XCONTFI)==cFilCtr) .And. (SC1->(C1_XCONTPL)==cPlaCtr)
	 									
									  	nRet := aScan(aItemCN120,{|x| x[1][2] == SC1->C1_XCONTIT})
	                                    
	                                    If nRet > 0
		                                    //atualiza os campos q farao a medicao
		                                    
		                                    aItemCN120[nRet][3][2] := aCols[nPosIt][nQuant] //quantidade  C7_QTDSOL
		                                    aItemCN120[nRet][4][2] := aCols[nPosIt][nPreco] //valor unitario  C7_VALSOL
		                               //     aItemCN120[nRet][5][2] := aCols[nPosIt,nDtEnt]//data da entrega
											aCols[nPosIt][nContra]	:= SC1->C1_XCONTPR//numero do contrato   
											aCols[nPosIt][nRevisa]	:= SC1->C1_XCONTRV//numero da revisao
											aCols[nPosIt][nPlanil]	:= SC1->C1_XCONTPL//numero da planilha
											
											aADD(aItemMed,nPosIt)
											
										EndIf                
							
									EndIf
								EndIf
							EndIf
						
						Next
  */				   		
				   	    lRet:= U_CNIGrvMed(aCabCN120,aItemCN120) 
				   	    
				   	    //nao fez a medicao para os itens
				   	    If !lRet
				   	    /*
				   	    	For nI := 1 To Len(aItemMed)
				   	    	    
				   	    		aCols[nI][nContra]	:= Space(Len(SC7->C7_CONTRA))
				   	    		aCols[nI][nRevisa] 	:= Space(Len(SC7->C7_CONTREV))
				   	    		aCols[nI][nPlanil] 	:= Space(Len(SC7->C7_PLANILH))
				   	    	
				   	    	Next 
				   	    */
				   	    EndIf
				   	    
				   		nItem 		:= 0
				   		aItemCN120 	:= {}
				   		aCabCN120  	:= {}
				   		
			   		EndIf
			   		
			   		lAchou := .F.
			   		
				EndIf//Existe contrato
		
			EndIf//fim do dbseek
			
		EndIf//nao possui SC ou Item
		
//		nPos := nPos+1
	End//fim do while
	
Return lRet   



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³CNI109AL   ºAutor  ³Bruna Paola         º Data ³  01/31/12  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Gera medição apartir da aprovação/liberação da Solcitação  º±±
±±º          ³ de compras                                                 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ CNI                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
User Function CNI109AL(cNum,cTipo, nOpc, cAprov, _cNumMed)
Local lRet			:= .T.
Local aCtr 			:= {}	//-- Contratos
Local aCabCN120  	:= {} 
Local aItemCN120 	:= {}
Local cCompet		:= subs(dtos(date()),5,2)+"/"+subs(dtos(date()),1,4)	//Mes/Ano (mm/aaaa)
Local cPlan			:= 0
Local cNumMed															//numero da medicao     
Local nPos			:= 1 
Local nPosIt
Local nItem			:= 1  //controla os itens da medicao para cada contrato
Local lAchou		:= .F.            
Local cCtr	
Local cRevisa
Local cFilCtr
Local cPlaCtr		
Local cItem
Local nRet
Local aItemMed		:= {} 
Local nI
Local aArea			:= getArea()   
Local cChave    := ""         
Local aAreaSC1      
Local cItemCNE     := "001"   
Local lProd := .F.
DEFAULT cAprov := RetCodUsr()
DEFAULT _cNumMed := ""  

Private cFilOri	:= ""  
Private cXApUsr := cAprov // Aprovador ou usuário     
Private cFilCn9 := "" //Guarda Filial Origem do contrato     
Private aXItSC  := {}

ConOut("INICIO DA EXECUÇÃO DA FUNÇÃO U_CNI109AL")  

If cTipo <> "SC" .or. nOpc <> 2
	Return .F.
End If   

//Posiciona na Solicitação de Compra
DbSelectArea("SC1")
DbSetOrder(1)
SC1->(DbGoTop())
If !SC1->( DbSeek( xFilial("SC1")+AllTrim(cNum) ) )
	ConOut("NÃO ENCONTROU SC")
	ConOut("FILIAL DA SC: "+xFilial("SC1"))
	ConOut("FILIAL DA SC: "+xFilial("SC1"))
	Return .F.
End If


dbSelectArea("CN9")
dbSelectArea("CNB")
dbSelectArea("CNA")   

ConOut("ENCONTROU SC: "+SC1->C1_NUM)
ConOut("FILIAL DA SC: "+xFilial("SC1"))
    

CN9->(dbSetOrder(1))//CN9_FILIAL+CN9_NUMERO+CN9_REVISA            
CNB->(dbSetOrder(1))//CNB_FILIAL+CNB_CONTRA+CNB_REVISA+CNB_NUMERO+CNB_ITEM
CNA->(dbSetOrder(1))//CNA_FILIAL+CNA_CONTRA+CNA_REVISA+CNA_NUMERO    

While SC1->( !Eof() ) .And. xFilial("SC1")+SC1->C1_NUM ==  xFilial("SC1")+cNum .And. Empty(SC1->C1_PEDIDO)//nPos <= Len(aCols) 

	ConOut("ITEM SC: "+SC1->C1_ITEM)  
	ConOut("numero SC: "+SC1->C1_NUM)
							
	If !Empty(SC1->(C1_XCONTPR))// .And. Empty(SC7->C7_CONTRA) //existe contrato de registro de preço
  
		aEval(aCtr, {|x| IIF (x[1] == SC1->(C1_XCONTPR) .And. x[2] == SC1->(C1_XCONTRV) ;
					  .And. x[3] == SC1->(C1_XCONTFI) .And. x[4] == SC1->(C1_XCONTPL), lAchou := .T. , .F. )})				
          
          ConOut("LACHOU: "+cValToChar(lAchou))  
		If !lAchou //contrato ja medido 
		
			cItemCNE := "001"
			aXItSC   := {}

	    	aAdd(aCtr,{SC1->(C1_XCONTPR),SC1->(C1_XCONTRV),SC1->(C1_XCONTFI),SC1->(C1_XCONTPL)})
			
			// FSW -  Procurar pela Filial de origem do contrato
			DbSelectArea("PA9")
			DbSetOrder(1) // fILIAL + FILIAL ORIGEM + NUMERO CONTRATO + REVISÃO
			
			// Busca pelo contrato compartilhado 
			// Passar a filial de origem do contrato
			If DbSeek(xFilial("PA9")+SC1->(C1_XCONTFI)+SC1->(C1_XCONTPR)+SC1->(C1_XCONTRV))  
			    
				cFilOri := CFILANT
				CFILANT := PA9->PA9_FILCN9
				cFilCn9 := PA9->PA9_FILCN9 // Guardará a filial de origem do contrato para utilizar em todos PEs
				
				cNumMed := CN130NumMd() // Função inicializador padrão do número da medição //CriaVar("CND_NUMMED")        
				ConOut("cNumMed: "+cNumMed) 
				
				CFILANT := cFilOri // Volta a filial logada
			Else 
				cFilOri := CFILANT
				cFilCn9 := CFILANT // Guardará a filial de origem do contrato para utilizar em todos PEs
				//CFILANT := PA9->PA9_FILCN9
				
				cNumMed := CN130NumMd() // Função inicializador padrão do número da medição //CriaVar("CND_NUMMED")        
				ConOut("cNumMed: "+cNumMed) 
				
			   //	CFILANT := cFilOri // Volta a filial logada
				 
			EndIf
				//Walmir Junior 15/02/2016. Alimenta campo de numero de medições.;
				_cNumMed := Iif( Len(_cNumMed) = 0, cNumMed, _cNumMed + ", " +cNumMed)
  				
				aAdd(aCabCN120,{"CND_CONTRA",SC1->C1_XCONTPR,NIL})
				aAdd(aCabCN120,{"CND_REVISA",SC1->C1_XCONTRV,NIL})
				aAdd(aCabCN120,{"CND_COMPET",cCompet,NIL})	//mes/ano 
				aAdd(aCabCN120,{"CND_NUMERO",SC1->C1_XCONTPL,NIL})	//numero da planilha
				aAdd(aCabCN120,{"CND_NUMMED",cNumMed,NIL})	//numero da medicao
				
				If !Empty(CND->(FieldPos("CND_PARCEL")))
			   		aAdd(aCabCN120,{"CND_PARCEL",'1',NIL})
				EndIf                                                    
				
				aAdd(aCabCN120,{"CND_OBS","Medição gerada automaticamente a partir da liberação da Solicitação de Compras " +cValToChar(cNum)+".",NIL}) 
				
	//-----			//-- Preenche item da medicao, de acordo com a existencia de planilha
				cCtr 	:= SC1->C1_XCONTPR  
				cRevisa	:= SC1->C1_XCONTRV
				cFilCtr	:= SC1->C1_XCONTFI
				cPlaCtr	:= SC1->C1_XCONTPL 
				cItem   := SC1->C1_ITEM  
				// Posiciona na CNB de acordo com o número e item da SC para ter o número correto do contrato                
				CNB->(dbSeek(SC1->(cFilCn9+C1_XCONTPR+C1_XCONTRV+C1_XCONTPL)))
				 
				//Guarda a área da SC1
				aAreaSC1 := SC1->(GetArea()) 
				
				DbSelectArea("SC1")
				SC1->(DbSetOrder(1))
			   //	SC1->(DbGoTop()) 
				
				// Posiciona no primeiro registro do número da SC que será liberada
			   //	SC1->(DbSeek(xFilial("SC1")+cNum+cItem)) 
				
				While !CNB->(EOF()) .And. (CNB->(CNB_FILIAL+CNB_CONTRA+CNB_REVISA+CNB_NUMERO) == cFilCn9+cCtr+cRevisa+cPlaCtr) 
				
					SC1->(DbGoTop()) 
				
					// Posiciona no primeiro registro do número da SC que será liberada
					SC1->(DbSeek(xFilial("SC1")+cNum+cItem)) 
				                                        
					lProd := .F. // Inicializa o controle de item da medição
					// Enquanto for a mesma solicitação
					Do While(!SC1->(EOF()) .And. SC1->C1_FILIAL+SC1->C1_NUM== xFilial("SC1")+cNum) 
						// Entre os itens da SC se existir itens do mesmo contrato, adicionar nos itens da medição(CNE)
						If ((cCtr+cRevisa+cFilCtr+cPlaCtr == SC1->(C1_XCONTPR+C1_XCONTRV+C1_XCONTFI+C1_XCONTPL)) .And.;
							CNB->CNB_PRODUT == SC1->C1_PRODUTO)
							aAdd(aItemCN120,{})	               
		      					//preenche item da medicao                                                                   
			 				//aAdd(aItemCN120[Len(aItemCN120)],{"CNE_ITEM",cItemCNE,NIL})
			 				aAdd(aItemCN120[Len(aItemCN120)],{"CNE_ITEM",CNB->CNB_ITEM,NIL})
							aAdd(aItemCN120[Len(aItemCN120)],{"CNE_PRODUT",SC1->C1_PRODUTO,NIL})
							aAdd(aItemCN120[Len(aItemCN120)],{"CNE_QUANT",SC1->C1_QUANT,NIL})
							aAdd(aItemCN120[Len(aItemCN120)],{"CNE_VLUNIT",SC1->C1_VUNIT,NIL}) 
				                                                                   
					       //Comentado por cadu em 14/10/2013, pq as informacoes contabeis para efeito de gerar a medicao tem que ser do contrato
					       //caso seja um contrato compartilhado se estiver da forma que esta pega as informacoes contabei de uma outra casa,
					       //pois a SC pode estar em qq lugar.
							//Inserido por Lucas Riva em 09/08/13 para carregar UO e CR para a medição
							//aAdd(aItemCN120[Len(aItemCN120)],{"CNE_CC",SC1->C1_CC,NIL})   
							//aAdd(aItemCN120[Len(aItemCN120)],{"CNE_ITEMCT",SC1->C1_ITEMCTA,NIL}) 
							
							//Walmir Junior. 10/02/2016 Adição de campos de amarração SC x CNE.
							aAdd(aItemCN120[Len(aItemCN120)],{"CNE_XFILSC",xFilial("SC1"),NIL}) 
							aAdd(aItemCN120[Len(aItemCN120)],{"CNE_XSCOR",SC1->C1_NUM,NIL}) 
							aAdd(aItemCN120[Len(aItemCN120)],{"CNE_XSCITM",SC1->C1_ITEM,NIL}) 
							
							// Inserido por Carlos Queiroz em 23/01/13 ***TESTE***
							aAdd(aItemCN120[Len(aItemCN120)],{"LINPOS","CNE_ITEM",CNB->CNB_ITEM}) 
							 
							aAdd(aXItSC,SC1->C1_ITEM)  //Guarda o numero do item da SC vinculada ao item da medição
							//cItemCNE := Soma1(cItemCNE)
							lProd := .T. // Indica se o foi incluido o item na medição 
					 	EndIf
						SC1->(DbSkip())
					EndDo     
					
					// Se não incluiu o item na medição, pois não havia o produto da CNB na SC1
					// Deve incluir o item na medição, porém com as informações na CNB
					If (lProd == .F.) .and. CNB->CNB_SLDMED > 0  
						aAdd(aItemCN120,{})	 
	                     //preenche item da medicao                                                                   
		 				//aAdd(aItemCN120[Len(aItemCN120)],{"CNE_ITEM",cItemCNE,NIL})
		 				aAdd(aItemCN120[Len(aItemCN120)],{"CNE_ITEM",CNB->CNB_ITEM,NIL})
						aAdd(aItemCN120[Len(aItemCN120)],{"CNE_PRODUT",CNB->CNB_PRODUT,NIL})
						aAdd(aItemCN120[Len(aItemCN120)],{"CNE_QUANT",0,NIL})            // qtd zerada pois o produto não é medido
						aAdd(aItemCN120[Len(aItemCN120)],{"CNE_VLUNIT",CNB->CNB_VLUNIT,NIL})    	
		
						// Inserido por Carlos Queiroz em 23/01/13 ***TESTE***
					//	aAdd(aItemCN120[Len(aItemCN120)],{"LINPOS","CNE_ITEM",""}) 
		
						aAdd(aXItSC,"")  //manda o item da SC em branco pois não gerará pedido de compra para esse produto
						//cItemCNE := Soma1(cItemCNE)
							
					EndIf
					
					CNB->(DbSkip())
				EndDo
				
				RestArea(aAreaSC1)
				
			  /*	aAreaSC1 := SC1->(GetArea()) 
				
				DbSelectArea("SC1")
				SC1->(DbSetOrder(1))
				SC1->(DbGoTop()) 
				
				// Posiciona no primeiro registro do número da SC que será liberada
				SC1->(DbSeek(xFilial("SC1")+cNum+cItem)) 
				 
				// Enquanto for a mesma solicitação
				Do While(!SC1->(EOF()) .And. SC1->C1_FILIAL+SC1->C1_NUM== xFilial("SC1")+cNum) 
					// Entre os itens da SC se existir itens do mesmo contrato, adicionar nos itens da medição(CNE)
					If (cCtr+cRevisa+cFilCtr+cPlaCtr == SC1->(C1_XCONTPR+C1_XCONTRV+C1_XCONTFI+C1_XCONTPL))
						aAdd(aItemCN120,{})	               
	      					//preenche item da medicao                                                                   
		 				aAdd(aItemCN120[Len(aItemCN120)],{"CNE_ITEM",cItemCNE,NIL})
						aAdd(aItemCN120[Len(aItemCN120)],{"CNE_PRODUT",SC1->C1_PRODUTO,NIL})
						aAdd(aItemCN120[Len(aItemCN120)],{"CNE_QUANT",SC1->C1_QUANT,NIL})
						aAdd(aItemCN120[Len(aItemCN120)],{"CNE_VLUNIT",SC1->C1_VUNIT,NIL}) 
						 
						aAdd(aXItSC,SC1->C1_ITEM)  //Guarda o numero do item da SC vinculada ao item da medição
						cItemCNE := Soma1(cItemCNE)
					EndIf
					
					SC1->(DbSkip())
				EndDo    */
				
				//posiciona os itens da planilha                 adminadmin
			 /*	CNB->(dbSeek(SC1->(cFilCn9/*PA9->PA9_FILCN9+C1_XCONTPR+C1_XCONTRV+C1_XCONTPL)))//CNB_FILIAL+CNB_CONTRA+CNB_REVISA+CNB_NUMERO+CNB_ITEM
				While !CNB->(EOF()) .And. (CNB->(CNB_FILIAL+CNB_CONTRA+CNB_REVISA+CNB_NUMERO) == SC1->(cFilCn9/*PA9->PA9_FILCN9+C1_XCONTPR+C1_XCONTRV+C1_XCONTPL))
				
					aAdd(aItemCN120,{})	 
	                                    
	      					//preenche item da medicao                                                                   
	 				aAdd(aItemCN120[Len(aItemCN120)],{"CNE_ITEM",,NIL})
					aAdd(aItemCN120[Len(aItemCN120)],{"CNE_PRODUT",SC1->C1_PRODUTO,NIL})
					aAdd(aItemCN120[Len(aItemCN120)],{"CNE_QUANT",SC1->C1_QUANT,NIL})
					aAdd(aItemCN120[Len(aItemCN120)],{"CNE_VLUNIT",SC1->C1_VUNIT,NIL})    	
		
				    
					CNB->(dbSkip())
				End    */
				
			   //	RestArea(aAreaSC1)
				      
				ConOut("FILIAL CORRENTE: "+CFILANT)
				cFilOri := CFILANT
				CFILANT := cFilCn9 //PA9->PA9_FILCN9 // Altera a Cfilant para buscar o contrato na filial de origem  
				
				ConOut("NOVA FILIAL CORRENTE: "+CFILANT) 
				ConOut("CHAMA FUNÇÃO DE MEDIÇÃO DE CONTRATO!")
		   		
		   	    lRet:= U_CNIGrvMed(aCabCN120,aItemCN120)     
		   	    
		   	    //Walmir Junior 28/01/2016
		   	    //Alteração para manter a medição em aberto.
		  		If RecLock("CND",.F.)
					CND->CND_DTFIM := CTOD("")
					CND->(MsUnlock()) 	    
				EndIf
				
		   	    ConOut("ACABOU MEDIÇÃO DO CONTRATO!")
		   	    
		   	    CFILANT := cFilOri // Volta a filial logada   
		   	    
		   	    ConOut("VOLTA FILIAL DA SC: "+CFILANT)
		   	    
		   	    If lRet      
		   	    
		   	    ConOut("GEROU MEDIÇÃO SEM NENHUM PROBLEMA!")
		   	    	// Grava o campo CNE_XFILCO a filial que está logada caso a mesma seja diferente da filial de origem do contrato - Gap097
		   	    	DbSelectArea("CNE")
		   	    	DbSetOrder(1)
		   	    	
		   	    	CNE->(DbGoTop())
		   	    	cChave := CND->CND_FILIAL+CND->CND_CONTRA+CND->CND_REVISA+CND->CND_NUMERO+CND->CND_NUMMED // Chave usada para encontrar CNE
		   	    	
		   	    	// Retirado por Peder Munksgaard (Do.it Sistemas) em 26/02/2014
		   	    	//RecLock("CND",.F.)
		   	       	//	CND->CND_PEDFIL := CFILANT
		   	    	//MsUnlock()
		   	    		
		   	    	CNE->(DbSeek(cChave))
		   	    	
		   	    	
		   	    	// Só grava se a filial de origem for diferente da logada
		   	    	If (cFilOri <> cFilCn9/*PA9->PA9_FILCN9*/)
			   	    	Do While (CNE->(!EOF()) .And. cChave == CNE->CNE_FILIAL+CNE->CNE_CONTRA+CNE->CNE_REVISA+CNE->CNE_NUMERO+CNE->CNE_NUMMED) 
			   	    		RecLock("CNE",.F.)
   		   	    		       // Modificado por Peder Munksgaard (Do.it Sistemas) em 26/02/2014
							   //CNE->CNE_XFILCO := cFilOri // Dois primeiros digitos são a empresa compartilhada 
							   CNE->CNE_XFILCO := CND->CND_FILIAL // Dois primeiros digitos são a empresa compartilhada 
							MsUnlock()
							CNE->(dbSkip())
			   	    	EndDo
			   		EndIf  
			   		
			   		// Gap097 - Se a solicitação não tiver vinculo com o pedido gerado, colocar o numero do pedido na solicitação assim ele não poderá ser estornada
		   	    	If (Empty(AllTrim(SC1->C1_PEDIDO)))
		   	    		RecLock("SC1",.F.)
		   	    	   		SC1->C1_PEDIDO := CND->CND_PEDIDO
		   	    		MsUnLock()
		   	    	Endif
		   	    EndIf   	    
		   	    
		   	    
		   		nItem 		:= 0
		   		aItemCN120 	:= {}
		   		aCabCN120  	:= {} 
		   		
		   		CND->(ConfirmSX8()) 
	   		
	   		//EndIf
   		EndIf        
   		
   		lAchou := .F.
   		
   		ConOut("ITEM SC3: "+SC1->C1_ITEM)  
		ConOut("numero SC3: "+SC1->C1_NUM)
   		
	EndIf//Existe contrato
	
		ConOut("ITEM SC4: "+SC1->C1_ITEM)  
		ConOut("numero SC4: "+SC1->C1_NUM)
	
	SC1->(DbSkip())// Procura por outros itens da solicitação   
	
	ConOut("ITEM SC2: "+SC1->C1_ITEM)  
	ConOut("numero SC2: "+SC1->C1_NUM)
End//fim do while	


Return lRet           

/*

ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³CNIEstMe   ºAutor  ³Bruna Paola        º Data ³  02/08/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Função para estornar a medição e excluir pedido de compra  º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ CNI                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
  */
User Function CNIEstMe () 

Private cFilOri := "" 
Private lAuto := .F.  
Private cFilCn9 := "" 

cFilOri := CFILANT // Filial logada no Sistema
 
DbSelectArea("CND")
DbSetOrder(6)      

// FSW -  Procurar pela Filial de origem do contrato
DbSelectArea("PA9") 
DbGoTop()
DbSetOrder(1) // fILIAL + FILIAL ORIGEM + NUMERO CONTRATO + REVISÃO

// Busca pelo contrato compartilhado 
// Passar a filial de origem do contrato
If (PA9->(DbSeek(xFilial("PA9")+SC1->(C1_XCONTFI)+SC1->(C1_XCONTPR)+SC1->(C1_XCONTRV))))

	CFILANT := PA9->PA9_FILCN9 // Altera a Cfilant para buscar o contrato na filial de origem
	cFilCn9 := PA9->PA9_FILCN9 // Guarda filial de origem do contrato
Else	
	cFilCn9 := CFILANT // Guarda filial de origem do contrato e não altera CFILANT pois contrato não é compartilhado
EndIf 

// Procura pelo vinculo com contrato de registro de preço 
// Utilizando a filial de origem do contrato onde a medição foi gerada 
If (CND->(DbSeek(xFilial("CND")+SC1->C1_XCONTPR+SC1->C1_XCONTRV+SC1->C1_PEDIDO))) 
	nReg := CND->(Recno())  // Pega o numero do registro da medição para estorno
	
	CN120MedEst(nReg) // Estorno da medição e exclusão do pedido de compra 
Else
	lRet := .T.  // Não tem vinculo com Contrato de registro de preço, pode ser excluida direto pela rotina manual
EndIf


CFILANT := cFilOri // Volta a filial logada 
Return .T.

/*/
===================================================================================
Autor...........: Peder Munksgaard (Do.it Sistemas)
-----------------------------------------------------------------------------------
Descrição.......: Função de validação criada para ser utilizada no momento da 
                  inclusão ou alteração da solicitação de compras para realizar
                  a verificação do campo B1_XXBLSC em que será determinado se 
                  é ou não permitida a inclusão de Solicitação de Compras para 
                  o dito produto. 
-----------------------------------------------------------------------------------
Alteração.......: (dd/mm/aaaa) - Motivo
-----------------------------------------------------------------------------------
Partida.........: N/A
-----------------------------------------------------------------------------------
Função..........: u_CNIVldSC(_cProd)
===================================================================================
/*/

User Function CNIVldSC(_cProd)

   Local _aArea   := GetArea()
   Local _aAreaB1 := SB1->(GetArea())
   Local _lRet    := .T.
   
   Local _cMsg    := "Prezado(a) " + cUserName + " :                      " + CRLF + ;
                     "O produto: " + _cProd + " encontra-se bloqueado para" + CRLF + ;
                     "a inclusão de novas solicitações de compras!        " + CRLF + ;
                     "O mesmo produto encontra-se cadastrado com todas as " + CRLF + ;
                     "possibilidades de contas contábeis.                 " + CRLF + ;
                     "Obrigado!                                           "
    
   
   If X3Usado("B1_XXBLSC") .And. (IsInCallStack("A110Inclui") .Or. IsInCallStack("A110Altera"))
   
      dbSelectArea("SB1")
      SB1->(dbSetOrder(1))
      SB1->(dbSeek(xFilial("SB1")+_cProd))
      If SB1->B1_XXBLSC == '1'
         MsgAlert(OemToAnsi(_cMsg))
         _lRet := .F.
      Endif
      
   Endif   

   RestArea(_aAreaB1)
   RestArea(_aArea)
         
Return _lRet

/*/
===================================================================================
Autor...........: Peder Munksgaard (Do.it Sistemas)
-----------------------------------------------------------------------------------
Descrição.......: Função criada para utilização no Inic. Browser devido ao pequeno
                  espaço do campo para realizar posicionamento na tabela e retornar
                  a razão social do fornecedor.
-----------------------------------------------------------------------------------
Alteração.......: (dd/mm/aaaa) - Motivo
-----------------------------------------------------------------------------------
Partida.........: N/A
-----------------------------------------------------------------------------------
Função..........: u_CNIRetFor(_cFil, _cNum)
===================================================================================
/*/

User Function CNIRetFor(_cFil, _cNum)

   Local _aArea    := GetArea()
   Local _aAreaC7  := SC7->(GetArea())
   Local _aAreaA2  := SA2->(GetArea())
   Local _cRSocial := ""
   Local _cNFor    := ""
   Local _cLFor    := ""

   
   dbSelectArea("SC7")
   SC7->(dbSetOrder(1))
   If SC7->(dbSeek(PadR(_cFil, TamSX3("C7_FILIAL")[1]) + PadR(_cNum, TamSX3("C7_NUM")[1])))
      _cNFor := PadR(SC7->C7_FORNECE, TamSX3("C7_FORNECE")[1])
      _cLFor := PadR(SC7->C7_LOJA   , TamSX3("C7_LOJA"   )[1])
   Endif
   
   If !Empty(_cNFOR) .And. !Empty(_cLFor)
      dbSelectArea("SA2")
      SA2->(dbSetOrder(1))
      If SA2->(dbSeek(xFilial("SA2") + _cNFor + _cLFOR))
         _cRSocial := SA2->A2_NOME
      Endif
   Endif
   
   RestArea(_aAreaA2)      
   RestArea(_aAreaC7)   
   RestArea(_aArea)
   
Return _cRSocial

/*/
===================================================================================
Autor...........: Peder Munksgaard (Do.it Sistemas)
-----------------------------------------------------------------------------------
Descrição.......: Função que retorna os primeiros 250 caracteres do campo 
                  C1_XJUSTIF para apresentar como justificativa em browser durante
                  a liberação de documentos.
-----------------------------------------------------------------------------------
Alteração.......: (dd/mm/aaaa) - Motivo

                  (06/10/2014) - Peder Munksgaard (Do.it Sistemas)
           
                  Alterado por Peder Munksgaard em 06/10/2014 devido a abertura 
                  do chamado  Nº  135996 através da usuária Carla Barzsina 
                  pois o nome do solicitante quando o pedido de compras é gerado
                  em filial diferente da SC fica errado.
-----------------------------------------------------------------------------------
Partida.........: N/A
-----------------------------------------------------------------------------------
Função..........: u_CNIRetJus(_cTpDoc, _cFil, _cNumSC)
===================================================================================
/*/

User Function CNIRetJus(_cTpDoc, _cFil, _cNumSC)

   Local _aArea    := GetArea()
   Local _aAreaC1  := SC1->(GetArea())
   Local _aAreaC7  := SC7->(GetArea())
   Local _cJus     := ""
   
   If Alltrim(Upper(_cTpDoc)) == 'SC'
   
      dbSelectArea("SC1")
      SC1->(dbSetOrder(1))
      If SC1->(dbSeek(_cFil + PadR(_cNumSC, TamSX3("C1_NUM")[1])))               
         _cJus := MemoLine(SC1->C1_XJUSTIF,TamSX3("CR_XXJUSTI")[1],1)
      Endif
      
   Elseif Alltrim(Upper(_cTpDoc)) == 'PC'
   
      dbSelectArea("SC7")
      SC7->(dbSetOrder(1))
      If SC7->(dbSeek(_cFil + PadR(_cNumSC, TamSX3("C7_NUM")[1])))
         dbSelectArea("SC1")
         SC1->(dbSetOrder(1))
         /*
          * Alterado por Peder Munksgaard em 06/10/2014 devido a abertura 
          * do chamado  Nº  135996 através da usuária Carla Barzsina 
          * pois o nome do solicitante quando o pedido de compras é gerado
          * em filial diferente da SC fica errado.
          *
         */
         //If SC1->(dbSeek(_cFil + PadR(SC7->C7_NUMSC, TamSX3("C1_NUM")[1])))         
         If SC1->(dbSeek(SC7->C7_FISCORI + PadR(SC7->C7_NUMSC, TamSX3("C1_NUM")[1])))               
            _cJus := MemoLine(SC1->C1_XJUSTIF,TamSX3("CR_XXJUSTI")[1],1)
         Else
         	_cJus := SC7->C7_OBS
         Endif                     
      Endif
         
   Endif
   
   RestArea(_aAreaC1)   
   RestArea(_aAreaC7)   
   RestArea(_aArea)
   
Return _cJus 

/*/
===================================================================================
Autor...........: Peder Munksgaard (Do.it Sistemas)
-----------------------------------------------------------------------------------
Descrição.......: Função que retorna o usuário solicitante responsável pela
                  inclusão da solicitação de compras.
-----------------------------------------------------------------------------------
Alteração.......: (06/10/2014) - Peder Munksgaard (Do.it Sistemas)
           
                  Alterado por Peder Munksgaard em 06/10/2014 devido a abertura 
                  do chamado  Nº  135996 através da usuária Carla Barzsina 
                  pois o nome do solicitante quando o pedido de compras é gerado
                  em filial diferente da SC fica errado.                  
-----------------------------------------------------------------------------------
Partida.........: N/A
-----------------------------------------------------------------------------------
Função..........: u_CNIRetSol(_cTpDoc, _cFil, _cNumSC)
===================================================================================
/*/

User Function CNIRetSol(_cTpDoc, _cFil, _cNumSC)

   Local _aArea    := GetArea()
   Local _aAreaC1  := SC1->(GetArea())
   Local _aAreaC7  := SC7->(GetArea())
   Local _cSol     := ""
   
   If Alltrim(Upper(_cTpDoc)) == 'SC'
   
      dbSelectArea("SC1")
      SC1->(dbSetOrder(1))
      If SC1->(dbSeek(_cFil + PadR(_cNumSC, TamSX3("C1_NUM")[1])))               
         _cSol := Alltrim(SC1->C1_SOLICIT)
      Endif
      
   Elseif Alltrim(Upper(_cTpDoc)) == 'PC'
   
      dbSelectArea("SC7")
      SC7->(dbSetOrder(1))
      If SC7->(dbSeek(_cFil + PadR(_cNumSC, TamSX3("C7_NUM")[1])))
         dbSelectArea("SC1")
         SC1->(dbSetOrder(1))
         /*
          * Alterado por Peder Munksgaard em 06/10/2014 devido a abertura 
          * do chamado  Nº  135996 através da usuária Carla Barzsina 
          * pois o nome do solicitante quando o pedido de compras é gerado
          * em filial diferente da SC fica errado.
          *
         */
         //If SC1->(dbSeek(_cFil + PadR(SC7->C7_NUMSC, TamSX3("C1_NUM")[1])))               
         If SC1->(dbSeek(SC7->C7_FISCORI + PadR(SC7->C7_NUMSC, TamSX3("C1_NUM")[1])))               
            _cSol := Alltrim(SC1->C1_SOLICIT)
         Endif                     
      Endif
         
   Endif
   
   RestArea(_aAreaC1)   
   RestArea(_aAreaC7)   
   RestArea(_aArea)
      
Return _cSol 

/*/
===================================================================================
Autor...........: Peder Munksgaard (Do.it Sistemas)
-----------------------------------------------------------------------------------
Descrição.......: Função que retorna a data da necessidade tanto da solicitação 
                  de compras como do pedido de compras.
-----------------------------------------------------------------------------------
Alteração.......: (dd/mm/aaaa) - Motivo
-----------------------------------------------------------------------------------
Partida.........: N/A
-----------------------------------------------------------------------------------
Função..........: u_CNIRetDat(_cTpDoc, _cFil, _cNumSC)
===================================================================================
/*/

User Function CNIRetDat(_cTpDoc, _cFil, _cNumSC)

   Local _aArea    := GetArea()
   Local _aAreaC1  := SC1->(GetArea())
   Local _aAreaC7  := SC7->(GetArea())
   Local _dDat     := StoD(Space(8))
   
   If Alltrim(Upper(_cTpDoc)) == 'SC'
   
      dbSelectArea("SC1")
      SC1->(dbSetOrder(1))
      If SC1->(dbSeek(_cFil + PadR(_cNumSC, TamSX3("C1_NUM")[1])))               
         _dDat := SC1->C1_DATPRF
      Endif
      
   Elseif Alltrim(Upper(_cTpDoc)) == 'PC'
   
      dbSelectArea("SC7")
      SC7->(dbSetOrder(1))
      If SC7->(dbSeek(_cFil + PadR(_cNumSC, TamSX3("C7_NUM")[1])))               
         _dDat := SC7->C7_DATPRF                     
      Endif
         
   Endif
   
   RestArea(_aAreaC1)   
   RestArea(_aAreaC7)   
   RestArea(_aArea)
   
Return _dDat 

User Function CNIRetComp(_cTpDoc, _cFil, _cNumDoc)

Local _aArea    := GetArea()
Local _cComp     := ""
   
	If Alltrim(Upper(_cTpDoc)) == 'SC'
	   
		dbSelectArea("SC1")
		SC1->(dbSetOrder(1))
	
		If SC1->(dbSeek(_cFil + PadR(_cNumDoc, TamSX3("C1_NUM")[1])))               
		
			dbSelectArea("SY1")
			SY1->(dbSetOrder(1))
			
			If SY1->( dbSeek(xFilial("SY1") + SC1->C1_CODCOMP) )
				_cComp := AllTrim(SY1->Y1_NOME)
			EndIf
			
		EndIf
		      
	ElseIf Alltrim(Upper(_cTpDoc)) == 'PC'
	   
		dbSelectArea("SC7")
		SC7->(dbSetOrder(1))
		
		If SC7->(dbSeek(_cFil + PadR(_cNumDoc, TamSX3("C7_NUM")[1])))
			
			dbSelectArea("SY1")
			SY1->(dbSetOrder(3))
			
			If Empty(SC7->C7_USER)
				
				dbSelectArea("SC1")
				SC1->(dbSetOrder(1))
			         
				If SC1->(dbSeek(SC7->C7_FISCORI + PadR(SC7->C7_NUMSC, TamSX3("C1_NUM")[1])))               
					
					If SY1->( dbSeek(xFilial("SY1") + SC1->C1_CODCOMP) )
						_cComp := AllTrim(SY1->Y1_NOME)
					EndIf
				
				Endif 
			
			Else
			
				If SY1->( dbSeek(xFilial("SY1") + SC7->C7_USER) )
					_cComp := AllTrim(SY1->Y1_NOME)
				EndIf
				
			EndIf                    
		
		EndIf
	         
	EndIf
	    
	RestArea(_aArea)
   
Return _cComp