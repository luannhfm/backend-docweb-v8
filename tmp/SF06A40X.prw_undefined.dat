#INCLUDE 'PROTHEUS.CH'
#INCLUDE 'RWMAKE.CH'
#INCLUDE 'FONT.CH'
#INCLUDE 'COLORS.CH' 
#INCLUDE 'TOPCONN.CH'

/* ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa  ³ SF06A40X ³ Autor ³ Leonardo P. de Castro ³ Data ³ 04/11/09 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Locacao   ³                  ³Contato ³                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Cadastro de Fases de cobrança.                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Aplicacao ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Analista Resp.³  Data  ³                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ³  /  /  ³                                               ³±±
±±³              ³  /  /  ³                                               ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

User Function SF06A40X

Local _lAcesso := .F.
Private cCadastro := "Cadastro de Fases de Cobrança"
Private aRotina := MenuDef()
Private cDelFunc := ".T." // Validacao para a exclusao. Pode-se utilizar ExecBlock
Private cString := "ZAE" 
Private _aCores := {	{"ZAE_MSBLQL = 'N'", "BR_VERDE"},;
						{"ZAE_MSBLQL = 'S'", "BR_CINZA"}}
						
_lAcesso := U_TcSupOk()

If !_lAcesso
	Alert("Esta operação somente poderá ser realizada por um Supervisor!")
	Return()
EndIF						

dbSelectArea("ZAE")
dbSetOrder(1)

mBrowse(6,1,22,75,cString,,,,,, _aCores ,,,,,,,)

Return()

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³MenuDef() ºAutor  ³Leonardo P de Castroº Data ³  04/11/2009 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Funcao que define o array contendo as funcoes disponeis no  º±±
±±º          ³menu principal da rotina.                                   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ P10                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function MenuDef()

Private _aRet := { {"Pesquisar"   ,"AxPesqui"     ,0,1} ,;
                   {"Visualizar"  ,"AxVisual"     ,0,2} ,;
                   {"Incluir"     ,"AxInclui"     ,0,3} ,;
                   {"Alterar"     ,"AxAltera"     ,0,4} ,;
                   {"Excluir"     ,"AxDeleta"     ,0,5} ,;
			       {"Legenda"     ,"U_A100XLeg"   ,0,2} }

Return( _aRet ) 

/* /
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ A100XLeg º Autor ³Leonardo P de Castroº Data ³  04/11/2009 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³ Legendas do mBrowse                                        º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ P10                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

User Function A100XLeg()

Local _aLeg := {	{"BR_VERDE", "Grupo de fases Ativo"},;
					{"BR_CINZA", "Grupo de fases não Ativo"}}
					
	BrwLegenda(cCadastro,'Legenda',_aLeg)

Return( Nil )

User Function SF6A40X

	Local lRet := .T.

	If M->ZAE_PRZATE < M->ZAE_PRZDE
		lRet := .F.
		MsgAlert("Não é permitido a inserir um prazo menor que o inicial!")
	EndIF

Return lRet
/*
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Funcao para manipulacao de dados da funcao³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

User Function A100XMan(nOpcx)

Local nOpc := 0 
Local _aBotao := Iif(nOpcx = 2, FunDef(), {})
Private aC_oBrw := {}
Private aH_oBrw := {}
Private aA_oBrw := {}
Private _cSay   := Space(1)
Private _cGetID := Iif(nOpcx = 1, ZAE->ZAE_IDAGRUP, Space(3))
Private n_oBrw  := 0

SetPrvt("_oDlg","_oSay","_oGetID","_oBrw")

_oDlg       := MSDialog():New( 192,267,532,973,"Fases de Cobrança",,,.F.,,,,,,.T.,,,.T. )
_oDlg:bInit := {||EnchoiceBar(_oDlg,{|| Iif(nOpcx = 2 .OR. nOpcx = 3,fGrava(),_oDlg:End())},{||Iif(MsgYesNo("Confirma o cancelamento? "),_oDlg:End(),.T.)},.F.,_aBotao)}
_oSay       := TSay():New( 020,008,{||"ID agrupador:"},_oDlg,,,.F.,.F.,.F.,.T.,CLR_BLACK,CLR_WHITE,034,008)
_oGetID     := TGet():New( 019,042,{|u| IIf(PCount()>0,_cGetID:=u,_cGetID)},_oDlg,031,008,'',,CLR_BLACK,CLR_WHITE,,,,.T.,"",,,.F.,.F.,,.T.,.F.,"","_cGetID",,)
_oGetID:Disable()
MH_oBrw()
MC_oBrw( nOpcx ) 

If nOpcx = 2 .OR. nOpcx = 3 // INCLUSAO OU ALTERACAO || NOVO GRUPO OU GRUPO ATIVO
	nOpc := GD_INSERT+GD_DELETE+GD_UPDATE
	aA_oBrw := {"ZAE_DESCRI","ZAE_PRZDE","ZAE_PRZATE","ZAE_PRCJUR","ZAE_PRCMUL","ZAE_PORLOJA","ZAE_VLRDE","ZAE_VLRATE"}
EndIF    

_oBrw       := MsNewGetDados():New(036,002,168,354,nOpc,'U_fBrwLinOk()','AllwaysTrue()','',aA_oBrw,0,99,'U_fBrwCpo()','','U_fBrwDel()',_oDlg,aH_oBrw,aC_oBrw)
_oBrw:oBrowse:bChange:= {|| U_fBrwChange()}

_oDlg:Activate(,,,.T.)

Return

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Define o array de funcoes da barra de funcoes³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Static Function FunDef()

Local _aRet :=  {{"BMPDEL", {|| fLimpar()}, "Limpar Fases"}}

Return(_aRet)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Monta aHeader da MsNewGetDados para o Alias: ZAE³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Static Function MH_oBrw()

DbSelectArea("SX3")
DbSetOrder(1)
DbSeek("ZAE")
While !Eof() .and. SX3->X3_ARQUIVO == "ZAE"
   If X3Uso(SX3->X3_USADO) .and. cNivel >= SX3->X3_NIVEL .and. SX3->X3_CAMPO != "ZAE_MSBLQL"
      n_oBrw++
      Aadd(aH_oBrw,{Trim(X3Titulo()),;
           SX3->X3_CAMPO,;
           SX3->X3_PICTURE,;
           SX3->X3_TAMANHO,;
           SX3->X3_DECIMAL,;
           "",;
           "",;
           SX3->X3_TIPO,;
           "",;
           "" } )
   EndIf
   DbSkip()
EndDo

Return

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Monta aCols da MsNewGetDados para o Alias: ZAE³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Static Function MC_oBrw(_nOpc)

Local _aArea := ZAE->(GetArea())
Local _cIDAgrup
Local aAux := {}        

If _nOpc = 1  

	_cIDAgrup := ZAE->ZAE_IDAGRUP
	
	DbSelectArea("ZAE")
	ZAE->(DbSetOrder(3))
	ZAE->(DbSeek(xFilial("ZAE") + _cIDAgrup))
	
		While ZAE->(!Eof()) .And. _cIDAgrup = ZAE->ZAE_IDAGRUP
			Aadd(aC_oBrw,{	ZAE->ZAE_COD	,;
							ZAE->ZAE_DESCRI,;
							ZAE->ZAE_PRZDE,;
							ZAE->ZAE_PRZATE,;
							ZAE->ZAE_PRCJUR,;
							ZAE->ZAE_PRCMUL,;
							ZAE->ZAE_PORLOJA,;
							ZAE->ZAE_VLRDE,;
							ZAE->ZAE_VLRATE,;
							.F.})
			ZAE->(DbSkip())
		EndDo
	
	RestArea(_aArea)

ElseIf _nOpc = 3

	_cIDAgrup := ZAE->ZAE_IDAGRUP
	
	DbSelectArea("ZAE")
	ZAE->(DbSetOrder(3))  
	ZAE->(DbGoTop())
	
		While ZAE->(!Eof())
		
			If ZAE->ZAE_MSBLQL = "S"
				ZAE->(DbSkip())
				Loop
			EndIf     
			
			_cGetID := ZAE->ZAE_IDAGRUP
			
			Aadd(aC_oBrw,{	ZAE->ZAE_COD	,;
							ZAE->ZAE_DESCRI,;
							ZAE->ZAE_PRZDE,;
							ZAE->ZAE_PRZATE,;
							ZAE->ZAE_PRCJUR,;
							ZAE->ZAE_PRCMUL,;
							ZAE->ZAE_PORLOJA,;
							ZAE->ZAE_VLRDE,;
							ZAE->ZAE_VLRATE,;
							.F.})
			ZAE->(DbSkip())
		EndDo
		
		_oGetID:Refresh()
	
	RestArea(_aArea)	
Else  

	Aadd(aC_oBrw,Array(n_oBrw+1))
	
	For nI := 1 To n_oBrw
		If AllTrim(aH_oBrw[nI][2]) = "ZAE_PRZDE"
			aC_oBrw[1][nI] := 1
		ElseIf AllTrim(aH_oBrw[nI][2]) = "ZAE_COD"
			aC_oBrw[1][nI] := "001"
		Else
	   		aC_oBrw[1][nI] := CriaVar(aH_oBrw[nI][2])
	 	EndIF
	Next
	
	aC_oBrw[1][n_oBrw+1] := .F.
EndIf

Return

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Funcao executada no evento Change do objeto _oBrw³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

User Function fBrwChange()

Local _nPCod := aScan(aH_oBrw,{|x| AllTrim(Upper(x[2]))=="ZAE_COD"}   )
Local _nPPrD := aScan(aH_oBrw,{|x| AllTrim(Upper(x[2]))=="ZAE_PRZDE"} )
Local _nPPrA := aScan(aH_oBrw,{|x| AllTrim(Upper(x[2]))=="ZAE_PRZATE"})

If _oBrw:nAt > 1
                                                                               
	_oBrw:aCols[_oBrw:nAt,_nPCod] := StrZero(Val(_oBrw:aCols[_oBrw:nAt-1,_nPCod]) + 1,3)
	_oBrw:aCols[_oBrw:nAt,_nPPrD] := _oBrw:aCols[_oBrw:nAt-1,_nPPrA] + 1	
	_oBrw:oBrowse:Refresh()
EndIF

Return()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Funcao para validar os campos do objeto _oBrw³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

User Function fBrwCpo()          

Local _lRet := .T.
Local _cCpo := ReadVar()
Local _nTam := Len(ReadVar())
Local _nPPrD := aScan(aH_oBrw,{|x| AllTrim(Upper(x[2]))=="ZAE_PRZDE"} )
Local _nPPrA := aScan(aH_oBrw,{|x| AllTrim(Upper(x[2]))=="ZAE_PRZATE"})

If Subs(_cCpo,4,_nTam) = "ZAE_PRZATE"
	If _oBrw:aCols[_oBrw:nAt,_nPPrD] >= &(ReadVar())
		Alert("O campo 'Dias Ven ate' deve ser maior que o campo 'Dias Ven de'.")
		_lRet := .F.
	EndIf
EndIF

Return(_lRet)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Funcao para validar a linha do objeto _oBrw³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

User Function fBrwLinOk()

Local _lRet := .T.
Local _nPPrA := aScan(aH_oBrw,{|x| AllTrim(Upper(x[2]))=="ZAE_PRZATE"})

If _oBrw:aCols[_oBrw:nAt,_nPPrA] > 99999
	Alert("Não será permitido inserir fases, pois o numero mázimo de dias (999) foi atingido.")
	_lRet := .F.
EndIf

Return(_lRet)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Funcao para validar a exclusao dalinha do objeto _oBrw³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

User Function fBrwDel() 

Local _lRet := .F.

Alert("Não será permitida a exclusão de uma única linha. Utilize a funÇão 'Limpar Fases' na barra de funções.")

Return(_lRet)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Funcao para limpar os dados do objeto _oBrw ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Static Function fLimpar() 

If MsgYesNo("Confirma a execução da função?") 
	
	_oBrw:aCols := {}	
	Aadd(_oBrw:aCols,Array(n_oBrw+1))
	
	For nI := 1 To n_oBrw
		If AllTrim(aH_oBrw[nI][2]) = "ZAE_PRZDE"
			_oBrw:aCols[1][nI] := 1
		ElseIf AllTrim(aH_oBrw[nI][2]) = "ZAE_COD"
			aC_oBrw[1][nI] := "001"
		Else
	   		_oBrw:aCols[1][nI] := CriaVar(aH_oBrw[nI][2])
	 	EndIF
	Next
	
	_oBrw:aCols[1][n_oBrw+1] := .F.
	_oBrw:oBrowse:Refresh()
EndIf

Return()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Funcao para gravar os dados do objeto _oBrw ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Static Function fGrava()

Local _cSql := ""
Local _nReg := 0
Local _cIDAgrup := ""
Local _cNewID := ""
Local _nPCod := aScan(aH_oBrw,{|x| AllTrim(Upper(x[2]))=="ZAE_COD"}    )
Local _nPDes := aScan(aH_oBrw,{|x| AllTrim(Upper(x[2]))=="ZAE_DESCRI"} )
Local _nPPrD := aScan(aH_oBrw,{|x| AllTrim(Upper(x[2]))=="ZAE_PRZDE"}  )
Local _nPPrA := aScan(aH_oBrw,{|x| AllTrim(Upper(x[2]))=="ZAE_PRZATE"} )
Local _nPJur := aScan(aH_oBrw,{|x| AllTrim(Upper(x[2]))=="ZAE_PRCJUR"} )
Local _nPMul := aScan(aH_oBrw,{|x| AllTrim(Upper(x[2]))=="ZAE_PRCMUL"} )
Local _nPPor := aScan(aH_oBrw,{|x| AllTrim(Upper(x[2]))=="ZAE_PORLOJA"})
Local _nPVDe := aScan(aH_oBrw,{|x| AllTrim(Upper(x[2]))=="ZAE_VLRDE"}  )
Local _nPVAt := aScan(aH_oBrw,{|x| AllTrim(Upper(x[2]))=="ZAE_VLRATE"} )

_cSql := ""
_cSql += " SELECT COUNT(ZAE_IDAGRUP) AS QTDE "
_cSql += " FROM "
_cSql += " 		(SELECT DISTINCT ZAE_IDAGRUP "
_cSql += "		 FROM " + RetSqlName("ZAE")
_cSql += " 		 WHERE D_E_L_E_T_ <> '*' AND ZAE_MSBLQL = 'N') AS TAB01 "
_cSql := ChangeQuery(_cSql)  

	If Select("tZAE") > 0
		DbSelectArea("tZAE")
		tZAE->(DbCloseArea())
	EndIF

TcQuery _cSql New Alias tZAE

_nReg := tZAE->QTDE

If _nReg > 0

	_cSql := ""
	_cSql += " SELECT DISTINCT ZAE_IDAGRUP "
	_cSql += " FROM " + RetSqlName("ZAE")
	_cSql += " WHERE D_E_L_E_T_ <> '*' AND ZAE_MSBLQL = 'N'"
	_cSql := ChangeQuery(_cSql)  
	
		If Select("tZAE") > 0
			DbSelectArea("tZAE")
			tZAE->(DbCloseArea())
		EndIF
	
	TcQuery _cSql New Alias tZAE
	
	While tZAE->(!Eof())
	    
		_cIDAgrup := ZAE->ZAE_IDAGRUP
		
		DbSelectArea("ZAE")
		ZAE->(DbSetOrder(3))
		ZAE->(DbSeek(xFilial("ZAE") + _cIDAgrup))
		
			While ZAE->(!Eof()) .And. _cIDAgrup = ZAE->ZAE_IDAGRUP
			
				If RecLock("ZAE",.F.)
						Replace ZAE->ZAE_MSBLQL With "S"
					ZAE->(MsUnLock())
				EndIf
				
				ZAE->(DbSkip())
			EndDo
	
		tZAE->(DbSkip())
	EndDo
	
EndIF

_cNewID := fNewID()

For _nX := 1 To Len(_oBrw:aCols)
	If RecLock("ZAE",.T.)
			Replace ZAE->ZAE_FILIAL  With xFilial("ZAE")
			Replace ZAE->ZAE_COD     With GETSX8NUM("ZAE","ZAE_COD")
			Replace ZAE->ZAE_DESCRI  With _oBrw:aCols[_nX,_nPDes]
			Replace ZAE->ZAE_PRZDE   With _oBrw:aCols[_nX,_nPPrD]
			Replace ZAE->ZAE_PRZATE  With _oBrw:aCols[_nX,_nPPrA]
			Replace ZAE->ZAE_PRCJUR  With _oBrw:aCols[_nX,_nPJur]
			Replace ZAE->ZAE_PRCMUL  With _oBrw:aCols[_nX,_nPMul]
			Replace ZAE->ZAE_PORLOJA With _oBrw:aCols[_nX,_nPPor]
			Replace ZAE->ZAE_VLRDE   With _oBrw:aCols[_nX,_nPVDe]
			Replace ZAE->ZAE_VLRATE  With _oBrw:aCols[_nX,_nPVAt]
			Replace ZAE->ZAE_IDAGRUP With _cNewID
			Replace ZAE->ZAE_MSBLQL  With "N"			
		ZAE->(MsUnLock()) 
		ConfirmSX8()
	EndIf
Next _nX 

_oDlg:End()

Return()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Funcao para setar novo codigo do grupo ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Static Function fNewID()

Local _cSql := ""
Local _cMax := ""

_cSql := ""
_cSql += " SELECT MAX(ZAE_IDAGRUP) AS ZAE_IDAGRUP "
_cSql += " FROM " + RetSqlName("ZAE")
_cSql += " WHERE D_E_L_E_T_ <> '*' "
_cSql := ChangeQuery(_cSql)  

	If Select("tZAE") > 0
		DbSelectArea("tZAE")
		tZAE->(DbCloseArea())
	EndIF

TcQuery _cSql New Alias tZAE

If Empty(tZAE->ZAE_IDAGRUP)
	_cMax := "001"
Else
	_cMax := StrZero((Val(tZAE->ZAE_IDAGRUP) + 1),3)
EndIf

Return(_cMax)
*/