#INCLUDE "PROTHEUS.CH"
#INCLUDE "TOPCONN.CH"
#INCLUDE "RWMAKE.CH"
#INCLUDE "FONT.CH"
#INCLUDE "COLORS.CH"
#INCLUDE "FWMVCDEF.CH"
#INCLUDE "FWCOMMAND.CH"   
 
#DEFINE CRLF chr(13)+chr(10)	 
/*
----------------------------------------------------------------------------
{Protheus.doc}<SF7335X>   
  #CONTROLE_DN - EXPORTA [SB1-PRODUTOS]                                                
   Gera arquivo CSV (txt) com as informacoes dos PRODUTOS conforme Layout 
   Proprio para Remessa ao DN.
                                                                          
@author<Antonio Dantas> 
@since<13/01/2016>                                                        
@version<1.00>
@receive
<    _cModo (c) - Modo de Execucao [E=Emissao;R=Re-Emissao]
   _cHistor (c) - Historico complementar da Remessa 
>
@return
<  _lRemOK (l) - (.t.) Arquivo Gerado com sucesso; 
                 (.f.) Arquivo não foi Gerado
>
@example<Nil>
@see<Nil>
----------------------------------------------------------------------------
*/
User Function SF7335X(_cModo,_cHistor)

Local cEstat := U_SFGN001A(ProcName(0), "SF7335X")
Local _nAviso			:= 0
Local _cMensagem		:= ""
Local _cCasa				:= Space(Len(cFilAnt))
Private _cNomArqR		:= ""
Private _cNR_Rem 		:= ZCK->ZCK_CODIGO
Private _lRemOK			:= .f.
Private _aRecnos		:= {}
Private _nQtdREG 		:= 0 						//-- Variavel private a ser usada pelo arquivo de layout
Private _cPerg			:= Substr(ProcName(),3)		//-- Define o Grupo de Perguntas
//+------------------------------------------------------------------+
//| Carrega as perguntas relativas aos parametros de Impressao       |
//|    Mv_par01 - Somente a CASA ATUAL ?                           |
//+------------------------------------------------------------------+
xParPerg(_cPerg)      
//+------------------------------------------------------------------+
//|  Monta tela de paramentos para usuario, se cancelar sair         |
//+------------------------------------------------------------------+
If !Pergunte(_cPerg,.t.)  
	_lCancel := .T. 
   Return
Endif 
//+------------------------------------------------------------------+
//|  Identifica a Casa                                               |
//+------------------------------------------------------------------+
If Mv_par01 == 1 		//-- Somente a CASA ATUAL ? 
	_cCasa	:= Substr(cFilAnt,1,4) 
Endif 
//+------------------------------------------------------------------+
//| Monta a mensagem de Confirmacao                                  |
//+------------------------------------------------------------------+
_cMensagem	:= "A T E N Ç ã O !"+CRLF
_cMensagem	+= "Confirma a geração do arquivo de remessa para [PRODUTOS]!"+CRLF
_cMensagem	+= " "+CRLF
_cMensagem	+= " Considera ["+Dtoc(dDataBase)+"] como Data Base da Remessa dos PRODUTOS."
//+--------------------------------------------------------------------+
//| Implementa controle de Transacao.                                  |
//+--------------------------------------------------------------------+
_nAviso	:= Aviso(FunName()+"/"+ProcName(),_cMensagem,{"Sim","Não"},3)
If _nAviso == 1 			
	//-- Confirmou a geracao do arquivo de remessa para cartoes
	Begin Transaction
		Processa( {|| fGerArq() }, "Gera Arq. de Remessa [PRODUTOS]","Processando...")
		If !_lRemOK
			DisarmTransaction()
		Endif 
	End Transaction
Endif
If _lRemOK						
	//-- Na confirmação da Geração da Remessa modifica o Status da Remessa 
	If _lRemOK
		If Aviso(FunName()+"/"+ProcName(),"O Arquivo de remessa ["+Alltrim(_cNomArqR)+"] foi gerado com sucesso?",{"Sim","Não"}) == 1
			u_fMarkRem(_cModo,_cHistor,_cCasa)		//-- Rotina descrita no fonte [SF7325X.PRW]
		Endif
	Endif 
Endif
Return _lRemOK


/*
----------------------------------------------------------------------------
{Protheus.doc}<fGerArq>                                                
   Rotina Responsavel Gerar o Arquivo de Remessa     
																		   
@author<Antonio Dantas> 
@since<13/01/2016>                                                        
@version<Nil>                                                             
@Receive<Nil>                                                                  
@return                                                              
<   _lRemOK (l) - (.t.) Se a Geracao do Arquivo foi OK                    
                  (.f.) Por qualquer motivo não gerou arquivo de remesa   
>                                                                         
@example<Nil>
@see<Nil>
----------------------------------------------------------------------------
*/
Static Function fGerArq()

Local cEstat := U_SFGN001A(ProcName(0), "SF7335X")
Local _cArqRem 		:= ""
Local _cArqCarta	:= ""
Local _cArLayout	:= Alltrim(ZCJ->ZCJ_LAYOUT)
Local _cPathRoot	:= Alltrim(ZCJ->ZCJ_PATH)  
//--
Local _aArqLyt 		:= {} 
Local _aHeader 		:= {}
Local _aDetalhe 	:= {}
Local _aTrailler	:= {}
//-- 
Local _nH_Arq		:= 0
Local _cTexto		:= ""
Local _cFileLog		:= ""
Local _nRegs			:= 0
Local _bBlock		:= "" 
Local _cDados 		:= ""
Local _cMkTp 		:= ""
Local _cPathRem		:= ""
//-- Variaveis de Controle dos Registros a Exportar 
Local _aCodEmp 		:={	{"01MT","3"},{"02MT","6"},{"03MT","5"},{"04MT","4"} } 
Local _cEmp 			:= ""
Local _nPos			:= 0 
Local _ddataRem 	:= CtoD("  /  /  ")
//-- 
Local _aEntidade 	:={	{"01","FEDERACAO DAS INDUSTRIAS NO ESTADO DE MT"}			,;                    
						{"02","SESI-SERVICO SOCIAL DA INDUSTRIA"}					,;                           
						{"03","SENAI-SERVICO NACIONAL DE APRENDIZAGEM INDUSTRIAL"}	,;          
						{"04","INSTITUTO EUVALDO LODI"}								,;
						{"05","CONDOMINIO CASA DA INDUSTRIA DO ESTADO DE MT"}		,; 
						{"06",""}													}
Local _nPosE 		:= aScan(_aEntidade, {|x|X[1]=SB1->B1_XPRDFIL} )
//-- Variaveis INVOCADAS do Arquivo .INI 
Private _cdataRem 	:= ""
Private _cEntidade	:= ""
Private _nCtaREG	:= 0
Private _cDataCAD	:= "01/01/2011 00:00"
//-- 
Private _cCodEntid	:= ""
Private _cNomeEnti  := ""  
Private _cIdSoluc	:= ""
Private _cSoluc		:= ""
Private _cIdLinP	:= ""
Private _cLinPro	:= ""
Private _cIdFamil	:= ""
Private _cFamilia	:= ""
Private _cIdCateg	:= ""
Private _cCatego	:= ""
Private _cIdProd	:= ""
Private _cDscProd	:= ""
//+-----------------------------------------------------------------------+
//| Modifica o Flag de controle, para gerar remessa                       |
//+-----------------------------------------------------------------------+
_lRemOK := .t. 
//+-----------------------------------------------------------------------+
//| Validacoes antes da chamada da rotina de geracao do arquivo de Remesa |
//+-----------------------------------------------------------------------+
If Alltrim(_cArLayout) == ""
	Aviso(FunName()+"/"+ProcName(),"Não foi informado neste LAYOUT o nome do Arquivo de Configuração para Gerar o Arquivo de Remessa!",{"OK"},3)
	_lRemOK := .f.
Endif
If _lRemOK
	_cArqCarta 	:= cGetFile('Arquivo*.*','Salvar Arquivo',1,'C:\TEMP',.F.,GETF_LOCALHARD)
	_cArqCarta 	:= _cArqCarta
	If _cArqCarta == ""
		Aviso(FunName()+"/"+ProcName(),"Nome do Arquivo de Remessa não Foi Informado!",{"OK"})
		_lRemOK := .f.
	Endif 
	//+-----------------------------------------------------------------------+
	//| Se o operador informat ponto(.) gera nome do Arquivo de Remessa.      |
	//+-----------------------------------------------------------------------+
	_cMkTp := Substr(_cArqCarta,Len(Alltrim(_cArqCarta)),1)
	If _cMkTp == "."
		_cPathRem	:= Substr(_cArqCarta,1,Len(Alltrim(_cArqCarta))-1)
		_cNomArqR	:= Alltrim(ZCJ->ZCJ_MASTER)+Alltrim(ZCJ->ZCJ_CODIGO)+"_"+dtos(dDataBase)+StrTran(Time(),":","")+".CSV"
		_cArqCarta	:= _cPathRem+_cNomArqR 
		Aviso(FunName()+"/"+ProcName(),"Arquivo de Remessa será gerado com nome ["+_cNomArqR+"].",{"OK"})
	Endif
	//+-----------------------------------------------------------------------+
	//| Cria e Abre o Arquivo de Remessa                                      |
	//+-----------------------------------------------------------------------+
	_nH_Arq	:= fCreate(_cArqCarta)
Endif      
If _lRemOK
	If !File(_cPathRoot+Alltrim(_cArLayout))
		Aviso(FunName()+"/"+ProcName(),"Arquivo de Layout: "+_cPathRoot+Alltrim(_cArLayout)+". não foi encontrado!",{"OK"})
		_lRemOK := .f.
	EndIf
EndIf     
If _lRemOK
	//+-----------------------------------------------------------------------+
	//| Carrega o Layout do Arquivo de Remessa                                |
	//|  _aArqLyt[N,1] - Identificacao da Sessao                              |
	//|  _aArqLyt[N,2] - Numero de Repeticoes 	                              |
	//|  _aArqLyt[N,3] - Condicao de Quebra  	                              |
	//|  _aArqLyt[N,4] - ARRAY DA ORIGEM DOS CAMPOS 'informacoes' 	          |
	//|  _aArqLyt[N,5] - LIVRE 	                                              |
	//|  _aArqLyt[N,6] - Condicao do Loop 	                                  |
	//|  _aArqLyt[N,7] - Separados de Campos 	                              |
	//+-----------------------------------------------------------------------+
	_aArqLyt 	:= u_fCrArqIn(_cPathRoot+Alltrim(_cArLayout))
	//+-----------------------------------------------------------------------+
	//| Identifica os Arrays de Header, Detalhe e Trailler                    |
	//| OBS: Caso venha a existir tipo de arquivos com mais de uma linha por  |
	//|      tipo; Tratar caso a caso. Deve-se adicionar ao array do tipo e   |
	//|      tratar na seguencia.                                             |
	//|      - Inicialmente estamos considerando um de cada tipo.             |
	//+-----------------------------------------------------------------------+  
	_nLinH := aScan(_aArqLyt , {|x| x[1] = "[H  ]" }) // Header
	_nLinD := aScan(_aArqLyt , {|x| x[1] = "[D  ]" }) // Detalhe
	_nLinT := aScan(_aArqLyt , {|x| x[1] = "[T  ]" }) // Trailler
	If _nLinH > 0
		_cSeparH 	:= ";" //_aArqLyt[_nLinH,07]	
		_aHeader 	:= _aArqLyt[_nLinH,04]
	Endif
	If _nLinD > 0
		_cSeparD 	:= ";" //_aArqLyt[_nLinD,07]	
		_aDetalhe	:= _aArqLyt[_nLinD,04]
	Endif
	If _nLinT > 0
		_cSeparT 		:= ";" //_aArqLyt[_nLinT,07]	
		_aTrailler 	:= _aArqLyt[_nLinT,04]
	Endif
Endif 	
//+-----------------------------------------------------------------------+
//| Trata caso a caso os Layout's da Remessa                              |
//+-----------------------------------------------------------------------+  
If _lRemOK .and. Len(_aDetalhe) > 0
	//+-----------------------------------------------------------------------+
	//| ----- GERA CABECALHO "Header"                                         |
	//+-----------------------------------------------------------------------+
 	If _lRemOK .and. Len(_aHeader) >= 1
		_cTexto := ""
 		_cDados := ""
		_nCtaA	:= 0
 		For _nCtaA := 2 To Len(_aHeader) 
			_bBlock	:= {|| &(_aHeader[_nCtaA,2]) }
 			_cDados := Eval(_bBlock)
 			_cDados := StrTran(_cDados,Chr(13)+Chr(10),Space(2))
 			_cTexto += _cDados+Iif(_cSeparH!="",_cSeparH,"")
		Next _nCtaA
		_cTexto += Chr(13)+Chr(10) 
        //-- Grava a Linha de Cabecalho "Header" do Arquivos Remessa 
		If fWrite(_nH_Arq,_cTexto,Len(_cTexto)) != Len(_cTexto)
			If !MsgAlert("Ocorreu um erro na gravacao do arquivo.","Atencao!")
				_lRemOK := .f.
			Endif
		Endif
	Endif 
	//+-----------------------------------------------------------------------+
	//| ----- GERA DETALHE "Detalhe"                                          |
	//+-----------------------------------------------------------------------+
 	If _lRemOK .and. Len(_aDetalhe) >= 1
		//-- Zera as VARIAVEIS de controle de Registro 
		_nRegs := 0	; _nCtaREG := 0 ; _lRemOK 	:= .F.   
		//+-----------------------------------------------------------------------+
		//| Executa a Consulta as Oportunidade Disponivel para remessa e Gera o   | 
		//| Arquivo Temporario para Gerar a Remessa.                              |
		//+-----------------------------------------------------------------------+
		If fCriaTMP() 
			//-- Conta o Numero de Registros da Tabela 
			TMP_REM->(DbGoTop())				
			TMP_REM->(DbEval({|| _nRegs++ }))				
			TMP_REM->(DbGoTop())				
			//-- Inicializa o Termometro  
			ProcRegua(_nRegs)
			//-- Loop na Tabela Temporaria com os Registro das OPORTUNIDADES  
			Do While TMP_REM->(!eof())
				//-- Implementa Termometro
				_nCtaREG++
				IncProc("Total de Registros:"+Alltrim(Transform(_nRegs,"@E 999,999,999"))+"  Lidos:"+Alltrim(Transform(_nCtaREG,"@E 999,999,999")))   
				//+-----------------------------------------------------------------------+
				//| Inicizaliza variaveis que seram INVOCADAS no Arquivo de configuracao  |
				//| .INI                                                                  |
				//+-----------------------------------------------------------------------+  
				//-- Seguencia de Registro 
				_nSeguenc := _nCtaREG		 
				//-- Define: H03="DATA_ALTERACAO_REGISTRO" -- AAAAMMDD:HH:MM
				_ddataRem 	:=  Iif(!Empty(Alltrim(TMP_REM->DATA_MOV)),StoD(Substr(TMP_REM->DATA_MOV,1,8)),Ctod("02/01/11"))
				_cdataRem 	:= Strzero(Day(_ddataRem),2)+"/"+Strzero(Month(_ddataRem),2)+"/"+Alltrim(Str(Year(_ddataRem)))+" "+Substr(Time(),1,5)
				_cdataRem 	:= PadL(Alltrim(_cdataRem),16)
				//-- Define: H09="DATA_REGISTRO_CONTATO"  -- AAAAMMDD:HH:MM
				If !Empty(TMP_REM->B1_XOPER)
					_cDtREM		:= Substr(TMP_REM->B1_XOPER,1,15)
					_cDataCAD	:= Substr(_cDtREM,7,2)+"/"+Substr(_cDtREM,5,2)+"/"+Substr(_cDtREM,1,4)+" "+Substr(_cDtREM,10,5)
				Endif 	
				_cDataCAD 	:= PadL(Alltrim(_cDataCAD),16)
				//-- Idenrifica a ENTIDADE
				_cEmp 		:= Iif(Empty(TMP_REM->B1_FILIAL),Substr(cFilAnt,1,4),Substr(TMP_REM->B1_FILIAL,1,4))
				_nPos		:= Ascan(_aCodEmp,{ |x| x[1] == _cEmp }) 
				_cEntidade	:= _aCodEmp[_nPos,2]
				//+-----------------------------------------------------------------------+
				//| Identifica a ENTIDADE Proprietaria do PRODUTO.                        |
				//+-----------------------------------------------------------------------+
				_nPosE 		:= aScan(_aEntidade, {|x|X[1]=TMP_REM->B1_XPRDFIL} )
				_cCodEntid	:= TMP_REM->B1_XPRDFIL
				_cNomeEnti 	:= _aEntidade[_nPosE,2]  
				//+-----------------------------------------------------------------------+
				//| Posiciona-se no Produto do DN Correspondente.                          |
				//+-----------------------------------------------------------------------+
				dbSelectArea("ZCF")
				ZCF->(dbSetOrder(1))
				ZCF->(dbSeek(FwxFilial("ZCF")+TMP_REM->B1_XPRODDN))
				
				//D10 - IdSolucao
				_cIdSoluc := AllTrim(ZCF->ZCF_SOLUCA)
				
				//D11 - Solucao
				_cSoluc := AllTrim(FwNoAccent(ZCF->ZCF_DESCXS))
				
				//D12 - IdLinhaProduto
				_cIdLinP := AllTrim(ZCF->ZCF_LINHA)
				
				//D13 - LinhaProduto
				_cLinPro := AllTrim(FwNoAccent(ZCF->ZCF_DESCXL))
				
				//D14 - IdFamilia
				_cIdFamil := AllTrim(ZCF->ZCF_FAMILI)
				
				//D15 - Familia
				_cFamilia := AllTrim(FwNoAccent(ZCF->ZCF_DESCXF))
				
				//D16 - IdCategoria
				_cIdCateg := AllTrim(ZCF->ZCF_CATEGO)
				
				If Empty(AllTrim(_cIdCateg))
					_cIdCateg := Posicione("SB1",1,xFilial("SB1")+TMP_REM->B1_COD,"B1_GRUPO")
				EndIf
				
				//D17 - Categoria
				_cCatego := AllTrim(FwNoAccent(ZCF->ZCF_DESCXC))
				
				If Empty(AllTrim(_cCatego))
					_cCatego := AllTrim(Posicione("SBM",1,xFilial("SBM")+_cIdCateg,"BM_DESC"))
				EndIf
				
				//D18 - IdProduto
				_cIdProd := AllTrim(ZCF->ZCF_PRODUT)
				
				If Empty(AllTrim(_cIdProd))
					_cIdProd := AllTrim(TMP_REM->B1_COD)
				EndIf
				
				//D19 - Desc. Produto
				_cDscProd := AllTrim(FwNoAccent(ZCF->ZCF_DESCRI))
				
				If Empty(AllTrim(_cDscProd))
					_cDscProd := AllTrim(TMP_REM->B1_DESC)
				EndIf
				//+-----------------------------------------------------------------------+
				//| ------------ INICIO BLOCO DA MACRO PAARA GERAR REGISTRO  ------------ |
				//+-----------------------------------------------------------------------+
				//-- Monta a Linha de detalhe Conforme Layout e GRAVA  
		 		_cDados := ""
				_cTexto := ""
				_nCtaA 	:= 0 
				For _nCtaA := 2 To Len(_aDetalhe) 
					_bBlock	:= {|| &(_aDetalhe[_nCtaA,2]) }
		 			_cDados := Eval(_bBlock)
		 			_cDados := StrTran(_cDados,Chr(13)+Chr(10),Space(2))
 					_cTexto += _cDados+Iif(_cSeparD!="",_cSeparH,"")
				Next _nCtaA
				_cTexto += Chr(13)+Chr(10) 
				//-- Grava as Linhas de Informacoes "Detalhe" no Arquivos Remessa 
				If fWrite(_nH_Arq,_cTexto,Len(_cTexto)) != Len(_cTexto)
					If !MsgAlert("Ocorreu um erro na gravacao do arquivo.","Atencao!")
						_lRemOK := .f.
						Exit 
					Endif
				EndIf
				_lRemOK := .T.
				//+-----------------------------------------------------------------------+
				//| -------------- FIM BLOCO DA MACRO PAARA GERAR REGISTRO  ------------- |
				//+-----------------------------------------------------------------------+
				TMP_REM->(dbskip())
			Enddo
		Endif		//-- If fCriaTMP() 
	Endif			//-- If _lRemOK .and. Len(_aDetalhe) >= 1 		
	//+-----------------------------------------------------------------------+
	//| ----- GERA RODAPE "Trailler"                                          |
	//+-----------------------------------------------------------------------+
 	//-- 
 	If _lRemOK .and. Len(_aTrailler) >= 1     
 		_cDados := ""
 		_cTexto := ""
		_nCtaA	:= 0
 		For _nCtaA := 1 To Len(_aTrailler) 
			_bBlock	:= {|| &(_aTrailler[_nCtaA,2]) }
 			_cDados := Eval(_bBlock)
 			_cDados := StrTran(_cDados,Chr(13)+Chr(10),Space(2))
 			_cTexto += _cDados+Iif(_cSeparT!="",_cSeparH,"")
		Next _nCtaA
		_cTexto += Chr(13)+Chr(10) 
        //-- Grava a Linha de Rodape "Trailler" do Arquivos Remessa 
		If fWrite(_nH_Arq,_cTexto,Len(_cTexto)) != Len(_cTexto)
			If !MsgAlert("Ocorreu um erro na gravacao do arquivo.","Atencao!")
				_lRemOK := .f.
			Endif
		EndIf
	Endif
	If !_lRemOK
		Aviso(FunName()+"/"+ProcName(),"Não existem OPORTUNIDADES para Remessa!",{"OK"})
	Endif 
	//-- Fecha o Arquivo Temporario Criado na Funcao [fCriaTMP()]
	TMP_REM->(DbCloseArea())				
	//-- Fecha o Arquivo TXT criado para exportacao das Informacoes 
	fClose(_nH_Arq)
Endif  	
Return _lRemOK


/*
----------------------------------------------------------------------------
{Protheus.doc}<fCriaTMP>                                                   
   Executa consulta a tabela [AD1-Oportunidades], apura os Registro
   recentemente INCLUIDOS os ALTERADOS NO PERIODO e os EXCLUIDOS. Gera
   Tabela temporaria [TMP_REM] que sera utilizada para criar o arquivo de
   exportacao ao DN.   
																		   
@Author<Antonio Dantas>                                                   
@since<02/12/2015>                                                        
@version<Nil>                                                             
@Receive<Nil>                                                                  
@return<Nil>                                                                   
@example<Nil>
@see<Nil>
----------------------------------------------------------------------------
*/
Static Function fCriaTMP() 

Local cEstat := U_SFGN001A(ProcName(0), "SF7335X")
Local _cQuery		:= "" 
Local _lReturn 		:= .T. 
//+-----------------------------------------------------------------------+
//| ----- Consulta Produtos novos INCLUIDOS: NOPER == 3                   |
//+-----------------------------------------------------------------------+
_cQuery := ""
_cQuery += "  Select '3' AS OPER, SB1.B1_FILIAL, SB1.B1_COD, SB1.B1_DESC, SB1.B1_XPRODDN, SB1.B1_XPRDFIL, "+CRLF 
_cQuery += "         SB1.B1_XOPER, SB1.B1_XREM, Substr(SB1.B1_XOPER,1,15) As DATA_MOV  "+CRLF 
_cQuery += "  From "+RetSqlName("SB1")+" SB1  "+CRLF 
_cQuery += "  Where SB1.D_E_L_E_T_ = ' ' "+CRLF 
If Mv_par01 == 1 		//-- Somente a CASA ATUAL ?
	_cQuery += "  And B1_XPRDFIL = '"+Substr(cFilAnt,1,2)+"' "+CRLF
Endif 
_cQuery += "  And (Substr(SB1.B1_XOPER,1,15) = '               ' Or (Substr(SB1.B1_XOPER,1,15) > Substr(SB1.B1_XREM,1,15))) "+CRLF 
//+-----------------------------------------------------------------------+
//| ----- Consulta Produtos ALTERADOS: NOPER == 4                         |
//+-----------------------------------------------------------------------+
_cQuery += "Union all "+CRLF
_cQuery += "  Select '4' AS OPER, SB1.B1_FILIAL, SB1.B1_COD, SB1.B1_DESC, SB1.B1_XPRODDN, SB1.B1_XPRDFIL, "+CRLF 
_cQuery += "         SB1.B1_XOPER, SB1.B1_XREM, Substr(SB1.B1_XOPER,16,15) As DATA_MOV "+CRLF 
_cQuery += "  From "+RetSqlName("SB1")+" SB1 "+CRLF
_cQuery += "  Where SB1.D_E_L_E_T_ = ' ' "+CRLF 
If Mv_par01 == 1 		//-- Somente a CASA ATUAL ?
	_cQuery += "  And B1_XPRDFIL = '"+Substr(cFilAnt,1,2)+"' "+CRLF
Endif 
_cQuery += "  And Substr(SB1.B1_XOPER,1,15) <> '               ' "+CRLF 
_cQuery += "  And Substr(SB1.B1_XOPER,16,15) > Substr(SB1.B1_XREM,16,15) "+CRLF 
_cQuery += "Union all "+CRLF
//+-----------------------------------------------------------------------+
//| ----- Consulta os Produtos EXCLUIDOS: NOPER == 5                      |
//+-----------------------------------------------------------------------+
_cQuery += "  Select '5' AS OPER, SB1.B1_FILIAL, SB1.B1_COD, SB1.B1_DESC, SB1.B1_XPRODDN, SB1.B1_XPRDFIL, "+CRLF 
_cQuery += "         SB1.B1_XOPER, SB1.B1_XREM, Substr(SB1.B1_XOPER,31,15) As DATA_MOV "+CRLF 
_cQuery += "  From "+RetSqlName("SB1")+" SB1 "+CRLF
_cQuery += "  Where SB1.D_E_L_E_T_ = '*' "+CRLF 
If Mv_par01 == 1 		//-- Somente a CASA ATUAL ?
	_cQuery += "  And B1_XPRDFIL = '"+Substr(cFilAnt,1,2)+"' "+CRLF
Endif 
_cQuery += "  And Substr(SB1.B1_XOPER,1,15) <> '               ' "+CRLF 
_cQuery += "  And Substr(SB1.B1_XOPER,31,15) > Substr(SB1.B1_XREM,31,15) "+CRLF 
_cQuery += "Order By OPER, B1_FILIAL, B1_COD "+CRLF
//+------------------------------------------------------------------+
//| Grava o Resultado da Query para consulta                         |
//+------------------------------------------------------------------+
MemoWrite("C:\temp\"+UPPER(_cPerg)+"_"+ProcName()+".TXT",_cQuery)
If Select("TMP_REM")>0
	TMP_REM->(DbCloseArea())
Endif
DbUseArea(.t.,"TOPCONN",TcGenQry(,,_cQuery),"TMP_REM",.t.,.t.)
TMP_REM->(DbGoTop())				
If TMP_REM->(Eof()) .And. TMP_REM->(Bof()) 				
	_lReturn := .f. 
Endif 
Return	_lReturn 

/*
--------------------------------------------------------------------------------
{Protheus.doc} <xParPerg>
 Cria as perguntas.	  

@author<Antonio Dantas>
@since<13/02/2015>
@version<1.00>
@receive<Nil>
@return<Nil>
@example<Nil>
@see<Nil>
--------------------------------------------------------------------------------
*/
Static Function xParPerg()	

Local cEstat := U_SFGN001A(ProcName(0), "SF7335X")
Local _aPerg := {}
//*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*
//*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*
//   //-- MAPEAMENTOS DOS CAMPOS DE SX1
//   aAdd (_aPerg,{"X1_PERGUNT","X1_PERPA","X1_PERENG","MV_CHL","C",5,0,0,"X1_GSC","X1_VALID",;
//								"X1_VAR01",("X1_DEF01" e "X1_PYNE"),"X1_DEFSPA1","X1_DEFENG1","X1_CNT01",;
//								"X1_VAR02","X1_DEF02","X1_DEFSPA2","X1_DEFENG2","X1_CNT02",;
//								"X1_VAR03","X1_DEF03","X1_DEFSPA3","X1_DEFENG3","X1_CNT03",;
//								"X1_VAR04","X1_DEF04","X1_DEFSPA4","X1_DEFENG4","X1_CNT04",;
//								"X1_VAR05","X1_DEF05","X1_DEFSPA5","X1_DEFENG5","X1_CNT05",;
//								"X1_F3","X1_GRPSXG","","X1_HELP","X1_PICTURE",{"Descricao para Tela PTG"},{"Descricao para Tela EPA"},{"Descricao para Tela USA"}})
//*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*
//*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*
//+------------------------------------------------------------------+
//| Verifica se o operador esta logado na filail DR que tem acesso   |
//| a todas as filiais, ou somente na CASA em que esta logada.     |
//+------------------------------------------------------------------+
//-- Mv_par01 =     Somente a CASA ATUAL ?
aAdd(_aPerg, {"Somente a CASA ATUAL ?","Somente a CASA ATUAL ?","Somente a CASA ATUAL ?","MV_CH1","N",1,0,1,"C",,;
					"MV_PAR01","Sim","Sim","Sim","",;
					"","Não","Não","Não","",;
					"","","","","",;
					"","","","","",;
					"","","","","",;
					"","","","","",{"Se [SIM]Considera Somente a CASA ATUAL."},{"Se [SIM]Considera Somente a CASA ATUAL."},{"Se [SIM]Considera Somente a CASA ATUAL."}})
//-- 
u_SFAJUSX1(_cPerg,_aPerg) 
Return 
