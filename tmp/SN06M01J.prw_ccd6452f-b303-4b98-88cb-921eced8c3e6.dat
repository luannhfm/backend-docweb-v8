#include 'protheus.ch'

/*/{Protheus.doc} SN06M01J
Rotina responsavel para inputar dados na ZP7 e ZP0, devido a pagamentos que foram realizados
antes do modulo pronatec estar pronto.

@author 	José Leite de Barros Neto
@since 		30/03/2015
@version 	1.0		

@return 	Nil, Nulo

/*/
User Function SN06M01J()
	
	Local 	_lRet	:= .F.

	Private _aEstrut	:= {}
	Private _cArqTxt	:= Space(50)
	Private _cMemo  	:= ""
	
	_cArqTxt:= U_SFXX01J('Carrega CSV','Arquivos csv (*.csv) |*.csv|')
		
	//Abre o Arquivo
	nHdl := fOpen(_cArqTxt,68)
	
	If nHdl == -1
		MsgAlert("O arquivo de nome "+_cArqTxt+" nao pode ser aberto! Verifique os parametros.","Atencao!")
		Return
	Endif
		
	Processa({ |lEnd| _aEstrut := LERCSV(_cArqTxt) },"LENDO ARQUIVO CSV")
	Processa({ |lEnd| _lRet := IMPCSV(_aEstrut) },"GERANDO REGISTROS")
	
	If _lRet
		MemoWrite( "C:\csv\SENAI\PRONATEC_"+_cArqTxt+".TXT", _cMemo )
		MsgInfo("Fim da Importação","INFO")
	EndIf
	
Return( Nil )

/** {Protheus.doc} SA2CSV
Funcao que realiza a importacao do fornecedor

@param: 	_aEstrut, Array com a estrutura dos campos
@author: 	Jose Leite de Barros Neto
@since: 	28/03/2014
@Uso: 		SFIEMT
*/
Static Function IMPCSV(_aEstrut)
	
	Local _lRet   := .F.
	Local _nCont  := 0
	Local _cAlias := SubStr(_aEstrut[1][1],1,3)
		
	Begin Transaction
	
		For i := 2 To Len(_aEstrut)
			
			If _cAlias == 'ZP7'
				
				_cNome  := AllTrim(_aEstrut[i][1])
				_cMatr  := AllTrim(_aEstrut[i][2])
				_cDesc  := AllTrim(_aEstrut[i][3])
				_nValor := Val(AllTrim(_aEstrut[i][4]))
				_cFilial:= AllTrim(_aEstrut[i][5])
				_cCPF	 := AllTrim(_aEstrut[i][6])
				_cPerio := AllTrim(_aEstrut[i][7])
				_cSessa := AllTrim(_aEstrut[i][8])
				_dDtPg  := AllTrim(_aEstrut[i][09])
				_cEvent := AllTrim(_aEstrut[i][10])
				_cModal := AllTrim(_aEstrut[i][11])
				_cDesmo := AllTrim(_aEstrut[i][12])
				_nQtde  := Val(AllTrim(_aEstrut[i][13]))
				_cAtcn  := AllTrim(_aEstrut[i][14])
				_cDesAt := AllTrim(_aEstrut[i][15])
				_cCusto := AllTrim(_aEstrut[i][16])
				_cItemC := AllTrim(_aEstrut[i][17])
				_cAluno := AllTrim(_aEstrut[i][18])
				_cSeg	 := AllTrim(_aEstrut[i][19])
				_cConve := AllTrim(_aEstrut[i][20])
				_cDesco := AllTrim(_aEstrut[i][21])
				_cUnRef := AllTrim(_aEstrut[i][22])
				_cStatu := AllTrim(_aEstrut[i][23])
				
				DbSelectArea('ZP7')
				ZP7->(DbSetOrder(1))
										
				//ZP7_FILIAL+ZP7_XPERIO+ZP7_XSEG+ZP7_XSESSA+ZP7_XMATRI
				If .Not. ZP7->( DbSeek( _cFilial + _cPerio + _cSeg + _cSessa + _cMatr ) ) 
				
					If RecLock(_cAlias, .T.)
						
						//ZP7_XNOME
						ZP7->ZP7_XNOME := _cNome
						
						//ZP7_XMATRI
						ZP7->ZP7_XMATRI := _cMatr
						
						//ZP7_XDESCS
						ZP7->ZP7_XDESCS := _cDesc
						
						//ZP7_XVALOR
						ZP7->ZP7_XVALOR := _nValor
						
						//ZP7_FILIAL
						ZP7->ZP7_FILIAL := _cFilial
						
						//ZP7_XCPF
						ZP7->ZP7_XCPF := _cCPF
						
						//ZP7_XPERIO
						ZP7->ZP7_XPERIO := _cPerio
						
						//ZP7_XSESSA
						ZP7->ZP7_XSESSA := _cSessa
						
						//ZP7_XDTPG
						ZP7->ZP7_XDTPG := StoD(_dDtPg)
						
						//ZP7_XEVENT
						ZP7->ZP7_XEVENT := _cEvent
						
						//ZP7_XMODAL
						ZP7->ZP7_XMODAL := _cModal
						
						//ZP7_XDESMO
						ZP7->ZP7_XDESMO := _cDesmo
						
						//ZP7_XQTDE
						ZP7->ZP7_XQTDE := _nQtde
						
						//ZP7_XATECN
						ZP7->ZP7_XATECN := _cAtcn
						
						//ZP7_XDESAT
						ZP7->ZP7_XDESAT := _cDesAt
						
						//ZP7_XCCUST
						ZP7->ZP7_XCCUST := _cCusto
						
						//ZP7_XITCTA
						ZP7->ZP7_XITCTA := _cItemC
						
						//ZP7_XALUNO
						ZP7->ZP7_XALUNO := _cAluno
						
						//ZP7_XSEG
						ZP7->ZP7_XSEG := _cSeg
						
						//ZP7_XCONVE
						ZP7->ZP7_XCONVE := _cConve
						
						//ZP7_XDESCO
						ZP7->ZP7_XDESCO := _cDesco
						
						//ZP7_XUNREF
						ZP7->ZP7_XUNREF := _cUnRef
						
						//ZP7_XSTATU
						ZP7->ZP7_XSTATU := _cStatu
						
						_nCont++
						
						ZP7->(MsUnlock())
						
					EndIf
					
				EndIf
				
				ZP7->(DbCloseArea())
				
			ElseIf _cAlias == 'ZP0'
				
				_cCPF  := AllTrim(_aEstrut[i][1]) 
				_cNome := AllTrim(_aEstrut[i][2])
				_cCod  := AllTrim(_aEstrut[i][3])
				_dDtNa := StrTran(AllTrim(_aEstrut[i][4]),'-','')
				_cMae  := AllTrim(_aEstrut[i][5])
				_cRg   := AllTrim(_aEstrut[i][6])
				_cUF	:= AllTrim(_aEstrut[i][7])
				_cFilial := AllTrim(_aEstrut[i][9])
				
				DbSelectArea('ZP0')
				ZP0->(DbSetOrder(1))
				
				//ZP0_FILIAL+ZP0_XCPF
				If .Not. DbSeek( _cFilial + _cCPF )
					
					If RecLock(_cAlias, .T.)
						
						//ZP0_FILIAL
						ZP0->ZP0_FILIAL := _cFilial
						
						//ZP0_XCPF
						ZP0->ZP0_XCPF := _cCPF
						
						//ZP0_XNOME
						ZP0->ZP0_XNOME := _cNome
						
						//ZP0_XCOD
						ZP0->ZP0_XCOD := _cCod
						
						//ZP0_XDTNAS
						ZP0->ZP0_XDTNAS := StoD(_dDtNa)
						
						//ZP0_XMAE
						ZP0->ZP0_XMAE := _cMae
						
						//ZP0_XRG
						ZP0->ZP0_XRG := _cRg
						
						//ZP0_XUF
						ZP0->ZP0_XUF := _cUF
						
						_nCont++
						
						ZP0->(MsUnlock())
						
					EndIf
					
				EndIf
				ZP0->(DbCloseArea())
			Else
				loop
			EndIf
		
		Next
		
	End Transaction
	
	If _nCont > 0
		_lRet := .T.
	EndIf
	
Return( _lRet )

/** {Protheus.doc} LERCSV
Funcao que realiza a Leitura do arquivo CSV

@param: 	cArquivo, Caminho do arquivo que sera lido
@author: 	Jose Leite de Barros Neto
@since: 	30/03/2015
@Uso: 		SFIEMT
*/
Static Function LERCSV(cArquivo)
	
	Local cBuffer     := ""
	Local cAux        := ""
	Local cString     := ""
	Local cSeparador  := ""  //Verifica o tipo de separador do arquivo texto
	Local aTmp        := {}
	Local aEstrutura  := {}
	Local nCont       := 0
	Local cEof        := Chr(10)+ Chr(13)
	Local nRec        := 0
	Local lAspa       := .F.

	//Leitura da quantidade de Registros do Arquivo
	FT_FUSE(cArquivo)
	FT_FGOTOP()
	
	While !FT_FEOF()
		nRec++
		FT_FSKIP()
	End

	ProcRegua(nRec)

	//Leitura do arquivo e verificacao do ultimo caracter da linha lida para  consistencia da pesquisa
	FT_FGOTOP()

	While !FT_FEOF()
	
		cBuffer:= AllTrim(FT_FREADLN())
	
		If At(";",cBuffer) > 0
			cSeparador:= ";" 
		Else //linha de arquivo incorreta.
			IncProc()
			FT_FSKIP()
			Loop
		Endif
	
		If (SubStr(cBuffer,Len(cBuffer),1)<>cSeparador)
			cBuffer += cSeparador + cEof + cSeparador
		Else
			cBuffer += cEof + cSeparador
		Endif
	
		//Incrementa a regua
		IncProc()
	
		//Carrega o array aEstrutura com o resultado da Importacao
		cLinha:= fTAcento(cBuffer)
		lAspa := .F.

		For nCont := 1 To Len(cBuffer)
		
			cAux   := SubStr(cLinha,1,1)
			cLinha := SubStr(cLinha,2)
			
			If (cAux == cEof)
				Exit
			Endif
		
			//Sao verificadas as marcacoes feitas pelo Excel para concatenacao de strings
			Do Case
			
				Case cAux == '"'
					lAspa := !lAspa
					
				Case cAux == cSeparador .And. !lAspa
					aAdd(aTmp,cString)
					cString := ""
					
				OtherWise
					cString += cAux
					
			EndCase
		
		Next nCont
	
		For nCont := Len(aTmp)+1 To 11
			aAdd(aTmp,"")
		Next nCont
	
		//Validacao para nao salvar registros sem entidades
		If !Empty(aTmp[1]) .OR. !Empty(aTmp[2])
			aAdd(aEstrutura,aTmp)
			aTmp := {}
		Endif
		
		FT_FSKIP()
	End

	FT_FUSE()

Return( aEstrutura )