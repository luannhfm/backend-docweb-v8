#Include 'Protheus.ch'
#Include 'Topconn.ch'

/*/{Protheus.doc} SF73M04J
Funcao para realizar uma atualizacao de dados na tabela SA1010, 
de acordo com dados atualizados/validados em outra base (SA1990).

@author 	Jose Leite de Barros neto
@since 		10/03/2015
@version 	1.0
@return 	Nil, Nulo
/*/
User Function SF73M04J()
	
	Private cPerg			:= "SF73M04J"
	Private nTotal			:= 0
	Private nContador		:= 0
	Private cAlias990 		:= ""	
	Private lMsErroAuto 	:= .F.
	Private cCadastro		:= "Atualização de Clientes"
	Private aSays			:= {}
	Private aButtons		:= {}
	Private nOpca 			:= 0
	
	// Funcao para criacao das perguntas.
	fCriaSx1()

	// Forca o usuario a preencher as perguntas.
	If .Not. Pergunte(cPerg,.T.)
		Return
	EndIf
	
	AADD(aSays,"Este programa irá realizar a atualização de Clientes Pessoa Jurídica")

	AADD(aButtons, { 1,.T.,{|o| nOpca := 1,FechaBatch()}})
	AADD(aButtons, { 2,.T.,{|o| FechaBatch() }} )

	FormBatch( cCadastro, aSays, aButtons )

	If nOpca == 1
		If MsgYesNo("Confirma a atualização ?","Confirmar")
			nTotal := mv_par01
			GetSA1990()
			Processa({|| AtuSA1()()})
		EndIf
	EndIf

Return( Nil )

/** {Protheus.doc} cAlias990
Funcao para filtrar os dados

@param: 	cAlias990
@author: 	Jose Leite de Barros Neto
@since: 	10/03/2015
@Uso: 		SFIEMT
*/	
Static Function GetSA1990()

	cAlias990 := GetNextAlias()
	
	BeginSql Alias cAlias990
		
		SELECT * 
		FROM SA1990 SA1
		WHERE 
			SA1.%NotDel%
			AND ROWNUM <= %EXP:nTotal%
			/*AND (A1_XICDSEN   = 'S'
			OR  A1_XICISEN = 'S'
			OR  A1_XICDSES = 'S'
			OR  A1_XICISES = 'S')*/
		
	EndSql
	
	MemoWrite("c:/pLog/SA1990_SA1010.sql",  GetLastQuery()[2])
	
Return( cAlias990 )

/** {Protheus.doc} AtuSA1
Funcao para atualiza os dados na SA1010

@param: 	AtuSA1
@author: 	Jose Leite de Barros Neto
@since: 	10/03/2015
@Uso: 		SFIEMT
*/	
Static Function AtuSA1()
	
	ProcRegua(nTotal)
	
	(cAlias990)->( DbGoTop() )
			
	If (cAlias990)->( EOF() )
		MsgAlert("Já foram atualizados todos os clientes.")
		(cAlias990)->( DbCloseArea() )
		Return
	EndIf
	
	While .Not. (cAlias990)->( EOF() )
		
		//A1_TIPO
		_cTipo 		:= (cAlias990)->( A1_TIPO )
		
		//A1_PESSOA
		_cPessoa	:= (cAlias990)->( A1_PESSOA )
		
		//A1_CGC
		_cCGC 		:= (cAlias990)->( A1_CGC )
		
		//A1_NOME
		_cNome		:= (cAlias990)->( A1_NOME )
		
		//A1_NREDUZ
		_cNReduz	:= (cAlias990)->( A1_NREDUZ )
		
		//A1_DTNASC
		_dDtNasc	:= StoD((cAlias990)->( A1_DTNASC ))
		
		//A1_END
		_cEnd		:= (cAlias990)->( A1_END )
		
		//A1_BAIRRO
		_cBairro 	:= (cAlias990)->( A1_BAIRRO )
		
		//A1_CEP
		_cCep		:= (cAlias990)->( A1_CEP )
		
		//A1_MUNC
		_cMun		:= (cAlias990)->( A1_MUNC )
		
		//A1_ESTC
		_cEst		:= (cAlias990)->( A1_ESTC )
		
		//A1_SIMPLES
		_cOptSimp	:= (cAlias990)->( A1_SIMPLES )
		
		//A1_DDD
		_cDDD		:= (cAlias990)->( A1_DDD ) 
		
		//A1_TEL		
		_cTel		:= (cAlias990)->( A1_TEL )
		
		//A1_CODPAIS	
		_cCodPais	:= (cAlias990)->( A1_CODPAIS )
		
		//A1_CNAE
		_cCnae		:= (cAlias990)->( A1_CNAE )
		
		//A1_CONTA
		_cContaC	:= (cAlias990)->( A1_CONTA )
		
		//Campos Customizados
		//A1_XCNAEIN	
		_cCnaeInd	:= (cAlias990)->( A1_XCNAEIN )
		
		//A1_XDSCNAE	
		_cDscCnae	:= (cAlias990)->( A1_XDSCNAE )
		
		//A1_XSITREC	
		_cSituRec	:= (cAlias990)->( A1_XSITREC )
		
		//A1_XQTEMP	
		_nQtdEmp	:= (cAlias990)->( A1_XQTEMP )
		
		//A1_XFAIXFU 	
		_cFaixaFu	:= (cAlias990)->( A1_XFAIXFU )
		
		//A1_XPORTE
		_cPorte		:= (cAlias990)->( A1_XPORTE )
		
		//A1_XTRATIN
		_cTratInd	:= (cAlias990)->( A1_XTRATIN )
		
		//A1_XCODSIN
		_cCodSind	:= (cAlias990)->( A1_XCODSIN )
		
		//A1_XDSCSIN 	
		_cDesSind	:= (cAlias990)->( A1_XDSCSIN )
		
		//A1_XICASEN 	
		_cIcaSenai	:= (cAlias990)->( A1_XICASEN )
		
		//A1_XICDSEN 	
		_cIcdSenai	:= (cAlias990)->( A1_XICDSEN )
		
		//A1_XICISEN 	
		_cIciSenai	:= (cAlias990)->( A1_XICISEN )
		
		//A1_XICDSES 	
		_cIcdSesi	:= (cAlias990)->( A1_XICDSES )
		
		//A1_XICISES 	
		_cIciSesi	:= (cAlias990)->( A1_XICISES )
		
		//A1_XFPAS 		
		_cFPAS		:= IIf( (cAlias990)->( A1_XFPAS ) == 'X','N',(cAlias990)->( A1_XFPAS ) )
		
		//A1_XCNTSIN 	
		_cCntSinA	:= (cAlias990)->( A1_XCNTSIN )
		
		//A1_XCNTCON 	
		_cCnfAdim	:= (cAlias990)->( A1_XCNTCON )
		
		//A1_XTOPDN 		
		_cTopDN		:= (cAlias990)->( A1_XTOPDN )
		
		//A1_XTOPUF 		
		_cTopUF		:= (cAlias990)->( A1_XTOPUF )
		
		//A1_XTOPJUR 	
		_cTopJur	:= (cAlias990)->( A1_XTOPJUR )	
		
		//A1_XCTRSSE 	
		_cPolCom	:= (cAlias990)->( A1_XCTRSSE )
		
		DbSelectArea("SA1")
		SA1->(dbSetOrder(3))
		SA1->(dbGotop())
		
		If SA1->(DbSeek( xFilial("SA1") + PADR( AllTrim( _cCGC ),TAMSX3("A1_CGC")[1],Space(1) ) ))
			_nOpc		:= 4
			_cCliente	:= SA1->A1_COD
			_cLoja		:= SA1->A1_LOJA
			_cXOrigem	:= "CARGA ATUALIZADA - "+DtoC(dDataBase)+" - "+AllTrim(Time())+" - por: "+AllTrim(cUserName)
		Else
			_nOpc		:= 3
			_cCliente	:= IIF(_cPessoa=='F',Substr(_cCGC,1,9),IIF(_cPessoa=='J',Substr(_cCGC,1,8),))
			_cLoja		:= IIF(_cPessoa=='F','00PF',Substr(_cCGC,9,4))
			_cXOrigem	:= "CARGA INICIAL - "+DtoC(dDataBase)
		EndIf
		
		_aCliente := {}
		
		aAdd( _aCliente ,{"A1_TIPO"   	,_cTipo		,Nil}) // Tipo
		aAdd( _aCliente ,{"A1_PESSOA"  	,_cPessoa		,Nil}) // Pessoa
		
		If _nOpc = 3
			aAdd( _aCliente ,{"A1_CGC"  	,_cCGC	  		,Nil}) // CGC
			aAdd( _aCliente ,{"A1_COD"		,_cCliente	,Nil}) // Codigo
			aAdd( _aCliente ,{"A1_LOJA"  	,_cLoja  		,Nil}) // Loja
			aAdd( _aCliente ,{"A1_NOME"    	,_cNome 		,Nil}) // Nome
			aAdd( _aCliente ,{"A1_NREDUZ"  	,_cNReduz		,Nil}) // Nome reduz.
			aAdd( _aCliente ,{"A1_DTNASC"  	,_dDtNasc		,Nil}) // Data de Nascimento / Abertura
			aAdd( _aCliente ,{"A1_END"     	,_cEnd			,Nil}) // Endereco
			aAdd( _aCliente ,{"A1_BAIRRO"  	,_cBairro		,Nil}) // Bairro
			aAdd( _aCliente ,{"A1_CEP"     	,_cCep			,Nil}) // CEP
			aAdd( _aCliente ,{"A1_ENDCOB"  	,_cEnd			,Nil}) // End. Cobrança
			aAdd( _aCliente ,{"A1_MUNC"    	,_cMun 		,Nil}) // Mun. Cobrança
			aAdd( _aCliente ,{"A1_BAIRROC" 	,_cBairro		,Nil}) // Bairro Cobrança				
			aAdd( _aCliente ,{"A1_CEPC"    	,_cCep			,Nil}) // CEP Cobrança
			aAdd( _aCliente ,{"A1_ESTC"    	,_cEst 		,Nil}) // Estado Cobrança
			aAdd( _aCliente ,{"A1_SIMPLES" 	,_cOptSimp	,Nil}) // Optante pelo simples
			aAdd( _aCliente ,{"A1_DDD"		,_cDDD 		,Nil}) // Codigo DDD
			aAdd( _aCliente ,{"A1_TEL"		,_cTel 		,Nil}) // Telefone
			aAdd( _aCliente ,{"A1_CODPAIS"	,_cCodPais	,Nil}) // Codigo do País
			aAdd( _aCliente ,{"A1_EST"     	,_cEst			,Nil}) // Estado
			aAdd( _aCliente ,{"A1_MUN"     	,_cMun			,Nil}) // Cidade
			aAdd( _aCliente ,{"A1_CONTA"   	,_cContaC		,Nil}) // Conta Contabil
		EndIf

		aAdd( _aCliente ,{"A1_CNAE" 		,_cCnae		,Nil}) // CNAE
		
		//Campos Customizados
		aAdd( _aCliente ,{"A1_XCNAEIN"	,_cCnaeInd	,Nil}) // Indica Cnae Industria
		aAdd( _aCliente ,{"A1_XDSCNAE"	,_cDscCnae	,Nil}) // Descricao do Cnae
		aAdd( _aCliente ,{"A1_XSITREC"	,_cSituRec	,Nil}) // Situacao na Receita
		aAdd( _aCliente ,{"A1_XQTEMP" 	,_nQtdEmp		,Nil}) // Quantidade de Empregados
		aAdd( _aCliente ,{"A1_XFAIXFU" 	,_cFaixaFu	,Nil}) // Faixa de Funcionarios
		aAdd( _aCliente ,{"A1_XPORTE" 	,_cPorte		,Nil}) // Porte da empresa
		aAdd( _aCliente ,{"A1_XTRATIN" 	,_cTratInd	,Nil}) // Tratamento de Industria
		aAdd( _aCliente ,{"A1_XCODSIN" 	,_cCodSind	,Nil}) // Codigo do Sindicato
		aAdd( _aCliente ,{"A1_XDSCSIN" 	,_cDesSind	,Nil}) // Descricao do Sindicato
		aAdd( _aCliente ,{"A1_XICASEN" 	,_cIcaSenai	,Nil}) // Ind. Contribuinte Adicional Senai
		aAdd( _aCliente ,{"A1_XICDSEN" 	,_cIcdSenai	,Nil}) // Ind. Contribuinte Direta Senai
		aAdd( _aCliente ,{"A1_XICISEN" 	,_cIciSenai	,Nil}) // Ind Contribuinte Indireta Senai
		aAdd( _aCliente ,{"A1_XICDSES" 	,_cIcdSesi	,Nil}) // Ind Contribuinte Direta Sesi
		aAdd( _aCliente ,{"A1_XICISES" 	,_cIciSesi	,Nil}) // Ind. Contr. Indireta Sesi
		aAdd( _aCliente ,{"A1_XFPAS" 	,_cFPAS		,Nil}) // FPAS
		aAdd( _aCliente ,{"A1_XCNTSIN" 	,_cCntSinA	,Nil}) // Contribuicao Sindical Adicional
		aAdd( _aCliente ,{"A1_XCNTCON" 	,_cCnfAdim	,Nil}) // Contribuicao Conf. Adimplente
		aAdd( _aCliente ,{"A1_XTOPDN" 	,_cTopDN		,Nil}) // Pertence ao TOP 250 do DN
		aAdd( _aCliente ,{"A1_XTOPUF" 	,_cTopUF		,Nil}) // Pertence ao TOP do Estado
		aAdd( _aCliente ,{"A1_XTOPJUR" 	,_cTopJur		,Nil}) // Pertence ao Top 20 Jurisprudencia
		aAdd( _aCliente ,{"A1_XCTRSSE" 	,_cPolCom		,Nil}) // Enquadramento Politica Comercial
		aAdd( _aCliente ,{"A1_XORIGEM" 	,_cXOrigem	,Nil}) // Origem do registro	
		
		//Bloqueia o cadastro para revisão.
		If _nOpc = 3
			aAdd( _aCliente ,{"A1_MSBLQL" 	,"1"		,Nil}) // Bloqueia Cadastro
		EndIf
		
		lMsErroAuto := .F.

		Begin Transaction

			MSExecAuto({|x,y| MATA030(x,y)},_aCliente,_nOpc) //3- Inclusão, 4- Alteração, 5- Exclusão
			
			If lMsErroAuto
				MostraErro()
				DisarmTransaction()
				lDeleta := .F.
			Else
				lDeleta := .T.
			EndIf
		
		End Transaction
		
		If lDeleta
			nContador++
			MarcDel(_cCliente, _cLoja)
			IncProc("Processando: " + cValtoChar(nContador) + " de " + cValtoChar(nTotal))
		EndIf
				
		SA1->( DbCloseArea() )
		
		(cAlias990)->( DbSkip() )
	End
	
	(cAlias990)->( DbCloseArea() )
	
	MsgAlert("Foram atualizados: "+ cValToChar(nContador) +" registros.")
	
Return( Nil )

/** {Protheus.doc} MarcDel
Funcao para deletar os itens ja atualizados

@param: 	cAlias990
@author: 	Jose Leite de Barros Neto
@since: 	10/03/2015
@Uso: 		SFIEMT
*/	
Static Function MarcDel(pCod, pLoja)
	
	Local _cQuery := ""
	
	_cQuery := "UPDATE SA1990 SET D_E_L_E_T_ = '*' WHERE A1_COD = '"+ pCod +"' AND A1_LOJA = '"+ pLoja +"' "
	
	TcSqlExec(_cQuery)
   	TcSqlExec("COMMIT")

Return( Nil )

/** {Protheus.doc} fCriaSx1
Funcao para gerar a pergunta

@param: 	<Nil>
@author: 	Jose Leite de Barros Neto
@since: 	10/03/2015
@Uso: 		SFIEMT
*/	
Static Function fCriaSx1()

	Local aHelp := {}

	AAdd(aHelp, {{"Quantidade de Registros a atualizar"}, {""}, {""}})

	u_SFPUTSX1( cPerg, "01","Quantidade "		,"","","mv_ch1","N",4	,0,0,"G","",""			,"","","mv_par01","","","","","","","","","","","","","","","","",aHelp[1,1],aHelp[1,2],aHelp[1,3])
	
Return( Nil )