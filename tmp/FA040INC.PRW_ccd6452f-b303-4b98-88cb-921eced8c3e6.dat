#INCLUDE "TOTVS.CH"

/*/{Protheus.doc} FA040INC
	@description Obrigatoriedade para os campos Centro de Custo, Item e Conta
	@type User Function
	@author ³Microsiga
	@since 20/06/2012
	@version 1.0
	@return return, return_type, return_description
	@see (http://tdn.totvs.com/display/mp/FA040INC+-+Valida+dados+--+11845)
	@history 
		04/07/2019 - Paulo Schwind
		06/08/2019 - Rafael Karczevski - Revisão do código
	/*/
User Function FA040INC()

	Local lOK := .T.
	Local _cCC  := M->E1_CCC 
	Local _cItC := M->E1_ITEMC
	
	If M->E1_PREFIXO == "REN"
		// não faz nada
	ElseIf M->E1_PREFIXO == "LIQ"       // Paulo Schwind - 04/07/2019 
		// não faz nada
	ElseIf (AllTrim(M->E1_TIPO) == "CC" .or. (AllTrim(M->E1_TIPO) == "CD") .AND. AllTrim(M->E1_PREFIXO) == "CRT") .or. AllTrim(M->E1_TIPO) == "OR"
		// não faz nada
	Else 
		// valida a amarração centro x itemC
		lOk := fValCCITC()
		
		If lOK
			//Valida cliente na receita
			lOK := u_SF73E08J(M->E1_CLIENTE,M->E1_LOJA)
		EndIf
	EndIf
	
Return(lOk)

/*/{Protheus.doc} fValCCITC
	Funcao que valida a amarração entre centro de custuo e item contabil
	@author j2a.caiolima
	@since 15/08/2017
	@return Logico, True caso a amarração esteja ok e falso caso não esteja
/*/
Static function fValCCITC()
	
	Local lOK:= .F.      
    lF040Auto := .F.

	If !lF040Auto
		If M->E1_MULTNAT = "2"
			
			If (!Empty(M->E1_CCC) .AND. !Empty(M->E1_ITEMC))
				lOk := .T.
				
				If !Empty(M->E1_CCC) .AND. !Empty(M->E1_ITEMC)
					//lOk := U_ChkCCD(SE1->E1_CCC, SE1->E1_ITEMC) 
				    lOk := ChkCIT(M->E1_CCC, M->E1_ITEMC)
				EndIf
			Else 
				lOk := .F.	
				//MsgStop("Por favor, informar UO + CR.")     	
				Aviso("Atenção","Por favor, informar UO + CR.",{"OK"})   	
			Endif
		Else 
			lOk:= .T.
			
			If !Empty(M->E1_CCC) .AND. !Empty(M->E1_ITEMC)
				lOk := ChkCIT(M->E1_CCC, M->E1_ITEMC) 
			EndIf
		Endif
	Endif

Return(lOk)

/*/{Protheus.doc} ChkCIT
	@description Analisa se existe amarração entre centro de custo e Item Contabil
	@author Cedimar Dutra 
	@since 19/06/2019
	@version 1.0
/*/
Static Function ChkCIT(_cCC, _cItC) 

	Local cAlCCD := GetNextAlias()	 
	Local cMsg  := "Não existe amarração entre este Centro de Custo e Item Contábil."
	Local lRet  := .F.
	Local nRegs := 0
		
	BeginSql Alias cAlCCD
		SELECT
			CTA_ITEM
		FROM %Table:CTA%
		WHERE 
			CTA_FILIAL = %Exp:xFilial("CTA")%
			AND CTA_CUSTO = %Exp:_cCC%
			AND CTA_ITEM = %Exp:_cItC%
			AND %NOTDEL%
	EndSql
	(cAlCCD)->(dbGoTop())
    (cAlCCD)->(dbEval({|| nRegs++})) // Paulo Schwind - Contador de Registros
	(cAlCCD)->(dbGoTop())

	If nRegs > 0
		_cCC :=  M->E1_CCC
		_cItC := M->E1_ITEMC
		lRet := .T.   
		dbSelectArea("CTA")   
	Else
		If lF040Auto
			AutoGrLog("FA040INC - " + cMsg)
		Else
			Aviso("Atenção", cMsg, {"Ok"})
		EndIf
	EndIf

	(cAlCCD)->(dbCloseArea())
	
Return lRet
