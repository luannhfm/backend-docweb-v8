#include "protheus.ch"
#include "topconn.ch"
#include "tbiconn.ch"

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³xxxxx   ºAutor  ³ Ana Castro 	   º Data ³  22/05/2012   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Exclusao de titulos a Receber  usando          º±±
±±º          ³ MSEXECAUTO e gerando LOG de erros                          º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
User Function SIFINA12(aParam)         
Private cFuncName  := "SIFINA12"

                             
If ValType(aParam) == "A" .and. Len(aParam) >= 2
	If ValType(aParam[1]) =="C" .and. ValType(aParam[2]) =="C"
		cCodEmp   := aParam[1]
		cCodFil   := aParam[2] 
		ConOut(cFuncName+":: Parametros Recebidos => Empresa/Filial: "+cCodEmp+"/"+cCodFil)
		lContinua := .T.	
	Else
		lContinua := .F.	
	EndIf
Else
		lContinua := .F.
EndIf
                         


If lContinua
	ConOut(cFuncName+":: Inicializacao do ambiente - Job Provisorios Empresa/Filial: "+cCodEmp+"/"+cCodFil)
  	WfPrepEnv(cCodEmp,cCodFil)
 	u_Sia12Execute(cCodFil)
	Reset Environment 
	ConOut(cFuncName+":: Finalizacao do ambiente - Job Titulos Provisorios Empresa/Filial: "+cCodEmp+"/"+cCodFil) 
                                     
Else
	ConOut(cFuncName+":: ERRO no recebimento dos Paramentros (Empresa/Filial)!!")
	ConOut(cFuncName+"::     Tipo esperado: A |    Tipo Recebido: " + ValType(aParam))
	ConOut(cFuncName+"::  Tamanho esperado: 2 | Tamanho Recebido: " + LTrim(Str(Len(aParam))))
	If ValType(aParam) == "A"
		For nW := 1 to Len(aParam)
			ConOut(cFuncName+"::  Param["+LTrim(Str(nW))+"] -     Tipo Recebido: " + ValType(aParam[nW]))
			ConOut(cFuncName+"::  Param["+LTrim(Str(nW))+"] -  Tamanho Recebido: " + LTrim(Str(Len(aParam[nW]))))	
			If ValType(aParam[nW]) ==  "C"
				ConOut(cFuncName+"::  Param["+LTrim(Str(nW))+"] - Conteudo Recebido: " + aParam[nW])
			EndIf
		Next nW
	EndIf
EndIf

Return


User Function Sia12Execute(_cFil)
Local aCampos  := {}
Local _aVet     := {}
Local nOperacao := 5                                
Local cQuery 	:= ""
Local cAliasTMP := GetNextAlias()
Local cAliasTRB := GetNextAlias()
Local cNomArqTrb:= ""
Local nI, nCntFOr                         
Local aEstrut 	:= {}
   //	ConOut(cFuncName+"::Entrei na rotina ") 
	
	
	aEstrut := { { "E1_FILIAL"  ,"C",tamsx3("E1_FILIAL")[1],0 } ,;
              	 { "E1_PREFIXO" ,"C",tamsx3("E1_PREFIXO")[1],0 } ,;
				 { "E1_NUM"	 	,"C",tamsx3("E1_NUM")[1],0 } ,;
				 { "E1_PARCELA"	,"C",tamsx3("E1_PARCELA")[1],0 },; 
				 { "E1_TIPO"	,"C",tamsx3("E1_TIPO")[1],0 } ,;
				 { "E1_CLIENTE" ,"C",tamsx3("E1_CLIENTE")[1],0 },; 
				 { "E1_LOJA"	,"C",tamsx3("E1_LOJA")[1],0} }
				


	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Campos 
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	aAdd( aCampos, { "E1_FILIAL"	 ,, "Filial" } )
	aAdd( aCampos, { "E1_PREFIXO"	 ,, "Prefixo" } )
	aAdd( aCampos, { "E1_NUM"	 	 ,, "Numero" } )
	aAdd( aCampos, { "E1_PARCELA"	,, "Parcela" } )
	aAdd( aCampos, { "E1_TIPO"		,, "Tipo" } )
	aAdd( aCampos, { "E1_CLIENTE"	,, "Cliente" } )
	aAdd( aCampos, { "E1_LOJA"		,, "Loja" } )
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Cria o arquivo temporario ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cNomArqTRB := CriaTrab( aEstrut, .T. )
	dbUseArea( .T.,,cNomArqTRB, cAliasTRB, .F., .F. )
	
	IndRegua( cAliasTRB, cNomArqTRB,"E1_FILIAL+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA",,,"Criando Indice, aguarde..." )
	dbClearIndex()
	dbSetIndex( cNomArqTRB + OrdBagExt() )
	
	// Query dos Titulos em Aberto
	cQuery :=  "SELECT E1_FILIAL, E1_PREFIXO, E1_NUM, E1_PARCELA, E1_CLIENTE, E1_LOJA,  E1_TIPO "
	cQuery +=  "FROM "+RetSqlName("SE1")
	cQuery +=  " WHERE E1_FILIAL = '"+_cFil+"' AND "    
	cQuery +=  "E1_TIPO = 'PR'  AND "
	cQuery +=  "E1_BAIXA = '  ' AND "
	cQuery +=  "E1_SALDO > 0 AND "
	cQuery +=  "E1_VENCREA  >= '"  + DtoS(ddatabase) +"' AND "  
	cQuery +=  "D_E_L_E_T_ = '' "
	cQuery := ChangeQuery(cQuery)
	
	If Select(cAliasTMP) > 0
		dbSelectArea(cAliasTMP)  
		 //	ConOut(cFuncName+"::Query vazia ") 
		dbCloseArea()              
	Endif
	
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasTMP,.T.,.F.)
	
	For nCntFor := 1 To Len(aCampos)
		If ( aEstrut[nCntFor,2]<>"C" )
			TcSetField(cAliasTMP,aCampos[nCntFor,1],aCampos[nCntFor,2],aCampos[nCntFor,3],aCampos[nCntFor,4])
		EndIf
	Next nCntFor
	
	DbSelectArea(cAliasTMP)
	dbGotop()
	
	If !Eof(cAliasTMP)
		                   
  //	ConOut(cFuncName+"::Query com resultado ") 		
		dbSelectArea(cAliasTMP)
		dbGotop()
		
		// Carrega dados no Array a partir do resultado da Query
		While !Eof(cAliasTMP)
				
			(cAliasTRB)->(DbAppend())
			For nI := 1 To Len(aCampos)
				If  (cAliasTRB)->(FieldPos((cAliasTMP)->( FieldName( ni )))) > 0
					_xDado := FieldGet((cAliasTMP)->(FieldPos((cAliasTRB)->(FieldName( ni )))))      
								ConOut(cFuncName+":: Carregando Vetor")	
					AADD(_aVet, {((cAliasTRB)->(FieldName(ni))), _xDado, NIL} )				
				EndIf
			Next
			(cAliasTMP)->(DbSkip())
		EndDo
		(cAliasTMP)->(dbCloseArea())
	Endif
	             
	lMsErroAuto := .F.
	If !Empty(_aVet)
		MSExecAuto({|x,y| FINA040(x,y)}, _aVet, nOperacao)
	Endif	
	
Return Nil