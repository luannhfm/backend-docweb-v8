#Include 'Protheus.ch'

/*/{Protheus.doc} SF04M03J
Funcao para dar carga de saldo inicial de estoque de produtos

@author 	Jose Leite de Barros Neto
@since 	13/08/2015
@version 	1.0
@return 	Nil, Nulo

@see 
http://tdn.totvs.com/display/public/mp/MATA220+-+Controle+de+Itens+do+Estoque
/*/
User Function SF04M03J()
	
	Local _lRet		:= .F.
	Local aEstrut	:= {}
	Local cArqTxt	:= Space(50)
	Local cMemo  	:= ""
	Local cCadastro	:= "Saldo Inicial de Produtos"
	Local aSays		:= {}
	Local aButtons	:= {}
	Local nOpca 		:= 0
	
	Private lMsErroAuto	:= .F.
	
	AADD(aSays,"Este programa irá realizar a inclusão de Saldos Iniciais de Produtos")

	AADD(aButtons, { 1,.T.,{|o| nOpca := 1,FechaBatch()}})
	AADD(aButtons, { 2,.T.,{|o| FechaBatch() }} )

	FormBatch( cCadastro, aSays, aButtons )

	If nOpca == 1
		If MsgYesNo("Confirma a atualização de Saldos?","Confirmar")
			
			_cArqTxt := U_SFXX01J('Importacao de Saldos Iniciais','Arquivos csv (*.csv) |*.csv|')
			
			//Abre o Arquivo
			nHdl := fOpen(_cArqTxt,68)
		
			If nHdl == -1
				MsgAlert("O arquivo de nome "+_cArqTxt+" nao pode ser aberto! Verifique os parametros.","Atencao!")
				Return
			Endif
		
			Processa({ |lEnd| aEstrut := SB9CSV(_cArqTxt) },"LENDO ARQUIVO CSV DE PRODUTOS")
			Processa({ |lEnd| _lRet := IMPSB9(aEstrut) },"GERANDO REGISTROS")
		
			If _lRet
				MemoWrite( "C:\plog\csv\PRODUTOS_"+cFilAnt+".TXT", cMemo ) //+CHR(13)+CHR(10)
				MsgInfo("FIM DA ATUALIZAÇÃO DO SALDO DE PRODUTOS","Atenção")
			EndIf
			
		EndIf
	EndIf
	
Return( Nil )

/** {Protheus.doc} IMPSB9
Funcao que realiza a atualizacao do produto

@param: 	aEstrut, Array com a estrutura dos campos
@author: 	Jose Leite de Barros Neto
@since: 	22/07/2015
@Uso: 		SFIEMT
*/
Static Function IMPSB9(p_aEstrut)
	
	Local nOpcao			:= 3
	Local cCodProd		:= ""
	Local cArmazem		:= ""
	Local cQtdIni 		:= 0
	Local _lRet 			:= .F.
	Local _nContador 	:= 0
	Local _aProduto 	:= {}
	
	Default p_aEstrut := 0
	
	Private lMsErroAuto := .F.
		
	If Len(p_aEstrut) <= 1
		Alert('Por favor, verifique o layout do arquivo CSV, a estrutura esta incorreta!')
		Return( _lRet )
	EndIf

	For i := 2 to Len(p_aEstrut)
	
		//B9_FILIAL
		cFil := p_aEstrut[i][1]
		
		//B9_COD
		cCodProd	:= StrZero(Val( p_aEstrut[i][2] ),TamSX3('B1_COD')[1])
		
		//B9_LOCAL
		cArmazem	:= StrZero(Val(p_aEstrut[i][3]),TamSX3('B9_LOCAL')[1])
		
		//B9_QINI
		cQtdIni := Val(p_aEstrut[i][4])
		
		DbSelectArea('SB1')
		SB1->(DbSetOrder(1))
		SB1->(DbGoTop())
		If SB1->( DbSeek( FwXFilial('SB1') + cCodProd) )
			
			aProduto := {}
			nOpcao := 3
			lMsErroAuto := .F.
						
			DbSelectArea('SB9')
			
			aAdd(aProduto,{"B9_FILIAL"	,cFil		, Nil})
			aAdd(aProduto,{"B9_COD"		,cCodProd	, Nil})	
			aAdd(aProduto,{"B9_LOCAL"	,cArmazem	, Nil})	
			aAdd(aProduto,{"B9_QINI"		,cQtdIni	, Nil})
				
			Begin Transaction   	
				
				MSExecAuto({|x,y| MATA220(x,y)},aProduto,nOpcao)		
				
				If lMsErroAuto
					MostraErro()
					DisarmTransaction()
				Else
					_nContador++
				EndIf
				
			End Transaction
			
			SB9->(DbCloseArea())
			
		Else
			Alert('O Produto: ' + cCodProd + ', não esta cadastrado no sistema, favor verificar!')
		EndIf
		
		SB1->( DbCloseArea() )
		
	Next

	If _nContador > 0
		_lRet := .T.
	EndIf
	
Return( _lRet )

/** {Protheus.doc} SB9CSV
Funcao que realiza a Leitura do arquivo CSV

@param: 	cArquivo, Caminho do arquivo que sera lido
@author: 	Jose Leite de Barros Neto
@since: 	22/07/2015
@Uso: 		SFIEMT
*/
Static Function SB9CSV(cArquivo)
	
	Local cBuffer     := ""
	Local cAux        := ""
	Local cString     := ""
	Local cSeparador  := ""  //Verifica o tipo de separador do arquivo texto
	Local aTmp        := {}
	Local aEstrutura  := {}
	Local nCont       := 0
	Local cEof        := Chr(10)+ Chr(13)
	Local nRec        := 0
	Local lAspa       := .F.

	//Leitura da quantidade de Registros do Arquivo
	FT_FUSE(cArquivo)
	FT_FGOTOP()
	
	While !FT_FEOF()
		nRec++
		FT_FSKIP()
	End

	ProcRegua(nRec)

	//Leitura do arquivo e verificacao do ultimo caracter da linha lida para  consistencia da pesquisa
	FT_FGOTOP()

	While !FT_FEOF()
	
		cBuffer:= AllTrim(FT_FREADLN())
	
		If At(";",cBuffer) > 0
			cSeparador:= ";" 
		Else //linha de arquivo incorreta.
			IncProc()
			FT_FSKIP()
			Loop
		Endif
	
		If (SubStr(cBuffer,Len(cBuffer),1)<>cSeparador)
			cBuffer += cSeparador + cEof + cSeparador
		Else
			cBuffer += cEof + cSeparador
		Endif
	
		//Incrementa a regua
		IncProc()
	
		//Carrega o array aEstrutura com o resultado da Importacao
		cLinha:= fTAcento(cBuffer)
		lAspa := .F.

		For nCont := 1 To Len(cBuffer)
		
			cAux   := SubStr(cLinha,1,1)
			cLinha := SubStr(cLinha,2)
			
			If (cAux == cEof)
				Exit
			Endif
		
			//Sao verificadas as marcacoes feitas pelo Excel para concatenacao de strings
			Do Case
			
				Case cAux == '"'
					lAspa := !lAspa
					
				Case cAux == cSeparador .And. !lAspa
					aAdd(aTmp,cString)
					cString := ""
					
				OtherWise
					cString += cAux
					
			EndCase
		
		Next nCont
	
		For nCont := Len(aTmp)+1 To 11
			aAdd(aTmp,"")
		Next nCont
	
		//Validacao para nao salvar registros sem entidades
		If !Empty(aTmp[1]) .OR. !Empty(aTmp[2])
			aAdd(aEstrutura,aTmp)
			aTmp := {}
		Endif
		
		FT_FSKIP()
	End

	FT_FUSE()

Return( aEstrutura )