#include 'totvs.ch'
#include 'parmtype.ch'

/*/{Protheus.doc} EstornoContabilAdapter
Classe Adapter para o serviço
@type class
@author  Walmir Junior
@since   06/10/2020
@version 1.0
/*/

CLASS EstornoContabilAdapter FROM FWAdapterBaseV2
	METHOD New()
	METHOD GetListEstornoContabil()
EndClass

//-------------------------------------------------------------------
/*/{Protheus.doc} New
Método construtor
@type method
@param cVerb, verbo HTTP utilizado
@author  Walmir Junior
@since   06/10/2020
@version 1.0
/*/
//-------------------------------------------------------------------
Method New( cVerb ) CLASS EstornoContabilAdapter
	_Super:New( cVerb, .T. )
return

//-------------------------------------------------------------------
/*/{Protheus.doc} GetListEstornoContabil
Método que retorna uma lista de Conta Contabil.
@type method
@author  Walmir Junior
@since   06/10/2020
@version 1.0
/*/
//-------------------------------------------------------------------
Method GetListEstornoContabil(_pTipo) CLASS EstornoContabilAdapter
	Local aArea 	AS ARRAY
	Local cWhere	AS CHAR
	
	aArea   := FwGetArea()
	AddMapFields( self )

	If _pTipo == 'F'
		::SetQuery( GetQryFol() )
	Else
		::SetQuery( GetQuery() )
	EndIf

	cWhere :=	"	ZAR.D_E_L_E_T_ = ' ' "
			
	::SetWhere( cWhere )
	
    ::SetOrder( " ZAR_FILIAL, ZAR_TIPO, ZAR_CHVCT2, ZAR_SEQEST " )

	//Executa a consulta, se retornar .T. tudo ocorreu conforme esperado
	If ::Execute() 
		// Gera o arquivo Json com o retorno da Query
		::FillGetResponse()
	EndIf
	
    FwrestArea(aArea)

return

//-------------------------------------------------------------------
/*/{Protheus.doc} AddMapFields
Função para geração do mapa de campos
@type method
@param oSelf, object, Objeto da prórpia classe
@author  Walmir Junior
@since   06/10/2020
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function AddMapFields( oSelf )
	
	oSelf:AddMapFields( 'filial'						, 'ZAR_FILIAL'	, .T., .T., { 'ZAR_FILIAL'  , 'C', TamSX3( 'ZAR_FILIAL' )[1]	, 0 } )
	oSelf:AddMapFields( 'tipo'							, 'ZAR_TIPO'	, .T., .F., { 'ZAR_TIPO'	, 'C', TamSX3( 'ZAR_TIPO'  )[1]		, 0 } )	
	oSelf:AddMapFields( 'chave_ct2'						, 'ZAR_CHVCT2'	, .T., .F., { 'ZAR_CHVCT2'  , 'C', TamSX3( 'ZAR_CHVCT2' )[1]	, 0 } )
	oSelf:AddMapFields( 'sequencia'						, 'ZAR_SEQEST'	, .T., .F., { 'ZAR_SEQEST'  , 'C', TamSX3( 'ZAR_SEQEST' )[1]	, 0 } )
	oSelf:AddMapFields( 'valor'							, 'ZAR_VLREST'	, .T., .F., { 'ZAR_VLREST'  , 'N', TamSX3( 'ZAR_VLREST' )[1]	, 2 } )
	oSelf:AddMapFields( 'filial_original'				, 'ZAR_FILORI'	, .T., .F., { 'ZAR_FILORI'  , 'C', TamSX3( 'ZAR_FILORI' )[1]	, 0 } )
	oSelf:AddMapFields( 'data_estorno'					, 'ZAR_DTEST'	, .T., .F., { 'ZAR_DTEST'  	, 'C', TamSX3( 'ZAR_DTEST'	)[1]	, 0 } )
	oSelf:AddMapFields( 'valor_original'	    		, 'ZAR_VLRORI'	, .T., .F., { 'ZAR_VLRORI'  , 'N', TamSX3( 'ZAR_VLRORI' )[1]	, 2 } )
	oSelf:AddMapFields( 'justificativa'					, 'ZAR_JUSTIF'	, .T., .F., { 'ZAR_JUSTIF'  , 'C', TamSX3( 'ZAR_JUSTIF' )[1]	, 0 } )
	oSelf:AddMapFields( 'situacao'						, 'ZAR_SITUAC'	, .T., .F., { 'ZAR_SITUAC'  , 'C', TamSX3( 'ZAR_SITUAC' )[1]	, 0 } )
	oSelf:AddMapFields( 'entidade_original'				, 'ZAR_ENTORI'	, .T., .F., { 'ZAR_ENTORI'  , 'C', TamSX3( 'ZAR_ENTORI' )[1]	, 0 } )
	oSelf:AddMapFields( 'entidade_destino'				, 'ZAR_ENTDES'	, .T., .F., { 'ZAR_ENTDES'  , 'C', TamSX3( 'ZAR_ENTDES' )[1]	, 0 } )
	oSelf:AddMapFields( 'conta_debito_origem'			, 'ZAR_CTDORI'	, .T., .F., { 'ZAR_CTDORI'  , 'C', TamSX3( 'ZAR_CTDORI' )[1]	, 0 } )
	oSelf:AddMapFields( 'conta_debito_destino'			, 'ZAR_CTDDES'	, .T., .F., { 'ZAR_CTDDES'  , 'C', TamSX3( 'ZAR_CTDDES' )[1]	, 0 } )
	oSelf:AddMapFields( 'conta_credito_origem'			, 'ZAR_CTCORI'	, .T., .F., { 'ZAR_CTCORI'  , 'C', TamSX3( 'ZAR_CTCORI' )[1]	, 0 } )
	oSelf:AddMapFields( 'conta_credito_destino'			, 'ZAR_CTCDES'	, .T., .F., { 'ZAR_CTCDES'  , 'C', TamSX3( 'ZAR_CTCDES' )[1]	, 0 } )
	oSelf:AddMapFields( 'centro_custo_debito_origem'	, 'ZAR_CCDORI'	, .T., .F., { 'ZAR_CCDORI' 	, 'C', TamSX3( 'ZAR_CCDORI'	)[1]	, 0 } )
	oSelf:AddMapFields( 'centro_custo_debito_destino'	, 'ZAR_CCDDES'	, .T., .F., { 'ZAR_CCDDES' 	, 'C', TamSX3( 'ZAR_CCDDES'	)[1]	, 0 } )
	oSelf:AddMapFields( 'centro_custo_credito_origem'	, 'ZAR_CCCORI'	, .T., .F., { 'ZAR_CCCORI'  , 'C', TamSX3( 'ZAR_CCCORI' )[1]	, 0 } )
	oSelf:AddMapFields( 'centro_custo_credito_destino'	, 'ZAR_CCCDES'	, .T., .F., { 'ZAR_CCCDES'  , 'C', TamSX3( 'ZAR_CCCDES' )[1]	, 0 } )
	oSelf:AddMapFields( 'item_contabil_debito_origem'	, 'ZAR_ITDORI'	, .T., .F., { 'ZAR_ITDORI'  , 'C', TamSX3( 'ZAR_ITDORI' )[1]	, 0 } )
	oSelf:AddMapFields( 'item_contabil_debito_destino'	, 'ZAR_ITDDES'	, .T., .F., { 'ZAR_ITDDES'  , 'C', TamSX3( 'ZAR_ITDDES' )[1]	, 0 } )
	oSelf:AddMapFields( 'item_contabil_credito_origem'	, 'ZAR_ITCORI'	, .T., .F., { 'ZAR_ITCORI'  , 'C', TamSX3( 'ZAR_ITCORI' )[1]	, 0 } )
	oSelf:AddMapFields( 'item_contabil_credito_destino'	, 'ZAR_ITCDES'	, .T., .F., { 'ZAR_ITCDES'  , 'C', TamSX3( 'ZAR_ITCDES' )[1]	, 0 } )
	oSelf:AddMapFields( 'usuario_registro'	    		, 'ZAR_USREGI'	, .T., .F., { 'ZAR_USREGI'  , 'C', TamSX3( 'ZAR_USREGI' )[1]	, 0 } )
	oSelf:AddMapFields( 'data_hora_registro'			, 'ZAR_DTHREG'	, .T., .F., { 'ZAR_DTHREG'  , 'C', TamSX3( 'ZAR_DTHREG' )[1]	, 0 } )
	oSelf:AddMapFields( 'usuario_aprovador'	 			, 'ZAR_USAPRO'	, .T., .F., { 'ZAR_USAPRO'  , 'C', TamSX3( 'ZAR_USAPRO' )[1]	, 0 } )
	oSelf:AddMapFields( 'data_hora_aprovacao'   		, 'ZAR_DTHAPR'	, .T., .F., { 'ZAR_DTHAPR'  , 'C', TamSX3( 'ZAR_DTHAPR' )[1]	, 0 } )
	oSelf:AddMapFields( 'usuario_aceite'	 			, 'ZAR_USACEI'	, .T., .F., { 'ZAR_USACEI'  , 'C', TamSX3( 'ZAR_USACEI' )[1]	, 0 } )
	oSelf:AddMapFields( 'data_hora_aceite'	    		, 'ZAR_DTHACE'	, .T., .F., { 'ZAR_DTHACE'  , 'C', TamSX3( 'ZAR_DTHACE' )[1]	, 0 } )
	oSelf:AddMapFields( 'classe_valor_debito_origem'	, 'ZAR_CVLDBO'	, .T., .F., { 'ZAR_CVLDBO'  , 'C', TamSX3( 'ZAR_CVLDBO' )[1]	, 0 } )
	oSelf:AddMapFields( 'classe_valor_debito_destino'	, 'ZAR_CVLDBD'	, .T., .F., { 'ZAR_CVLDBD'  , 'C', TamSX3( 'ZAR_CVLDBD' )[1]	, 0 } )
	oSelf:AddMapFields( 'classe_valor_credito_origem'	, 'ZAR_CVLCRO'	, .T., .F., { 'ZAR_CVLCRO'  , 'C', TamSX3( 'ZAR_CVLCRO' )[1]	, 0 } )
	oSelf:AddMapFields( 'classe_valor_credito_destino'	, 'ZAR_CVLCRD'	, .T., .F., { 'ZAR_CVLCRD'  , 'C', TamSX3( 'ZAR_CVLCRD' )[1]	, 0 } )
	oSelf:AddMapFields( 'lote_erp'						, 'ZAR_DOCAPR'	, .T., .F., { 'ZAR_DOCAPR'  , 'C', TamSX3( 'ZAR_DOCAPR' )[1]	, 0 } )
	oSelf:AddMapFields( 'historico_original'			, 'CT2_HIST'	, .T., .F., { 'CT2_HIST'  	, 'C', TamSX3( 'CT2_HIST' 	)[1]	, 0 } )
	//oSelf:AddMapFields( 'recno'				    , 'R_E_C_N_O_'	, .T., .F., { 'R_E_C_N_O_'  , 'N', 15							, 0 }, {'ZAR.R_E_C_N_O_' } )

return 

//------------------------------------------------------------------
/*/{Protheus.doc} GetQuery
Retorna a query usada no serviço
@type method
@param oSelf, object, Objeto da prórpia classe
@author  Walmir Junior
@since   06/10/2020
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function GetQryFol()
	Local cQuery AS CHARACTER

	cQuery := " SELECT #QueryFields#"
    cQuery += " FROM ( "
	cQuery += " SELECT "
	cQuery += " ZAR_FILIAL, "
	cQuery += " ZAR_TIPO, "
	cQuery += " ZAR_CHVCT2, "
	cQuery += " 'XXX' AS ZAR_SEQEST, "
	cQuery += " SUM(ZAR_VLREST) AS ZAR_VLREST, "
	cQuery += " ZAR_FILORI, "
	cQuery += " ZAR_DTEST, "
	cQuery += " SUM(ZAR_VLRORI) AS ZAR_VLRORI, "
	cQuery += " ( "
	cQuery += "		SELECT SUBSTR(ZXX.ZAR_JUSTIF,0,29) FROM " + RetSqlName( 'ZAR' ) + " ZXX  "
    cQuery += " 	WHERE ZXX.ZAR_FILIAL = ZAR.ZAR_FILIAL  "
	cQuery += "         AND ZXX.ZAR_TIPO = ZAR.ZAR_TIPO "
    cQuery += "     	AND ZXX.ZAR_CHVCT2 = ZAR.ZAR_CHVCT2 "
	cQuery += "         AND ZXX.ZAR_SEQEST = '001' "
	cQuery += " ) AS ZAR_JUSTIF, "
	cQuery += " ZAR_SITUAC, "
	cQuery += " '' AS ZAR_ENTORI, "
	cQuery += " '' AS ZAR_ENTDES, "
	cQuery += " '' AS ZAR_CTDORI, "
	cQuery += " 'CONFORME RATEIO' AS ZAR_CTDDES, "
	cQuery += " '' AS ZAR_CTCORI, "
	cQuery += " '' AS ZAR_CTCDES, "
	cQuery += " '' AS ZAR_CCDORI, "
	cQuery += " ZAR_CCDDES, "
	cQuery += " '' AS ZAR_CCCORI, "
	cQuery += " '' AS ZAR_CCCDES, "
	cQuery += " '' AS ZAR_ITDORI, "
	cQuery += " ZAR_ITDDES, "
	cQuery += " '' AS ZAR_ITCORI, "
	cQuery += " '' AS ZAR_ITCDES, "
	cQuery += " ZAR_USREGI, "
	cQuery += " ( "
	cQuery += "		SELECT ZAR_DTHREG FROM " + RetSqlName( 'ZAR' ) + " ZXX  "
    cQuery += " 	WHERE ZXX.ZAR_FILIAL = ZAR.ZAR_FILIAL  "
	cQuery += "         AND ZXX.ZAR_TIPO = ZAR.ZAR_TIPO "
    cQuery += "     	AND ZXX.ZAR_CHVCT2 = ZAR.ZAR_CHVCT2 "
	cQuery += "         AND ZXX.ZAR_SEQEST = '001' "
	cQuery += " ) AS ZAR_DTHREG, "
	cQuery += " ZAR_USAPRO, "
	cQuery += " ZAR_DTHAPR, "
	cQuery += " ZAR_USACEI, "
	cQuery += " ZAR_DTHACE, "
	cQuery += " ZAR_CVLDBO, "
	cQuery += " ZAR_CVLDBD, "
	cQuery += " ZAR_CVLCRO, "
	cQuery += " ZAR_CVLCRD, "
	cQuery += " ZAR_DOCAPR, '' AS CT2_HIST "
	cQuery += " FROM " + RetSqlName( 'ZAR' ) + " ZAR "
	cQuery += " WHERE ZAR.D_E_L_E_T_ = ' '  "
    cQuery += " AND ZAR.ZAR_TIPO = 'F' "
    cQuery += " AND #QueryWhere#"
	cQuery += " GROUP BY	ZAR_FILIAL, ZAR_TIPO, ZAR_CHVCT2, ZAR_FILORI, ZAR_DTEST, ZAR_SITUAC, ZAR_CCDDES, ZAR_ITDDES, ZAR_USREGI, ZAR_USAPRO, ZAR_DTHAPR, "
    cQuery += " 			ZAR_USACEI,	ZAR_DTHACE, ZAR_USACEI,	ZAR_CVLDBO,	ZAR_CVLDBD,	ZAR_CVLCRO,	ZAR_CVLCRD,	ZAR_DOCAPR "
	cQuery += " ORDER BY ZAR_CHVCT2, ZAR_SEQEST "

	cQuery += " )"

Return cQuery

//------------------------------------------------------------------
/*/{Protheus.doc} GetQuery
Retorna a query usada no serviço
@type method
@param oSelf, object, Objeto da prórpia classe
@author  Walmir Junior
@since   06/10/2020
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function GetQuery()
	Local cQuery AS CHARACTER

	cQuery := " SELECT "
	cQuery += "		#QueryFields# "
    cQuery += " FROM ( "
	cQuery += " 	SELECT "
	cQuery += " 		#QueryFields#"
	cQuery += " 	FROM " 
	cQuery += " 	" + RetSqlName( 'ZAR' ) + " ZAR "
	cQuery += " 	INNER JOIN "
	cQuery += " 	" +	RetSqlName( 'CT2' ) + " CT2 " 
	cQuery += " 	ON "
	cQuery += " 		SUBSTR(ZAR.ZAR_CHVCT2, 1, 8) = CT2_FILIAL "
	cQuery += " 		AND SUBSTR(ZAR.ZAR_CHVCT2, 9, 8) = CT2_DATA "
	cQuery += " 		AND SUBSTR(ZAR.ZAR_CHVCT2, 17, 6) = CT2_LOTE "
	cQuery += " 		AND SUBSTR(ZAR.ZAR_CHVCT2, 23, 3) = CT2_SBLOTE "
	cQuery += " 		AND SUBSTR(ZAR.ZAR_CHVCT2, 26, 6) = CT2_DOC "
	cQuery += " 		AND SUBSTR(ZAR.ZAR_CHVCT2, 32, 3) = CT2_LINHA "
	cQuery += " 		AND SUBSTR(ZAR.ZAR_CHVCT2, 35, 1) =  CT2_TPSALD "
	cQuery += " 		AND SUBSTR(ZAR.ZAR_CHVCT2, 36, 2) = CT2_EMPORI "
	cQuery += " 		AND SUBSTR(ZAR.ZAR_CHVCT2, 38, 8) = CT2_FILORI "
	cQuery += " 		AND SUBSTR(ZAR.ZAR_CHVCT2, 46, 2) = CT2_MOEDLC "
	cQuery += "			AND CT2.D_E_L_E_T_ = ' ' "
	cQuery += " 	WHERE "
	cQuery += " 		#QueryWhere# "
	cQuery += " 		AND ZAR.ZAR_TIPO != 'F' "
	cQuery += " 	ORDER BY 
	cQuery += " 		ZAR_CHVCT2, "
	cQuery += " 		ZAR_SEQEST "
	cQuery += " )"

Return cQuery
