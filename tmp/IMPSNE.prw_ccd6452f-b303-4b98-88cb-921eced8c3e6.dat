#Include "TOTVS.ch"
#Include "XMLXFUN.ch"
#INCLUDE "parmtype.ch"

/*/{Protheus.doc} IMPSNE
	@description Inicia o processamento perguntando ano e mes.
	@type User Function
	@author Rafael Karczevski
	@since 16/08/2019
	@version 1.0
@history 04/02/2020, Franklin de Brito de Oliveira, Removido o uso da função AutoGrLog().
@history 04/02/2020, Franklin de Brito de Oliveira, Removido o uso do controle de transação.
/*/
User Function IMPSNE()

	Local cPerg := "IMPSNE"
	Private nStart := Seconds()

    CriaSX1(cPerg)

	If Pergunte(cPerg)
        IMPSNED()
	EndIf

Return

/*/{Protheus.doc} IMPSNED
	@description Realiza o download no arquivo e salva o mesmo, após cria log e inicia
		o processmento de importação.
	@type User Function
	@author Rafael Karczevski
	@since 16/08/2019
	@version 1.0
	/*/
Static Function IMPSNED()

	//http://sne.iel.org.br:8080/ielWebService/ws/soapXml/contaReceber&mesAno=092015&repasse=A&siglaNucleo=MT
	Local cUrl := GetNewPar("MV_XSNEURL","http://sne.iel.org.br:8080/ielWebService/ws")
	Local cPath := GetNewPar("MV_XSNEPTH","/soapXml/contaReceber&mesAno=SFMESSFANO&repasse=A&siglaNucleo=MT")
	Local cCNPJ := GetNewPar("MV_XSNECNP","/soapXml/contaReceber&mesAno=SFMESSFANO&cnpj=SFPCNPJ&siglaNucleo=MT")
	Local cFile := dToS(Date()) + StrTran(Time(),":") + "_IMPSNE_" + StrZero(MV_PAR01,2) + cValToChar(MV_PAR02)
	Local oRest := FwRest():New(cUrl)
	Local aHeader := {"Accept: application/xml"}
	Local nHandle := 00
	Local nHdlLog := 00
	Local cMsgLog := ""

	MakeDir("C:\TEMP\IMPSNE\")
	nHdlLog := fCreate("C:\TEMP\IMPSNE\" + cFile + "_LOG.TXT")
	
	/* Grava Log */
	cMsgLog := "IMPSNE - " + dToC(Date()) + " - " + Time() + ": Inicio da operação."  + CRLF
	fWrite(nHdlLog, cMsgLog)

	If Empty( MV_PAR03 )
		cPath := StrTran(cPath,"SFMES",StrZero(MV_PAR01,2))
		cPath := StrTran(cPath,"SFANO",cValToChar(MV_PAR02))

		oRest:SetPath(cPath)
	
	Else
	
		cCNPJ := StrTran(cCNPJ,"SFMES",StrZero(MV_PAR01,2))
		cCNPJ := StrTran(cCNPJ,"SFANO",cValToChar(MV_PAR02))
		cCNPJ := StrTran(cCNPJ,"SFPCNPJ",AllTRIM(cValToChar(MV_PAR03)))

		oRest:SetPath(cCNPJ)

	EndIf

	If oRest:Get(aHeader)

		/* Grava Log */
		cMsgLog := "IMPSNE - " + dToC(Date()) + " - " + Time() + ": Download completo."  + CRLF
		fWrite(nHdlLog, cMsgLog)
		
		nHandle := fCreate("C:\TEMP\IMPSNE\" + cFile + ".XML")
		fWrite(nHandle, oRest:GetResult())
		fClose(nHandle)
		
		/* Grava Log */
		cMsgLog := "IMPSNE - " + dToC(Date()) + " - " + Time() + ": Arquivo criado e salvo com sucesso. (" + "C:\TEMP\IMPSNE\" + cFile + ".XML)"  + CRLF
		fWrite(nHdlLog, cMsgLog)
		
		FwMsgRun(,{ |oSay| EXECSNE("C:\TEMP\IMPSNE\" + cFile + ".XML",nHdlLog,oSay)}, "Importação SNE", "Aguarde...Processando Dados...")

	Else
	
		/* Grava Log */
		cMsgLog := "IMPSNE - " + dToC(Date()) + " - " + Time() + ": Erro ao baixar o arquivo:" + CRLF
		fWrite(nHdlLog, cMsgLog)
		fWrite(nHdlLog, oRest:GetLastError() + CRLF)

		MsgStop("Ocorreu um erro durante o processamento do arquivo, verifique o arquivo de log: " + CRLF + "C:\TEMP\IMPSNE\" + cFile + "_LOG.TXT", "[Fonte: IMPSNE]" )
	
	EndIf

	fClose(nHdlLog)
	MsgInfo("Gerou o arquivo de Log: " + CRLF + "C:\TEMP\IMPSNE\" + cFile + "_LOG.TXT" + CRLF + "Verifique caso necessário.", "[Fonte: IMPSNE]")

Return

/*/{Protheus.doc} EXECSNE
Funcao responsavel por ler XML do SNE e Gerar Contas a Receber

@author 	Jose Leite de Barros Neto
@since 	30/07/2015
@version 	1.0
@return 	Nil, Nulo
/*/
Static Function EXECSNE(p_cArq,p_nHdlLog,oSay)
	
	Local _aArea	:= GetArea()
	Local _cDirExp	:= GetNewPar('MV_XSNERET','C:\Util\SNE\retorno\')
	Local _cArqImp 	:= ""
	Local _cError  	:= ""
	Local _cWarning	:= ""
	Local _oXml 	:= Nil
	Local _cXml		:= ""
	Local _cMsg		:= ""
	Local _cFile	:= ""
	Local _lRet		:= .F.

	PARAMTYPE 2 VAR oSay AS OBJECT OPTIONAL DEFAULT NIL

	Private _cLocErr	:= GetNewPar('MV_XSNERRO','C:\Util\SNE\erro\')
	Private _cIniFile	:= GetADV97()
	Private _cStartP 	:= GetPvProfString(GetEnvServer(),"StartPath","ERROR", _cIniFile )+'xml\iel_sne\'
	
	If ValType(oSay) == "O"
		oSay:cCaption := "Início do Processo....Aguarde!"
		ProcessMessages()
	EndIf

	_cArqImp := p_cArq

	If .Not. Empty(_cArqImp)
		
		_cFile := _cArqImp
		
		//Copia o arquivo para o servidor
		If .Not. Empty(_cFile)
			
			While At("\",_cFile) > 0
				_cFile := Substr(_cFile,At("\",_cFile)+1)
			End
			
			If .Not. ":\" $ _cFile //-- Arquivo do servidor
				
				cArqSrv := _cStartP + _cFile 
				
				If File(cArqSrv)
					FErase(cArqSrv)  
				EndIf 
			
				__CopyFile(_cArqImp, cArqSrv)
				 
			EndIf
			
		EndIf
		
		//Realiza o Parse do Arquivo XML para Objeto
		_oXml := XmlParserFile( cArqSrv ,"_",@_cError,@_cWarning )
		
		If _oXml == Nil
			_cMsg := "Falha ao gerar Objeto XML : "+_cError+" / "+_cWarning
			FwLogMsg("INFO", /*cTransactionID*/, "REST", FunName(), "", "01", _cMsg, 0, (nStart - Seconds()), {})
			/* Grava Log */
			cMsgLog := "IMPSNE - " + dToC(Date()) + " - " + Time() + "Falha ao gerar Objeto XML : "+_cError+" / "+_cWarning + CRLF
			fWrite(p_nHdlLog, cMsgLog)
			Return
		Endif
		
		/* Grava Log */
		cMsgLog := "IMPSNE - " + dToC(Date()) + " - " + Time() + "Iniciando Processamento." + CRLF
		fWrite(p_nHdlLog, cMsgLog)

		If ValType(oSay) == "O"
			oSay:cCaption := "Starting Process..Gravando Título" 
			ProcessMessages()
		EndIf

		_lRet := fGrava( _oXml, p_nHdlLog, oSay) 
		
	EndIf
	
	/* Grava Log */
	cMsgLog := "IMPSNE - " + dToC(Date()) + " - " + Time() + "Fim da importação do arquivo." + CRLF
	fWrite(p_nHdlLog, cMsgLog)
	_cMsg := "Fim de Importacao Arquivo"
	FwLogMsg("INFO", /*cTransactionID*/, "REST", FunName(), "", "01", _cMsg, 0, (nStart - Seconds()), {})
	
	If _lRet
		_cMsg := "Importação finalizada com Sucesso."
		MsgInfo(_cMsg,"Atenção")
	EndIf
	
	RestArea(_aArea)
	
Return( Nil )

/*/{Protheus.doc}fGrava
Funcao que realiza a verificacao do tipo do arquivo

@author: 	Jose Leite de Barros Neto
@since: 	03/08/2015
@Uso: 		SFIEMT
/*/
Static Function fGrava( p_oXML, p_nHdlLog , oSay)
	
	Local _lReturn 	:= .F.

	PARAMTYPE 2 VAR oSay AS OBJECT OPTIONAL DEFAULT NIL

	If ValType(oSay) == "O"
		oSay:cCaption := "Aguarde...Registrando Título no Financeiro" 
		ProcessMessages()
	EndIf

	If ValType(p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF) == 'A'
		_lReturn := GravaSE1("1", p_oXML, p_nHdlLog) //Varios titulos no XML
	Else
		_lReturn := GravaSE1("2", p_oXML, p_nHdlLog) //Somente um titulo no XML
	EndIf 
	
Return( _lReturn )


/*/{Protheus.doc} GravaSE1
Funcao que realiza a gravacao dos titulos

@param: 	p_cTipo, p_oXML
@author: 	Jose Leite de Barros Neto
@since: 	03/09/2015
@Uso: 		SFIEMT
/*/
Static Function GravaSE1(p_cTipo, p_oXML, p_nHdlLog, oSay)
	
	Local _lReturn	:= .F.
	Local _cFilial	:= xFilial('SE1')
	Local _cPrefixo	:= 'EST'
	Local _cTipo 	:= 'EST'
	Local _aTitulo	:= {}
	Local _nOperac	:= 0
	Local _cCCC		:= GetNewPar("MV_XSNEUN","13060102") 			//Unidade do SNE
	Local _cCrdRep	:= GetNewPar("MV_XSNECC","41010407010") 		//Conta com Repasse
	Local _cItmRep	:= GetNewPar("MV_XSNEIC","1530306010101") 	//Item com Repasse
	Local _cNatRep	:= GetNewPar("MV_XSNENC","1200000006") 		//Natureza com repasse
	Local _cCrdSem	:= GetNewPar("MV_XSNECS","41010407009") 		//Conta Sem Repasse
	Local _cItmSem	:= GetNewPar("MV_XSNEIS","1530306010102") 	//Item Sem Repasse
	Local _cNatSem	:= GetNewPar("MV_XSNENS","1200000005") 		//Natureza sem repasse
	Local _cEmpCon 	:= ""
	Local _cCnpj   	:= ""
	Local _cGrpEmp 	:= ""
	Local _cInsEst 	:= ""
	Local _cRazSoc 	:= ""
	Local _cNomFan 	:= ""
	Local _cLograd 	:= ""
	Local _cNumero 	:= ""
	Local _cComple 	:= ""
	Local _cBairro 	:= ""
	Local _cCidade 	:= ""
	Local _cUfEmp  	:= ""
	Local _cCepEmp 	:= ""
	Local _cContat 	:= ""
	Local _cTelef  	:= ""
	Local _cEmail  	:= ""
	Local _cCpfCon 	:= ""
	Local _cCtrSne 	:= ""
	Local _cCtrAx  	:= ""
	Local _cGrpCta 	:= ""
	Local _cMdlCtr 	:= ""
	Local _dDtIVig 	:= ""
	Local _dDtFVig 	:= ""
	Local _cCpfRes 	:= ""
	Local _cNomRes 	:= ""
	Local _cCodIel 	:= ""
	Local _cCgcIel 	:= ""
	Local _cNumFat 	:= ""
	Local _cRetifi 	:= ""
	Local _cMeARef 	:= ""
	Local _cMeAFat 	:= ""
	Local _cForPgt 	:= ""
	Local _dVencto 	:= ""
	Local _nValorT 	:= 0
	Local _cNumBol 	:= ""
	Local _cTipCob 	:= ""
	Local _cCdIelP 	:= ""
	Local _cCgIelP 	:= ""
	Local _nVlReSe 	:= 0
	Local _cItemRS 	:= ""
	Local _cAnoIRS 	:= ""
	Local _nVlAdEs 	:= 0
	Local _nVlDesc 	:= 0
	Local _cItemTA 	:= ""
	Local _cAnoTA  	:= ""
	Local _nVlRBol 	:= 0
	Local _cItemRP 	:= ""
	Local _cAnoRP  	:= "" 
	Local _cLog		:= ""
	Local _cHist		:= ""
	Local i			:= 0
	Local nQtdReg	:= 0
	
	PARAMTYPE 3 VAR oSay AS OBJECT OPTIONAL DEFAULT NIL

	Private lMsErroAuto := .F.
/*
		Autor     : Carlos Ryve Gandini
		Data/Time : 05/11/19 as 14:39
		Detalhe   : Tratamento para que possa gravar o log da MsExecAuto no arquivo de Log. 
*/
	Private lMsHelpAuto := .F.
	Private lAutoErrNoFile := .T.
	Private aLogErr := {}
	
	//Begin Transaction
	
		If p_cTipo == '1'
			
			nQtdReg := Len(p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF)
			
			For i := 1 to nQtdReg

				/* Grava Log */
				cMsgLog := "IMPSNE - " + dToC(Date()) + " - " + Time() + ": Gerando.. ("+Alltrim(Transform(i,"@E 999,999"))+")  de ("+Alltrim(Transform(nQtdReg,"@E 999,999"))+") Titulos a Receber" + CRLF
				fWrite(p_nHdlLog, cMsgLog)	

				If ValType(oSay) == "O"
					oSay:cCaption := "Gerando.. ("+Alltrim(Transform(i,"@E 999,999"))+")  de ("+Alltrim(Transform(nQtdReg,"@E 999,999"))+") Titulos a Receber" 
					ProcessMessages()
				EndIf
					
				//Dados da Empresa Cobrada
				_cEmpCon := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[1]:TEXT 	//CodigoEmpresaConcedente
				_cCnpj   := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[2]:TEXT 	//CnpjEmpresaCobrada
				_cGrpEmp := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[3]:TEXT 	//GrupoEmpresa
				_cInsEst := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[4]:TEXT 	//InscricaoEstadual
				_cRazSoc := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[5]:TEXT 	//RazaoSocialEmpresa
				_cNomFan := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[6]:TEXT 	//NomeFantasiaEmpresaCobrada
				_cLograd := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[7]:TEXT 	//LogradouroEmpresaCobrada
				_cNumero := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[8]:TEXT 	//NumeroEnderecoEmpresaCobrada
				_cComple := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[9]:TEXT 	//ComplementoEnderecoEmpresaCobrada
				_cBairro := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[10]:TEXT 	//BairroEmpresaCobrada
				_cCidade := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[11]:TEXT 	//CidadeEmpresaCobrada
				_cUfEmp  := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[12]:TEXT 	//UfEmpresaCobrada
				_cCepEmp := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[13]:TEXT 	//CepEmpresaCobrada
				_cContat := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[14]:TEXT 	//NomeContatoEmpresa
				_cTelef  := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[15]:TEXT 	//TelefoneContatoEmpresa
				_cEmail  := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[16]:TEXT 	//EmailContatoEmpresa
				_cCpfCon := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[17]:TEXT 	//CpfContatoEmpresa
				
				//Dados do Contrato
				_cCtrSne := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[18]:TEXT 	//NumeroContratoSNE
				_cCtrAx  := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[19]:TEXT 	//NumeroContratoAX
				_cGrpCta := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[20]:TEXT 	//GrupoConta
				_cMdlCtr := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[21]:TEXT 	//ModeloContrato
				_dDtIVig := DtoC(StoD(StrTran(p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[22]:TEXT,'-',''))) 	//DataInicialVigenciaContrato
				_dDtFVig := DtoC(StoD(StrTran(p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[23]:TEXT,'-',''))) 	//DataFinalVigenciaContrato
				_cCpfRes := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[24]:TEXT 	//CpfResponsavelContrato
				_cNomRes := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[25]:TEXT 	//NomeResponsavelContrato
				_cCodIel := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[26]:TEXT 	//CodigoUnidadeIELResponsavel
				_cCgcIel := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[27]:TEXT 	//CnpjUnidadeIELResponsavel
				
				//Dados da Fatura
				_cNumFat := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[28]:TEXT 		//NumeroFatura
				_cRetifi := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[29]:TEXT 		//Retificadora
				_cMeARef := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[30]:TEXT 		//MesAnoReferencia
				_cMeAFat := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[31]:TEXT 		//MesAnoFaturamento
				_cForPgt := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[32]:TEXT 		//FormaPagamento
				_dVencto := DtoC(StoD(StrTran(p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[33]:TEXT,'-',''))) 		//VencimentoFatura
				_nValorT := Val(p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[34]:TEXT)	//ValorCobranca
				_cNumBol := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[35]:TEXT 		//NumeroBoletoFatura
				_cTipCob := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[36]:TEXT 		//TipoCobranca
				_cCdIelP := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[37]:TEXT 		//CodigounidadeIELPrestadora
				_cCgIelP := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[38]:TEXT 		//CnpjUnidadeIELPrestadora
				
				//Dados Recrutamento e selecao
				_nVlReSe := Val(p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[39]:TEXT)	//ValorTotalRecruSelecao
				_cItemRS := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[40]:TEXT 		//CentroResponsabilidadeRecruSelecao
				_cAnoIRS := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[41]:TEXT 		//AnoCentroResponsabilidadeRecruSelecao
				
				//Dados de Taxa de Adm e Desconto
				_nVlAdEs := Val(p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[42]:TEXT)	//ValorTotalAdmEstagio
				_nVlDesc := Val(p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[43]:TEXT)	//ValorTotalDescontoFatura
				_cItemTA := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[44]:TEXT 		//CentroResponsabilidadeTaxaAdm
				_cAnoTA  := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[45]:TEXT 		//AnoCentroResponsabilidadeTaxaAdm
				
				//Dados do Repasse da Bolsa
				_nVlRBol := Val(p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[46]:TEXT)	//ValorTotalRepasseBolsa
				_cItemRP := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[47]:TEXT 		//CentraoResponsabilidadeRepasseBolsa
				_cAnoRP  := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF[i]:_MULTIREF[48]:TEXT 		//AnoCentroResponsabilidadeRepasseBolsa
				
				DbSelectArea("SA1")
				SA1->(dbSetOrder(3)) //A1_FILIAL+A1_CGC
				SA1->(dbGotop())
			
				If .Not. SA1->(DbSeek(xFilial("SA1") + _cCnpj))
					_cMsg := "O Cliente: " + AllTrim(_cRazSoc) +" CNPJ: " + AllTrim(_cCnpj) + " não esta cadastrado no Protheus!"
					/* Grava Log */
					cMsgLog := "IMPSNE - " + dToC(Date()) + " - " + Time() + ": " + _cMsg + CRLF
					fWrite(p_nHdlLog, cMsgLog)

				/*Autor     : Carlos Ryve Gandini
					Data/Time : 05/11/19 as 10:48
					Detalhe   :	Desativado a mensagem, causando paralisação do 
					            processo pois aguarda ação do usuário.
				*/
					//MsgStop(_cMsg,"Atenção")
					FwLogMsg("INFO", /*cTransactionID*/, "REST", FunName(), "", "01", _cMsg, 0, (nStart - Seconds()), {})

				Else
					
					_cCliente	:= SA1->A1_COD
					_cLoja 	:= SA1->A1_LOJA
					_cMultNat	:= '2'
					
					_cXnumBco	:= Substr(Padr(AllTrim(_cNumBol),TamSX3("E1_XNUMBCO")[1]),8,10)
					_cXIdCnab	:= Padr(AllTrim(_cNumBol),TamSX3("E1_XNUMBCO")[1])
						
					If _cTipCob == "REPASSE"
						_lRemessa	:= .T.
						_cCredit 	:= Padr(_cCrdRep,TamSX3("E1_CREDIT")[1])
						_cItemC	:= Padr(_cItmRep,TamSX3("E1_ITEMC")[1]) 
						_cNaturez	:= Padr(_cNatRep,TamSX3("E1_NATUREZ")[1])
					Else
						_lRemessa	:= .F.
						_cCredit	:= Padr(_cCrdSem,TamSX3("E1_CREDIT")[1])
						_cItemC	:= Padr(_cItmSem,TamSX3("E1_ITEMC")[1])
						_cNaturez	:= Padr(_cNatSem,TamSX3("E1_NATUREZ")[1])
					Endif
					
					_cParcela := GetParc(_cPrefixo, _cNumFat, _cTipo, p_nHdlLog)
					
					If _cParcela == '001'
						_cHist := _cMeARef + ' - ' + _cTipCob
						
						_aTitulo := {}
						_nOperac := 3
						
						aAdd( _aTitulo 	,{"E1_FILIAL"  	,_cFilial							,Nil})
						aAdd( _aTitulo 	,{"E1_PREFIXO" 	,_cPrefixo  						,Nil})
						aAdd( _aTitulo 	,{"E1_NUM"	 	,_cNumFat 						,Nil})
						aAdd( _aTitulo 	,{"E1_PARCELA"	,_cParcela						,Nil})
						aAdd( _aTitulo 	,{"E1_TIPO"	 	,_cTipo 	 						,Nil})
						aAdd( _aTitulo	,{"E1_CLIENTE" 	,_cCliente						,Nil})
						aAdd( _aTitulo	,{"E1_LOJA"	 	,_cLoja							,Nil})
						aAdd( _aTitulo 	,{"E1_NATUREZ" 	,_cNaturez  						,Nil})
						aAdd( _aTitulo 	,{"E1_EMISSAO" 	,dDataBase						,NIL})
						aAdd( _aTitulo 	,{"E1_VENCTO"	,DataValida(CtoD(_dVencto))	,NIL})
						aAdd( _aTitulo 	,{"E1_VALOR"	 	,_nValorT							,Nil})
						aAdd( _aTitulo 	,{"E1_HIST"	 	,_cHist	 						,Nil})
						aAdd( _aTitulo	,{"E1_CREDIT" 	,_cCredit 						,Nil})
						aAdd( _aTitulo 	,{"E1_CCC"	  	,_cCCC 	 						,Nil})
						aAdd( _aTitulo 	,{"E1_ITEMC"	 	,_cItemC	 						,Nil})
						aAdd( _aTitulo 	,{"E1_XIDCNAB" 	,_cXIdCnab  						,Nil})
						aAdd( _aTitulo 	,{"E1_XNUMBCO" 	,_cXNumBco  						,Nil})
						aAdd( _aTitulo 	,{"E1_NUMBCO"  	,_cXIdCnab  						,Nil})
						aAdd( _aTitulo 	,{"E1_MULTNAT" 	,_cMultNat						,Nil})			
						
						lMsErroAuto := .F.
						
						_cLog := _cFilial + '_' + _cPrefixo + '_' + _cNumFat + '_' + _cParcela + '_' + _cTipo + '_' + _cCliente + '_' + _cLoja
						
				/*Autor     : Carlos Ryve Gandini
					Data/Time : 05/11/19 as 10:49
					Detalhe   :	1) Desativado o controle de Transação pois já existe um controle de transação
											   principal no início do processamento. Isso causa perda de perfomance e lock 
												 desnecessario no DB (Obs.: MsExecAuto, também utiliza transação...Ah mais Locks...).
											
											2) Retirado tratativa de Abertura e Posicionamento da SE1, desnecessario. Em utilização
												 de MsExecAuto não é utilizado.
	
											3) Realizado tratamento, para verificar se titulo ja existe, para não haver duplicidade.
				*/

				//Begin Transaction

							DbSelectArea("SE1")
							SE1->(DbSetOrder(2)) //E1_FILIAL+E1_CLIENTE+E1_LOJA+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO
							If SE1->( MsSeek( _cFilial + _cCliente + _cLoja + _cPrefixo + _cNumFat + _cParcela + _cTipo ) )
							
								_cMsg := "Título já importado => "
								_cMsg += "Cliente:" + _cCliente 
								_cMsg += " Loj:"    + _cLoja 
								_cMsg += " Prf:"    + _cPrefixo 
								_cMsg += " Num:"    + _cNumFat 
								_cMsg += " Par:"    + _cParcela 
								_cMsg += " Tip:"    + _cTipo

								cMsgLog := "IMPSNE - " + dToC(Date()) + " - " + Time() + ": " + _cMsg + CRLF
								fWrite(p_nHdlLog, cMsgLog)
								
								Loop

							EndIf
							
							//AutoGrLog(Replicate("*",80))
							//AutoGrLog("IMPSNE - NOVO TRATAMENTO DE LOG " + dToC(Date()) + " - " + Time() )
							MSExecAuto({|x,y| Fina040(x,y)},_aTitulo,_nOperac)
							//AutoGrLog("")
					
							If lMsErroAuto

								aLogErr := GetAutoGRLog()
								cMsgErr := ""
								lFollow := .T.

								For nA := 1 To Len(aLogErr)
									fWrite(p_nHdlLog, aLogErr[nA] + CRLF)
								
									If (lFollow .And. nA > 2) .Or. ("< -- Invalido" $ aLogErr[nA])
										cMsgErr += aLogErr[nA] + CRLF 
										If ("Tabela " $ aLogErr[nA])
										  lFollow := .F.
										EndIf
									EndIf

								Next nA

								cAviso :=  "Houve uma falha no processamento dos dados. Clique em CANCELAR para abortar!" + CRLF + CRLF
								cAviso += cMsgErr + CRLF

								lOpRet := MsgYesNoTime( cAviso, UsrFullName(RetCodUsr()) + "...Mensagem será fechada em 5 segundos!")
								If !lOpRet
									DisarmTransaction()
									Exit
								EndIf

								_lReturn := .F.

							Else

								aLogErr := GetAutoGRLog() //Chamada para limpar o log
								_lReturn := .T.

								/* Grava Log */
								_cMsg := "Titulo " + _cNumFat + " - " + _cPrefixo + " - " + _cTipo + ", gravado com sucesso."
								cMsgLog := "IMPSNE - " + dToC(Date()) + " - " + Time() + ": " + _cMsg + CRLF
								fWrite(p_nHdlLog, cMsgLog)
							EndIf
						
							//SE1->( DbCloseArea() )
						
						//End Transaction
					EndIf
				EndIf
				
				SA1->(DbCloseArea())
					
			Next
			
		Else
			
		
			//Dados da Empresa Cobrada
			_cEmpCon := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[1]:TEXT 	//CodigoEmpresaConcedente
			_cCnpj   := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[2]:TEXT 	//CnpjEmpresaCobrada
			_cGrpEmp := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[3]:TEXT 	//GrupoEmpresa
			_cInsEst := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[4]:TEXT 	//InscricaoEstadual
			_cRazSoc := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[5]:TEXT 	//RazaoSocialEmpresa
			_cNomFan := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[6]:TEXT 	//NomeFantasiaEmpresaCobrada
			_cLograd := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[7]:TEXT 	//LogradouroEmpresaCobrada
			_cNumero := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[8]:TEXT 	//NumeroEnderecoEmpresaCobrada
			_cComple := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[9]:TEXT 	//ComplementoEnderecoEmpresaCobrada
			_cBairro := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[10]:TEXT 	//BairroEmpresaCobrada
			_cCidade := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[11]:TEXT 	//CidadeEmpresaCobrada
			_cUfEmp  := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[12]:TEXT 	//UfEmpresaCobrada
			_cCepEmp := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[13]:TEXT 	//CepEmpresaCobrada
			_cContat := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[14]:TEXT 	//NomeContatoEmpresa
			_cTelef  := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[15]:TEXT 	//TelefoneContatoEmpresa
			_cEmail  := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[16]:TEXT 	//EmailContatoEmpresa
			_cCpfCon := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[17]:TEXT 	//CpfContatoEmpresa
			
			//Dados do Contrato
			_cCtrSne := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[18]:TEXT 	//NumeroContratoSNE
			_cCtrAx  := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[19]:TEXT 	//NumeroContratoAX
			_cGrpCta := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[20]:TEXT 	//GrupoConta
			_cMdlCtr := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[21]:TEXT 	//ModeloContrato
			_dDtIVig := DtoC(StoD(StrTran(p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[22]:TEXT,'-',''))) 	//DataInicialVigenciaContrato
			_dDtFVig := DtoC(StoD(StrTran(p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[23]:TEXT,'-',''))) 	//DataFinalVigenciaContrato
			_cCpfRes := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[24]:TEXT 	//CpfResponsavelContrato
			_cNomRes := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[25]:TEXT 	//NomeResponsavelContrato
			_cCodIel := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[26]:TEXT 	//CodigoUnidadeIELResponsavel
			_cCgcIel := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[27]:TEXT 	//CnpjUnidadeIELResponsavel
			
			//Dados da Fatura
			_cNumFat := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[28]:TEXT 		//NumeroFatura
			_cRetifi := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[29]:TEXT 		//Retificadora
			_cMeARef := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[30]:TEXT 		//MesAnoReferencia
			_cMeAFat := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[31]:TEXT 		//MesAnoFaturamento
			_cForPgt := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[32]:TEXT 		//FormaPagamento
			_dVencto := DtoC(StoD(StrTran(p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[33]:TEXT,'-',''))) 		//VencimentoFatura
			_nValorT := Val(p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[34]:TEXT)	//ValorCobranca
			_cNumBol := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[35]:TEXT 		//NumeroBoletoFatura
			_cTipCob := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[36]:TEXT 		//TipoCobranca
			_cCdIelP := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[37]:TEXT 		//CodigounidadeIELPrestadora
			_cCgIelP := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[38]:TEXT 		//CnpjUnidadeIELPrestadora
			
			//Dados Recrutamento e selecao
			_nVlReSe := Val(p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[39]:TEXT)	//ValorTotalRecruSelecao
			_cItemRS := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[40]:TEXT 		//CentroResponsabilidadeRecruSelecao
			_cAnoIRS := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[41]:TEXT 		//AnoCentroResponsabilidadeRecruSelecao
			
			//Dados de Taxa de Adm e Desconto
			_nVlAdEs := Val(p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[42]:TEXT)	//ValorTotalAdmEstagio
			_nVlDesc := Val(p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[43]:TEXT)	//ValorTotalDescontoFatura
			_cItemTA := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[44]:TEXT 		//CentroResponsabilidadeTaxaAdm
			_cAnoTA  := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[45]:TEXT 		//AnoCentroResponsabilidadeTaxaAdm
			
			//Dados do Repasse da Bolsa
			_nVlRBol := Val(p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[46]:TEXT)	//ValorTotalRepasseBolsa
			_cItemRP := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[47]:TEXT 		//CentraoResponsabilidadeRepasseBolsa
			_cAnoRP  := p_oXML:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MULTIREF:_MULTIREF:_MULTIREF[48]:TEXT 		//AnoCentroResponsabilidadeRepasseBolsa
			
			DbSelectArea("SA1")
			SA1->(dbSetOrder(3)) //A1_FILIAL+A1_CGC
			SA1->(dbGotop())
		
			If .Not. SA1->(DbSeek(xFilial("SA1") + _cCnpj))

			_cMsg := "O Cliente: " + AllTrim(_cRazSoc) +" CNPJ: " + AllTrim(_cCnpj) + " não esta cadastrado no Protheus!"
				/* Grava Log */
				cMsgLog := "IMPSNE - " + dToC(Date()) + " - " + Time() + ": " + _cMsg + CRLF
				fWrite(p_nHdlLog, cMsgLog)

				/*Autor     : Carlos Ryve Gandini
					Data/Time : 05/11/19 as 10:49
					Detalhe   :	Desativado a mensagem, causando paralisação do 
					            processo pois aguarda ação do usuário.
				*/
				//MsgStop(_cMsg,"Atenção")
				FwLogMsg("INFO", /*cTransactionID*/, "REST", FunName(), "", "01", _cMsg, 0, (nStart - Seconds()), {})

			Else
				
				_cCliente	:= SA1->A1_COD
				_cLoja 	:= SA1->A1_LOJA
				_cMultNat	:= '2'
				
				_cXnumBco	:= Substr(Padr(AllTrim(_cNumBol),TamSX3("E1_XNUMBCO")[1]),8,10)
				_cXIdCnab	:= Padr(AllTrim(_cNumBol),TamSX3("E1_XNUMBCO")[1])
					
				If _cTipCob == "REPASSE"
					_lRemessa	:= .T.
					_cCredit 	:= Padr(_cCrdRep,TamSX3("E1_CREDIT")[1])
					_cItemC	:= Padr(_cItmRep,TamSX3("E1_ITEMC")[1]) 
					_cNaturez	:= Padr(_cNatRep,TamSX3("E1_NATUREZ")[1])
				Else
					_lRemessa	:= .F.
					_cCredit	:= Padr(_cCrdSem,TamSX3("E1_CREDIT")[1])
					_cItemC	:= Padr(_cItmSem,TamSX3("E1_ITEMC")[1])
					_cNaturez	:= Padr(_cNatSem,TamSX3("E1_NATUREZ")[1])
				Endif
				
				_cParcela := GetParc(_cPrefixo, _cNumFat, _cTipo, p_nHdlLog)
				
				If _cParcela == '001'
					_cHist := _cMeARef + ' - ' + _cTipCob
					
					_aTitulo := {}
					_nOperac := 3
					
					aAdd( _aTitulo 	,{"E1_FILIAL"  	,_cFilial							,Nil})
					aAdd( _aTitulo 	,{"E1_PREFIXO" 	,_cPrefixo  						,Nil})
					aAdd( _aTitulo 	,{"E1_NUM"	 	,_cNumFat 						,Nil})
					aAdd( _aTitulo 	,{"E1_PARCELA"	,_cParcela						,Nil})
					aAdd( _aTitulo 	,{"E1_TIPO"	 	,_cTipo 	 						,Nil})
					aAdd( _aTitulo	,{"E1_CLIENTE" 	,_cCliente						,Nil})
					aAdd( _aTitulo	,{"E1_LOJA"	 	,_cLoja							,Nil})
					aAdd( _aTitulo 	,{"E1_NATUREZ" 	,_cNaturez  						,Nil})
					aAdd( _aTitulo 	,{"E1_EMISSAO" 	,dDataBase						,NIL})
					aAdd( _aTitulo 	,{"E1_VENCTO"	,DataValida(CtoD(_dVencto))	,NIL})
					aAdd( _aTitulo 	,{"E1_VALOR"	 	,_nValorT							,Nil})
					aAdd( _aTitulo 	,{"E1_HIST"	 	,_cHist	 						,Nil})
					aAdd( _aTitulo	,{"E1_CREDIT" 	,_cCredit 						,Nil})
					aAdd( _aTitulo 	,{"E1_CCC"	  	,_cCCC 	 						,Nil})
					aAdd( _aTitulo 	,{"E1_ITEMC"	 	,_cItemC	 						,Nil})
					aAdd( _aTitulo 	,{"E1_XIDCNAB" 	,_cXIdCnab  						,Nil})
					aAdd( _aTitulo 	,{"E1_XNUMBCO" 	,_cXNumBco  						,Nil})
					aAdd( _aTitulo 	,{"E1_NUMBCO"  	,_cXIdCnab  						,Nil})
					aAdd( _aTitulo 	,{"E1_MULTNAT" 	,_cMultNat						,Nil})			
					
					lMsErroAuto := .F.

				_cLog := _cFilial + '_' + _cPrefixo + '_' + _cNumFat + '_' + _cParcela + '_' + _cTipo + '_' + _cCliente + '_' + _cLoja
					
				If ValType(oSay) == "O"
					oSay:cCaption := "Gerando Título..." + _cLog
					ProcessMessages()
				EndIf

		/*Autor     : Carlos Ryve Gandini
					Data/Time : 05/11/19 as 10:51
					Detalhe   :	1) Desativado o controle de Transação pois já existe um controle de transação
												 principal no início do processamento. Isso causa perda de perfomance e lock 
										     desnecessario no DB (Obs.: MsExecAuto, também utiliza transação...Ah mais Locks...).
											
											2) Retirado tratativa de Abertura e Posicionamento da SE1, desnecessario. Em utilização
												 de MsExecAuto não é utilizado.
	
											3) Realizado tratamento, para verificar se titulo ja existe, para não haver duplicidade.
				*/
				//Begin Transaction
			
						DbSelectArea("SE1")
						SE1->(DbSetOrder(2)) //E1_FILIAL+E1_CLIENTE+E1_LOJA+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO
						If SE1->( MsSeek( _cFilial + _cCliente + _cLoja + _cPrefixo + _cNumFat + _cParcela + _cTipo ) )
						
							_cMsg := "Título já importado => "
							_cMsg += "Cliente:" + _cCliente 
							_cMsg += " Loj:"    + _cLoja 
							_cMsg += " Prf:"    + _cPrefixo 
							_cMsg += " Num:"    + _cNumFat 
							_cMsg += " Par:"    + _cParcela 
							_cMsg += " Tip:"    + _cTipo

							cMsgLog := "IMPSNE - " + dToC(Date()) + " - " + Time() + ": " + _cMsg + CRLF
							fWrite(p_nHdlLog, cMsgLog)
							
						Else
			
						//AutoGrLog(Replicate("*",80))
						//AutoGrLog("IMPSNE - NOVO TRATAMENTO DE LOG " + dToC(Date()) + " - " + Time() )
						MSExecAuto({|x,y| Fina040(x,y)},_aTitulo,_nOperac)
						//AutoGrLog("")
					
							If lMsErroAuto

							aLogErr := GetAutoGRLog()
							cMsgErr := ""
							lFollow := .T.

							For nA := 1 To Len(aLogErr)
								fWrite(p_nHdlLog, aLogErr[nA] + CRLF)
								
								//Wjr 10/09/2020 - Alteração da lógica para registrar o log de forma mais objetiva.
								If lFollow .Or. ("< -- Invalido" $ aLogErr[nA])
									cMsgErr += aLogErr[nA] + CRLF 
									If ("Tabela " $ aLogErr[nA])
										lFollow := .F.
									EndIf
								EndIf

							Next nA

							cAviso :=  "Houve uma falha no processamento dos dados. Clique em CANCELAR para abortar!" + CRLF + CRLF
							cAviso += cMsgErr + CRLF

							lOpRet := MsgYesNoTime( cAviso, UsrFullName(RetCodUsr()) + "...Mensagem será fechada em 5 segundos!")
							If !lOpRet
								DisarmTransaction()
							EndIf
							
							//Walmir Junior 10/09/2020 - Adição da mensagem de log de erro Protheus ao log da rotina de importação.
							FwLogMsg("INFO", /*cTransactionID*/, "REST", FunName(), "", "01", cMsgErr, 0, (nStart - Seconds()), {})
							
							_lReturn := .F.

						Else

							aLogErr := GetAutoGRLog() //Chamada para limpar o log

							_lReturn := .T.
								_cMsg := "Titulo " + _cNumFat + " - " + _cPrefixo + " - " + _cTipo + ", gravado com sucesso."
								cMsgLog := "IMPSNE - " + dToC(Date()) + " - " + Time() + ": " + _cMsg + CRLF
								fWrite(p_nHdlLog, cMsgLog)
	
							EndIf

						EndIf			

						//SE1->( DbCloseArea() )
					
					//End Transaction
				EndIf

			EndIf
			
			SA1->(DbCloseArea())
			
		EndIf
		
	//End Transaction
	
Return( _lReturn )


/*/{Protheus.doc} GetParc
Funcao que retorna a uma parcela valida

@param: 	pPrefixo, pNum, pTipo
@author: 	Jose Leite de Barros Neto
@since: 	29/10/2014
@Uso: 		SFIEMT
/*/
Static Function GetParc(pPrefixo, pNum, pTipo, p_nHdlLog)

	Local cAlias := GetNextAlias()
	Local cParMaior := ""   

	BeginSql Alias cAlias
		SELECT
			MAX(E1_PARCELA) E1_PARCELA
		FROM %Table:SE1% SE1
		WHERE 
			%NotDel%
			AND SE1.E1_FILIAL 	= %Exp:xFilial("SE1")%
			AND SE1.E1_PREFIXO  = %Exp:pPrefixo%
			AND SE1.E1_NUM 		= %Exp:pNum%
			AND SE1.E1_TIPO  	= %Exp:pTipo%
	EndSql
	
	(cAlias)->(dbGoTop())
	cParMaior := (cAlias)->E1_PARCELA
	
	If Empty(cParMaior)
		cParMaior := '001'
	Else
		cParMaior := StrZero(Val((cAlias)->(E1_PARCELA)) + 1, TamSx3("E1_PARCELA")[1])
		/* Grava Log */
		_cMsg := "Titulo: " + pNum + " - " + pPrefixo + " - " + pTipo + ", já existe, o mesmo não será gravado!"
		cMsgLog := "IMPSNE - " + dToC(Date()) + " - " + Time() + ": " + _cMsg + CRLF
		fWrite(p_nHdlLog, cMsgLog)
	EndIf
	
	(cAlias)->( DbCloseArea() )
	
Return(cParMaior)

/*/{Protheus.doc} CriaSX1
@description Funcao para criacao das perguntas (se nao existirem)

@author Rafael Karczevski
@since 16/08/2018
@version 1.0
/*/
Static Function CriaSX1(p_cPerg)

	Local aHelp	:= {}
	
	AAdd(aHelp, { {"Digite o Mes"}, {""}, {""} })
	AAdd(aHelp, { {"Digite o Ano"}, {""}, {""} })
	AAdd(aHelp, { {"Este parametro deve ser preenchido apenas quando deseja buscar pelo CNPJ. Senão deixe em BRANCO."}, {""}, {""} })

	
	u_SFPutSx1( p_cPerg, "01","Mês  :", "", "", "mv_ch1", "N", 2, 0, 0, "G", "NaoVazio()", "", "", "", "mv_par01","","","","","","","","","","","","","","","","", aHelp[1,1], aHelp[1,2], aHelp[1,3], "")
	u_SFPutSx1( p_cPerg, "02","Ano  :", "", "", "mv_ch2", "N", 4, 0, 0, "G", "NaoVazio()", "", "", "", "mv_par02","","","","","","","","","","","","","","","","", aHelp[2,1], aHelp[2,2], aHelp[2,3], "")
	u_SFPutSx1( p_cPerg, "03","CNPJ :", "", "", "mv_ch3", "C", 14, 0, 0, "G", "Vazio() .Or. CGC(MV_PAR03)", "", "", "", "mv_par03","","","","","","","","","","","","","","","","", aHelp[3,1], aHelp[3,2], aHelp[3,3], "")

Return