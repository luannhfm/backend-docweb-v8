#Include 'Protheus.ch'
#INCLUDE 'FWMVCDEF.CH'

User Function SS3312S()
	Local aSay    := {}
	Local aButton := {}
	Local nOpc    := 0
	Local Titulo  := 'IMPORTACAO DE TRABALHADORES BASE SMD'
	Local cDesc1  := 'Esta rotina fará a importação de Trabalhadores do Cadastro SMD'
	Local cDesc2  := 'Conforme o Layout'
	Local cDesc3  := '  '
	Local lOk     := .T.

	aAdd(aSay,cDesc1 )
	aAdd(aSay,cDesc2 )
	aAdd(aSay,cDesc3 )

	aAdd(aButton, {1, .T., {|| nOpc := 1, FechaBatch()}})
	aAdd(aButton, {2, .T., {|| FechaBatch()           }})
	FormBatch(Titulo, aSay,aButton)

	If nOpc == 1
		Processa({||lOk := Runproc()}, 'Aguarde','Processando...',.F.)

		If lOk
			ApMsgInfo('Processamento terminado com sucesso.','ATENÇÃO')
		Else
			ApMsgStop('Processamento realizado com problemas','Atenção')
		EndIf

	EndIf

Return NIL

Static Function Runproc()

	Local lRet      := .T.
	Local cPesquisa := ";"
	Local cDestino  := " "
	Local cID       := " "
	Local cCpf      := " "
	Local _dData
	Local dDtNasc
	Local cNome     := " "
	Local cResp     := " "
	Local aCampos   := {}
	Local nResPesq  := 0
	Local cTexto    := " "
	Local lImp      := .F.
	Local nRegt     := 0
	Local nReg      := 0
	Local teste	  := 0
	Local Teste1    := 10000
//---------------------------------------------------------------	
	Local oModel, oAux, oStruct
	Local nI    := 0
	Local nPos  := 0
	
	Local aAux  := {}
	Local cPath := "C:\Import\"
	
	
	DBSelectArea('ZZ2')
	DBSetOrder(1)
	

	/*While ZZ2->(!Eof())
		RecLock("ZZ2",.F.)
		DbDelete()
		MsUnLock()
		DbSkip()
	EndDo

	
	MSGALERT( "Excluido os Registros", "GUIA DE ATENDIMENTO VALIDADA")
	
	if AbreExcl("ZZ2")    // Abre Exclusivo
    ZZ2->(__dbPack())           // Apaga os Registros Deletados       
	Endif AbreExcl()      // Finaliza a AbreExcl() e Abre compartilhado
	
	*/	
	 
	//Aqui ocorre o instanciamento do Modelo de dados (Model)
	//que é a rotina de manutenção do cadastro do PCMSO.
	oModel := FWLoadModel('SS3311S')

	//Temos que definir qual a operação que sera executada: 3 - Inclusão / 4 - Alteração / 5 - Exclusao
	//oModel:SetOperation(3)

	//Antes de Atribuirmos os Valores dos Campos temos que Ativar o Modelo
	//oModel:Activate()

	//Instanciamos apenas referentes aos Dados
	oAux :=oModel:GetModel('ZZ2' + 'MASTER')

	//Obtemos a estrutura de dados
	oStruct := oAux:GetStruct()
	aAux    := oStruct:GetFields()


	//Abre o arquivo SX2
	cArqSX := FT_FUse("C:\Import\SMD1.CSV")


	//Se houver erro de abertura abandona o processamento
	if cArqSX <> -1
		
		//Posiciona na primeira linha
		nRegT := FT_FLASTREC()
		ProcRegua(nRegT)
		FT_FGoTop()

		//Varre todas as linhas do arquivo
		While !FT_FEOF()
			nI    := 0
			nPos  := 0
			lRet  := .T.
			nReg  := nReg + 1
		
			
	   		
	   		IncProc("Registro " + StrZero(nReg,8) + "  /  "  + STRZERO(nRegT,8))
		
		//Teste++
				
		/*If (Teste = Teste1)
			MSGALERT( Teste, "Numero")
			Teste1 := Teste1 + 100000
		EndIf*/
		//Anterior teste	
			cContLine   := FT_FReadLn() // Retorna a linha corrente
			cTexto := cContLine
			/*cTexto   := STRTRAN(cTexto,'Ã§Ã£','CA')
			cTexto   := STRTRAN(cTexto,'Ã©','E')
			cTexto   := STRTRAN(cTexto,'Ã³','O')
			cTexto   := STRTRAN(cTexto,'Ãº','U')
			cTexto   := STRTRAN(cTexto,'Ãª','E')
			cTexto   := STRTRAN(cTexto,'Ã"+chr(135)+"','C')
			cTexto   := STRTRAN(cTexto,'Ã£','A')
			cTexto   := STRTRAN(cTexto,'Ã¡','A')
			cTexto   := STRTRAN(cTexto,'Ã§','C')
			cTexto   := STRTRAN(cTexto,'Ã§Ãµ','CO')
			cTexto   := STRTRAN(cTexto,'Ã¢','A')
			cTexto   := STRTRAN(cTexto,'Ãµ','O')
			cTexto   := STRTRAN(cTexto,'Ã­','I')
			cTexto   := STRTRAN(cTexto,'Ã','I')
			cTexto   := STRTRAN(cTexto,'Âº')*/
			
			
			//-------------------------------------|
			// ID do trabalhador no SMD            |
			//-------------------------------------|
			NResPesq := AT(cPesquisa,cTexto)
			NResPesq := NResPesq - 1
			cID      := Alltrim(SubStr(cTexto,001,nResPesq))
			NResPesq := NResPesq + 2
			cTexto   := Alltrim(SubStr(cTexto,nResPesq))

			//-------------------------------------|
			// CPF do Trabalhador                  |
			//-------------------------------------|
			NResPesq := AT(cPesquisa,cTexto)
			NResPesq := NResPesq - 1
			cCPF     := Alltrim(SubStr(cTexto,001,nResPesq))
			NResPesq := NResPesq + 2
			cTexto   := Alltrim(SubStr(cTexto,nResPesq))

			//-------------------------------------|
			//Data de Nascimento Trabalhador*******|
			//-------------------------------------| 
			NResPesq := AT(cPesquisa,cTexto)
			NResPesq := NResPesq - 1
			dData    := Alltrim(SubStr(cTexto,001,nResPesq))
			dDtNasc  := STOD((SubStr(dData,7,4) + SubStr(dData,4,2) + SubStr(dData,1,2)))
			NResPesq := NResPesq + 2
			cTexto   := Alltrim(SubStr(cTexto,nResPesq))

			//-------------------------------------|
			//Nome do Trabalhador                  |
			//-------------------------------------|
			NResPesq := AT(cPesquisa,cTexto)
			NResPesq := NResPesq - 1
			cNome    := UPPER(Alltrim(SubStr(cTexto,001,nResPesq)))
			NResPesq := NResPesq + 2
			cTexto   := Alltrim(SubStr(cTexto,nResPesq))

			//-------------------------------------|
			// Nome do Responsavel                 |
			//-------------------------------------|
			NResPesq := AT(cPesquisa,cTexto)
			NResPesq := NResPesq - 1
			cResp    := UPPER(Alltrim(SubStr(cTexto,001,nResPesq)))
			NResPesq := NResPesq + 2
			cTexto   := Alltrim(SubStr(cTexto,nResPesq))

			If(MsSeek(xFilial('ZZ2') + cID))
				If ((STRZERO(Val(cCPF),11) <> ZZ2->ZZ2_CPF) .OR. (dDtNasc <> ZZ2->ZZ2_DTNASC) .OR. (AllTrim(cNome) <> AllTrim(ZZ2->ZZ2_NOME)) .OR. (AllTrim(cResp) <> AllTrim(ZZ2_RESP)))
					oModel:SetOperation(4)
					oModel:Activate()
					lImp := .T.
				EndIf
			Else
				oModel:SetOperation(3)
				oModel:Activate()
				lImp := .T.
			EndIf
			
			If(lImp = .T.)
				If((!Empty(cCpf)) .or. (Empty(cCPF) .AND. !Empty(dDtNasc) .AND. !Empty(cResp)))
					aCampos :={}
					aadd(aCampos, {'ZZ2_FILIAL'  , xFilial()               } )
					aadd(aCampos, {'ZZ2_ID'      , cID                     } )
					aadd(aCampos, {'ZZ2_CPF'     , STRZERO(Val(cCPF),11)   } )
					aadd(aCampos, {'ZZ2_DTNASC'  , dDtNasc                 } )
					aadd(aCampos, {'ZZ2_NOME'    , cNome                   } )
					aadd(aCampos, {'ZZ2_RESP'    , cResp                   } )
				
				
								
//-------------------------------------------------------------------		
					For nI := 1 To Len(aCampos)
		//Verificar se os campos passados existem na estrutura do Modelo
		//If (nPos := aScan(aAux,{|x| AllTrim(x[3] ) == Alltrim(aCampos[nI][1])})) > 0
						If ( nPos := aScan(aAux,{|x| AllTrim( x[3] )== AllTrim(aCampos[nI][1]) } ) ) > 0

			// É feita a atribuição do dado ao campo do Model
							If !(lAux := oModel:SetValue('ZZ2' + 'MASTER', aCampos[nI][1], aCampos[nI][2]))
				//Caso a atribuição não possa ser feita, por algum motivo (Validação, por exemplo)
				//O método SetValue retorna .F.
								lRet := .F.
								Exit
							EndIf
						EndIf
					Next nI
	
					If lRet
		//Faz-se a validação dos dados, note que diferentemente das tradicionais "rotinas automaticas"
		//Nesse momento os dados não são gravados, são somento validados.
						If (lRet := oModel:VldData())
			//Se os dados foram validados faz-se a gravação efetiva dos dados (commit)
							oModel:CommitData()
						EndIf
					EndIf
	
					If !lRet
	
		//Se os dados não foram validados obtemos a descrição do erro para gerar LOG ou mensagem de aviso
						aErro := oModel:GetErrorMessage()
		//A estrutura do vetor com o erro é:
		// [1] Identificador (ID) do formulario de origem
		// [2] Identificador (ID) do campo de origem
		// [3] Identificador (ID) do formulario de erro
		// [4] Identificador (ID) do campo de erro
		// [5] Identificador (ID) do erro
		// [6] Mensagem do erro
		// [7] Mensagem da solução
		// [8] Valor Atribuido
		// [9] Valor Anterior

						AutoGrLog("Id do Formulário de Origem:" + ' [' + AllToChar( aErro[1] ) + ']')
						AutoGrLog("Id do Campo de Origem:     " + ' [' + AllToChar( aErro[2] ) + ']')
						AutoGrLog("Id do Formulário de Erro:  " + ' [' + AllToChar( aErro[3] ) + ']')
						AutoGrLog("Id do Campo de Erro:       " + ' [' + AllToChar( aErro[4] ) + ']')
						AutoGrLog("Id do Erro:                " + ' [' + AllToChar( aErro[5] ) + ']')
						AutoGrLog("Mensagem do Erro:          " + ' [' + AllToChar( aErro[6] ) + ']')
						AutoGrLog("Mensagem da Solução:       " + ' [' + AllToChar( aErro[7] ) + ']')
						AutoGrLog("Valor Atribuido:           " + ' [' + AllToChar( aErro[8] ) + ']')
						AutoGrLog("Valor Anterior:            " + ' [' + AllToChar( aErro[9] ) + ']')

						MostraErro(cPath)
					EndIf
		   
					//oModel:DeActivate()
				EndIf
				oModel:DeActivate()
			EndIf
			lImp := .F.
			FT_FSKIP()
			//EndIf
		EndDo
	EndIf
	
Return lRet

