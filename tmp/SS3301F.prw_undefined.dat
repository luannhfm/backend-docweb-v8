#Include 'Protheus.ch'
#Include "TopConn.ch"
#Include 'ApWizard.ch'

/*/{Protheus.doc} SS3301F
	Wizard para registro de Alteração das doses de vacinas.
	
@author Franklin B. Oliveira
@since 07/04/2017

@type function
/*/
User Function SS3301F()
Local oWizard, oCombOper
Local aDados	:= {}
Local aItens	:= {'1=Aditivo', '2=Redução'}
lOCAL aColADZ	:= {}
Local cCombOper := aItens[1]
Local cFilCont	:= Space(TamSX3("CN9_FILIAL")[1])
Local cNumCont	:= Space(TamSX3("CN9_NUMERO")[1])
Local cRevCont	:= Space(TamSX3("CN9_REVISA")[1])
Local cFilProp	:= Space(TamSX3("ADY_FILIAL")[1])
Local cPropos	:= Space(TamSX3("ADY_PROPOS")[1])
Local cRevProp	:= Space(TamSX3("ADY_PREVIS")[1])
Local cDescCli	:= Space(TamSX3("A1_NOME")[1])
Local cTotVaci	:= Space(TamSX3("ADZ_QTDVEN")[1])
Local cQtdRedu  := Space(TamSX3("ADZ_QTDVEN")[1])
Local lWiz 		:= .F.

	//Wizard de alteração das doses de vacinas
	DEFINE WIZARD oWizard TITLE "Atualização das doses de vacinas";
	HEADER "Wizard para atualização das doses de vacinas" MESSAGE " ";
	TEXT "Assistente para atualização das doses de vacinas" + CRLF PANEL;
	NEXT {|| .T.} FINISH {|| .T.}
	
		//Tela de seleção do contrato a ser atualizado
		CREATE PANEL oWizard HEADER "Seleção do contrato" MESSAGE "Selecione o contrato" PANEL;
		BACK {|| .T.};
		NEXT {|| fVldPnl01(cFilCont, cNumCont, cRevCont)};
		FINISH {|| .T.}
		
		@ 010, 010 TO 125, 280 OF oWizard:oMPanel[2] PIXEL
		
		@ 020, 015 SAY "Filial: " OF oWizard:oMPanel[2] PIXEL
		@ 018, 030 MSGET cFilCont SIZE 045,012 F3 "CN9FIL" OF oWizard:oMPanel[2] PIXEL
		
		@ 020, 090 SAY "Contrato: " OF oWizard:oMPanel[2] PIXEL
		@ 018, 120 MSGET cNumCont SIZE 060,012 WHEN .F. OF oWizard:oMPanel[2] PIXEL
		
		@ 020, 195 SAY "Revisão: " OF oWizard:oMPanel[2] PIXEL
		@ 018, 225 MSGET cRevCont SIZE 040,012 WHEN .F. OF oWizard:oMPanel[2] PIXEL

		//Tela de atualização das doses
		CREATE PANEL oWizard HEADER "Alterar Qtde. de doses" MESSAGE "Altere a quantidade das doses de vacinas" PANEL;
		EXEC {|| fExePnl02(cFilCont, cNumCont, cRevCont, @cFilProp, @cPropos, @cRevProp, @cDescCli, @aDados, oBrowse)};
		BACK {|| .T.};
		NEXT {|| .T.};
		FINISH {|| lWiz := fVldPnl02(cCombOper, aDados)}
		
		@ 010, 010 TO 125, 280 OF oWizard:oMPanel[3] PIXEL
		
		@ 020, 015 SAY "Proposta: " OF oWizard:oMPanel[3] PIXEL
		@ 018, 045 MSGET cPropos SIZE 030,012 WHEN .F. OF oWizard:oMPanel[3] PIXEL
		
		@ 020, 090 SAY "Revisão Prop.: " OF oWizard:oMPanel[3] PIXEL
		@ 018, 130 MSGET cRevProp SIZE 020,012 WHEN .F. OF oWizard:oMPanel[3] PIXEL
		oCombOper := TComboBox():New(020, 165, {|u| If(PCount()>0, cCombOper:=u, cCombOper)},;
	 				aItens, 100, 020, oWizard:oMPanel[3], , , , , , .T., , , , , , , , , 'oCombOper')
	 				
		@ 040, 015 SAY "Cliente: " OF oWizard:oMPanel[3] PIXEL
		@ 038, 045 MSGET cDescCli SIZE 200,012 WHEN .F. OF oWizard:oMPanel[3] PIXEL
		
		oBrowse := TWBrowse():New(060, 015, 260, 060, , , , oWizard:oMPanel[3], , , , , , , , , , , , , , .T.)	
		oBrowse:SetArray(aDados)
		
		Aadd(aColADZ, {"Produto"		, "", "", 060, 0, ".F.", "", "C", "", ""})
		Aadd(aColADZ, {"Descricao"		, "", "", 100, 0, ".F.", "", "C", "", ""})
		Aadd(aColADZ, {"Quantidade"		, "", "", 040, 0, ".F.", "", "D", "", ""})
		Aadd(aColADZ, {"Quant Doses"	, "", "", 040, 0, ".F.", "", "C", "", ""})
					
		oBrowse:AddColumn(TCColumn():New(aColADZ[ 1,1], {|| aDados[oBrowse:nAt, 1]}, aColADZ[ 1,3], , , 'LEFT', aColADZ[ 1,4], .F., .F., , , , .F., ))
		oBrowse:AddColumn(TCColumn():New(aColADZ[ 2,1], {|| aDados[oBrowse:nAt, 2]}, aColADZ[ 2,3], , , 'LEFT', aColADZ[ 2,4], .F., .F., , , , .F., ))
		oBrowse:AddColumn(TCColumn():New(aColADZ[ 3,1], {|| aDados[oBrowse:nAt, 3]}, aColADZ[ 3,3], , , 'LEFT', aColADZ[ 3,4], .F., .F., , , , .F., ))
		oBrowse:AddColumn(TCColumn():New(aColADZ[ 4,1], {|| aDados[oBrowse:nAt, 4]}, aColADZ[ 4,3], , , 'LEFT', aColADZ[ 4,4], .F., .F., , , , .F., ))
			
	//WJR 20190209 - Propriedade inexistente. --> oWizard:oDlg:lEscClose := .F. 
	
	ACTIVATE WIZARD oWizard CENTERED VALID {|| .T. }
	
	If lWiz
		Processa({|lAbort| fIncRed(lAbort, cFilProp, cPropos, cRevProp, aDados, cCombOper)}, 'Atualização de doses', 'Aguarde, atualizando doses...', .T.)
	EndIf
	
Return (Nil)

/*/{Protheus.doc} fVldPnl01
	Função para validação do painel de seleção do contrato.
	-Verifico se é um contrato de venda;
	-Verifico se o contrato já sofreu redução;
	-Verifico se o contrato possui produtos do tipo IM-Imunização;
	-Verifico se existe Atendimento para o Contrato;
	-Verifico se está no prazo de 7 dias antes da primeira aplicação;
	
@author Franklin B. Oliveira
@since 07/04/2017
@param cFilCont, characters, Filial do contrato selecionado
@param cNumCont, characters, Numero do contrato selecionado
@param cRevCont, characters, Revisão do contrato selecionado
@type function
/*/
Static Function fVldPnl01(cFilCont, cNumCont, cRevCont)

Local aArea		:= GetArea()
Local cQuery	:= ""
Local cAlertUsr	:= "O prazo máximo de 7 dias para que o cliente solicite essa atualização já passou. " + CRLF;
					+ "Deseja prosseguir?"
Local lEImun	:= .F.
Local lRet 		:= .T.

	DbSelectArea("CN9")
	DbSetOrder(1)
	
	DbSelectArea("CN1")
	DbSetOrder(1)
	
	If CN9->( DbSeek(cFilCont + cNumCont + cRevCont) )
		If CN1->( DbSeek(xFilial("CN1") + CN9->CN9_TPCTO) )
			If CN1->CN1_ESPCTR <> '2'
				MsgAlert("O contrato [" + cNumCont + "] Não é um contrato de venda.", "Atenção!")
				Return (.F.)
			EndIf
		Else
			MsgAlert("Não foi possível encontrar o tipo do contrato [" + cNumCont + "].", "Atenção!")
			Return (.F.)
		EndIf
	Else
		MsgAlert("Não foi possível encontrar o contrato [" + cNumCont + "].", "Atenção!")
		Return (.F.)
	EndIf
	
	If Select("TMPADY") > 0
		TMPADY->( DbCloseArea() )
	EndIf
	
	cQuery	:= "SELECT "
	cQuery	+= "  ADZ.ADZ_XQTDDO, "
	cQuery	+= "  ADZ.ADZ_DTALTD, "
	cQuery	+= "  SB1.B1_TIPO "
	cQuery	+= "FROM "
	cQuery	+= "  ADY010 ADY "
	cQuery	+= "LEFT JOIN ADZ010 ADZ "
	cQuery	+= "ON "
	cQuery	+= "  ( "
	cQuery	+= "    ADZ.D_E_L_E_T_   = ' ' "
	cQuery	+= "  AND ADZ.ADZ_FILIAL = ADY.ADY_FILIAL "
	cQuery	+= "  AND ADZ.ADZ_PROPOS = ADY.ADY_PROPOS "
	cQuery	+= "  AND ADZ.ADZ_REVISA = ADY.ADY_PREVIS "
	cQuery	+= "  ) "
	cQuery	+= "LEFT JOIN SB1010 SB1 "
	cQuery	+= "ON "
	cQuery	+= "  ( "
	cQuery	+= "    SB1.D_E_L_E_T_  = ' ' "
	cQuery	+= "  AND SB1.B1_FILIAL = '" + xFilial("SB1") + "' "
	cQuery	+= "  AND SB1.B1_COD    = ADZ.ADZ_PRODUT "
	cQuery	+= "  ) "
	cQuery	+= "WHERE "
	cQuery	+= "  ADY.D_E_L_E_T_   = ' ' "
	cQuery	+= "AND ADY.ADY_STATUS = 'B' "
	cQuery	+= "AND ADY.ADY_FILIAL = '" + CN9->CN9_FILIAL + "' "
	cQuery	+= "AND ADY.ADY_OPORTU = '" + CN9->CN9_XOPORT + "' "
	cQuery	+= "AND ADY.ADY_REVISA = '" + CN9->CN9_XREVOP + "' "
	
	TCQUERY cQuery NEW ALIAS "TMPADY"
	
	TCSetField("TMPADY", "ADZ_DTALTD", "D")
	
	If .Not. TMPADY->( EoF() )
		While .Not. TMPADY->( EoF() )
			If .Not. Empty(TMPADY->ADZ_DTALTD) 
				MsgAlert("O contrato [" + cNumCont + "] Já sofreu atualização.", "Atenção!")
				Return (.F.)
			EndIf
			
			If TMPADY->B1_TIPO == 'IM'
				lEImun := .T.
			EndIf
			
			TMPADY->( DBSkip() )
		EndDo 
	EndIf
	
	If .Not. lEImun
		MsgAlert("O contrato [" + cNumCont + "] não possui produtos do tipo [IM-Imunização].", "Atenção!")
		Return (.F.)
	EndIf
	
	TMPADY->(DbCloseArea())
		
	If Select("TMPZZ3") > 0
		TMPZZ3->(DbCloseArea())
	EndIf 
	
	cQuery := "SELECT " + CRLF
	cQuery += "  * " + CRLF
	cQuery += "FROM " + CRLF
	cQuery += "  ( " + CRLF
	cQuery += "    SELECT " + CRLF
	cQuery += "      ZZ3.ZZ3_DTPROC " + CRLF
	cQuery += "    FROM " + CRLF
	cQuery += "      ZZ3010 ZZ3 " + CRLF
	cQuery += "    WHERE " + CRLF
	cQuery += "      ZZ3.D_E_L_E_T_   = ' ' " + CRLF
	cQuery += "    AND ZZ3.ZZ3_CATATE = '1' " + CRLF //1=Primeira Aplicacao;2=Repescagem
	cQuery += "    AND ZZ3.ZZ3_FILIAL = '" + xFilial("CN9") + "' " + CRLF
	cQuery += "    AND ZZ3.ZZ3_CONTRA = '" + cNumCont + "' " + CRLF
	cQuery += "    AND ZZ3.ZZ3_REVCTR = '" + cRevCont + "' " + CRLF
	cQuery += "    ORDER BY ZZ3_DTPROC " + CRLF
	cQuery += "  )
	cQuery += "WHERE
	cQuery += "  ROWNUM = 1
	
	TCQUERY cQuery NEW ALIAS "TMPZZ3"
	
	TCSetField("TMPZZ3", "ZZ3_DTPROC", "D")
	
	If TMPZZ3->( EoF() )
		MsgAlert("Não existe Atendimento para o Contrato[" + cNumCont + "].", "Atenção!")
		Return (.F.)
	Else
		If (TMPZZ3->ZZ3_DTPROC- 7) < dDataBase
			If RetCodUsr() $ AllTrim(GetNewPar("MV_XUSRDVC", "")) 
				If .Not. MsgNoYes(cAlertUsr, "Deseja continuar?")
					Return (.F.)
				EndIf
			Else
				MsgAlert("O prazo para atualização das doses de vacinas é de [7 dias] antes da primeira aplicação.", "Atenção!")
				Return (.F.)
			EndIf
		EndIf
	EndIf
	
	TMPZZ3->(DbCloseArea())
	
	RestArea(aArea)
	
Return (lRet)

/*/{Protheus.doc} fExePnl02
	Função executada quando o painel 02 for selecionado. Utilizado
	para preencher os campos existentes neste painel.	
	
@author franklin.oliveira
@since 07/04/2017
@version undefined
@param cFilCont, characters, Filial do contrato selecionado
@param cNumCont, characters, Numero do contrato selecionado
@param cRevCont, characters, Revisão do contrato selecionado
@param cFilProp, characters, Filial da proposta a ser preenchida
@param cPropos, characters, Numero da proposta a ser preenchida
@param cRevProp, characters, Rev. da proposta a ser preenchida
@param cDescCli, characters, descrição do cliente a ser preenchida
@param aDados, characters, itens da proposta do tipo IM
@type function
/*/
Static Function fExePnl02(cFilCont, cNumCont, cRevCont, cFilProp, cPropos, cRevProp, cDescCli, aDados, oBrowse)
Local cQuery	:= ""

	If Select("TMPCN9") > 0
		TMPCN9->(DbCloseArea())
	EndIf 
	
	cQuery := "SELECT " + CRLF
	cQuery += " ADY_FILIAL, " + CRLF
	cQuery += " ADY.ADY_PROPOS, " + CRLF
	cQuery += " ADY.ADY_PREVIS, " + CRLF
	cQuery += " ADY.ADY_PREVIS, " + CRLF
	cQuery += "	SA1.A1_NOME, " + CRLF
	cQuery += "	ADZ.ADZ_PRODUT, " + CRLF
	cQuery += "	ADZ.ADZ_DESCRI, " + CRLF
	cQuery += "	ADZ.ADZ_QTDVEN, " + CRLF
	cQuery += "	ADZ.ADZ_XQTDDO " + CRLF
	cQuery += "FROM " + CRLF
	cQuery += RetSqlName("CN9") + " CN9 " + CRLF
	cQuery += "LEFT JOIN " + RetSqlName("ADY") + " ADY " + CRLF
	cQuery += "ON " + CRLF
	cQuery += "  ( " + CRLF
	cQuery += "    ADY.D_E_L_E_T_   = ' ' " + CRLF
	cQuery += "  AND ADY.ADY_FILIAL = CN9.CN9_FILIAL " + CRLF
	cQuery += "  AND ADY.ADY_OPORTU = CN9.CN9_XOPORT " + CRLF
	cQuery += "  AND ADY.ADY_REVISA = CN9.CN9_XREVOP " + CRLF
	cQuery += "  ) " + CRLF
	cQuery += "LEFT JOIN " + RetSqlName("ADZ") + " ADZ " + CRLF
	cQuery += "ON " + CRLF
	cQuery += "  ( " + CRLF
	cQuery += "    ADZ.D_E_L_E_T_   = ' ' " + CRLF
	cQuery += "  AND ADZ.ADZ_FILIAL = ADY.ADY_FILIAL " + CRLF
	cQuery += "  AND ADZ.ADZ_PROPOS = ADY.ADY_PROPOS " + CRLF
	cQuery += "  AND ADZ.ADZ_REVISA = ADY.ADY_PREVIS " + CRLF
	cQuery += "  ) " + CRLF
	cQuery += "LEFT JOIN " + RetSqlName("SB1") + " SB1 " + CRLF
	cQuery += "ON " + CRLF
	cQuery += "  ( " + CRLF
	cQuery += "    SB1.D_E_L_E_T_  = ' ' " + CRLF
	cQuery += "  AND SB1.B1_FILIAL = '        ' " + CRLF
	cQuery += "  AND SB1.B1_COD    = ADZ.ADZ_PRODUT " + CRLF
	cQuery += "  ) " + CRLF
	cQuery += "LEFT JOIN " + RetSqlName("SA1") + " SA1 " + CRLF
	cQuery += "ON " + CRLF
	cQuery += "  ( " + CRLF
	cQuery += "    SA1.D_E_L_E_T_  = ' ' " + CRLF
	cQuery += "  AND SA1.A1_FILIAL = ' ' " + CRLF
	cQuery += "  AND SA1.A1_COD    = ADY.ADY_CODIGO " + CRLF
	cQuery += "  AND SA1.A1_LOJA   = ADY.ADY_LOJA " + CRLF
	cQuery += "  ) " + CRLF
	cQuery += "WHERE " + CRLF
	cQuery += "  CN9.D_E_L_E_T_   = ' ' " + CRLF
	cQuery += "AND ADY.ADY_STATUS = 'B' " + CRLF
	cQuery += "AND SB1.B1_TIPO    = 'IM' " + CRLF
	CQuery += "AND CN9.CN9_FILIAL = '" + cFilCont + "' " + CRLF
	cQuery += "AND CN9.CN9_NUMERO = '" + cNumCont + "' " + CRLF
	cQuery += "AND CN9.CN9_REVISA = '" + cRevCont + "' " + CRLF
	
	TCQUERY cQuery NEW ALIAS "TMPCN9"
	
	DbSelectArea("TMPCN9")
	
	If .Not. TMPCN9->( EoF() )
		cFilProp:= TMPCN9->ADY_FILIAL
		cPropos	:= TMPCN9->ADY_PROPOS
		cRevProp:= TMPCN9->ADY_PREVIS
		cDescCli:= TMPCN9->A1_NOME
		aDados 	:= {}
		While .Not. TMPCN9->( EoF() )
			aAdd(aDados, { TMPCN9->ADZ_PRODUT,;
						   TMPCN9->ADZ_DESCRI,;
						   TMPCN9->ADZ_QTDVEN,;
						   Space(TamSX3("ADZ_QTDVEN")[1])};
						  )
			TMPCN9->( DbSkip() )
		EndDo
	EndIf
	
	If ValType(oBrowse) == "O"
		oBrowse:bLDblClick := {|| lEditCell(@aDados, oBrowse, '@!', 4)}
		oBrowse:SetArray(aDados)
		oBrowse:Refresh()
	EndIf
	
	
	TMPCN9->( DbCloseArea() )
	
Return (Nil)

/*/{Protheus.doc} fVldPnl02
	Função para validar o painel 02.
	-Valido se a quantidade de doses foi preenchida;
	-Valido se o percentual de redução é de até 10%;
@author Franklin B. Oliveira
@since 07/04/2017
@param cCombOper, characters, Tipo da operação realizada 1=Aditivo;2=Redução
@param aDados, Array, itens da proposta com as quantidades atuais e quantidades alteradas
@type function
/*/
Static Function fVldPnl02(cCombOper, aDados)

Local lRet 		:= .T.
Local nTotVac  	:= 0
Local nTotRed	:= 0
Local nPercPer	:= 0

	For nX := 1 To Len(aDados)
		nTotVac += aDados[Nx][3]
		nTotRed += Val(aDados[Nx][4])
	Next nX
	
	If nTotRed <= 0
		MsgAlert("É necessário informar a quantidade a ser atualizada.", "Atenção!")
		Return (.F.)
	EndIf
	
	nPercPer := nTotVac * 0.1
	
	If cCombOper == '2' //Redução
		If nTotRed > nPercPer
			MsgAlert("O percentual informado é maior do que o percentual permitido para redução.", "Atenção!")
			Return (.F.)
		EndIf
	EndIf

Return (lRet)

/*/{Protheus.doc} fIncRed
	Função para registrar a Alteração de doses informada nos respectivos
	itens da proposta selecionada.
	
@author Franklin B. Oliveira
@since 07/04/2017

@param lAbort, logical, Botão cancelar, na tela de processamento
@param cFilProp, characters, Filial da proposta a ser alterada
@param cPropos, characters, Numero da proposta a ser alterada
@param cRevProp, characters, Revisão da proposta a ser alterada
@param aDados, Array, Itens da proposta com a de doses a ser alterada
@param cCombOper, characters, Tipo da operação realizada 1=Aditivo;2=Redução
@type function
/*/
Static function fIncRed(lAbort, cFilProp, cPropos, cRevProp, aDados, cCombOper)
	
	DbSelectArea("ADZ")
	DbSetOrder(3)
	
	If ADZ->( DbSeek(cFilProp + cPropos + cRevProp) )
		Begin Transaction
			While .Not. ADZ->( EoF() ) .And.  (cFilProp + cPropos + cRevProp == ADZ->ADZ_FILIAL + ADZ->ADZ_PROPOS + ADZ->ADZ_REVISA)
				For nX := 1 To Len(aDados)
					If  ADZ->ADZ_PRODUT == aDados[nX][1]
						RecLock("ADZ", .F.)
							ADZ->ADZ_TPALDO := cCombOper
							ADZ->ADZ_XQTDDO := Val(aDados[nX][4])
							ADZ->ADZ_DTALTD := dDataBase
	          			MsUnlock()
					EndIf
				Next nX
				ADZ->( DbSkip() )
			EndDo
		End Transaction
	Else
		MsgAlert("Não foi possível localizar a proposta [" + cPropos + "].", "Atenção!")
	EndIf
	
	
Return (Nil)