/*/f/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
<Descricao> :  Função responsável pela geração do Relatório de Processos por Legenda
<Autor> : Fábrica DOIT SP
<Data> : 20/03/2014
<Parametros> : Nil
<Retorno> : Nil
<Processo> : FIEMT – Relatório de Processos por Legenda
<Tipo> Menu
<Obs> : Modificado por Peder Munksgaard (Do.it Sistemas) em 10/07/2014 
        Retirados filtros pré estabelecidos diretamente no fonte através
        de queries, substituindo-os pelos filtros que já encontravam-se
        na variável publica _aMT110Cor criada pelo ponto de entrada MT110Cor().
        Modificado o ponto de entrada MT110Leg para que a tabela ZE tipo SX5
        seja criada dinamicamente no momento do acesso a legenda.
        +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++   
        Modificado por Peder Munksgaard (Do.it Sistemas) em 11/07/2014.
        Contemplado o filtro por filiais exibindo-as no relatório.
        Formulação dinamica do grupo de perguntas SX1, tornando assim 
        desnecessário envio de SX1.dbf para o cliente.
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
*/

#Include "Protheus.ch"
#Include "Report.ch"
#Include "Topconn.ch"

User Function DTCOMR03( xCab, xItem)
  
Local cTitulo    := "Relatório de Processos por Legenda"

Local cOrd	      := ""
Local aOrd   	  := {}

Local oCabec                        //Section
Local oDados                        //Section
Local oReport
Local aDados     := {}              //Array com os dados a serem impressos no relatorio
Local cAliasTmp  := GetNextAlias()  //tabela temporaria
Local nX         := 0
Local nY         := 0
Local nVezes     := 0

// Incluido por Peder Munksgaard (Do.it Sistemas) em 11/07/2014

Local _cPerg     := "DTCOMR03"
Local _aSX1      := {}

Aadd(_aSX1,{"GRUPO"  , "ORDEM" , "PERGUNT"             , "VARIAVL" , "TIPO" , "TAMANHO"              , "DECIMAL","GSC","VALID","VAR01"   ,"F3"  ,"GRPSXG","DEF01"     ,"DEF02"     ,"DEF03" ,"DEF04","DEF05","PICTURE" })
Aadd(_aSX1,{ _cPerg , "01"    , "A partir do numero? " , "mv_ch1"  , "C"    , 06                     , 0        ,"G"  ,""     ,"mv_par01","SC1" ,""      ,""           ,""          ,""      ,""     ,""     ,""        })
Aadd(_aSX1,{ _cPerg , "02"    , "Ate o numero?       " , "mv_ch2"  , "C"    , 06                     , 0        ,"G"  ,""     ,"mv_par02","SC1" ,""      ,""           ,""          ,""      ,""     ,""     ,""        })
Aadd(_aSX1,{ _cPerg , "03"    , "Data de?            " , "mv_ch3"  , "D"    , 08                     , 0        ,"G"  ,""     ,"mv_par03",""    ,""      ,""           ,""          ,""      ,""     ,""     ,""        })    
Aadd(_aSX1,{ _cPerg , "04"    , "Data ate?           " , "mv_ch4"  , "D"    , 08                     , 0        ,"G"  ,""     ,"mv_par04",""    ,""      ,""           ,""          ,""      ,""     ,""     ,""        })    
Aadd(_aSX1,{ _cPerg , "05"    , "Tipo da Legenda?    " , "mv_ch5"  , "C"    , 06                     , 0        ,"G"  ,""     ,"mv_par05","ZE"  ,""      ,""           ,""          ,""      ,""     ,""     ,""        })    
Aadd(_aSX1,{ _cPerg , "06"    , "Filial de?          " , "mv_ch6"  , "C"    , TamSX3("C1_FILIAL")[1] , 0        ,"G"  ,""     ,"mv_par06","SM0" ,""      ,""           ,""          ,""      ,""     ,""     ,""        })
Aadd(_aSX1,{ _cPerg , "07"    , "Filial ate?         " , "mv_ch7"  , "C"    , TamSX3("C1_FILIAL")[1] , 0        ,"G"  ,""     ,"mv_par07","SM0" ,""      ,""           ,""          ,""      ,""     ,""     ,""        })       
        
fCriaSX1(_cPerg,_aSX1,.F.)

// Fim Inclusão    

//--------------------------------------
//
//---------------------------------------------------------

If !Pergunte( "DTCOMR03" )

	Return

EndIf

//--------------------------------------
//
//---------------------------------------------------------

oReport := TReport():New( "DTCOMR03", cTitulo,, {|oReport| DefPrint( oReport, cAliasTmp, cTitulo, aOrd )}, "Este relatório imprimirá o Processo Por Legenda.")
oReport:SetLandScape(.T.)
oReport:ldisableorientation:=.T.
oReport:GetOrientation(2)

oCabec:=TRSection():New( oReport, "cTitulo", { cAliasTmp },aOrd,,,,,,,,,3)
oCabec:SetTotalInLine(.F.)
oCabec:SetHeaderSection(.T.) //Define que imprime cabeçalho das células na quebra de seção
oCabec:SetPageBreak(.F.)
// Incluido por Peder Munksgaard (Do.it Sistemas) em 11/07/2014
DEFINE CELL oFilial  NAME "TMP_FILIAL"  OF oCabec ALIAS cAliasTmp TITLE "Filial"        SIZE 15
//
DEFINE CELL          NAME "TMP_NUMSC"	OF oCabec ALIAS cAliasTmp TITLE "Sol.Compra" 	SIZE 10
DEFINE CELL          NAME "TMP_ITEM"	OF oCabec ALIAS cAliasTmp TITLE "Item"			   SIZE 08
DEFINE CELL          NAME "TMP_DATASC"	OF oCabec ALIAS cAliasTmp TITLE "Data SC"    	SIZE 13
DEFINE CELL oProduto NAME "TMP_DESCRI"	OF oCabec ALIAS cAliasTmp TITLE "Produto"	 	   SIZE 40
DEFINE CELL          NAME "TMP_QUANT"	OF oCabec ALIAS cAliasTmp TITLE "Quantidade" 	SIZE 25
DEFINE CELL          NAME "TMP_PRECO"	OF oCabec ALIAS cAliasTmp TITLE "Vlr. Unit" 	   SIZE 25
DEFINE CELL          NAME "TMP_TOTAL"	OF oCabec ALIAS cAliasTmp TITLE "Vlr. Total"	   SIZE 25
DEFINE CELL oJustif  NAME "TMP_JUSTIF"	OF oCabec ALIAS cAliasTmp TITLE "Justificativa" SIZE 30
DEFINE CELL          NAME "TMP_SOLICI"	OF oCabec ALIAS cAliasTmp TITLE "Solicitante" 	SIZE 30
//DEFINE CELL          NAME "TMP_LEGEND"	OF oCabec ALIAS cAliasTmp TITLE "Legenda" 		SIZE 30 // Modificado por Peder Munksgaard (Do.it Sistemas) em 11/07/2014
DEFINE CELL oLegend  NAME "TMP_LEGEND"	OF oCabec ALIAS cAliasTmp TITLE "Legenda" 		SIZE 12
DEFINE CELL          NAME "TMP_COMPRA"	OF oCabec ALIAS cAliasTmp TITLE "Comprador"     SIZE 30
DEFINE CELL          NAME "TMP_NUMPC"	OF oCabec ALIAS cAliasTmp TITLE "Ped.Compra"    SIZE 15
DEFINE CELL          NAME "TMP_DATAPC"	OF oCabec ALIAS cAliasTmp TITLE "Data PC"	   	SIZE 13

oProduto:lLineBreak := .T.
oJustif :lLineBreak := .T.
oLegend :lLineBreak := .T.
oFilial :lLineBreak := .T.

oReport:PrintDialog()                                       

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³DefPrint  ºAutor  ³Marcelo Coutinho    º Data ³  13/03/14   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Estrutura dados para impressao.                             º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³CNI          											              º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function DefPrint( oReport, cTmp, cTitulo)

	//Cria arquivo de trabalho
	aStru := {}
	AADD(aStru,{"TMP_FILIAL", "C", 015, 0})
	AADD(aStru,{"TMP_NUMSC"	, "C", 010, 0})
	AADD(aStru,{"TMP_DATASC", "C", 012, 0})
	AADD(aStru,{"TMP_NUMPC"	, "C", 010, 0})
	AADD(aStru,{"TMP_DATAPC", "C", 012, 0})
	AADD(aStru,{"TMP_SOLICI", "C", 100, 0})
	AADD(aStru,{"TMP_ITEM" 	, "C", 010, 0})
	AADD(aStru,{"TMP_DESCRI", "M", 010, 0})
	AADD(aStru,{"TMP_QUANT"	, "C", 050, 0})
	AADD(aStru,{"TMP_PRECO"	, "C", 050, 0})
	AADD(aStru,{"TMP_TOTAL"	, "C", 050, 0})
	AADD(aStru,{"TMP_JUSTIF", "C", 200, 0})	
	AADD(aStru,{"TMP_LEGEND", "C", 050, 0})	
	AADD(aStru,{"TMP_COMPRA", "C", 050, 0})	

	cArqTrab := CriaTrab(aStru, .T.)
	USE &cArqTrab ALIAS &(cTmp) NEW
	
	//Preenche arquivo de trabalho conforme dados da tela
	PreencheTMP(oReport, cTitulo, cTmp)
	
Return      

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PreencheTMPºAutor  ³Marcelo Coutinho   º Data ³  13/03/14   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Preenche arquivo de trabalho utilizado para relatorio       º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ CNI                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function PreencheTMP(oReport, cTitulo, cAlias)

Local cQuery     := ""
Local cAliasQry  := GetNextAlias()
Local oSection1  := oReport:Section(1)
Local cDescProd  := ""
Local nTamDesc   := 0
Local _nFilter   := 0
Local _cJustif   := ""
Local nI

oReport:SetTitle(cTitulo)
	
cQuery :=        " SELECT * "

cQuery += CRLF + "   FROM "      + RetSqlName("SC1") + " SC1 "
cQuery += CRLF + "   LEFT JOIN " + RetSqlName("SB1") + " SB1  ON SB1.B1_COD    = SC1.C1_PRODUTO AND SB1.D_E_L_E_T_ <> '*' "
//cQuery += CRLF + "   LEFT JOIN " + RetSqlName("SC7") + " SC7  ON SC7.C7_FILIAL = SC1.C1_FILIAL AND SC7.C7_NUMSC = SC1.C1_NUM     AND SC7.C7_ITEMSC = SC1.C1_ITEM AND SC7.C7_NUM = SC1.C1_PEDIDO AND SC7.D_E_L_E_T_ <> '*'"
cQuery += CRLF + "   LEFT JOIN " + RetSqlName("SC7") + " SC7  ON SC7.C7_FILIAL = SC1.C1_FILENT AND SC7.C7_NUMSC = SC1.C1_NUM     AND SC7.C7_ITEMSC = SC1.C1_ITEM AND SC7.C7_NUM = SC1.C1_PEDIDO AND SC7.D_E_L_E_T_ <> '*'"
cQuery += CRLF + "   LEFT JOIN " + RetSqlName("SY1") + " SY1  ON                                   SY1.Y1_COD   = SC1.C1_CODCOMP AND SY1.D_E_L_E_T_ <> '*'"

cQuery += CRLF + "  WHERE SC1.D_E_L_E_T_ <> '*'"
//cQuery += CRLF + "    AND SC1.C1_FILIAL  BETWEEN '" +       MV_PAR06   + "' AND '" +       MV_PAR07   + "'"
cQuery += CRLF + "    AND SC1.C1_FILIAL  IN (" + _fRetFilIN(MV_PAR06, MV_PAR07) + ")"
cQuery += CRLF + "    AND SC1.C1_NUM     BETWEEN '" +       MV_PAR01   + "' AND '" +       MV_PAR02   + "'"
cQuery += CRLF + "    AND SC1.C1_EMISSAO BETWEEN '" + DTOS( MV_PAR03 ) + "' AND '" + DTOS( MV_PAR04 ) + "'"
cQuery += CRLF + "    AND SB1.B1_COD IS NOT NULL "  
cQuery += CRLF + "  ORDER BY SC1.C1_FILIAL, SC1.C1_NUM, SC1.C1_ITEM"

cQuery := ChangeQuery(cQuery)

TcQuery cQuery Alias (cAliasQry) New

TcSetField( (cAliasQry), "C1_EMISSAO", "D" )
TcSetField( (cAliasQry), "C7_EMISSAO", "D" )
TcSetField( (cAliasQry), "C1_QUANT"  , "N", TamSX3("C1_QUANT")[1], TamSX3("C1_QUANT")[2] )
TcSetField( (cAliasQry), "C7_PRECO"  , "N", TamSX3("C7_PRECO")[1], TamSX3("C7_PRECO")[2] )
TcSetField( (cAliasQry), "C7_TOTAL"  , "N", TamSX3("C7_TOTAL")[1], TamSX3("C7_TOTAL")[2] )

dbSelectArea((cAliasQry))

If ValType(_aMT110Cor) == 'A'
   
   _nFilter := IIf(Empty(MV_PAR05),0,Val(MV_PAR05))
   
   If _nFilter <= Len(_aMT110Cor) .And. _nFilter > 0 
      Set Filter to &(_aMT110Cor[_nFilter][1])
      (cAliasQry)->(dbGotop())   
   Endif

Endif

ProcRegua((cAliasQry)->(LastRec()))

While (cAliasQry)->( !Eof() )
	
	IncProc()
	
	cDescProd := Posicione("SC1",1,(cAliasQry)->(C1_FILIAL+C1_NUM+C1_ITEM),"C1_PRODUTO") + CRLF + ; 
	             Posicione("SC1",1,(cAliasQry)->(C1_FILIAL+C1_NUM+C1_ITEM),"C1_XXDESCR")
	nTamDesc  := Len( cDescProd )
	_cJustif  := Posicione("SC1",1,(cAliasQry)->(C1_FILIAL+C1_NUM+C1_ITEM),"C1_XJUSTIF")

	For nI := 1 To nTamDesc

		cDescProd := StrTran( cDescProd, "  ", "" )

	Next

	RecLock(cAlias,.T.)

	//Todos os campos são do tipo caracter
	//(cAlias)->( TMP_FILIAL )	:=            (cAliasQry)->( C1_FILIAL  )
	(cAlias)->( TMP_FILIAL )	:= Posicione("SM0",1,cEmpAnt+(cAliasQry)->C1_FILIAL,"M0_FILIAL")
	(cAlias)->( TMP_NUMSC  )	:=            (cAliasQry)->( C1_NUM     )
	(cAlias)->( TMP_DATASC )	:=      Dtoc( (cAliasQry)->( C1_EMISSAO ) )
	(cAlias)->( TMP_NUMPC  )	:=            (cAliasQry)->( C1_PEDIDO  )
	(cAlias)->( TMP_DATAPC )	:=      Dtoc( (cAliasQry)->( C7_EMISSAO ) )
	(cAlias)->( TMP_SOLICI )	:=            (cAliasQry)->( C1_SOLICIT )
	(cAlias)->( TMP_ITEM   )	:=            (cAliasQry)->( C1_ITEM    )
	(cAlias)->( TMP_DESCRI )	:=            cDescProd
	(cAlias)->( TMP_QUANT  ) 	:= Transform( (cAliasQry)->( C1_QUANT   ), PesqPict("SC1","C1_QUANT") )
	(cAlias)->( TMP_PRECO  )	:= Transform( (cAliasQry)->( C7_PRECO   ), PesqPict("SC7","C7_PRECO") )
	(cAlias)->( TMP_TOTAL  ) 	:= Transform( (cAliasQry)->( C7_TOTAL   ), PesqPict("SC7","C7_TOTAL") )
	(cAlias)->( TMP_JUSTIF ) 	:= Memoline ( _cJustif                   , 100 )
	(cAlias)->( TMP_COMPRA ) 	:=            (cAliasQry)->( Y1_NOME    )
	
	If _nFilter > 0 
	   (cAlias)->( TMP_LEGEND ) 	:=            Posicione("SX5",1,xFilial("SX5")+"ZE"+MV_PAR05,"X5_DESCRI")
	Else
	   (cAlias)->( TMP_LEGEND ) 	:=            Posicione("SX5",1,xFilial("SX5")+"ZE"+(cAliasQry)->C1_XXTPLEG,"X5_DESCRI")
    Endif

    ( cAlias )->( MsUnlock() )
    
	(cAliasQry)->( dbSkip() )

End

If _nFilter > 0 
   (cAliasQry)->(dbClearFilter())
Endif

oSection1:Print()
	
Return

/*/
==========================================================================
Autor..............: Peder Munksgaard (Do.it Sistemas)
--------------------------------------------------------------------------
Data...............: 11/07/2014
-------------------------------------------------------------------------
Descrição..........: Função auxiliar utilizada para criação de um grupo de
                     perguntas na tabela SX1.
--------------------------------------------------------------------------
Função.............: fCriaSX1
--------------------------------------------------------------------------
Partida............: u_DTCOMR03()
==========================================================================                     
/*/

Static Function fCriaSx1(cPerg,aSx1,lExcl)

   Local nLin,nCol,cCampo
   lExcl := If( lExcl==Nil , .F. , lExcl )
               
   SX1->(DbSetOrder(1))

   If !lExcl.And.SX1->(DbSeek(PADR(cPerg,10)+aSx1[Len(aSx1),2]))
      Return
   EndIf

   SX1->(DbSeek(PADR(cPerg,10)))
   While !SX1->(Eof()) .And. ALLTRIM(SX1->X1_GRUPO) == ALLTRIM(cPerg)
      SX1->(RecLock("SX1",.F.,.F.))
      SX1->(DbDelete())
	  SX1->(MsUnLock())
	  SX1->(DbSkip())
   End   
   
   For nLin := 2 To Len(aSX1)
      SX1->(RecLock("SX1",.T.))
      For nCol := 1 To Len(aSX1[1])
         cCampo := "X1_"+aSX1[1,nCol]
		 SX1->(FieldPut(SX1->(FieldPos(cCampo)),aSx1[nLin,nCol] ))
	  Next nCol
	  SX1->(MsUnLock())
   Next nLin                     
   
Return NiL

/*/
==========================================================================
Autor..............: Peder Munksgaard (Do.it Sistemas)
--------------------------------------------------------------------------
Data...............: 22/07/2014
--------------------------------------------------------------------------
Descrição..........: Função auxiliar utilizada para validar se as filiais
                     de/até selecionadas pelo usuário estão compatíveis
                     com o perfil de usuário.
--------------------------------------------------------------------------
Função.............: _fRetFilIN(_cDe, _cAte)
--------------------------------------------------------------------------
Partida............: u_DTCOMR03()
==========================================================================                     
/*/

Static Function _fRetFilIN(_cDe, _cAte)

   Local _aEmp    := FWEmpLoad(.F.)   
   Local _nX      := 0   
   Local _cFilIN  := ""
      
   If Empty(_cDe) .Or. _cDe == NiL
   
      _cDe := Alltrim(_aEmp[1][3])
      
   Endif
   
   If Empty(_cAte) .Or. _cAte == NiL .Or. Upper(_cAte) == Replicate('Z',TamSX3("C1_FILIAL")[1])
   
      _cAte := Alltrim(_aEmp[Len(_aEmp)][3])
      
   Endif
   
   For _nX := 1 to Len(_aEmp)
      
      If Alltrim(_aEmp[_nX][3]) >= Alltrim(_cDe) .And. Alltrim(_aEmp[_nX][3]) <= Alltrim(_cAte)
      
         _cFilIN += "'" + Alltrim(_aEmp[_nX][3]) + "'"
         
         If Alltrim(_aEmp[_nX][3]) < Alltrim(_cAte)
         
            _cFilIN += ","
            
         Endif
         
      Endif
       
   Next _nX
   
   If Empty(_cFilIN)
   
      _cFilIN := "'" + Space(TamSX3("C1_FILIAL")[1]) + "'"
      
   Endif
   
Return _cFilIN