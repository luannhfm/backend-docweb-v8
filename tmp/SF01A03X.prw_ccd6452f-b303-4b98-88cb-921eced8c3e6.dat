#Include 'Protheus.ch'
#Include "ATFA125.CH"

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³AF030Auto ³ Autor ³ Alice Yamamoto		³ Data ³		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Baixa Automatica de Bens									  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ AF030AUTO()												  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ ATFA030													  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
User Function SF01A03X(cAlias, nReg, nOpc )

Local oDlg, oDlg1, oQtda
Local oMark			:= 0
Local lInverte 		:= .F.
Local cCapital
Local nOpt		 	:= 0
Local cNota 	 	:= CriaVar( "NM_NOTA" , .F. )
Local cSerie	 	:= CriaVar( "NM_SERIE" , .F. )
Local nUfir 	 	:= 0
Local cIndex		:= "", cChave := ""
Local nSavOrd1		:= IndexOrd()
Local nQuant      	:= 0
Local nQtdOrig		:= 0
Local nVlrOrig1 	:= 0, nVlrOrig2 :=0,  nVlrOrig3 :=0,  nVlrOrig4 :=0,  nVlrOrig5 :=0
Local nVlrBx1   	:= 0, nVlrBx2   :=0,  nVlrBx3   :=0,  nVlrBx4   :=0,  nVlrBx5   :=0
Local nVlrDesp1 	:= 0, nVlrDesp2 :=0,  nVlrDesp3 :=0,  nVlrDesp4 :=0,  nVlrDesp5 :=0
Local nVlrCorBem	:= 0, nVlrCorDep:=0
Local bFirst		:= { || SN1->( MsSeek( xFilial("SN1") + cBaseI + cItemI, .T. ) ) }
Local bFor 			:= { || SN1->N1_OK == cMarca .And. (SN1->N1_QUANTD > 0 ) }
Local bWhile 		:= { ||	!( SN1->(EOF())) .And.;
SN1->N1_FILIAL == xFilial("SN1") .And.;
SN1->N1_CBASE  <= cBaseF .And.;
SN1->N1_ITEM   <= cItemF }

Local aCampos	 := {}
Local cHistSol
Local oHistSol
Local cCodSol    := ""
Local cHrSol     := Time()
Local cVarSX6    := ""
Local lContinua  := .F.
Local cTipoAprov := "2"// + STR0109	//"Responsável individual"
Local aTipoAprov := { "1=" + STR0108, "2=" + STR0109 }	//"Responsável individual" | "Responsável geral"
Local oTipoAprov

//Walmir Junior - 10/04/2017 - Array para controle dos itens da solicitação de baixa. 
Local _aSolBx	:= {}
Local _cSolic	:= ""

Private cExpFiltro  := ""
Private cArquivo	:= ""
Private nTotal 		:= 0
Private nHdlPrv		:= 0
Private cPadrao   	:= ""
Private nPercBaixa	:= 100
Private dDInDepr	:= CTOD("  /  /  ")
Private cPicture1, cPicture2, cPicture3, cPicture4, cPicture5, cPictQtd
Private nVlrAtual1	:= 0, nVlrAtual2:= 0, nVlrAtual3:= 0, nVlrAtual4 := 0, nVlrAtual5 := 0
Private nVlResid1 	:= 0, nVlResid2 := 0, nVlResid3 := 0, nVlResid4  := 0, nVlResid5  := 0
Private nValBaixa1	:= 0, nValBaixa2:= 0, nValBaixa3:= 0, nValBaixa4 := 0, nValBaixa5 := 0
Private nValDepr1 	:= 0, nValDepr2 := 0, nValDepr3 := 0, nValDepr4  := 0, nValDepr5  := 0
Private nDepr1 		:= 0, nDepr2 := 0, nDepr3 := 0, nDepr4 := 0, nDepr5 := 0
Private cMotivo		:= "01"
Private aMotivos	:= {}
Private cBasei 		:= CriaVar("NM_CBASE", .F. )
Private cItemI 		:= CriaVar("NM_ITEM", .F. )
Private cBasef 		:= cBasei
Private cItemF 		:= Replicate("Z",Len(cItemI))
Private nQtdBens
Private dBaixa030  	:= dDataBase
Private cCliente	:= CriaVar("NM_CLIENTE", .F. )
Private cLoja		:= ""
Private cTES		:= CriaVar("NM_TESNFS", .F. )
Private cCondPag	:= CriaVar("NM_CONDPG", .F. )
Private cGeraNF		:= "2"
Private nValCorr 	:= 0, nValCorDep := 0
Private lSN7 		:= .F.
Private lQuant 		:= .T.
PRIVATE cMarca		:= GetMark( )
Private cFilIni     := xFilial("SN1")
Private cFilFim     := xFilial("SN1")
Private _cFileInd := ""

Default aEmailSol	:= {}

lPrimlPad := .T.

Set( _SET_DECIMALS, 20 )

lUmaVez := .F.
lAuto   := .T.
lPrim   := .T.

aCampos := {}
AADD( aCampos, { "N1_OK", "", "  ", "" } )

dbSelectArea( "SX3" )
SX3->(DBSetOrder(1))
SX3->( dbGoTop (  ) )
SX3->( dbSeek ( "SN1" ) )

Do While SX3->( !EOF() ) .And. ( X3_ARQUIVO == "SN1" )
	
	If ( X3USO( X3_USADO) .And. cNivel >= X3_NIVEL .And. SX3->X3_CONTEXT # "V") .Or.;
		( X3_PROPRI == "U" .And. X3_CONTEXT != "V" .And. X3_TIPO <> 'M' ) .Or.;
		Alltrim( X3_CAMPO ) $ "N1_CBASE#N1_ITEM"
		
		aAdd( aCampos, { X3_CAMPO, "", X3Titulo(), X3_PICTURE } )
	Endif
	
	SX3->( dbSkip() )
	
EndDo

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica tabela de motivos para baixa 												³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea( "SX5" )
SX5->( dbSeek( xFilial( "SX5" ) + "16" ) )

While SX5->X5_FILIAL + SX5->X5_TABELA == xFilial("SX5") + "16"
	If !( Alltrim(SX5->X5_CHAVE) $ '13/15/16/17')
		cCapital := Capital( X5Descri() )
		aAdd( aMotivos, SubStr( SX5->X5_CHAVE, 1, 2 ) + "=" + SubStr( cCapital, 1, 12 ) )
	EndIf
	SX5->( dbSkip() )
EndDo

dbSelectArea( "SN1" )
SN1->(dbGoTop())

DEFINE MSDIALOG oDlg FROM 18, 1 TO 257, 566 TITLE STR0110 PIXEL  //"Solicitação de Baixa em Lote"

@ 3,  3	TO 118, 242 OF oDlg PIXEL
/*

@ 11, 007	SAY STR0039		SIZE 024, 007 OF oDlg PIXEL  //"Gera NF"*/
@ 10, 007	SAY STR0034		SIZE 021, 007 OF oDlg PIXEL  //"Mot. Baixa"
/*

@ 11, 174	SAY STR0035		SIZE 032, 007 OF oDlg PIXEL  //"Cond. Pgto"
@ 24, 007	SAY STR0045		SIZE 024, 007 OF oDlg PIXEL  //"Num.NF"
@ 24, 092	SAY STR0046		SIZE 016, 007 OF oDlg PIXEL  //"Serie"
@ 24, 174	SAY STR0044		SIZE 032, 007 OF oDlg PIXEL  //"TES Saída"
@ 38, 007	SAY STR0042		SIZE 032, 007 OF oDlg PIXEL  //"Cliente"
@ 38, 092	SAY STR0043		SIZE 032, 007 OF oDlg PIXEL  //"Loja"*/

@ 24, 007	SAY STR0111		SIZE 045, 007 OF oDlg PIXEL  //"Do Codigo"
@ 24, 092	SAY STR0113		SIZE 045, 007 OF oDlg PIXEL  //"Ate"
@ 38, 007	SAY STR0112		SIZE 032, 007 OF oDlg PIXEL  //"Do Item"
@ 38, 065	SAY STR0113		SIZE 032, 007 OF oDlg PIXEL  //"Até"
@ 38, 110   SAY STR0114 	SIZE 032, 007 OF oDlg PIXEL  //"Gera aprovação para"
@ 52, 007	SAY "Justificativa"		SIZE 032, 007 OF oDlg PIXEL  //"Hist. Solic."
/*

@ 9 , 36	COMBOBOX oGERANF	VAR cGERANF ITEMS { "1=" + STR0040,"2=" + STR0041 } SIZE 46,  9 OF oDlg PIXEL VALID A125VlBxLt("cGeraNF",@cGERANF,@cMotivo,@cNota,@cSerie,@cCONDPAG,@cCliente,@cLoja,@cTES)*/
@ 9 , 36	COMBOBOX oCbxMotBx	VAR cMotivo ITEMS aMotivos 		   					SIZE 49, 27 OF oDlg PIXEL VALID A125VlBxLt("cMotivo",@cGERANF,@cMotivo,@cNota,@cSerie,@cCONDPAG,@cCliente,@cLoja,@cTES)
/*

@ 9 , 206	MSGET cCONDPAG 	SIZE	021, 009 	OF oDlg PIXEL F3 "SE4" WHEN cGeraNF == "1" VALID Vazio(cCONDPAG) .Or. ExistCpo("SE4",cCONDPAG)
@ 23, 36	MSGET cNota		SIZE	043, 009 	OF oDlg PIXEL F3 "SF2" WHEN cGeraNF == "3" VALID A125VlBxLt("cNota",@cGERANF,@cMotivo,@cNota,@cSerie,@cCONDPAG,@cCliente,@cLoja,@cTES)
@ 23, 114	MSGET cSerie	SIZE	021, 009 	OF oDlg PIXEL F3 "01"  WHEN cGeraNF == "1" VALID Vazio(cSerie) .Or. ExistCpo("SX5","01"+cSerie)
@ 23, 206	MSGET cTES		SIZE	021, 009 	OF oDlg PIXEL F3 "SF4" WHEN cGeraNF == "1" VALID A125VlBxLt("TES",@cGERANF,@cMotivo,@cNota,@cSerie,@cCONDPAG,@cCliente,@cLoja,@cTES)
@ 37, 36	MSGET cCliente 	SIZE	046, 009 	OF oDlg PIXEL F3 "SA1" WHEN cGeraNF == "1" VALID A125VlBxLt("cCliente",@cGERANF,@cMotivo,@cNota,@cSerie,@cCONDPAG,@cCliente,@cLoja,@cTES)
@ 37, 114	MSGET cLoja 	SIZE	021, 009 	OF oDlg PIXEL WHEN .F.*/

@ 23, 36	MSGET cBasei	SIZE 	050, 009 	OF oDlg PIXEL F3 "SN1" Valid !Empty(cBaseI)
@ 23, 114	MSGET cBasef	SIZE 	050, 009 	OF oDlg PIXEL F3 "SN1" Valid cBasef >= cBaseI
@ 37, 36	MSGET cItemI					OF oDlg PIXEL
@ 37, 80	MSGET cItemF					OF oDlg PIXEL

@ 37, 150	COMBOBOX oTipoAprov VAR cTipoAprov	ITEMS aTipoAprov	OF oDlg SIZE 89, 40 PIXEL

@ 51, 36	GET   oHistSol VAR cHistSol 	OF oDlg MULTILINE SIZE 198, 25 HSCROLL PIXEL

DEFINE SBUTTON FROM 03,250 TYPE  1 ENABLE OF oDlg ACTION ( nOpt := TudOkBxLt(cGERANF, cMotivo, cNota, cSerie, cCONDPAG, cCliente, cLoja, cTES, cHistSol ), IIf( nOpt == 1, Odlg:End(), .F. ) )
DEFINE SBUTTON FROM 17,250 TYPE  2 ENABLE OF oDlg ACTION ( nOpt := 0, oDlg:End() )
DEFINE SBUTTON FROM 40,250 TYPE 17 ENABLE OF oDlg ACTION SN1->( cExpFiltro := BuildExpr( "SN1", oDlg ) )

ACTIVATE MSDIALOG oDlg CENTERED

// - INICIO - Walmir Junior 28/06/2017 - Filtro para tela de marcação de registros.
/*
Private _cQuery	:= ""
Private _cCrit	:= ""

_cQuery :=	"Select Distinct (NM_FILIAL || NM_CBASE || NM_ITEM) As SOLIC From " +;
			RetSQLName("SNM") + " Where D_E_L_E_T_	= ' ' AND NM_CBASE Between '"+cBasei+"' AND '"+cBasef+"' AND NM_SITSOL = '1'"

If Select("TRBNM")>0
		TRBNM->(dbCloseArea())
EndIf

//Executa query
_cQuery := ChangeQuery(_cQuery)
MemoWrite("C:\temp\"+FunName()+"_"+ProcName()+".TXT",_cQuery)
dbUseArea( .T., 'TOPCONN', TcGenQry( ,, _cQuery ), "TRBNM", .F., .T. )

//Montar string contento a chave dos registros de ativo já em Solicitação.
While TRBNM->(!Eof())
	_cCrit += Iif( Empty(_cCrit), TRBNM->(SOLIC), ", " + TRBNM->(SOLIC))
	TRBNM->(DBSkip())
EndDo
TRBNM->(dbCloseArea())
*/
If Empty(cExpFiltro)
	cExpFiltro +=	" N1_QUANTD > 0 .And. N1_STATUS != ' ' .And. N1_STATUS != '2' .And. N1_STATUS != '3'"//+;
					//" .And. !((N1_FILIAL + N1_CBASE + N1_ITEM) $ '"+_cCrit+"')" //	.And. NM_SITSOL != '1'
Else
	cExpFiltro +=	" .And. N1_QUANTD > 0 .And. N1_STATUS != ' ' .And. N1_STATUS != '2' .And. N1_STATUS != '3'"//+;
	 				//" .And. !((N1_FILIAL + N1_CBASE + N1_ITEM) $ '"+_cCrit+"')"//  .And. NM_SITSOL != '1'
EndIf

// - FIM - Walmir Junior 28/06/2017 - Filtro para tela de marcação de registros.

_cFileInd := fIndTSNM("CRIA")

//Filtra os registros
If !Empty( cExpFiltro )
	cExpFiltro += " .AND. !StaticCall(SF01A06X, fIndTSNM, 'SEEK', _cFileInd, N1_FILIAL + N1_CBASE + N1_ITEM)"
		
	MsgRun("Filtrando registros na tabela de ativos (SN1)...", "Aguarde", {|| SN1->(dbSetFilter( { || &cExpFiltro }, cExpFiltro ) ) } )
	
EndIf

If nOpt != 0
	nQtdBens := 0	  // quantidade de Bens, mostrado no rodape‚ do browse

	Eval(bFirst)

	If SN1->( !Eof() )
	
		nOpca := 0
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Faz o calculo automatico de dimensoes de objetos     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aSize := MSADVSIZE()
	
		DEFINE MSDIALOG oDlg1 TITLE STR0115 From aSize[7],0 TO aSize[6],aSize[5] OF oMainWnd  PIXEL //"Baixas Automáticas"
		oDlg1:lMaximized := .T.
	
		oPanel := TPanel():New( 0, 0, '', oDlg1, , .T., .T., , , 40, 40, .T., .T. )
		oPanel:Align := CONTROL_ALIGN_TOP
	
		@1.9,.8 Say STR0116 OF oPanel  //"Total de Bens a Baixar..."
		@1.9,11 Say oQtda VAR nQtdBens  SIZE 50,10 OF oPanel
	
		oMark := MsSelect():New( "SN1", "N1_OK",,aCampos,@lInverte,@cMarca,{35,oDlg1:nLeft,oDlg1:nBottom,oDlg1:nRight},'Atf030Fil(1)', 'Atf030Fil(2)')
		oMark:oBrowse:bAllMark := { || aF125Marca( "SN1", cMarca, .T. , oQtda, bFirst, bWhile, , , cGeraNF ) }
		oMark:bMark := { || Af030Display( cMarca, lInverte, oQtda ) }
		oMark:bAval	:= { || aF125Marca("SN1", cMarca, .T., oQtda, bFirst, bWhile, .F., , cGeraNF) }
		oMark:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
	
		ACTIVATE MSDIALOG oDlg1 ON INIT EnchoiceBar( oDlg1, { || ( nOpca := 1, oDlg1:End() ) }, {|| nOpca := 0, ODlg1:End() } )
	
		If nOpca == 1	//Se usuário clicou em Ok
		
			If Left( cTipoAprov, 1 ) != "1" // Resp. Geral
				cVarSX6 := GetMV( "MV_ATFRESP" )
			Endif
		
			If !SuperGetMV( "MV_ATFWFM", , .F. )
				lContinua := .T.
			ElseIf !Empty(cVarSX6)
				PswOrder(1)
				// Se encontrou o usuario no cadastro de usuarios e o e-mail estiver preenchido
				If PswSeek( cVarSX6 ) .And. !Empty( Alltrim( PswRet()[1,14] ) )
					aEmailSol := { { Alltrim( PswRet()[1,14]), cVarSX6, .T. } }
					lContinua := .T.
				Else
					lContinua := .F.
					Help(" ",1,"AF125RESP",, STR0057 + " [MV_ATFRESP]",1,0)//"Ausência do endereço de e-mail no cadastro do responsável pelo Ativo."
				EndIf
			ElseIf Left( cTipoAprov, 1 ) == "2" // Resp. Geral
				lContinua := .F.
				Help(" ",1,"AF125RESP",,STR0060 + CRLF + STR0117,1,0)//"Responsável padrão pelos Ativos não preenchido." | "Preencha o código do usuário padrão [MV_ATFRESP] ou desative o envio de Workflow [MV_ATFWFM]"
			Else
				lContinua := .T.
			Endif

			If lContinua
				Eval(bFirst)
			
				If Left( cTipoAprov, 1 ) == "2" // Resp. Geral
					cCodSol := GetSxENum( "SNM", "NM_CODIGO" )
					ConfirmSx8()
				Endif
			
				dbSelectArea( "SN3" )
				SN3->(dbGoTop())
			
				While Eval(bWhile)
				
					If ( SN1->N1_OK != cMarca )
						SN1->(dbSkip())
						Loop
					EndIf
				
					SN3->( dbSeek( xFilial("SN3") + SN1->N1_CBASE + SN1->N1_ITEM ) )
				
				//Obtem a quantidade do bem
					nQuant := If( SN1->N1_QUANTD == 0, 1, SN1->N1_QUANTD )
				
					If Eval( bFor )
					
					//Gravação da solicitação de baixa em lote
						nVlrBaix := Round((SN3->N3_VORIG1 + SN3->N3_VRCACM1 + SN3->N3_AMPLIA1), X3Decimal("N3_VORIG1"))
					
						If Left( cTipoAprov, 1 ) != "2" // Responsavel individual
						//Verifica se WorkFlow está ativado
							If SuperGetMv( "MV_ATFWFM", , .F. )
							// Preenche a matriz PRIVATE aEmailSol com o e-mail dos responsaveis
								A125VlRspWF( SN3->N3_CBASE, SN3->N3_ITEM )
							EndIf
							cCodSol := GetSxENum( "SNM", "NM_CODIGO" )
							ConfirmSx8()
						Endif
					
						GravaBx( SN1->N1_CBASE	, SN1->N1_ITEM	, SN3->N3_TIPO  ,;
							nQuant			, 100			, cMotivo		,;
							cCondPag		, nVlrBaix		, nVlrBaix		,;
							cGeraNF		, cCliente		, cLoja			,;
							cNota			, cSerie		, cTES			,;
							dDataBase		, cHrSol		,__cUserID		,;
							cHistSol		, cCodSol )
						
						//Walmir Junior - 10/04/2017 - Array códigos solicitações de baixa.
						if aScan(_aSolBx , cCodSol) = 0	
							aAdd(_aSolBx, cCodSol)
						EndIf
					
						If Left(cTipoAprov,1) == "1"	// Responsavel Individual
							If SuperGetMV( 'MV_ATFWFM' ,, .F. )
							//Chamada do WorkFlow
								A125WfBx(cCodSol)
							EndIf
						Endif
					EndIf
				
					SN1->( dbSkip() )
				EndDo
				If Left( cTipoAprov, 1 ) == "2"	// Responsavel Geral
					If SuperGetMV( 'MV_ATFWFM', , .F. )
					//Chamada do WorkFlow
						A125WfBx( cCodSol )
					EndIf
				Endif
			EndIf
		Endif
	Endif
EndIf
//Apagar Indices temporarios
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura os ¡ndices 										 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
SN1->(dbClearFilter())

fIndTSNM("DELETA", _cFileInd)

//Walmir Junior - 06/04/2017 - Chamada do Relatório Termo de Baixa.
If Len(_aSolBx) > 0
	
	_cSolic := U_SF01A04X()
	
	DBSelectArea("SNM")
	DBSetOrder(1)
	Begin Transaction
	_nItCont := 1
	For _nx := 1 to Len(_aSolBx)
		SNM->(dbGoTop())
		
		If SNM->(DBSeek(xFilial("SNM")+_aSolBx[_nx]))
			While xFilial("SNM")+_aSolBx[_nx] == SNM->NM_FILIAL+SNM->NM_CODIGO .AND. !SNM->(Eof())
				SNM->(RecLock("SNM", .F.))
					SNM->NM_XSOLIC 	:= _cSolic
					SNM->NM_XSOLITM	:= StrZero(_nItCont, 3)
				SNM->(MsUnLock())
				SNM->(dbCommit())
				_nItCont++
				SNM->(dbSkip())
			EndDo
		EndIf
	Next
	End Transaction
	If Aviso("Gerar Relatório", "Deseja gerar o relatório de Baixa?", {"Sim", "Não"}) == 1
		U_SF01R01X({{xFilial("SNM"), _cSolic}})
	EndIf
EndIf

Return Nil

Static Function TudOkBxLt( cGERANF, cMotivo, cNota, cSerie, cCONDPAG,;
cCliente, cLoja, cTES, cHistSol )

Local lRet := .T.

//Verifica o preenchimento de campos obrigatórios.
If Empty( cHistSol ) .And. lRet
	lRet := .F.                                                                                     
	Help(" ",1,"AF125OBG",,STR0074 + " - '" + STR0050 + "'",1,0)	//"Campo obrigatório não informado" |  "Hist. Solic."
EndIf

If ( cGeraNF == "1" .And. Empty(cSerie) ) .And. lRet
	lRet := .F.
	Help(" ",1,"AF125OBG",,STR0074 + " - '" + STR0046 + "'",1,0)	//"Campo obrigatório não informado" |  "Serie"
EndIf

If ( cGeraNF == "1" .And. Empty(cTES) ) .And. lRet
	lRet := .F.
	Help(" ",1,"AF125OBG",,STR0074 + " - '" + STR0044 + "'",1,0)	//"Campo obrigatório não informado" |  "TES Saida"
EndIf

If cGeraNF == "1" .And. Empty(cCliente) .And. lRet
	lRet := .F.
	Help(" ",1,"AF125OBG",,STR0074 + " - '" + STR0042 + "'",1,0)	//"Campo obrigatório não informado" | "Cliente"
EndIf

If ( cGeraNF == "1" .And. Empty( cCondPag ) ) .And. lRet
	lRet := .F.
	Help(" ",1,"AF125OBG",,STR0074 + " - '" + STR0035 + "'",1,0)	//"Campo obrigatório não informado" | "Cond. Pgto"
EndIf

Return IIf( lRet, 1, 0 )

/*/{Protheus.doc} fIndTSNM
Funcao para criacao de um indice temporario E seek E deleção
@author j2a.caiolima
@since 29/08/2017
@version 1.0
/*/
Static Function fIndTSNM(_cTipo, _cArquivo, _cChave)
	Local _xRet
	
	Do Case
		Case _cTipo = "CRIA"
			cArquivo := CriaTrab(,.F.)
			cChave := "NM_FILIAL + NM_CBASE + NM_ITEM"
			cFiltr := "NM_SITSOL = '1'"
			
			IndRegua("SNM", cArquivo, cChave, , cFiltr)
			
			dbSelectArea("SNM")
			nIndex := RetIndex("SNM")
			#IFNDEF TOP
				dbSetIndex(cArquivo+OrdBagExt())
			#ENDIF
			
			dbSetOrder(nIndex + 1)
			
			_xRet := cArquivo
			
		Case _cTipo = "SEEK"
			_xRet := SNM->( dbSeek(_cChave) )
		
		Case _cTipo = "DELETA"
			dbSelectArea("SNM")
			RetIndex("SNM")
			FErase(_cArquivo+OrdBagExt())
	EndCase
	
Return(_xRet)

Static Function Af125Marca( cAlias, cMarca, lInverte, oQtda, bFirst, bWhile, lTodos, lFiltro, cGeraNF ,lTraLocal)

Local aArea := (cAlias)->(GetArea())
Local lRet  := .T.

Default lInverte := .F.
Default lTodos	 := .T.
Default lFiltro	 := .F.
Default lTraLocal:= .F.

dbSelectArea( "SNM" )
SNM->( dbSetOrder(2) )
SNM->( dbGoTop() )

dbSelectArea("SB1")
SB1->(dbSetOrder(1))
SB1->(dbGoTop())

If lTodos
	Eval( bFirst )
Endif

While !lTodos .Or. Eval( bWhile )
	
	SNM->( dbSeek( xFilial( "SNM" ) + SN1->N1_CBASE + SN1->N1_ITEM ), , .T. )
	
	lRet := .T.
	
	If cGeraNF == "1"
		If !SB1->(dbSeek( xFilial("SB1") + SN1->N1_PRODUTO ) )
			lRet := .F.
			If !lTodos
			    Help(" ",1,"AF125PROD",,STR0143,1,0)//"Não existe produto relacioanado a esse bem para gerar documento fiscal."
			Else
				If SN1->N1_OK == cMarca
					RecLock("SN1")
					SN1->N1_OK := ""
					nQtdBens--
					nQtdBens := IIf ( nQtdBens <= 0, 0, nQtdBens )
					oQtda:Refresh()
					MsUnlock()
				EndIf
			EndIf
		EndIf
	EndIf
	
	If lRet
		If ( SN1->N1_QUANTD > 0 )  		//Verifica se tem quantidade disponível para a solicitação
			If ( SN1->N1_STATUS == "1" ) .Or. lTraLocal	//Verifica se item está bloqueado
				If ( SNM->NM_SITSOL != "1" )	//Verifica se existe solicitação pendente para o item
					RecLock( "SN1" )
					If lInverte
						If SN1->N1_OK == cMarca
							SN1->N1_OK := ""
							nQtdBens--
							nQtdBens := IIf ( nQtdBens <= 0, 0, nQtdBens )
						Else
							SN1->N1_OK := cMarca
							nQtdBens++
						EndIf
						oQtda:Refresh()
					Else
						SN1->N1_OK := cMarca
						nQtdBens++
					EndIf
					MsUnLock()
				Else	//Executa se item com solicitação pendente NM_SITSOL == "1"
					If !lTodos
						Help(" ",1,"AF125SOL",,STR0071,1,0)//"Ativo com solicitação pendente."
					EndIf
				EndIf
			Else	//Executa se item bloqueado N1_STATUS = "2"
				If !lTodos
				    Help(" ",1,"AF125STA",,STR0131,1,0)//"Este bem não pode ser selecionado, pois está bloqueado!"
				EndIf
			EndIf
		Else	//Executa se item zerado N1_QUANTD = 0
			If !lTodos
				Help(" ",1,"AF125BX",,STR0118,1,0)//"Este bem não pode ser selecionado, pois está baixado!"
			Endif
		Endif
	EndIf
	
	If !lTodos
		Exit
	Endif
	
	SN1->(dbSkip())
	
EndDo

RestArea( aArea )

Return

Static Function GravaBx( cCBase, cItem, cTipo, nQTDbx, nPercBX, cMotbx,;
cCondPg, nVlrBaix, nVlVenda, cGeraNF, cCliente,;
cLoja, cNota, cSerie, cTESNFS, dDatSol, dHorsol,;
cUsrSol, cHistSol, cCodSol )
 
RecLock( "SNM", .T. )
SNM->NM_FILIAL	:= xFilial( "SNM" )
SNM->NM_CODIGO	:= cCodSol
SNM->NM_DATSOL	:= dDatSol
SNM->NM_HORSOL	:= StrTran( Left( dHorsol, 5), ":", "" )
SNM->NM_CBASE	:= cCBase
SNM->NM_ITEM	:= cITEM
SNM->NM_TIPO	:= cTIPO
SNM->NM_SITSOL	:= "1" 		//Pendente
SNM->NM_USRSOL	:= cUSRSOL
SNM->NM_TIPOSOL	:= "1" 		//Baixa
SNM->NM_MOTBX	:= SubStr( cMOTBX, 1, 2 )
SNM->NM_QTDBX	:= nQTDBX
SNM->NM_PERCBX	:= nPERCBX
SNM->NM_VLRBAIX	:= nVLRBAIX
SNM->NM_VLVENDA	:= nVlVenda
SNM->NM_GERANF	:= SubStr( cGERANF, 1, 1 )
SNM->NM_NOTA	:= cNOTA
SerieNfId('SNM',1,'NM_SERIE',dDataBase,,cSERIE)
SNM->NM_TESNFS	:= cTESNFS
SNM->NM_CONDPG	:= cCONDPG
SNM->NM_CLIENTE	:= cCLIENTE
SNM->NM_LOJA	:= cLOJA
SNM->NM_CCUSTO	:= SN3->N3_CCUSTO
SNM->NM_LOCAL	:= SN1->N1_LOCAL
SNM->NM_GRUPO	:= SN1->N1_GRUPO
MSMM( SNM->NM_CDHSOL, , ,cHistSol, 1, , , "SNM", "NM_CDHSOL" )
SNM->( MsUnlock() )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ponto de entrada executado para complementar informações ao workflow		³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ExistBlock( "AF125GRVBX" )
		ExecBlock( "AF125GRVBX" , .F., .F. )
	EndIf

Return Nil
