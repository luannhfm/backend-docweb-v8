#INCLUDE "PROTHEUS.CH"
#INCLUDE "TOPCONN.CH"

/*/{Protheus.doc} SF06A18X
(long_description)
@author j2a.luizjunior
@since 06/04/2017
@version 1.0
@example
(examples)
@see (links_or_references)
/*/

CLASS SF06A18X

	METHOD New() CONSTRUCTOR
	METHOD GERACRONPJ()
	METHOD GETNUMCNW()
	METHOD GERMED()
	METHOD GERFAT()
	METHOD EXCMED()

ENDCLASS

/*/{Protheus.doc} NEW
(long_description)
@author j2a.luizjunior
@since 06/04/2017
@version 1.0
@example
(examples)
@see (links_or_references)
/*/

METHOD NEW() CLASS SF06A18X
RETURN(SELF)

/*/{Protheus.doc} GERACRONPJ
(long_description)
@author j2a.luizjunior
@since 07/04/2017
@version 1.0
@example
(examples)
@see (links_or_references)
/*/

METHOD GERACRONPJ() CLASS SF06A18X

	Local cAlias     := GetNextAlias()
	Local _cCusto    := GetNewPar("MV_XSGECCV","")
	Local _cNumPla   := StrZero(1,TamSX3('CNA_NUMERO')[1])
	Local _cAliasRM  := GetNewPar("MV_XSGEABD", "") //"@RMSGE"
	Local cQuery     := ""	
	Local _aDadosCNW := {}
	//Local _cClvl     := ""
	Local cMsg       := ""
	
	//Walmir Junior 07/05/2018 - (Comentário) Seleciona informações do RM para Inclusão ou Exclusão (PJ).	
	cQuery += "	SELECT DISTINCT	                                                                                "
	cQuery += "	      'I' AS TIPO,	                                                                            "
	cQuery += "	       A.CODIGOCONTRATO,	                                                                    "
	cQuery += "	       E.CODTURMA,       	                                                                    "
	cQuery += "	       D.CODCOLIGADA,                                                                           "

	cQuery += "	       TO_CHAR(F.DATAINI,'YYYYMMDD') AS DATAINI, TO_CHAR(F.DATAFIM,'YYYYMMDD') AS DATAFIM,      "
	
	cQuery += "		   CASE WHEN E.CODFILIAL = 1 THEN '03MT0002'                                                "
	cQuery += "		     			 WHEN E.CODFILIAL = 4 THEN '03MT0003'                                       "  
	cQuery += "		     			 WHEN E.CODFILIAL = 3 THEN '03MT0004'                                       "  
	cQuery += "		     			 WHEN E.CODFILIAL = 5 THEN '03MT0005'                                       "  
	cQuery += "		     			 WHEN E.CODFILIAL = 8 THEN '03MT0007'                                       "  
	cQuery += "		     			 WHEN E.CODFILIAL = 7 THEN '03MT0008'                                       "  
	cQuery += "		     			 WHEN E.CODFILIAL = 6 THEN '03MT0010'                                       "  
	cQuery += "		     			 WHEN E.CODFILIAL = 2 THEN '03MT0012'                                       "
	cQuery += "		     			 WHEN E.CODFILIAL = 9 THEN '03MT0016'                                       " 
	cQuery += "					END AS CODFILIAL                                                                "	
	cQuery += "	FROM RM.TCNT"             + _cAliasRM + " A,	                                                    "
	cQuery += "	     RM.TITMCNT"          + _cAliasRM + " B,	                                                    "
	cQuery += "	     RM.SMATRICPLITEMCNT" + _cAliasRM + " C,	                                                    "
	cQuery += "	     RM.SMATRICPL"        + _cAliasRM + " D,        	                                            "
	cQuery += "	     RM.STURMA"           + _cAliasRM + " E,	                                                    "
	cQuery += "	     RM.ZMD_TURMAS_COMPL" + _cAliasRM + " F                                                        "
	cQuery += "	WHERE 1=1	                                                                                    "
	cQuery += "	AND A.CODCOLIGADA           = B.CODCOLIGADA	                                                    "
	cQuery += "	AND A.IDCNT                 = B.IDCNT	                                                        "   
	cQuery += "	AND B.CODCOLIGADA           = C.CODCOLIGADA	                                                    "
	cQuery += "	AND B.IDCNT                 = C.IDCNT	                                                        "
	cQuery += "	AND B.NSEQITMCNT            = C.NSEQITMCNT	                                                    "
	cQuery += "	AND C.CODCOLIGADA           = D.CODCOLIGADA	                                                    "
	cQuery += "	AND C.IDPERLET              = D.IDPERLET	                                                    "
	cQuery += "	AND C.IDHABILITACAOFILIAL   = D.IDHABILITACAOFILIAL	                                            "
	cQuery += "	AND C.RA                    = D.RA	                                                            "
	cQuery += "	AND D.CODCOLIGADA           = E.CODCOLIGADA	                                                    "
	cQuery += "	AND D.CODFILIAL             = E.CODFILIAL	                                                    "
	cQuery += "	AND D.CODTURMA              = E.CODTURMA         	                                            "
	cQuery += "	AND D.IDPERLET              = E.IDPERLET	                                                    "
	cQuery += "	AND E.CODCOLIGADA           = F.CODCOLIGADA     	                                            "
	cQuery += "	AND E.CODFILIAL             = F.CODFILIAL       	                                            "
	cQuery += "	AND E.CODTURMA              = F.CODTURMA        	                                            "
	cQuery += "	AND E.IDPERLET              = F.IDPERLET        	                                            "
	cQuery += "	AND C.CODCOLIGADA           = 3                 	                                            "
	cQuery += "	AND COALESCE(F.TURMA_INI,0) = 1                                                                 "
	cQuery += "	AND EXISTS (SELECT ''                            	                                            "
	cQuery += "	                FROM "+RetSqlName("CNV")+" G,                                                   "
	cQuery += "                 (SELECT CNV_CONTRA,                                                             "  
	cQuery += "                                    MAX(CNV_NUMERO) AS CNV_NUMERO,                               "
	cQuery += "                                    CNV_FILIAL                                                   "
	cQuery += "	                FROM "+RetSqlName("CNV")+" A                                                    "
	cQuery += "	                                WHERE 1=1	                                                    "
	cQuery += "	                                AND CNV_XCTBIL  != 'S'                                          "
	cQuery += "	                                GROUP BY CNV_CONTRA, CNV_FILIAL) H	                            "
	cQuery += "	                WHERE 1=1	                                                                    "
	cQuery += "	                AND A.CODIGOCONTRATO = CAST(G.CNV_CONTRA AS INT)	                            "
	cQuery += "	                AND G.CNV_FILIAL     = H.CNV_FILIAL	                                            "
	cQuery += "	                AND G.CNV_NUMERO     = H.CNV_NUMERO	                                            "
	cQuery += "	                AND G.CNV_CONTRA     = H.CNV_CONTRA	                                            "
	cQuery += "	                AND COALESCE(G.D_E_L_E_T_,'A') <> '*')	                                        "
	cQuery += "	UNION	                                                                                        "
	cQuery += "	SELECT DISTINCT 	                                                                            "
	cQuery += "	      'E' AS TIPO,	                                                                            "
	cQuery += "	       A.CODIGOCONTRATO,	                                                                    "
	cQuery += "	       E.CODTURMA,       	                                                                    "
	cQuery += "	       D.CODCOLIGADA,                                                                           "
	
	cQuery += "	       '' AS DATAINI, '' AS DATAFIM,                                                            "
	
	cQuery += "		   CASE WHEN E.CODFILIAL = 1 THEN '03MT0002'                                                "
	cQuery += "		     			 WHEN E.CODFILIAL = 4 THEN '03MT0003'                                       "   
	cQuery += "		     			 WHEN E.CODFILIAL = 3 THEN '03MT0004'                                       "   
	cQuery += "		     			 WHEN E.CODFILIAL = 5 THEN '03MT0005'                                       "   
	cQuery += "		     			 WHEN E.CODFILIAL = 8 THEN '03MT0007'                                       "  
	cQuery += "		     			 WHEN E.CODFILIAL = 7 THEN '03MT0008'                                       "  
	cQuery += "		     			 WHEN E.CODFILIAL = 6 THEN '03MT0010'                                       "  
	cQuery += "		     			 WHEN E.CODFILIAL = 2 THEN '03MT0012'                                       "
	cQuery += "		     			 WHEN E.CODFILIAL = 9 THEN '03MT0016'                                       " 
	cQuery += "					END AS CODFILIAL                                                                "
	cQuery += "	FROM RM.TCNT"             + _cAliasRM + " A,                                                       "
	cQuery += "	     RM.TITMCNT"          + _cAliasRM + " B,                                                       "
	cQuery += "		 RM.SMATRICPLITEMCNT" + _cAliasRM + " C,                                                       "
	cQuery += "	     RM.SMATRICPL"        + _cAliasRM + " D,                                                       "
	cQuery += "	     RM.STURMA"           + _cAliasRM + " E	                                                    "
	cQuery += "	WHERE 1=1	                                                                                    "
	cQuery += "	AND A.CODCOLIGADA             = B.CODCOLIGADA	                                                "
	cQuery += "	AND A.IDCNT                   = B.IDCNT	                                                        "
	cQuery += "	AND B.CODCOLIGADA             = C.CODCOLIGADA	                                                "
	cQuery += "	AND B.IDCNT                   = C.IDCNT	                                                        "
	cQuery += "	AND B.NSEQITMCNT              = C.NSEQITMCNT	                                                "
	cQuery += "	AND C.CODCOLIGADA             = D.CODCOLIGADA	                                                "
	cQuery += "	AND C.IDPERLET                = D.IDPERLET	                                                    "
	cQuery += "	AND C.IDHABILITACAOFILIAL     = D.IDHABILITACAOFILIAL	                                        "
	cQuery += "	AND C.RA                      = D.RA	                                                        "
	cQuery += "	AND D.CODCOLIGADA             = E.CODCOLIGADA	                                                "
	cQuery += "	AND D.CODFILIAL               = E.CODFILIAL	                                                    "
	cQuery += "	AND D.CODTURMA                = E.CODTURMA	                                                    "
	cQuery += "	AND D.IDPERLET                = E.IDPERLET	                                                    "
	cQuery += "	AND C.CODCOLIGADA             = 3	                                                            "
	cQuery += "	AND NOT EXISTS (SELECT ''	                                                                    "
	cQuery += "	                FROM RM.ZMD_TURMAS_COMPL" + _cAliasRM + " F	                                    "
	cQuery += "	                WHERE 1=1	                                                                    "
	cQuery += "	                AND E.CODCOLIGADA           = F.CODCOLIGADA	                                    "
	cQuery += "	                AND E.CODFILIAL             = F.CODFILIAL	                                    "
	cQuery += "	                AND E.CODTURMA              = F.CODTURMA	                                    "
	cQuery += "	                AND E.IDPERLET              = F.IDPERLET	                                    "
	cQuery += "	                AND COALESCE(F.TURMA_INI,0) = 1)	                                            "
	cQuery += "	AND  EXISTS ( SELECT ''	                                                                        "
	cQuery += "	              FROM "+RetSqlName("CNV")+" G, (SELECT CNV_CONTRA,                                 "
	cQuery += "                                                     MAX(CNV_NUMERO) AS CNV_NUMERO,              " 
	cQuery += "                                                     CNV_FILIAL	                                "
	cQuery += "	                                              FROM "+RetSqlName("CNV")+" A                      "
	cQuery += "	                                              WHERE 1=1	                                        "
	cQuery += "	                                              AND CNV_XCTBIL                 = 'S'              "
	cQuery += "	                                              GROUP BY CNV_CONTRA, CNV_FILIAL) H	            "
	cQuery += "	              WHERE 1=1	                                                                        "
	cQuery += "	              AND A.CODIGOCONTRATO = CAST(G.CNV_CONTRA AS INT)	                                "
	cQuery += "	              AND G.CNV_FILIAL = H.CNV_FILIAL	                                                "
	cQuery += "	              AND G.CNV_NUMERO = H.CNV_NUMERO	                                                "
	cQuery += "	              AND G.CNV_CONTRA = H.CNV_CONTRA	                                                "
	cQuery += "	              AND COALESCE(G.D_E_L_E_T_,'A') <> '*')	                                        "
	cQuery += "	ORDER BY TIPO, CODIGOCONTRATO	                                                                "

	DbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias,.T.,.F.)
	
	While !(cAlias)->(Eof())
	
		Do Case
		
			Case (cAlias)->TIPO == "I"
			
				Begin Transaction
		
					cCodCon  := StrZero(Val((cAlias)->CODIGOCONTRATO),TamSx3("CN9_NUMERO")[1])
					cProd    := Posicione("CNB",1,(cAlias)->CODFILIAL + cCodCon, "CNB_PRODUT")
					_cItemCt := Posicione("SB1",1,xFilial("SB1")+ cProd,"B1_ITEMCC")
					_cConta  := Posicione("SB1",1,xFilial("SB1")+ cProd,"B1_CONTA")
				
					DbSelectArea("CN9")
					DbSetOrder(1)
					If DbSeek((cAlias)->CODFILIAL + cCodCon)
						
						Reclock("CN9", .F.)
						CN9->CN9_XDTINI := SToD((cAlias)->DATAINI)
						CN9->CN9_XDTFIM := SToD((cAlias)->DATAFIM)
						CN9->(MsUnlock())
						
						cMsg    := "PJ - IMPGCTRM: ContratoRM: " + AllTrim(cCodCon) + " - Ja integrado - Valido" 
						ConOut(cMsg)
		
						// _aParcelas := Condicao(CN9->CN9_VLINI,CN9->CN9_CONDPG,,CN9->CN9_XDTINI)
						
						// funcao que recalcula as parcelas baseando na nova forma de calculo
						// caio.lima j2a - 13/07/2017
						_aParcelas := fCondCont(CN9->CN9_VLINI,CN9->CN9_XDTINI,CN9->CN9_XDTFIM)
						
						For j := 1 to Len(_aParcelas)
						
							//_cDtPr := StoD(cValToChar(Year(_aParcelas[j][1])) + StrZero(Month(_aParcelas[j][1]),2) + StrZero(28,2))
							_cDtPr := _aParcelas[j][1]
							_nVlrP := _aParcelas[j][2]
							_cParc := StrZero(j,TamSX3('CNW_PARCEL')[1])
							_cComp := StrZero(Month(_cDtPr),2) + '/' + cValToChar(Year(_cDtPr))
							_cHist := "Parc: "+ _cParc + " - Compt: "+ _cComp
						
							aAdd(_aDadosCNW, { CN9->CN9_FILIAL		,;
													CN9->CN9_REVISA	,;
													_cParc			,;
													_cComp			,;
													_cDtPr			,;
													_nVlrP			,;
													_cHist			,;
													'2'				,; 			//1=Sim;2=Nao
													_cCusto			,;
													_cItemCt	    })
						Next
					
						/*Gravar Cronograma Contabil*/	
						If Len(_aDadosCNW) > 0
							
							/* TRATA EXCLUSAO DO CRONOGRAMA FICTICIO*/
							DbSelectArea("CNV")
							DbSetOrder(1)
							If DbSeek((cAlias)->CODFILIAL + cCodCon)
							
								While !CNV->(Eof()) .And. (cAlias)->CODFILIAL + cCodCon == CNV->CNV_FILIAL + CNV->CNV_CONTRA
							
									If RecLock("CNV",.F.)
										
										//CNV->CNV_XCTBIL := "N"
										CNV->(DbDelete())
										CNV->(MsUnlock())
										
									EndIf
								
									CNV->(DbSkip())
								EndDo								
							
								cMsg := "PJ - ContratoRM: " + AllTrim(cCodCon) + " - Excluido da CNV" 
								ConOut(cMsg)
								
								DbSelectArea("CNW")
								DbSetOrder(1)
								If DbSeek((cAlias)->CODFILIAL + cCodCon)
								
									While !CNW->(Eof()) .And. (cAlias)->CODFILIAL + cCodCon == CNW->CNW_FILIAL + CNW->CNW_CONTRA
								
										If RecLock("CNW",.F.)
											CNW->(DbDelete())
											CNW->(MsUnlock())
										EndIf
									
										CNW->(DbSkip())
									EndDo	
							
								EndIf
									
								cMsg := "PJ - ContratoRM: " + AllTrim(cCodCon) + " - Excluido da CNW" 
								ConOut(cMsg)
					
							EndIf
							/*FIM EXCLUSAO CRONOGRAMA*/
					
							_cNumCron  := Self:GETNUMCNW() 
							_aDadosCNV := {}
						
							//Cabec
							aAdd(_aDadosCNV, CN9->CN9_FILIAL	)
							aAdd(_aDadosCNV, CN9->CN9_REVISA	)
							aAdd(_aDadosCNV, _cNumPla			)
							aAdd(_aDadosCNV, 1					)
							aAdd(_aDadosCNV, _cConta			)
							aAdd(_aDadosCNV, '1'				)//1=Mensal;2=Quinzenal;3=Diario
							aAdd(_aDadosCNV, 30 				)//Dias entre as parcelas
						
							If RecLock('CNV', .T.)
								CNV->CNV_FILIAL := _aDadosCNV[1]
								CNV->CNV_NUMERO := _cNumCron
								CNV->CNV_CONTRA := CN9->CN9_NUMERO
								CNV->CNV_REVISA := _aDadosCNV[2]
								CNV->CNV_PLANIL := _aDadosCNV[3]
								CNV->CNV_TXMOED := _aDadosCNV[4]
								CNV->CNV_CONTA  := _aDadosCNV[5]
								CNV->CNV_PERIOD := _aDadosCNV[6]	
								CNV->CNV_DIAPAR := _aDadosCNV[7]
								CNV->CNV_XCTBIL := "S"	
								CNV->(MsUnlock())
							EndIf
						
							//Itens				
							DbSelectArea("CNW")
							CNW->(DbSetOrder(1))
							CNW->(DbGoTop())
							If .Not. CNW->(DbSeek(CN9->CN9_FILIAL + CN9->CN9_NUMERO + CN9->CN9_REVISA + _cNumCron))
						
								For nX := 1 To Len(_aDadosCNW)
								
									_cClvl := Posicione("SA1",1,xFilial("SB1")+ CN9->CN9_CLIENT + CN9->CN9_LOJACL,"A1_CLVL")
								
									If RecLock('CNW', .T.)
										CNW->CNW_FILIAL := _aDadosCNW[nX][01]
										CNW->CNW_CONTRA := CN9->CN9_NUMERO
										CNW->CNW_REVISA := _aDadosCNW[nX][02]
										CNW->CNW_NUMERO := _cNumCron
										CNW->CNW_PARCEL := _aDadosCNW[nX][03]
										CNW->CNW_COMPET := _aDadosCNW[nX][04]
										CNW->CNW_DTPREV := _aDadosCNW[nX][05]
										CNW->CNW_VLPREV := _aDadosCNW[nX][06]
										CNW->CNW_HIST   := _aDadosCNW[nX][07]
										CNW->CNW_FLGAPR := _aDadosCNW[nX][08]
										CNW->CNW_CC     := _aDadosCNW[nX][09]
										CNW->CNW_ITEMCT := _aDadosCNW[nX][10]
										CNW->CNW_CLVL   := _cClvl
										CNW->(MsUnlock())
									EndIf
						
								Next nX
								
								_aDadosCNW := {}
							
								DbSelectArea('CNA')
								CNA->(DbSetOrder(1)) //CNA_FILIAL+CNA_CONTRA+CNA_REVISA+CNA_NUMERO
								CNA->(DbGotop())
								If CNA->( DbSeek( CN9->CN9_FILIAL + CN9->CN9_NUMERO + CN9->CN9_REVISA + _cNumPla ) )
									If RecLock('CNA', .F.)
										CNA->CNA_CRONCT := _cNumCron  
										CNA->(MsUnlock())
									EndIf
									ConOut('PJ - IMPGCTRM: Gravou o Codigo do Cronograma Contabil - CNA')
								Else
									ConOut('PJ - IMPGCTRM: Nao gravou o Codigo do Cronograma Contabil - CNA')
								EndIf
								
								//Self:GERMED()																
							
							EndIf
				
						EndIf		
				
					EndIf
					
				End Transaction	
			
			Case (cAlias)->TIPO == "E"	
			
				Begin Transaction

					cMsg    := "PJ - EXCLUSAO DE CRONOGRAMA" 
					ConOut(cMsg)				
			
					cCodCon := StrZero(Val((cAlias)->CODIGOCONTRATO),TamSx3("CN9_NUMERO")[1])

					DbSelectArea("CN9")
					DbSetOrder(1)
					If DbSeek((cAlias)->CODFILIAL + cCodCon)
					
						cMsg    := "PJ - CONTRATO LOCALIZADO - NUMERO = "+cCodCon 
						ConOut(cMsg)		
						
						cContra := CN9->CN9_NUMERO
						cRevisa := CN9->CN9_REVISA
						dDataI  := CN9->CN9_DTINIC
						dDataF  := CN9->CN9_DTFIM
								
						DbSelectArea("CNV")
						DbSetOrder(1)
						If DbSeek((cAlias)->CODFILIAL + cCodCon)
						
							While !CNV->(Eof()) .And. (cAlias)->CODFILIAL + cCodCon == CNV->CNV_FILIAL + CNV->CNV_CONTRA
						
								If RecLock("CNV",.F.)
									
									CNV->CNV_XCTBIL := "N"
									//CNV->(DbDelete())
									//CNV->(MsUnlock())
									
								EndIf
							
								CNV->(DbSkip())
							EndDo								
						
							cMsg := "PJ - ContratoRM: " + AllTrim(cCodCon) + " - Excluido da CNV" 
							ConOut(cMsg)
							/*
							DbSelectArea("CNW")
							DbSetOrder(1)
							If DbSeek((cAlias)->CODFILIAL + cCodCon)
							
								While !CNW->(Eof()) .And. (cAlias)->CODFILIAL + cCodCon == CNW->CNW_FILIAL + CNW->CNW_CONTRA
							
									If RecLock("CNW",.F.)
										CNW->(DbDelete())
										CNW->(MsUnlock())
									EndIf
								
									CNW->(DbSkip())
								EndDo	
						
							EndIf
							*/	
							cMsg := "PJ - ContratoRM: " + AllTrim(cCodCon) + " - Excluido da CNW" 
							ConOut(cMsg)
							
							//Self:EXCMED(cContra,cRevisa,dDataI,dDataF)
				
						EndIf
					
					EndIf					
					
			End Transaction
			
		EndCase
			
		(cAlias)->(DbSkip())
	EndDo

RETURN


/*/{Protheus.doc} fCondCont
Funcao que calcula o valor de cada parcela proporcionalizando a quantidade de dias no mes
tendo uma data de inicio e fim, a proporção sempre utiliza no maximo 30 dias,
meses que possuem 31 dias, considera 30 dias para a proporção

Utiliza sempre o dia 30 para data de rrevisao (vencimento), definido juntamente com a Elaine e Rubia da FIEMT

@author j2a.caiolima
@since 13/07/2017
@param _nValor, Numerico, Valor a ser parcelado
@param _dIni  , Data    , Data de inicio das parcelas
@param _dFim  , Data    , Data de fim das parcelas
@return Array, Retorna um array contendo as parcelas, coluna 1 -> Data, coluna 2 Valor
/*/
Static Function fCondCont(_nValor, _dIni, _dFim)
	
	Local _aRet     := {}
	Local _nDiaMax  := 30 // dias maximo a considerar por mes
	Local _nDias    := 0 // quantidade de dias entre o inicio e o fim, considera no maximo 30 dias por mes
	Local _nDiaVenc := 30 // sempre usa esse dia pra vencimento, caso o mes nao tenha esse dia usa o ultimo dia
	Local _dAux     := _dIni
	Local _aMeses   := {} // array com o anomes da parcela, o dia de vencimento da parcela, e a quantidade de dias a considerar do mes
	Local _nValDia  := 0
	Local _nz       := 0
	
	/*Alert(_nValor)
	Alert(_dIni)
	Alert(_dFim)*/
	
	While _dAux <= _dFim
	
		/*
		_nAnosMes := (Year(_dAux) * 12) + Month(_dAux)
		_nPos := aScan(_aMeses, {|x| x[1] == _nAnosMes } )
		If _nPos > 0
			If _aMeses[_nPos,3] < _nDiaMax
				_aMeses[_nPos,3] += 1
				_nDias++
			EndIf
		Else
			_dDTVenc := LastDay(_dAux) // ultimo dia do mes 
			If Day(_dDTVenc) > _nDiaVenc // pega no maximo o dia definido na variavel
				_dDTVenc := SToD(SubStr(DToS(_dDTVenc), 1, 6) + StrZero(_nDiaVenc,2))
			EndIf 
			
			Aadd(_aMeses , {_nAnosMes, _dDTVenc , 1} )
			_nDias++
		EndIf
		*/

		_nAnosMes := (Year(_dAux) * 12) + Month(_dAux)
		_nPos     := aScan(_aMeses, {|x| x[1] == _nAnosMes } )
		If _nPos = 0
			//If _aMeses[_nPos,3] < _nDiaMax
				//_aMeses[_nPos,3] += 1
				//_nDias++
			//EndIf
			//Else
			_dDTVenc := LastDay(_dAux) // ultimo dia do mes
			If Day(_dDTVenc) > _nDiaVenc // pega no maximo o dia definido na variavel
				_dDTVenc := SToD(SubStr(DToS(_dDTVenc), 1, 6) + StrZero(_nDiaVenc,2))
			EndIf 
			
			If _dAux == _dIni  			
				If AllTrim(Str(Month(_dAux))) == "2"
					//->Calcula Bissexto
					nAno := Year(dDataBase,4)
					lBissexto := If(nAno%4==0,.T.,.F.)
					If lBissexto
						nCalD := (LastDay(_dAux) - _dAux ) + 2
					Else
						nCalD := (LastDay(_dAux) - _dAux ) + 3
					EndIf											
				Else
					If Last_Day(_dAux) = 31
						//nCalD := (LastDay(_dAux) - _dAux ) -1
						nCalD := (LastDay(_dAux) - _dAux )						
						If nCalD = 0
							nCalD := 1
						EndIf						
					Else
						nCalD := (LastDay(_dAux) - _dAux ) + 1
					EndIf
				EndIf									
			ElseIf SubStr(DToS(_dAux),1,6) == SubStr(DToS(_dFim),1,6)
				nCalD := Day(_dFim)		
			Else
				nCalD := 30
			EndIf
			
			Aadd(_aMeses , {_nAnosMes, _dDTVenc , nCalD} )
			
			_nDias += nCalD 
		EndIf
		
		
		_dAux := _dAux + 1
	EndDo
	
	If _nDias > 0
	
		_nValDia := _nValor / _nDias
		
		_nDec := TamSX3("CNW_VLPREV")[2]
		For _nz:= 1 to Len(_aMeses)
			Aadd(_aRet, {_aMeses[_nz,2] , Round(_aMeses[_nz,3] * _nValDia, _nDec) } )
		Next
		
		// como colocou o valor arrendondado, trata pra jogar o valor que "sobrar" na ultima parcela
		_nValTotal := 0
		aEval(_aRet, {|x,y| _nValTotal += x[2] } )
		If _nValTotal <> _nValor
			_aRet[Len(_aRet) , 2] += _nValor - _nValTotal
		EndIf
		
	EndIf
	
	/*Aviso("VarInfo", VarInfo("_aMeses",_aMeses,,.F.) , {"ok"},3 )
	Aviso("VarInfo", VarInfo("_aRet",_aRet,,.F.) , {"ok"},3 )*/
	
Return(_aRet)


/*/{Protheus.doc} GETNUMCNW
(long_description)
@author j2a.luizjunior
@since 07/04/2017
@version 1.0
@example
(examples)
@see (links_or_references)
/*/

METHOD GETNUMCNW() CLASS SF06A18X

	Local _cNumero := ''
	Local _cQuery  := ''
	
	If Select('TMP') > 0
		DbSelectArea('TMP')
		TMP->( DbCloseArea() )
	EndIf
		
	_cQuery := " SELECT MAX(CNW_NUMERO) CNW_NUMERO " 
	_cQuery += " FROM "+ RetSqlName('CNW') 
	
	DbUseArea(.T.,"TOPCONN",TcGenQry(,,_cQuery),'TMP',.T.,.F.)
	
	DbSelectArea('TMP')
	TMP->(DbGoTop())

	If Empty(TMP->(CNW_NUMERO))
		_cNumero := StrZero(1, TamSx3("CNW_NUMERO")[1])
	Else
		_cNumero := StrZero(Val(TMP->(CNW_NUMERO)) + 1, TamSx3("CNW_NUMERO")[1])
	EndIf
		
	TMP->(DbCloseArea())
	
RETURN(_cNumero)

/*/{Protheus.doc} GERMED
(long_description)
@author j2a.luizjunior
@since 12/04/2017
@version 1.0
@example
(examples)
@see (links_or_references)
/*/

METHOD GERMED() CLASS SF06A18X

	Local   aCabec      := {}
	Local   aItem       := {}   
	Local   dData       := CN9->CN9_DTFIM 
	Local   dDataI      := CN9->CN9_DTINIC
	Local   cContra     := ""
	Private lMsErroAuto := .F.

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//| Abertura do ambiente                                         |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	ConOut(Repl("-",80))
	ConOut(PadC("Rotina Automática para a Medição do Contrato de Compras e Vendas",80))

	cContra := CN9->CN9_NUMERO
	cRevisa := CN9->CN9_REVISA
	
	ConOut("Inicio: "+Time())       	
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Filtra parcelas de contratos automaticos ³
	//³ pendentes para a data atual              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	cArqTrb	:= CriaTrab(nil, .F.)
	
	cQuery  := " SELECT CNF.CNF_COMPET,                             "
	cQuery  += "        CNF.CNF_CONTRA,                             "
	cQuery  += " 	    CNF.CNF_REVISA,                             "
	cQuery  += " 	    CNA.CNA_NUMERO,                             "
	cQuery  += " 	    CNF.CNF_PARCEL,                             "
	cQuery  += " 	    CN9.CN9_FILIAL                              "
	cQuery  += " FROM " + RetSQLName("CNF")    + " CNF,             " 
	cQuery  +=          + RetSQLName("CNA")    + " CNA,             "
	cQuery  +=          + RetSQLName("CN9")    + " CN9              "
	cQuery  += " WHERE  CNF.CNF_FILIAL    = '" + xFilial("CNF") +"' "
	cQuery  += " AND    CNA.CNA_FILIAL    = '" + xFilial("CNA") +"' " 
	cQuery  += " AND    CN9.CN9_FILIAL    = '" + xFilial("CN9") +"' "  
	cQuery  += " AND    CN9.CN9_NUMERO    = '" + cContra        +"' "
	cQuery  += " AND    CN9.CN9_REVISA    = '" + cRevisa        +"' "	
	cQuery  += " AND    CNF.CNF_NUMERO    = CNA.CNA_CRONOG          "
	cQuery  += " AND    CNF.CNF_CONTRA    = CNA.CNA_CONTRA          "
	cQuery  += " AND    CNF.CNF_REVISA    = CNA.CNA_REVISA          "
	cQuery  += " AND    CNF.CNF_CONTRA    = CN9.CN9_NUMERO          "
	cQuery  += " AND    CNF.CNF_REVISA    = CN9.CN9_REVISA          "
	cQuery  += " AND    CN9.CN9_SITUAC    =  '05'                   "
	cQuery  += " AND    CNF.CNF_PRUMED   >= '" + DTOS(dDataI)   +"' "
	cQuery  += " AND    CNF.CNF_PRUMED   <= '" + DTOS(dData)    +"' "
	cQuery  += " AND    CNF.CNF_SALDO    > 0                        "
	cQuery  += " AND    CNA.CNA_SALDO    > 0                        "
	cQuery  += " AND    CNF.D_E_L_E_T_    = ' '                     "
	cQuery  += " AND    CNA.D_E_L_E_T_    = ' '                     "
	
	cQuery  := ChangeQuery(cQuery)
	
	DbUseArea(.T.,"TopConn",TCGenQry(,,cQuery),cArqTrb,.T.,.T.)     
	
	If (cArqTrb)->(Eof())    	
		ConOut("PJ - Nao e possivel medir esse contrato! "+cContra)	
	EndIf
	
	aAdd(aItem,{})
	
	
	While !(cArqTrb)->(Eof())	

		cDoc := CN130NUMMD()
		
		aAdd(aCabec,{"CND_CONTRA",(cArqTrb)->CNF_CONTRA,NIL})	
		aAdd(aCabec,{"CND_REVISA",(cArqTrb)->CNF_REVISA,NIL})	
		aAdd(aCabec,{"CND_COMPET",(cArqTrb)->CNF_COMPET,NIL})	
		aAdd(aCabec,{"CND_NUMERO",(cArqTrb)->CNA_NUMERO,NIL})	
		aAdd(aCabec,{"CND_NUMMED",cDoc,NIL})	
		
		If !Empty(CND->(FieldPos("CND_PARCEL")))		
			aAdd(aCabec,{"CND_PARCEL",(cArqTrb)->CNF_PARCEL,NIL})	
		EndIf		
		
		DbSelectArea("CNB")
		DbSetOrder(1)
		If DbSeek(CN9->CN9_FILIAL + cContra)
			While !CNB->(Eof()) .And. CNB->CNB_FILIAL + CNB->CNB_CONTRA == CN9->CN9_FILIAL + cContra 
			
				aAdd(aItem[Len(aItem)],{"CNE_ITEM"  ,  CNB->CNB_ITEM      ,NIL})
				aAdd(aItem[Len(aItem)],{"CNE_PRODUT",  CNB->CNB_PRODUT    ,NIL})
				aAdd(aItem[Len(aItem)],{"CNE_QUANT" ,  CNB->CNB_QUANT     ,NIL})
				aAdd(aItem[Len(aItem)],{"CNE_VLUNIT",  CNB->CNB_VLUNIT    ,NIL})
			
				CNB->(DbSkip())
			EndDo
		EndIf	
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿	
		//³ Executa rotina automatica para gerar as medicoes ³	
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ	
		
			If Type("lMsErroAuto") # "L"		
				Private lMsErroAuto := .F.		
			Else
				lMsErroAuto := .F.
			EndIf
			
			MsExecAuto({|a,b,c|,CNTA120(a,b,c)},aCabec,aItem,3)	
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿	
			//³ Executa rotina automatica para encerrar as medicoes ³	
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ		
			
			If !lMsErroAuto
				MsExecAuto({|a,b,c|,CNTA120(a,b,c)},aCabec,aItem,6)
				If !lMsErroAuto					
					Self:GERFAT((cArqTrb)->CN9_FILIAL,"2")		
					ConOut("PJ - Incluido com sucesso! "+cDoc)		
				Else
					MostraErro()
					ConOut("PJ - Erro na inclusao!")					
				EndIf
			Else
				MostraErro()				
			EndIf
			
			aCabec := {}
			aItem  := {}
			aAdd(aItem,{})
	
		(cArqTrb)->(dbSkip())
	EndDo	
	
	(cArqTrb)->(dbCloseArea())   

RETURN SELF

/*/{Protheus.doc} GERFAT
(long_description)
@author j2a.luizjunior
@since 13/04/2017
@version 1.0
@example
(examples)
@see (links_or_references)
/*/

METHOD GERFAT(pFilial,pTipo) CLASS SF06A18X 

	Local cFilArq  := pFilial
	Local cTipo    := pTipo
	Local aPvlNfs  := {}
	Local aPedidos := {}
	Local cSerie   := GetNewPar("MV_XSERGER","1")
	
	Do Case
	
		Case cTipo == "1"
	
			DbSelectArea("SC5")
			SC5->(DbSetOrder(1))
			If	SC5->(DbSeek(SC5->C5_FILIAL + SC5->C5_NUM))	
				Ma410Pvnfs(Alias(),Recno())		
			EndIf
			
		Case cTipo == "2"	

			//Obtem os pedidos da Nota
			cQuery := " SELECT SC5.*,                                     "
			cQuery += " SC5.R_E_C_N_O_ RECNOSC5                           "
			cQuery += " FROM " + RetSqlName("SC5") + " SC5                "			
			cQuery += " WHERE SC5.C5_FILIAL   = '"  + xFilial("SC5") + "' "
			cQuery += " AND   SC5.D_E_L_E_T_ != '*'                       "
			cQuery += " AND   C5_NUM          = '"  + SC5->C5_NUM    + "' "
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Valida se arquivo temporario está em uso.³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		
			If Select("TMPSC5") > 0
				TMPSC5->( dbCloseArea() )
			EndIf
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Executa Query³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			
			DbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),"TMPSC5",.T.,.T.)
		
			DbSelectArea("TMPSC5")
			TMPSC5->(DbGotop())
		    
			While !TMPSC5->(Eof())
			
				DbSelectArea("SC9")
				SC9->(DbSetOrder(1))
				DbSelectArea("SC6")
				SC6->(DbSetOrder(1))
				DbSelectArea("SE4")
				SE4->(DbSetOrder(1))
				DbSelectArea("SB1")
				SB1->(DbSetOrder(1))
				DbSelectArea("SB2")
				SB2->(DbSetOrder(1))
			
				//Marca os pediso para flagar que a nota fiscal foi gerada
				If aScan(aPedidos , TMPSC5->C5_NUM ) <= 0
					AADD(aPedidos , TMPSC5->C5_NUM)
				EndIf
			
				If SC9->(DbSeek(xFilial("SC9")+TMPSC5->C5_NUM))
				
					While SC9->(!Eof()) .AND. SC9->C9_PEDIDO == TMPSC5->C5_NUM
						  SC6->(DbSeek(xFilial("SC6")+SC9->C9_PEDIDO+SC9->C9_ITEM+SC9->C9_PRODUTO))
						  SE4->(DbSeek(xFilial("SE4")+SC5->C5_CONDPAG))
						  SB1->(DbSeek(xFilial("SB1")+SC9->C9_PRODUTO))
						  SB2->(DbSeek(xFilial("SB2")+SC9->C9_PRODUTO+SC9->C9_LOCAL))
						  SF4->(DbSeek(xFilial("SF4")+SC6->C6_TES))
					
						  aAdd(aPvlNfs,{;
							   SC9->C9_PEDIDO,;
					           SC9->C9_ITEM,;
							   SC9->C9_SEQUEN,;
					           SC9->C9_QTDLIB,;
					           SC9->C9_PRCVEN,;
					           SC9->C9_PRODUTO,;
					           .F.,;
					           SC9->(RECNO()),;
					           SC5->(RECNO()),;
					           SC6->(RECNO()),;
					           SE4->(RECNO()),;
					           SB1->(RECNO()),;
					           SB2->(RECNO()),;
					           SF4->(RECNO());
					           })
					
						SC9->(DbSkip())
					EndDo
				
				EndIf
			
				TMPSC5->(DbSkip())
			EndDo

			If Select("TMPSC5") > 0
				TMPSC5->( dbCloseArea() )
			EndIf
		
			Begin Transaction
				
				//Gera documento de saida
				Pergunte("MT460A",.F.)
				cNFSaida := MaPvlNfs(aPvlNfs,cSerie,.F.,.F.,.F.,.F.,.F.,0,0,.F.,.F.)
			
				If Empty(cNFSaida)					
					DisarmTransaction()
				EndIf	
			
			End Transaction
	
	EndCase

RETURN

/*/{Protheus.doc} EXCMED
(long_description)
@author j2a.luizjunior
@since 20/04/2017
@version 1.0
@example
(examples)
@see (links_or_references)
/*/

METHOD EXCMED(pContra,pRevisa,pDataI,pDataF) CLASS SF06A18X

	Local   dData       := pDataF  
	Local   dDataI      := pDatai 
	Local   cContra     := pContra
	Local   cRevisa     := pRevisa
	Private lMsErroAuto := .F.

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//| Abertura do ambiente                                         |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	ConOut(Repl("-",80))
	ConOut(PadC("Rotina Automática para a Exclusao da Medição do Contrato de Compras e Vendas",80))
	
	ConOut("Inicio: "+Time())       	
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Filtra parcelas de contratos automaticos ³
	//³ pendentes para a data atual              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	cArqTrb	:= CriaTrab(nil, .F.)
	
	cQuery  := " SELECT CNF.CNF_COMPET,                             "
	cQuery  += "        CNF.CNF_CONTRA,                             "
	cQuery  += " 	    CNF.CNF_REVISA,                             "
	cQuery  += " 	    CNA.CNA_NUMERO,                             "
	cQuery  += " 	    CNF.CNF_PARCEL,                             "
	cQuery  += " 	    CN9.CN9_FILIAL                              "
	cQuery  += " FROM " + RetSQLName("CNF")    + " CNF,             " 
	cQuery  +=          + RetSQLName("CNA")    + " CNA,             "
	cQuery  +=          + RetSQLName("CN9")    + " CN9              "
	cQuery  += " WHERE  CNF.CNF_FILIAL    = '" + xFilial("CNF") +"' "
	cQuery  += " AND    CNA.CNA_FILIAL    = '" + xFilial("CNA") +"' " 
	cQuery  += " AND    CN9.CN9_FILIAL    = '" + xFilial("CN9") +"' "  
	cQuery  += " AND    CN9.CN9_NUMERO    = '" + cContra        +"' "
	cQuery  += " AND    CN9.CN9_REVISA    = '" + cRevisa        +"' "	
	cQuery  += " AND    CNF.CNF_NUMERO    = CNA.CNA_CRONOG          "
	cQuery  += " AND    CNF.CNF_CONTRA    = CNA.CNA_CONTRA          "
	cQuery  += " AND    CNF.CNF_REVISA    = CNA.CNA_REVISA          "
	cQuery  += " AND    CNF.CNF_CONTRA    = CN9.CN9_NUMERO          "
	cQuery  += " AND    CNF.CNF_REVISA    = CN9.CN9_REVISA          "
	cQuery  += " AND    CN9.CN9_SITUAC    = '05'                    "
	cQuery  += " AND    CNF.CNF_PRUMED   >= '" + DTOS(dDataI)   +"' "
	cQuery  += " AND    CNF.CNF_PRUMED   <= '" + DTOS(dData)    +"' "
	cQuery  += " AND    CNF.CNF_SALDO    >  0                       "
	cQuery  += " AND    CNA.CNA_SALDO    >  0                       "
	cQuery  += " AND    CNF.D_E_L_E_T_    = ' '                     "
	cQuery  += " AND    CNA.D_E_L_E_T_    = ' '                     "
	
	cQuery  := ChangeQuery(cQuery)
	
	DbUseArea(.T.,"TopConn",TCGenQry(,,cQuery),cArqTrb,.T.,.T.)     
	
	If (cArqTrb)->(Eof())    	
		ConOut("PJ EXCLUSAO - Nao e possivel medir esse contrato! "+cContra)	
	EndIf
	
	aAdd(aItem,{})
	
	While !(cArqTrb)->(Eof())	
	
		cDoc := CN130NUMMD()
		
		aAdd(aCabec,{"CND_CONTRA",(cArqTrb)->CNF_CONTRA,NIL})	
		aAdd(aCabec,{"CND_REVISA",(cArqTrb)->CNF_REVISA,NIL})	
		aAdd(aCabec,{"CND_COMPET",(cArqTrb)->CNF_COMPET,NIL})	
		aAdd(aCabec,{"CND_NUMERO",(cArqTrb)->CNA_NUMERO,NIL})	
		aAdd(aCabec,{"CND_NUMMED",cDoc,NIL})	
		
		If !Empty(CND->(FieldPos("CND_PARCEL")))		
			aAdd(aCabec,{"CND_PARCEL",(cArqTrb)->CNF_PARCEL,NIL})	
		EndIf		
		
		DbSelectArea("CNB")
		DbSetOrder(1)
		If DbSeek(CN9->CN9_FILIAL + cContra)
		
			While !CNB->(Eof()) .And. CNB->CNB_FILIAL + CNB->CNB_CONTRA == CN9->CN9_FILIAL + cContra 
			
				aAdd(aItem[Len(aItem)],{"CNE_ITEM"  ,CNB_ITEM  ,NIL})
				aAdd(aItem[Len(aItem)],{"CNE_PRODUT",CNB_PRODUT,NIL})
				aAdd(aItem[Len(aItem)],{"CNE_QUANT" ,CNB_QUANT ,NIL})
				aAdd(aItem[Len(aItem)],{"CNE_VLUNIT",CNB_VLUNIT,NIL})
			
				CNB->(DbSkip())
			EndDo
			
		EndIf	
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿	
		//³ Executa rotina automatica para gerar as medicoes ³	
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ	
		
		If Type("lMsErroAuto") # "L"		
			Private lMsErroAuto := .F.		
		Else
			lMsErroAuto := .F.
		EndIf
			
		MsExecAuto({|a,b,c|,CNTA120(a,b,c)},aCabec,aItem,5)	
		
		If !lMsErroAuto
			ConOut("PJ EXCLUSAO - Excluido com sucesso! "+cDoc)		
		Else
			MostraErro()
			ConOut("PJ EXCLUSAO - Erro ao Excluir!")					
		EndIf
		
		(cArqTrb)->(DbSkip())	
	EndDo	

RETURN
