#Include 'protheus.ch'

/*/{Protheus.doc} SF99A01F
	Função para exportar menu em excel.

@author franklin.oliveira
@since 14/06/2016

@type function
/*/
User Function SF99A01F()

Local cGet1 := Space(45)
Local oButton1
Local oButton2
Local oGet1
Local oSay1

Private oDlg

  DEFINE MSDIALOG oDlg TITLE "Exportar Menu" FROM 000, 000  TO 150, 300 COLORS 0, 16777215 PIXEL

    @ 020, 011 SAY oSay1 PROMPT "Arquivo de Menu:" SIZE 050, 007 OF oDlg COLORS 0, 16777215 PIXEL
    @ 020, 070 MSGET oGet1 VAR cGet1 SIZE 060, 010 OF oDlg COLORS 0, 16777215 PIXEL
    
    @ 040, 039 BUTTON oButton1 PROMPT "Cancelar" SIZE 037, 012 OF oDlg ACTION oDlg:End() PIXEL
    @ 040, 094 BUTTON oButton2 PROMPT "Confirmar" SIZE 037, 012 OF oDlg ACTION fExpExcel(cGet1) PIXEL

  ACTIVATE MSDIALOG oDlg CENTERED

Return

/*/{Protheus.doc} fExpExcel
	Função para transformar o menu requerido em array
	
@author franklin.oliveira
@since 14/06/2016
@param cArqMnu, characters, arquivo de menu requerido

@type function
/*/
Static Function fExpExcel(cArqMnu)

Local aSays 		:= {}
Local aButtons		:= {}
Local aEstrutura	:= {}
Local aParte		:= {}
Local aGrupos		:= {}
Local aFuncoes		:= {}
Local aDados 		:= {}
Local cPath			:= ""
Local cGrupo		:= ""
Local lCont			:= .T.
Local nOpcao		:= 0
Local nTipo
Local nGrupo
Local nFunc

	/*-------------------------------------------------------------------------
	A funcao XNULoad:
	 1-Recebe como parâmetro o nome do arquivo + formato.
	 	Ex: XNULoad("sigacom.xnu")
	 2-Retorna um vetor com 4 elementos referente a: 
		aEstrutura[1] = Atualizacoes
		aEstrutura[2] = Consultas
		aEstrutura[3] = Relatorios
		aEstrutura[4] = Miscelaneas
	-------------------------------------------------------------------------*/ 
	aEstrutura := XNULoad(cArqMnu)

	If Len(aEstrutura) < 0
		MsgStop("Falha ao carregar arquivo")
		lCont := .F.
	Else
		For nTipo := 1 To Len(aEstrutura)
			If nTipo == 1
				cTipo := "Atualizacoes"
			Elseif nTipo == 2
				cTipo := "Consultas"
			Elseif nTipo == 3
				cTipo := "Relatorios"
			Elseif nTipo == 4
				cTipo := "Miscelaneas"
			Endif
			
			aParte    := aEstrutura[nTipo]
			aGrupos   := aParte[3]
			
			For nGrupo := 1 To Len(aGrupos)
				If ValType(aGrupos[nGrupo][3])  == "A"
					aFuncoes	:= aGrupos[nGrupo][3]
					cGrupo		:= aGrupos[nGrupo][1][1]
					If ValType(aFuncoes) == "A"
						For nFunc := 1 To Len(aFuncoes)
							If Len(aFuncoes[nFunc]) >= 7
								aAdd(aDados, {cTipo,;
									cGrupo,;
									"",;
									Upper(RTrim(aFuncoes[nFunc][3])),;
									RTrim(aFuncoes[nFunc][1][1]),;
									IIf( SubStr(aFuncoes[nFunc][5], 1, 1) == "x", .T., .F.),;
									IIf( SubStr(aFuncoes[nFunc][5], 2, 1) == "x", .T., .F.),;
									IIf( SubStr(aFuncoes[nFunc][5], 3, 1) == "x", .T., .F.),;
									IIf( SubStr(aFuncoes[nFunc][5], 4, 1) == "x", .T., .F.),;
									IIf( SubStr(aFuncoes[nFunc][5], 5, 1) == "x", .T., .F.)};
									)
							Else
								aSubGrupos	:= aFuncoes[nFunc][3]
								cSubGrupo	:= aFuncoes[nFunc][1][1]
								If ValType(aSubGrupos) == "A"
									For nSubGrup := 1 To Len(aSubGrupos)
										If Len(aSubGrupos[nSubGrup]) >= 7
											aAdd(aDados, {cTipo,;
												cGrupo,;
												cSubGrupo,;
												Upper(RTrim(aSubGrupos[nSubGrup][3])),;
												RTrim(aSubGrupos[nSubGrup][1][1]),;
												IIf( SubStr(aSubGrupos[nSubGrup][5], 1, 1) == "x", .T., .F.),;
												IIf( SubStr(aSubGrupos[nSubGrup][5], 2, 1) == "x", .T., .F.),;
												IIf( SubStr(aSubGrupos[nSubGrup][5], 3, 1) == "x", .T., .F.),;
												IIf( SubStr(aSubGrupos[nSubGrup][5], 4, 1) == "x", .T., .F.),;
												IIf( SubStr(aSubGrupos[nSubGrup][5], 5, 1) == "x", .T., .F.)};
												)
										EndIf
									Next
								EndIf
							EndIf
						Next nFunc
					EndIf
				Else
					aAdd(aDados, {cTipo,;
						cGrupo,;
						"",;
						RTrim(Upper(RTrim(aGrupos[nGrupo][3]))),;
						Upper(RTrim(aGrupos[nGrupo][1][1])),;
						IIf( SubStr(aGrupos[nGrupo][5], 1, 1) == "x",  .T., .F.),;
						IIf( SubStr(aGrupos[nGrupo][5], 2, 1) == "x",  .T., .F.),;
						IIf( SubStr(aGrupos[nGrupo][5], 3, 1) == "x",  .T., .F.),;
						IIf( SubStr(aGrupos[nGrupo][5], 4, 1) == "x",  .T., .F.),;
						IIf( SubStr(aGrupos[nGrupo][5], 5, 1) == "x",  .T., .F.)};
						)
				EndIf
			Next nGrupo			
		Next nTipo
	Endif

	If lCont
		nOpcao := Aviso("Exportar para Excel", "Deseja exportar dados para Excel?", {"Sim", "Não"} , 1)
		
		If nOpcao == 1
			cPath := Upper(cGetFile('Arquivos XML (*.xml) |*.xml|', 'Salvar Planilha Como',,'C:\UTIL\',.T.,nOR( GETF_LOCALHARD, GETF_LOCALFLOPPY, GETF_RETDIRECTORY ),.F.))
	
			If !Empty(cPath)
				Processa( { | lEnd | fGeraExc( @lEnd, cPath, aDados) }, 'Gerando Arquivo', 'Aguarde, carregando informações', .T. )
			Else
				Help(" ",1,"NOFILE")
			Endif
		EndIf
	EndIf
	
	oDlg:End()
	
Return (Nil)

/*/{Protheus.doc} fGeraExc
	Função para gerar aquivo em excel.
	
@author franklin.oliveira
@since 14/06/2016
@version undefined
@param lEnd, logical, ação do botão cancelar
@param cPath, characters, local onde arquivo excel será salvo
@param aDados, array, dados a serem transformados em excel

@type function
/*/
Static Function fGeraExc(lEnd, cPath, aDados)

Local aArea			:= GetArea()

Local cArquivo		:= CriaTrab( , .F.) + ".xml"
Local cWorkSht		:= "Menu"

Local nX			:= 0
Local nY			:= 0

Local oExcel		:= FwMsExcel():New()
Local oOK 			:= LoadBitmap(GetResources(),'br_verde')
Local oNO			:= LoadBitmap(GetResources(),'br_vermelho')

	oExcel:AddworkSheet(cWorkSht)
	
	oExcel:AddTable (cWorkSht, cWorkSht)
	
	oExcel:AddColumn(cWorkSht, cWorkSht, "Atividade"	, 1, 1)
	oExcel:AddColumn(cWorkSht, cWorkSht, "Sub-Menu"		, 1, 1)
	oExcel:AddColumn(cWorkSht, cWorkSht, "Sub-Menu1"	, 1, 1)
	oExcel:AddColumn(cWorkSht, cWorkSht, "Programa"		, 1, 1)
	oExcel:AddColumn(cWorkSht, cWorkSht, "Rotina"		, 1, 1)
	oExcel:AddColumn(cWorkSht, cWorkSht, "Pesquisar?"	, 1, 1)
	oExcel:AddColumn(cWorkSht, cWorkSht, "Visualizar?"	, 1, 1)
	oExcel:AddColumn(cWorkSht, cWorkSht, "Alterar?"		, 1, 1)
	oExcel:AddColumn(cWorkSht, cWorkSht, "Incluir?"		, 1, 1)
	oExcel:AddColumn(cWorkSht, cWorkSht, "Excluir?"		, 1, 1)
	
	ProcRegua(Len(aDados))

	For nX := 1 To Len(aDados)
	
		If lEnd						
			Exit		
		EndIf
		
		IncProc()
				
		oExcel:AddRow(cWorkSht,cWorkSht,{aDados[nX, 01],; 
			aDados[nX, 02],;
			aDados[nX, 03],;
			aDados[nX, 04],; 
			aDados[nX, 05],; 
			If(aDados[nX, 06], "Sim", "Não"),;
			If(aDados[nX, 07], "Sim", "Não"),;
			If(aDados[nX, 08], "Sim", "Não"),;
			If(aDados[nX, 09], "Sim", "Não"),;
			If(aDados[nX, 10], "Sim", "Não")})
		
	Next nX

	
	oExcel:Activate()	
	
	oExcel:GetXMLFile(cPath + cArquivo)
		
	RestArea(aArea)	

Return (Nil)