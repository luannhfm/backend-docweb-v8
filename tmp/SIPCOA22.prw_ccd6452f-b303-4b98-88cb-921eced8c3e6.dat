#INCLUDE "PROTHEUS.CH"

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³SIPCOA22  ºAutor  ³ Microsiga          º Data ³  10/01/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Rotina para executar a Aprovar Orcamento					  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ P11 - SISTEMA INDUSTRIA                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

User Function SIPCOA22(_nOpc)
Local lContinua := .T.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Executa validacao para prosseguir Finalizacao da Digitacao³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
IF _nOpc == 1 // Aprovação
	lContinua:= VldAprOrc()
ELSE // estorno de aprovação
	IF AK1->AK1_XAPROV <> '2'
		MsgStop("Esta planilha não foi aprovada. Verifique!")
		Return()
	ENDIF
	lContinua := .T.
ENDIF

If lContinua
	IF Aviso("Aviso","Confirma "+IIF(_nOpc==1," aprovação "," o estorno ")+" da planilha "+AK1->(Alltrim(AK1_CODIGO)+"/"+Alltrim(AK1_VERSAO))+" ?",{"Sim","Não"}) <> 1
		Return()
	ENDIF
	MsgRun(IIF(_nOpc==1,"Aprovando","Estornando")+' Orçamento. Aguarde...',, {|| _PCO22Proc(_nOpc) } )
ENDIF

Return()

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³SIPCOA22  ºAutor  ³Microsiga           º Data ³  03/14/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Processamento da rotina                                    º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Especifico CNI (GAP093)                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function _PCO22Proc(_nOpc)
Local _nMaxReg := GetMV("MV_PCOLIMI")
Local _nTotReg := 0

Local cPlanRev		:= AK1->AK1_CODIGO 
Local cNewVers		:= AK1->AK1_VERSAO

Local _cPtLanc := GetNewPar("SI_PCOAPR", "91025201" ) //Ponto de Lancamento

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se ponto de lançamento existe                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
IF !PcoExistLc(Left(_cPtLanc,6),Right(_cPtLanc,2),"1")
	MsgStop("O ponto de lançamento "+Alltrim(_cPtLanc)+" não está cadastrado. Verifique!")
	Return()
ENDIF

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Atualiza campo AK1_XAPROV=2 (Aprovado COnselho) ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea('AK1')
RecLock("AK1", .F.)
IF _nOpc == 1 // aprovavao
	AK1->AK1_XAPROV := '2'
Endif
AK1->(MsUnLock())

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Exclusão/Retorno dos movimentos da revisao anterior ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
IF !Empty( _cUltRev := _PCOVersao(AK1->AK1_CODIGO,AK1->AK1_VERSAO) )
	IF _nOpc == 1
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Deleta lancamentos da AKD (PCODetlan)  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		P022CDELL(AK1->AK1_CODIGO, _cUltRev, "01")
		MsgRun('Atualizando Lançamentos (AKD). Por favor aguarde....',, {|| xPcoA022(AK1->(RecNo()),AK1->AK1_VERSAO)} )
	ELSE
		//Geracao de lançamentos
		P022CDELL(AK1->AK1_CODIGO, AK1->AK1_VERSAO, "01")
		MsgRun('Atualizando Lançamentos (AKD). Por favor aguarde....',, {|| xPcoA022(AK1->(RecNo()),_cUltRev) } )
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Atualiza campo AK1_XAPROV=2 (Aprovado COnselho) ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		dbSelectArea('AK1')
		RecLock("AK1", .F.)
		AK1->AK1_XAPROV := '1'
		AK1->(MsUnLock())
	ENDIF
ELSE
	IF _nOpc == 1
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Deleta lancamentos da AKD (PCODetlan)  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		MsgRun('Atualizando Lançamentos (AKD). Por favor aguarde....',, {|| xPcoA022(AK1->(RecNo()),AK1->AK1_VERSAO)} )
	ELSE
		//Geracao de lançamentos
		P022CDELL(AK1->AK1_CODIGO, AK1->AK1_VERSAO, "01")
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Atualiza campo AK1_XAPROV=2 (Aprovado COnselho) ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		dbSelectArea('AK1')
		RecLock("AK1", .F.)
		AK1->AK1_XAPROV := '1'
		AK1->(MsUnLock())
	ENDIF
ENDIF
       	
Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³VldAprOrc ºAutor  ³Claudinei Ferreira  º Data ³  11/01/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Valida se pode ser Aprovado o Orcamento					  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Especifico CNI (GAP093)                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function VldAprOrc()
Local aArea	:= GetArea()

If AK1->AK1_XAPROV == '0'
	MsgStop("Orçamento em aberto não pode ser aprovado!","Aviso")
	Return .f.
Endif

If AK1->AK1_XAPROV == '2'
	MsgStop("Orçamento já aprovado !","Aviso")
	Return .f.
Endif

RestArea(aArea)
Return(.t.)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³_PCOVersao ºAutor  ³Microsiga          º Data ³  11/09/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Verifica e retorna a ultima revisao                        º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ P11 - SISTEMA INDUSTRIA                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function _PCOVersao(_cPlanilha,_cRev)
Local _aArea := AKE->(GetArea())
Local _cRet  := ""

AKE->(dbSetOrder(1))
If AKE->(MsSeek(xFilial("AKE") + _cPlanilha))
	While AKE->(!Eof()) .and. xFilial("AKE") + _cPlanilha == AKE->(AKE_FILIAL+AKE_ORCAME) .and. AKE->AKE_REVISA < _cRev
		_cRet := AKE->AKE_REVISA
		AKE->(dbSkip())
	End
EndIf

RestArea(_aArea)
Return(_cRet)


//-----------------------------------------------------------------------------------------------//
//exclusao dos movimentos orcamentarios na revisao da planilha
//-----------------------------------------------------------------------------------------------//

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³P122CDELL   ºAutor  ³Microsiga           º Data ³  24/06/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Funcão responsavel pela chamada das procedures.               º±±
±±º          ³                                                              º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ PCOA122                                                      º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function P022CDELL(cPlanRev, cPlanVers, cItemProc)
Local nProx 	:= 1
Local aProc   	:= {}
Local cArqTrb
Local cArq  	:= ""
Local lRet		:= .T.
Local aResult	:= {}
Local cExec  	:= ""
Local cRet   	:= ""
Local iX      	:= 0
Local _cPtLanc  := GetNewPar("SI_PCOAPR", "91025201" ) //Ponto de Lancamento

/* ---------------------------------------------------------------------------------------------------------------------
Versão          - <v> Protheus 9.12 </v>
Assinatura      - <a> 001 </a>
Fonte Microsiga - <s> PCOA122.PRX </s>
Descricao       - <d> exclusao dos movimentos do processo 000252 no item indicado na revisao </d>
Funcao do Siga  -
-----------------------------------------------------------------------------------------------------------------
Entrada         -  <ri> @IN_FILIALR	- Filial corrente
@IN_CONFIG  - Codigo do cubo
@IN_FK      - '1' se integridade estiver ligada	</ri>
-----------------------------------------------------------------------------------------------------------------
Saida          -  <ro> @OUT_RESULT    -  </ro>
-----------------------------------------------------------------------------------------------------------------
Responsavel    -   <r> Alice Yaeko Yamamoto  </r>
-----------------------------------------------------------------------------------------------------------------
Data           -  <dt> 08/05/2008 </dt>
Estrutura de chamadas
========= == ========
Obs.: Não remova os tags acima. Os tags são a base para a geração automática, de documentação, pelo Parse.

/*   Ordem de chamada das procedures - Ordem de criacao de procedures
**  0.2.CallXFilial  - Xfilial ................................................ 1  aProc[1]
1.PCOA122_Del - Exclui lancamentos do AKD .................................... 2  aProc[2]
--------------------------------------------------------------------------------------------------------------------- */
cArqTrb := CriaTrab(,.F.)
cArq    := cArqTRB+StrZero(nProx,2)
AADD( aProc, cArq+"_"+cEmpAnt)
lRet    := CallXFilial( cArq )  // CallXfilial aProc[1]
If lRet
	nProx := nProx + 1
	cArq    := cArqTRB+StrZero(nProx,2)
	cArqAKT := cArq
	AADD( aProc, cArq+"_"+cEmpAnt)           // PCOA122_Del aProc[2]
	lRet   := PCOA022_Del( cArq, aProc )
EndIf
If lRet
	aResult := TCSPExec( xProcedures(cArq), cFilAnt, Left(_cPtLanc,6), cItemProc, cPlanRev, cPlanVers)
	TcRefresh(RetSqlName("AKD"))
	If Empty(aResult) .Or. aResult[1] = "0"
		MsgAlert(tcsqlerror(),"Erro na Revisao - Exclusão de Lancamentos por procedure! "+ProcName())
		lRet := .F.
	EndIf
EndIf

For iX = 1 to Len(aProc)   // exclusao de aProc
	If TCSPExist(aProc[iX])
		cExec := "Drop procedure "+aProc[iX]
		cRet := TcSqlExec(cExec)
		If cRet <> 0
			MsgAlert("Erro na exclusao da Procedure: "+aProc[iX] + ". Excluir manualmente no banco")
		Endif
	EndIf
Next iX

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±³Funcao    ³PCOA022_Del³ Autor ³                        ³ Data ³21.06.13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Cria procedure de exclusao do AKD                             ±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³  Uso     ³ SigaPCO                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function PCOA022_Del( cArq, aProc  )
Local aSaveArea  := GetArea()
Local cQuery := ""
Local cProc := cArq+"_"+cEmpAnt
Local lRet := .T.

cQuery:="Create Procedure "+cProc+" ("+CRLF
cQuery +="   @IN_FILIAL  char( "+Str(TamSX3("AK2_FILIAL")[1])+" ),"+CRLF
cQuery +="   @IN_PROCES  char( "+Str(TamSX3("AKD_PROCES")[1])+" ),"+CRLF
cQuery +="   @IN_ITEM    char( "+Str(TamSX3("AKD_ITEM")[1])+" ),"+CRLF
cQuery +="   @IN_ORCAME  char( "+Str(TamSX3("AK2_ORCAME")[1])+" ),"+CRLF
cQuery +="   @IN_VERSAO  char( "+Str(TamSX3("AK2_VERSAO")[1])+" ),"+CRLF
cQuery +="   @OUT_RESULT char( 01 ) OutPut"+CRLF
cQuery +=")"+CRLF
cQuery +="as"+CRLF
cQuery +="Declare @cAux char( 03 )"+CRLF
cQuery +="Declare @cFil_AKD char( "+Str(TamSX3("AK2_FILIAL")[1])+" )"+CRLF
cQuery +="Declare @cFil_AK2 char( "+Str(TamSX3("AK2_FILIAL")[1])+" )"+CRLF
cQuery +="Declare @iRecnoAKD integer"+CRLF
cQuery +="Declare @iNroRegs integer"+CRLF
cQuery +="Declare @iTranCount integer"+CRLF //--Var.de ajuste para SQLServer e Sybase.

cQuery +="begin"+CRLF
cQuery +="   select @OUT_RESULT = '0'"+CRLF
cQuery +="   select @iRecnoAKD  = 0"+CRLF
cQuery +="   select @iNroRegs   = 0"+CRLF
cQuery +="   select @cAux = 'AKD'"+CRLF
cQuery +="   exec "+aProc[1]+" @cAux, @IN_FILIAL, @cFil_AKD OutPut"+CRLF
cQuery +="   select @cAux = 'AK2'"+CRLF
cQuery +="   exec "+aProc[1]+"  @cAux, @IN_FILIAL, @cFil_AK2 OutPut"+CRLF

cQuery +="   Declare AKD_EXCLUI insensitive cursor for"+CRLF
cQuery +="    SELECT AKD.R_E_C_N_O_"+CRLF
cQuery +="      FROM "+RetSqlName("AKD")+" AKD, "+RetSqlName("AK2")+ " AK2 "+CRLF
cQuery +="     WHERE AKD_FILIAL  = @cFil_AKD"+CRLF
cQuery +="       and AKD_PROCES  = @IN_PROCES"+CRLF
cQuery +="       and AKD_ITEM    = @IN_ITEM"+CRLF
cQuery +="       and AKD_CHAVE   = 'AK2'||AK2_FILIAL||AK2_ORCAME||AK2_VERSAO||AK2_CO||AK2_PERIOD||AK2_ID"+CRLF   //-- PRIMEIRO INDICE DO AK2
cQuery +="       and AKD_TIPO    IN ('1' , '2' )"+CRLF
cQuery +="       and AKD.D_E_L_E_T_  = ' '"+CRLF
cQuery +="       and AK2_FILIAL  = @cFil_AK2"+CRLF
cQuery +="       and AK2_ORCAME  = @IN_ORCAME"+CRLF
cQuery +="       and AK2_VERSAO  = @IN_VERSAO"+CRLF
cQuery +="       and AK2.D_E_L_E_T_  = ' '"+CRLF
cQuery +="   for read only"+CRLF
cQuery +="   Open AKD_EXCLUI"+CRLF
cQuery +="   Fetch AKD_EXCLUI into @iRecnoAKD"+CRLF

cQuery +="   While (@@fetch_status = 0 ) begin"+CRLF
cQuery +="      select @iNroRegs = @iNroRegs + 1"+CRLF
cQuery +="      if @iNroRegs  = 1 begin"+CRLF
cQuery +="         Begin Transaction"+CRLF
cQuery +="         select @iNroRegs  = @iNroRegs"+CRLF
cQuery +="      end"+CRLF
/* ---------------------------------------------------
Exlui AKD
--------------------------------------------------- */
cQuery +="      Delete from "+RetSqlName("AKD")+" Where R_E_C_N_O_ = @iRecnoAKD"+CRLF
cQuery +="      if @iNroRegs  >= 15000 begin"+CRLF
cQuery +="         Commit Transaction"+CRLF
cQuery +="         Select @iNroRegs  = 0"+CRLF
cQuery +="      end"+CRLF

cQuery +="      Fetch AKD_EXCLUI into @iRecnoAKD"+CRLF
cQuery +="   End"+CRLF
cQuery +="   if @iNroRegs  > 0 begin "+CRLF
cQuery +="      Commit Transaction "+CRLF
cQuery +="      select @iTranCount = 0"+CRLF
cQuery +="   end"+CRLF
cQuery +="   close AKD_EXCLUI"+CRLF
cQuery +="   deallocate AKD_EXCLUI"+CRLF

cQuery +="   select @OUT_RESULT = '1'"+CRLF
cQuery +="End"+CRLF

cQuery := MsParse( cQuery, If( Upper(TcSrvType())= "ISERIES", "DB2", Alltrim(TcGetDB()) ) )
cQuery := CtbAjustaP(.F., cQuery, 0)

If Empty( cQuery )
	MsgAlert(MsParseError(),'A query de exclusao de AKD nao passou pelo Parse '+cProc)
	lRet := .F.
Else
	If !TCSPExist( cProc )
		cRet := TcSqlExec(cQuery)
		If cRet <> 0
			If !__lBlind
				MsgAlert("Erro na criacao da proc de Exclusao de linhas do AKD: "+cProc)
				lRet:= .F.
			EndIf
		EndIf
	EndIf
EndIf
RestArea(aSaveArea)

Return(lRet)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³xPcoA022  ºAutor  ³Microsiga           º Data ³  02/09/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Chamada da funcao para controle de Threads na geracao dos  º±±
±±º          ³ lancamentos da AKD                                         º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function xPcoA022(nRecAK1,cNewVers)

Local nX
Local lRet        	:= .F.
Local cAliasTmp
Local cQuery      	:= ""
Local aRecGrid 		:= {}
Local nThread		:= SuperGetMv("MV_PCOTHRD",.T.,10)
Local cPlanRev		:= AK1->AK1_CODIGO
Local cNewVers		:= cNewVers
Local _cPtLanc 		:= GetNewPar("SI_PCOAPR", "91025201" ) //Ponto de Lancamento

Default nRecAK1 := AK1->( Recno() )
Private aParam:={}

GRID_STEP:= 10000

cAliasTmp := GetNextAlias() //Obtem o alias para a tabela temporaria
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Query para obter recnos da tabela AK2 ou AK3 da nova versao    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cQuery := " SELECT MIN(R_E_C_N_O_) MINRECNOAK, MAX(R_E_C_N_O_) MAXRECNOAK FROM " + RetSqlName( "AK2" )
cQuery += " WHERE "
cQuery += "         	AK2_FILIAL ='" + xFilial( "AK2" ) + "' " 
cQuery += "        AND AK2_ORCAME ='" + cPlanRev + "' "
cQuery += "        AND AK2_VERSAO = '"+ cNewVers +"' "
cQuery += "        AND D_E_L_E_T_= ' ' " 

cQuery := ChangeQuery( cQuery )

dbUseArea( .T., "TOPCONN", Tcgenqry( , , cQuery ), cAliasTmp, .F., .T. )

TcSetField( cAliasTmp, "MINRECNOAK", "N", 12, 0 )
TcSetField( cAliasTmp, "MAXRECNOAK", "N", 12, 0 )

If (cAliasTmp)->(!Eof())

                //DISTRIBUIR EM GRID
                aRecGrid := {}
                For nX := (cAliasTmp)->MINRECNOAK TO (cAliasTmp)->MAXRECNOAK STEP GRID_STEP
                               If nX + GRID_STEP > (cAliasTmp)->MAXRECNOAK
                                               aAdd(aRecGrid, {nx, (cAliasTmp)->MAXRECNOAK } )  //ultimo elemento do array
                               Else
                                               aAdd(aRecGrid, {nx, nX+GRID_STEP-1} )
                               EndIf
                Next

                nThread := Min( Len(aRecGrid), nThread ) //Configura a quantidade de threads pelo menor parametro ou len(arecgrid)

                oGrid := FWIPCWait():New("SI22"+cEmpAnt+StrZero(nRecAK1,9,0),10000)
                oGrid:SetThreads(nThread)
                oGrid:SetEnvironment(cEmpAnt,cFilAnt)
                oGrid:Start("U_SI22IMPLAN")

                lRet := SIA22RevPre(oGrid,aRecGrid,nThread,cNewVers)

EndIf

Return(lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³SIA22RevPreºAutor  ³TOTVS              º Data ³  02/09/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao de Start das Threads								  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function SIA22RevPre(oGrid,aRecGrid,nThread,cNewVers)
Local nRecIni
Local nRecFim
Local lSimu_ := .F.
Local lRevi_ := .F.
 
Local cPlanRev		:= AK1->AK1_CODIGO
Local cNewVers		:= cNewVers
Local cNewVersP		:= AK1->AK1_VERSAO

Local cFilAKE   := xFilial("AKE")
Local lExit     := .F.
Local nKilled
Local nHdl
Local cMsgComp  := ""
Local nX
Local nZ
 
For nX := 1 To Len(aRecGrid)
                nRecIni := aRecGrid[nX,1]
                nRecFim := aRecGrid[nX,2]
                lRet := oGrid:Go("Chamando escrituracao...",{nRecIni, nRecFim, lSimu_, lRevi_, cPlanRev, cNewVers, nX,cNewVersP})  
                If !lRet
                               Exit
                EndIf
 
                Sleep(5000)//Aguarda 5 seg para abertura da thread para não concorrer na criação das procedures.
 
Next
 
Sleep(2500*nThread)//Aguarda todas as threads abrirem para tentar fechar
    
While !lExit
                nKilled := 0
                For nZ := 1 To Len(aRecGrid)
                               nHdl := FOpen("xPCOA22_"+cFilAKE+cPlanRev+cNewVers+StrZero(nZ,10,0), 16) 
                                If nHdl >= 0
                                               cMsgComp += FReadStr(nHdl,100)+CRLF
                                               oGrid:RemoveThread(.T.)
                                               nKilled += 1
                                               FClose(nHdl)
                                               FErase("xPCOA22_"+cFilAKE+cPlanRev+cNewVers+StrZero(nZ,10,0))
                               Else
                                               nHdl := FCreate("xPCOA22_"+cFilAKE+cPlanRev+cNewVers+StrZero(nZ,10,0), 16) 
                                               If nHdl >= 0
                                                               oGrid:RemoveThread(.T.)
                                                               nKilled += 1
                                                               FClose(nHdl)
                                                               FErase("xPCOA22_"+cFilAKE+cPlanRev+cNewVers+StrZero(nZ,10,0))
                                               EndIf
                               Endif
                Next nZ
                
                If nKilled == Len(aRecGrid)
                               Exit
                EndIf
                
                Sleep(3000) //Verifica a cada 3 segundos se as threads finalizaram
                
EndDo
 
PcoAvisoTm(IIf(lRet,"Processo finalizado com sucesso", "Problema no processamento."),cMsgComp, {"Ok"},,,,,)
 
oGrid:RemoveThread(.T.)
 
Return lRet        


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³SI22IMPLANºAutor  ³Microsiga           º Data ³  02/09/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcaod de controle de Threads                             º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

User Function SI22IMPLAN(cParm,aParam)

Local nRecIni   := aParam[1]
Local nRecFim   := aParam[2]
Local lSimulac  := aParam[3]
Local lRevisa   := aParam[4]
Local cPlanRev  := aParam[5]
Local cNewVers  := aParam[6]
Local nZ        := aParam[7]     
Local cNewVersP	:= aParam[8]     
Local cFilAKE   := xFilial("AKE")

Local nHdl 
Local cStart    := ""
Local cEnd      := ""

nHdl := FCreate("xPCOA22_"+cFilAKE+cPlanRev+cNewVers+StrZero(nZ,10,0), 16) 

If nHdl >= 0
	
	cStart := DTOC(Date())+" "+Time()
	Conout( "xPCOA22 -> "+AllTrim(Str(ThreadID()))+" STARTED ["+cStart+"] " )
	fWrite(nHdl, " STARTED ["+cStart+"]")
	//PROCESSAMENTO
	lRet := Aux_Det_Lan(nRecIni, nRecFim, lSimulac, lRevisa, cPlanRev, cNewVers,cNewVersP)
	//
	cEnd := DTOC(Date())+" "+Time()
	If lRet
		Conout("xPCOA22 -> "+AllTrim(Str(ThreadID()))+" END   ["+cEnd+"]  OK")
		fWrite(nHdl," END ["+cEnd+"] - OK")
	Else
		Conout("xPCOA22 -> "+AllTrim(Str(ThreadID()))+" END   ["+cEnd+"]  FAILED")
		fWrite(nHdl," END ["+cEnd+"] - FAILED")
	EndIf
	FClose(nHdl)
	
EndIf
                
Return
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ"±±
±±ºPrograma  ³Aux_Det_Lan ºAutor  ³Microsiga         º Data ³  06/14/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Chama a PcoDetLan para escriturar movimento gerado por      º±±
±±º          ³Iniciar Revisao (distribuido)                               º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function Aux_Det_Lan(nRecIni, nRecFim, lSimulac, lRevisao, cPlanRev, cNewVers,cNewVersP)
Local lRet 		:= .F.
Local cQuery 	:= " "
Local nCtdAK2 	:= 0
Local nLimLin	:= GetMV("MV_PCOLIMI")
Local nLinLote	:= 0
Local _cPtLanc 	:= GetNewPar("SI_PCOAPR", "91025201" ) //Ponto de Lancamento

dbSelectArea('AK1')
AK1->(dbSetOrder(1))
AK1->(DbSeek(xFilial('AK1')+cPlanRev+cNewVersP))

//SELECT AK2
cAliasTmp := GetNextAlias() //Obtem o alias para a tabela temporaria

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Query para obter recnos da tabela AK2 ou AK3 da nova versao    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cQuery := " SELECT R_E_C_N_O_ RECNOAK FROM " + RetSqlName( "AK2" )
cQuery += " WHERE "
cQuery += "                  AK2_FILIAL ='" + xFilial( "AK2" ) + "' " 
cQuery += "        AND AK2_ORCAME ='" + cPlanRev + "' "
cQuery += "        AND AK2_VERSAO = '"+ cNewVers +"' "
cQuery += "        AND R_E_C_N_O_ BETWEEN  "+ Str(nRecIni,12,0) + " AND "+ Str(nRecFim,12,0)
cQuery += "        AND D_E_L_E_T_ = ' ' " 
cQuery += " ORDER BY R_E_C_N_O_ "

cQuery := ChangeQuery( cQuery )

dbUseArea( .T., "TOPCONN", Tcgenqry( , , cQuery ), cAliasTmp, .F., .T. )

TcSetField( cAliasTmp, "RECNOAK", "N", 12, 0 )
Conout("inicio Recnos de:"+Str(nRecIni,12,0)+" Ate: "+Str(nRecFim,12,0)+" "+time()) 

PcoIniLan(Left(_cPtLanc,6))
While (cAliasTmp)->(!Eof())
	nRecNew := (cAliasTmp)->(RECNOAK)
	AK2->(dbGoto(nRecNew))
	nCtdAK2++
	//PcoDetLan( cProcesso, cItem, cPrograma, lDeleta, cProcDel, cAKDStatus, lAtuSld )
  	PcoDetLan(Left(_cPtLanc,6),Right(_cPtLanc,2),"SIPCOA22",.F., , "1",.F.)
	nLinLote++
	(cAliasTmp)->(dbSkip())
	
	If nLimLin = nLinLote
		PcoFinLan(Left(_cPtLanc,6),/*lForceVis*/,/*lProc*/,/*lDelBlq*/,.F.)
		nLinLote:=0
		PcoIniLan(Left(_cPtLanc,6))
	Endif

EndDo
PcoFinLan(Left(_cPtLanc,6),/*lForceVis*/,/*lProc*/,/*lDelBlq*/,.F.)

(cAliasTmp)->(dbCloseArea() )

Conout("Final Recnos de: "+Str(nRecIni,12,0)+"Ate: "+Str(nRecFim,12,0)+" "+time())

lRet := ( (nRecFim-nRecIni+1) == nCtdAK2 )

Return(lRet)